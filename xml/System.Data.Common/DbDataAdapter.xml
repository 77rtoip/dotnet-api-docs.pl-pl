<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="74bed51cc34b1a5992da551ad380d9b2c3acd8ea" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69078689" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ułatwia implementację <see cref="T:System.Data.IDbDataAdapter" /> interfejsu. Dziedziczenia implementacji zestawu funkcji w celu zapewnienia silnego wpisywania, ale Dziedzicz większość funkcji niezbędnych do pełnego wdrożenia elementu DataAdapter. **** <see cref="T:System.Data.Common.DbDataAdapter" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa dziedziczy z klasy i implementuje <xref:System.Data.IDbDataAdapter>interfejs. <xref:System.Data.Common.DataAdapter> <xref:System.Data.Common.DbDataAdapter> Ułatwia ona implementowanie klasy **DataAdapter** zaprojektowanej do użycia z relacyjną bazą danych.  
  
 Aplikacja nie tworzy wystąpienia <xref:System.Data.Common.DbDataAdapter> klasy bezpośrednio, ale tworzy wystąpienie klasy, która dziedziczy z niej.  
  
 Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> muszą implementować dziedziczone elementy członkowskie i zwykle definiują dodatkowe elementy członkowskie do dodawania funkcji specyficznych dla dostawcy. Na przykład <xref:System.Data.Common.DbDataAdapter> Klasa <xref:System.Data.IDbDataAdapter.SelectCommand%2A> definiuje właściwość, a <xref:System.Data.Common.DbDataAdapter> Klasa definiuje osiem przeciążeń <xref:System.Data.IDataAdapter.Fill%2A> metody. Z kolei <xref:System.Data.OleDb.OleDbDataAdapter> Klasa <xref:System.Data.Common.DbDataAdapter.Fill%2A> dziedziczy metodę, a także <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> definiuje dwa dodatkowe przeciążenia, które mają obiekt zestawu rekordów ADO jako parametr.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>W przypadku dziedziczenia z <see cref="T:System.Data.Common.DbDataAdapter" /> klasy zalecamy zaimplementowanie następujących konstruktorów: 
 <list type="table"><listheader><term> Element 
 </term><description> Opis 
 </description></listheader><item><term> *PRV* DataAdapter () 
 </term><description> Inicjuje nowe wystąpienie klasy *PRV*DataAdapter.  
  
 </description></item><item><term> *PRV* DataAdapter (*PRV*polecenie *SelectCommand*) 
 </term><description> Inicjuje nowe wystąpienie klasy *PRV*DataAdapter z określoną instrukcją SELECT języka SQL.  
  
 </description></item><item><term> *PRV* DataAdapter (ciąg *selectCommandText*, ciąg *selectConnectionString*) 
 </term><description> Inicjuje nowe wystąpienie klasy *PRV*DataAdapter z instrukcją SELECT języka SQL i parametrami połączenia.  
  
 </description></item><item><term> *PRV* DataAdapter (ciąg *selectCommandText*, *PRV*Connection *selectConnection*) 
 </term><description> Inicjuje nowe wystąpienie klasy *PRV*DataAdapter z instrukcją SELECT języka SQL i obiektem połączenia *PRV*.  
  
 </description></item></list>  

 Aby podwyższyć poziom spójności między dostawcami danych .NET Framework, należy nazwać klasę dziedziczenia w formie *PRV*DataAdapter, gdzie *PRV* to jednolity prefiks określony dla wszystkich klas w określonej przestrzeni nazw dostawcy danych .NET Framework. Na przykład "SQL" jest prefiksem <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> klasy w przestrzeni nazw **System. Data. SqlClient** .</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see langword="DataAdapter" /> klasy.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy **DataAdapter** .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia wystąpienia programu <xref:System.Data.Common.DbDataAdapter>następujące właściwości do odczytu/zapisu są ustawiane na następujące wartości początkowe.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Nowy <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Nowy <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Nowy <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Nowy <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Można zmienić wartość dowolnej z tych właściwości za pomocą oddzielnego wywołania właściwości.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Obiekt użyty do utworzenia nowego <see langword="DataAdapter" />. <see langword="DataAdapter" /></param>
        <summary>Inicjuje nowe wystąpienie <see langword="DataAdapter" /> klasy z istniejącego obiektu tego samego typu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.Data.Common.DbDataAdapter> konstruktora jest przeznaczone do użycia przez dostawcę danych .NET Framework podczas implementowania podobnego konstruktora do użycia w implementacji klonowania.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command">, <see cref="T:System.Data.IDbCommand" /> Aby dodać do zadania wsadowego.</param>
        <summary><see cref="T:System.Data.IDbCommand" /> Dodaje do bieżącej partii.</summary>
        <returns>Liczba poleceń w partii przed dodaniem <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Adapter nie obsługuje partii.</exception>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę, aby umożliwić użytkownikom dodawanie polecenia do partii.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie <see cref="T:System.Data.IDbCommand" /> obiekty z partii.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Adapter nie obsługuje partii.</exception>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę, aby umożliwić użytkownikom usuwanie wszystkich poleceń z partii.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> Służy do aktualizowania źródła danych.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> Wykonywane<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />podczas.</param>
        <param name="statementType">Czy polecenie jest instrukcją UPDATE, INSERT, DELETE lub SELECT.</param>
        <param name="tableMapping">Element <see cref="T:System.Data.Common.DataTableMapping" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> klasy.</summary>
        <returns>Nowe wystąpienie <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> klasy.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> To aktualizuje źródło danych.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> Do wykonania <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />podczas.</param>
        <param name="statementType">Czy polecenie jest instrukcją UPDATE, INSERT, DELETE lub SELECT.</param>
        <param name="tableMapping">Element <see cref="T:System.Data.Common.DataTableMapping" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> klasy.</summary>
        <returns>Nowe wystąpienie <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> klasy.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Domyślna nazwa używana przez <see cref="T:System.Data.Common.DataAdapter" /> obiekt do mapowania tabel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Tabela" to domyślna nazwa używana przez <xref:System.Data.Common.DataAdapter> obiekt dla mapowań tabel.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName>Czy aplikacja dodaje mapowanie tabeli do użycia z <xref:System.Data.Common.DbDataAdapter.Fill%2A>, ale nie <xref:System.Data.DataTable> określa nazwy.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia polecenie do usuwania rekordów z zestawu danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> usuwania rekordów ze źródła danych dla usuniętych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> , jeśli ta właściwość nie jest ustawiona, a w elemencie jest obecna informacja o kluczu podstawowym, zostanie ona wygenerowana automatycznie. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy klasę <xref:System.Data.OleDb.OleDbDataAdapter> pochodną i ustawia niektóre jej właściwości.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Data.Common.DbDataAdapter" /> program i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wykonuje bieżącą partię.</summary>
        <returns>Wartość zwracana z ostatniego polecenia w partii.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę, aby umożliwić użytkownikom wykonywanie partii. Implementacja tej metody łączy polecenia w karcie z wsadową, a następnie wykonuje zadanie wsadowe i zwraca wartość zwracaną przez partię.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.DataSet" /> Wypełnia<see cref="T:System.Data.DataTable" />lub.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <summary>Dodaje lub odświeża wiersze w <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Metoda pobiera dane ze źródła danych przy użyciu instrukcji SELECT. <xref:System.Data.IDbConnection> Obiekt skojarzony z poleceniem SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Jeśli wystąpi błąd lub wyjątek podczas wypełniania tabel danych, wiersze dodane przed wystąpieniem błędu pozostają w tabelach danych. Pozostała część operacji została przerwana.  
  
 Jeśli polecenie nie zwraca żadnych wierszy, żadne tabele nie są dodawane do <xref:System.Data.DataSet>i nie zostanie zgłoszony żaden wyjątek.  
  
 ** <xref:System.Data.DataTable>**** Jeśli obiekt napotka zduplikowane kolumny podczas wypełniania, generuje nazwy dla kolejnych kolumn za pomocą wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej.  
  
 Gdy określone zapytanie zwraca wiele wyników, zestaw wyników dla każdego wiersza zwracającego zapytanie jest umieszczany w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Ponieważ nie utworzono tabeli dla zapytania, które nie zwraca wierszy, w przypadku przetworzenia zapytania INSERT, po którym następuje zapytanie SELECT, tabela utworzona dla zapytania select ma nazwę "Table", ponieważ jest to pierwsza utworzona tabela. Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Gdy instrukcja SELECT używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak instrukcja wsadowa SQL, jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pomijane i nie są dodawane <xref:System.Data.DataSet>do.  
  
 W przypadku użycia <xref:System.Data.Common.DbDataAdapter.Fill%2A> kolejnych wywołań do odświeżenia zawartości <xref:System.Data.DataSet>, muszą zostać spełnione dwa warunki:  
  
1.  Instrukcja SQL powinna być zgodna z tą, która została początkowo użyta do wypełnienia <xref:System.Data.DataSet>.  
  
2.  Muszą być obecne informacje o kolumnie **klucza** .  
  
 Jeśli istnieją informacje o kluczu podstawowym, wszystkie zduplikowane wiersze są uzgadniane i pojawiają się <xref:System.Data.DataTable> tylko raz w odróżnieniu od. <xref:System.Data.DataSet> Informacje o kluczu <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>podstawowym można ustawić przez <xref:System.Data.DataTable.PrimaryKey%2A> określenie właściwości <xref:System.Data.DataTable>lub przez ustawienie <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwości na `AddWithKey`.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Nazwa, <see cref="T:System.Data.DataTable" /> która ma być używana na potrzeby mapowania tabeli.</param>
        <summary>Dodaje lub odświeża wiersze w określonym zakresie w <see cref="T:System.Data.DataSet" /> celu dopasowania ich do tych w źródle danych <see cref="T:System.Data.DataTable" /> przy użyciu nazwy.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera wiersze ze źródła danych przy użyciu instrukcji SELECT określonej przez skojarzoną <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwość. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Następnie operacja dodaje wiersze do obiektów <xref:System.Data.DataTable> docelowych <xref:System.Data.DataTable> w <xref:System.Data.DataSet>, tworząc obiekty, jeśli jeszcze nie istnieją. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Podczas tworzenia <xref:System.Data.DataTable> obiektów <xref:System.Data.Common.DbDataAdapter.Fill%2A> , operacja zwykle tworzy tylko metadane nazw kolumn. Jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> jednak właściwość jest ustawiona na `AddWithKey`, zostaną również utworzone odpowiednie klucze podstawowe i ograniczenia.  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli.  
  
 Przeciążenie <xref:System.Data.Common.DbDataAdapter.Fill%2A> , które przyjmuje `DataTable` jako parametr, uzyskuje tylko pierwszy wynik. Użyj przeciążenia <xref:System.Data.Common.DbDataAdapter.Fill%2A> , które przyjmuje `DataSet` jako parametr, aby uzyskać wiele wyników.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Fill%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.Fill%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Fill%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Można użyć <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>czasie. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasującymi wierszami, które już istnieją. Jeśli klucz podstawowy nie istnieje, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.Fill%2A> i <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla .NET Framework dostawcy danych pobiera informacje o schemacie tylko dla pierwszego wyniku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <block subset="none" type="overrides"><para>To Przeciążenie <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metody jest chronione i jest przeznaczone do użycia przez dostawcę danych .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <summary>Dodaje lub odświeża wiersze w <see cref="T:System.Data.DataSet" /> celu dopasowania ich w źródle danych <see cref="T:System.Data.DataSet" /> przy użyciu nazw i <see cref="T:System.Data.DataTable" /> .</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Metoda pobiera dane ze źródła danych przy użyciu instrukcji SELECT. <xref:System.Data.IDbConnection> Obiekt skojarzony z poleceniem SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Jeśli polecenie nie zwraca żadnych wierszy, żadne tabele nie są dodawane do <xref:System.Data.DataSet>i nie zostanie zgłoszony żaden wyjątek.  
  
 Jeśli obiekt napotka zduplikowane kolumny podczas <xref:System.Data.DataTable>wypełniania, spowoduje to wygenerowanie nazw dla kolejnych kolumn, przy użyciu wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej.  
  
 Gdy określone zapytanie zwraca wiele wyników, każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Ponieważ nie utworzono tabeli dla zapytania, które nie zwraca wierszy, w przypadku przetworzenia zapytania INSERT, a następnie zapytania select, tabela utworzona dla zapytania select powinna mieć nazwę "Tabela", ponieważ jest to pierwsza utworzona tabela. Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Fill%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.Fill%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Fill%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Jeśli wystąpi błąd lub wyjątek podczas wypełniania tabel danych, wiersze dodane przed wystąpieniem błędu pozostają w tabelach danych. Pozostała część operacji została przerwana.  
  
 Gdy instrukcja SELECT używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak instrukcja SQL Part, należy pamiętać o następujących kwestiach:  
  
-   Jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pomijane i nie zostaną dodane do <xref:System.Data.DataSet>.  
  
 W przypadku użycia <xref:System.Data.Common.DbDataAdapter.Fill%2A> kolejnych wywołań do odświeżenia zawartości <xref:System.Data.DataSet>, muszą zostać spełnione dwa warunki:  
  
1.  Instrukcja SQL powinna być zgodna z tą, która została początkowo użyta do wypełnienia <xref:System.Data.DataSet>.  
  
2.  Muszą być obecne informacje o kolumnie **klucza** . Jeśli istnieją informacje o kluczu podstawowym, wszystkie zduplikowane wiersze są uzgadniane i pojawiają się <xref:System.Data.DataTable> tylko raz w odróżnieniu od. <xref:System.Data.DataSet> Informacje o kluczu <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>podstawowym można ustawić przez <xref:System.Data.DataTable.PrimaryKey%2A> określenie właściwości <xref:System.Data.DataTable>lub przez ustawienie <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwości na `AddWithKey`.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasę <xref:System.Data.OleDb.OleDbDataAdapter>pochodną, aby <xref:System.Data.DataSet> wypełnić z wierszami z tabeli Categories. <xref:System.Data.OleDb.OleDbDataAdapter> W<xref:System.Data.DataSet>tym przykładzie przyjęto założenie, że utworzono i.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Tabela źródłowa jest nieprawidłowa.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="dataReader">Nazwa <see cref="T:System.Data.IDataReader" />.</param>
        <summary>Dodaje lub odświeża wiersze w <see cref="T:System.Data.DataTable" /> celu dopasowania do tych w źródle danych przy użyciu określonych <see cref="T:System.Data.DataTable" /> nazw i <see cref="T:System.Data.IDataReader" /> .</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataTable" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="command">Instrukcja SELECT języka SQL używana do pobierania wierszy ze źródła danych.</param>
        <param name="behavior">Jedna z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Dodaje lub odświeża <see cref="T:System.Data.DataTable" /> wiersze w celu dopasowania do tych w źródle danych przy użyciu <see cref="T:System.Data.IDbCommand" /> określonych <see cref="T:System.Data.DataTable" />i <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataTable" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera wiersze ze źródła danych przy użyciu instrukcji SELECT określonej przez skojarzoną <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwość. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Następnie operacja dodaje wiersze do określonego obiektu <xref:System.Data.DataTable> docelowego <xref:System.Data.DataTable> w <xref:System.Data.DataSet>, tworząc obiekt, jeśli jeszcze nie istnieje. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Podczas tworzenia <xref:System.Data.DataTable> obiektu <xref:System.Data.Common.DbDataAdapter.Fill%2A> operacja zwykle tworzy tylko metadane nazwy kolumny. Jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> jednak właściwość jest ustawiona na `AddWithKey`, zostaną również utworzone odpowiednie klucze podstawowe i ograniczenia.  
  
 ** <xref:System.Data.DataTable>**** Jeśli obiekt napotka zduplikowane kolumny podczas wypełniania, spowoduje to wygenerowanie nazw dla kolejnych kolumn, przy użyciu wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" itd. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej.  
  
 Przeciążenie <xref:System.Data.Common.DbDataAdapter.Fill%2A> , które przyjmuje `DataTable` jako parametr, uzyskuje tylko pierwszy wynik. Użyj przeciążenia <xref:System.Data.Common.DbDataAdapter.Fill%2A> , które przyjmuje `DataSet` jako parametr, aby uzyskać wiele wyników.  
  
 Można użyć <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>czasie. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasującymi wierszami, które już istnieją. Jeśli klucz podstawowy nie istnieje, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>To Przeciążenie <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metody jest chronione i jest przeznaczone do użycia przez dostawcę danych .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Numer rekordu (liczony od zera), od którego ma się zacząć.</param>
        <param name="maxRecords">Maksymalna liczba rekordów do pobrania.</param>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> Obiekty do wypełnienia ze źródła danych.</param>
        <summary>Dodaje lub odświeża wiersze w <see cref="T:System.Data.DataTable" /> celu dopasowania ich do źródła danych, rozpoczynając od określonego rekordu i pobierając do określonej maksymalnej liczby rekordów.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataTable" />. Ta wartość nie obejmuje wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera wiersze ze źródła danych przy użyciu instrukcji SELECT określonej przez skojarzoną <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwość. <xref:System.Data.Common.DataAdapter.Fill%2A> Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DataAdapter.Fill%2A> wywołaniem, jest otwierane w celu pobrania danych, a następnie jest zamknięte. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Następnie operacja dodaje wiersze do obiektów <xref:System.Data.DataTable> docelowych <xref:System.Data.DataTable> w <xref:System.Data.DataSet>, tworząc obiekty, jeśli jeszcze nie istnieją. <xref:System.Data.Common.DataAdapter.Fill%2A> Podczas tworzenia <xref:System.Data.DataTable> obiektów <xref:System.Data.Common.DataAdapter.Fill%2A> , operacja zwykle tworzy tylko metadane nazw kolumn. Jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> jednak właściwość jest ustawiona na `AddWithKey`, zostaną również utworzone odpowiednie klucze podstawowe i ograniczenia.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Jeśli karta danych napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje nazwy dla kolejnych kolumn, używając wzorca "nazwakolumny1", "nazwakolumny2", "columnname3" i tak dalej. Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Po dodaniu wielu zestawów wyników do programu <xref:System.Data.DataSet>każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Gdy instrukcja SELECT używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak instrukcja wsadowa SQL, jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pomijane i nie zostaną dodane <xref:System.Data.DataSet>do.  
  
 Można użyć <xref:System.Data.Common.DataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>czasie. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasującymi wierszami, które już istnieją. Jeśli klucz podstawowy nie istnieje, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="startRecord">Numer rekordu (liczony od zera), od którego ma się zacząć.</param>
        <param name="maxRecords">Maksymalna liczba rekordów do pobrania.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <summary>Dodaje lub odświeża wiersze w określonym zakresie w <see cref="T:System.Data.DataSet" /> celu dopasowania ich do tych w źródle danych <see cref="T:System.Data.DataSet" /> przy użyciu nazw i <see cref="T:System.Data.DataTable" /> .</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` Wartość 0 pobiera wszystkie rekordy znalezione po rekordzie początkowym. Jeśli `maxRecords` jest większa niż liczba pozostałych wierszy, zwracane są tylko pozostałe wiersze i nie zostanie wystawiony żaden błąd.  
  
 Jeśli odpowiednie polecenie SELECT jest instrukcją zwracającą wiele wyników, <xref:System.Data.Common.DbDataAdapter.Fill%2A> dotyczy `maxRecords` tylko pierwszego wyniku.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Metoda pobiera dane ze źródła danych przy użyciu instrukcji SELECT. <xref:System.Data.IDbConnection> Obiekt skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Jeśli polecenie nie zwraca żadnych wierszy, żadne tabele nie są dodawane do <xref:System.Data.DataSet>, ale żaden wyjątek nie zostanie zgłoszony.  
  
 ** <xref:System.Data.DataTable>**** Jeśli obiekt napotka zduplikowane kolumny podczas wypełniania, spowoduje to wygenerowanie nazw dla kolejnych kolumn, przy użyciu wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" itd. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej.  
  
 Gdy określone zapytanie zwraca wiele wyników, każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Ponieważ nie jest tworzona żadna tabela dla zapytania, które nie zwraca wierszy, w przypadku przetworzenia zapytania INSERT, po którym następuje zapytanie SELECT, tabela utworzona dla zapytania select ma nazwę "Table", ponieważ jest to pierwsza utworzona tabela. Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Fill%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.Fill%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Fill%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Jeśli wystąpi błąd lub wyjątek podczas wypełniania tabel danych, wiersze dodane przed wystąpieniem błędu pozostają w tabelach danych. Pozostała część operacji została przerwana.  
  
 Gdy instrukcja SELECT używana do wypełniania <xref:System.Data.DataSet> zwraca wiele wyników, takich jak instrukcje SQL Part, należy pamiętać o następujących kwestiach:  
  
-   Podczas przetwarzania wielu wyników w instrukcji `maxRecords` SQL usługi Batch dotyczy tylko pierwszego wyniku. Ta sama wartość dotyczy wierszy zawierających wyniki rozdziału (.NET Framework Dostawca danych tylko dla OLE DB). Wynik najwyższego poziomu jest ograniczony `maxRecords`przez, ale wszystkie wiersze podrzędne są dodawane.  
  
-   Jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pomijane i nie zostaną dodane do <xref:System.Data.DataSet>.  
  
 W przypadku użycia <xref:System.Data.Common.DbDataAdapter.Fill%2A> kolejnych wywołań do odświeżenia zawartości <xref:System.Data.DataSet>, muszą zostać spełnione dwa warunki:  
  
1.  Instrukcja SQL powinna być zgodna z tą, która została początkowo użyta do wypełnienia <xref:System.Data.DataSet>.  
  
2.  Muszą być obecne informacje o kolumnie **klucza** .  
  
 Jeśli istnieją informacje o kluczu podstawowym, wszystkie zduplikowane wiersze zostaną uzgodnione i pojawiają się tylko <xref:System.Data.DataTable> raz w odniesieniu <xref:System.Data.DataSet>do. Informacje o kluczu <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>podstawowym można ustawić przez <xref:System.Data.DataTable.PrimaryKey%2A> określenie właściwości <xref:System.Data.DataTable>lub przez ustawienie <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwości na `AddWithKey`.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
> [!NOTE]
>  Nie będzie zawierać więcej niż liczba rekordów wskazywanych przez `maxRecords`. `DataSet` Jednak cały zestaw wyników wygenerowany przez zapytanie jest nadal zwracany z serwera.  
  
   
  
## Examples  
 Poniższy przykład używa klasy <xref:System.Data.OleDb.OleDbDataAdapter>pochodnej,, aby <xref:System.Data.DataSet> wypełnić 15 wierszami, zaczynając od wiersza 10, z tabeli **Kategorie** . <xref:System.Data.OleDb.OleDbDataAdapter> W<xref:System.Data.DataSet>tym przykładzie przyjęto założenie, że utworzono i.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.  
  
 —lub—  
  
 Połączenie jest nieprawidłowe.</exception>
        <exception cref="T:System.InvalidCastException">Nie można znaleźć połączenia.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Parametr jest mniejszy niż 0.  
  
—lub— 
<paramref name="maxRecords" /> Parametr jest mniejszy niż 0.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="srcTable">Nazwa, <see cref="T:System.Data.DataTable" /> która ma być używana na potrzeby mapowania tabeli.</param>
        <param name="dataReader">Nazwa <see cref="T:System.Data.IDataReader" />.</param>
        <param name="startRecord">Numer rekordu (liczony od zera), od którego ma się zacząć.</param>
        <param name="maxRecords">Maksymalna liczba rekordów do pobrania.</param>
        <summary>Dodaje lub odświeża wiersze w <see cref="T:System.Data.DataSet" /> określonym zakresie w celu dopasowania ich do tych w źródle danych <see cref="T:System.Data.DataSet" />przy użyciu nazw, <see cref="T:System.Data.DataTable" />i <see cref="T:System.Data.IDataReader" /> .</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> Obiekty do wypełnienia ze źródła danych.</param>
        <param name="startRecord">Numer rekordu (liczony od zera), od którego ma się zacząć.</param>
        <param name="maxRecords">Maksymalna liczba rekordów do pobrania.</param>
        <param name="command">Wykonane w celu <see cref="T:System.Data.DataTable" /> wypełnienia obiektów. <see cref="T:System.Data.IDbCommand" /></param>
        <param name="behavior">Jedna z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Dodaje lub odświeża wiersze w określonym zakresie w <see cref="T:System.Data.DataSet" /> celu dopasowania ich do tych w źródle danych <see cref="T:System.Data.DataSet" /> przy użyciu nazw i <see cref="T:System.Data.DataTable" /> .</summary>
        <returns>Liczba wierszy dodanych do lub odświeżonych w tabelach danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` Wartość 0 pobiera wszystkie rekordy znalezione po rekordzie początkowym. Jeśli `maxRecords` jest większa niż liczba pozostałych wierszy, zwracane są tylko pozostałe wiersze i nie wydano żadnego błędu.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> Metoda pobiera dane ze źródła danych przy użyciu instrukcji SELECT. <xref:System.Data.IDbConnection> Obiekt skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Jeśli polecenie nie zwraca żadnych wierszy, żadne tabele nie są dodawane do <xref:System.Data.DataSet>, ale żaden wyjątek nie zostanie zgłoszony.  
  
 ** <xref:System.Data.DataTable>**** Jeśli obiekt napotka zduplikowane kolumny podczas wypełniania, spowoduje to wygenerowanie nazw dla kolejnych kolumn, przy użyciu wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" itd. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej.  
  
 Gdy określone zapytanie zwraca wiele wyników, każdy zestaw wyników zostanie umieszczony w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Ponieważ nie utworzono tabeli dla zapytania, które nie zwraca wierszy, w przypadku przetworzenia zapytania INSERT, a następnie zapytania select, tabela utworzona dla zapytania select powinna mieć nazwę "Tabela", ponieważ jest to pierwsza utworzona tabela. Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Fill%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.Fill%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Fill%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Jeśli wystąpi błąd lub wyjątek podczas wypełniania tabel danych, wiersze dodane przed wystąpieniem błędu pozostają w tabelach danych. Pozostała część operacji została przerwana.  
  
 Gdy instrukcja SELECT użyta do wypełnienia <xref:System.Data.DataTable> obiektów zwraca wiele wyników, takich jak instrukcja SQL Part, należy pamiętać o następujących kwestiach:  
  
-   Podczas przetwarzania wielu wyników w instrukcji `maxRecords` SQL usługi Batch dotyczy tylko pierwszego wyniku. Ta sama wartość dotyczy wierszy zawierających wyniki rozdziału (.NET Framework Dostawca danych tylko dla OLE DB). Wynik najwyższego poziomu jest ograniczony `maxRecords`przez, ale wszystkie wiersze podrzędne są dodawane.  
  
-   Jeśli jeden z wyników zawiera błąd, wszystkie kolejne wyniki są pomijane.  
  
> [!NOTE]
>  Nie będzie zawierać więcej niż liczba rekordów wskazywanych przez `maxRecords`. `DataSet` Jednak cały zestaw wyników wygenerowany przez zapytanie jest nadal zwracany z serwera.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.  
  
 —lub—  
  
 Połączenie jest nieprawidłowe.</exception>
        <exception cref="T:System.InvalidCastException">Nie można znaleźć połączenia.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Parametr jest mniejszy niż 0.  
  
—lub— 
<paramref name="maxRecords" /> Parametr jest mniejszy niż 0.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wypełnić przy użyciu rekordów i, w razie potrzeby, schemat.</param>
        <param name="startRecord">Numer rekordu (liczony od zera), od którego ma się zacząć.</param>
        <param name="maxRecords">Maksymalna liczba rekordów do pobrania.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <param name="command">Instrukcja SELECT języka SQL używana do pobierania wierszy ze źródła danych.</param>
        <param name="behavior">Jedna z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Dodaje lub odświeża wiersze w określonym zakresie w <see cref="T:System.Data.DataSet" /> celu dopasowania ich do tych w źródle danych <see cref="T:System.Data.DataSet" /> przy użyciu nazw tabel źródłowych i, parametrów poleceń i zachowań poleceń.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie dodane lub odświeżone w <see cref="T:System.Data.DataSet" />. Nie obejmuje to wierszy, na które mają wpływ instrukcje, które nie zwracają wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera wiersze ze źródła danych przy użyciu instrukcji SELECT określonej przez skojarzoną <xref:System.Data.IDbDataAdapter.SelectCommand%2A> właściwość. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Obiekt połączenia skojarzony z instrukcją SELECT musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.Fill%2A> wywołaniem, pozostaje otwarte.  
  
 Następnie operacja dodaje wiersze do obiektów <xref:System.Data.DataTable> docelowych <xref:System.Data.DataTable> w <xref:System.Data.DataSet>, tworząc obiekty, jeśli jeszcze nie istnieją. <xref:System.Data.Common.DbDataAdapter.Fill%2A> Podczas tworzenia <xref:System.Data.DataTable> obiektów <xref:System.Data.Common.DbDataAdapter.Fill%2A> , operacja zwykle tworzy tylko metadane nazw kolumn. Jeśli <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> jednak właściwość jest ustawiona na `AddWithKey`, zostaną również utworzone odpowiednie klucze podstawowe i ograniczenia.  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Fill%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.Fill%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Fill%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Można użyć <xref:System.Data.Common.DbDataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>czasie. Jeśli istnieje klucz podstawowy, wiersze przychodzące są scalane z pasującymi wierszami, które już istnieją. Jeśli klucz podstawowy nie istnieje, wiersze przychodzące są dołączane do <xref:System.Data.DataTable>.  
  
 Jeśli zwraca wyniki sprzężenia zewnętrznego `DataAdapter` , obiekt <xref:System.Data.DataTable.PrimaryKey%2A> nie ustawia wartości wynikowej <xref:System.Data.DataTable>. `SelectCommand` Należy jawnie zdefiniować klucz podstawowy, aby upewnić się, że zduplikowane wiersze są prawidłowo rozpoznawane. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.Fill%2A> i <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla .NET Framework dostawcy danych pobiera informacje o schemacie tylko dla pierwszego wyniku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> Parametr jest mniejszy niż 0.  
  
—lub— 
<paramref name="maxRecords" /> Parametr jest mniejszy niż 0.</exception>
        <block subset="none" type="overrides"><para>To Przeciążenie <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> metody jest chronione i jest przeznaczone do użycia przez dostawcę danych .NET Framework.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zachowanie polecenia używanego do wypełniania karty danych.</summary>
        <value><see cref="T:System.Data.CommandBehavior" /> Polecenie używane do wypełniania karty danych.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwracany, gdy wystąpi błąd podczas operacji wypełnienia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.DataTable" /> Dodaje<see cref="T:System.Data.DataSet" /> do i konfiguruje schemat, aby dopasować go do źródła danych.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wstawić schemat do programu.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości, która określa, jak wstawić schemat.</param>
        <summary>Dodaje nazwane "Tabela" do określonego <see cref="T:System.Data.DataSet" /> i konfiguruje schemat tak, aby był zgodny ze źródłem danych na podstawie określonego <see cref="T:System.Data.SchemaType" />. <see cref="T:System.Data.DataTable" /></summary>
        <returns>Odwołanie do kolekcji <see cref="T:System.Data.DataTable" /> obiektów, które zostały dodane <see cref="T:System.Data.DataSet" />do.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pobiera informacje o schemacie ze źródła danych przy użyciu <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Operacja dodaje do miejsca docelowego <xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli i tylko wtedy, gdy wszystkie unikatowe kolumny mają wartość null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale <xref:System.Data.DataTable.PrimaryKey%2A> właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji dotyczących określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informacje o kluczu podstawowym są <xref:System.Data.Common.DbDataAdapter.Fill%2A> używane podczas znajdowania i zamieniania wszystkich wierszy, których kolumny klucza pasują do siebie. Jeśli nie jest to wymagane zachowanie, użyj <xref:System.Data.Common.DbDataAdapter.Fill%2A> bez żądania informacji o schemacie.  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 <xref:System.Data.IDbConnection> Obiekt skojarzony z poleceniem SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 Podczas używania <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, dostawca danych .NET Framework dla SQL Server dołącza klauzulę FOR BROWSE do wykonywanej instrukcji. Użytkownik powinien mieć świadomość potencjalnych efektów ubocznych, takich jak zakłócenia przy użyciu instrukcji SET FMTONLY ON. Aby uzyskać więcej informacji, zobacz [Set FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Poniższy przykład używa klasy pochodnej, <xref:System.Data.SqlClient.SqlDataAdapter>,,, <xref:System.Data.DataSet> wypełnia <xref:System.Data.DataSet>schemat i zwraca.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> Do wypełnienia schematem ze źródła danych.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości.</param>
        <summary>Konfiguruje schemat określonego <see cref="T:System.Data.DataTable" /> na podstawie określonego <see cref="T:System.Data.SchemaType" />.</summary>
        <returns><see cref="T:System.Data.DataTable" /> Zawierający informacje o schemacie zwrócone ze źródła danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera schemat ze źródła danych <xref:System.Data.IDbDataAdapter.SelectCommand%2A>przy użyciu. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Obiekt połączenia skojarzony z elementem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, pozostaje otwarte.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Operacja<xref:System.Data.DataTable>zwraca. Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli element <xref:System.Data.DataTable.PrimaryKey%2A> został już zdefiniowany `DataTable`dla lub `DataTable` zawiera dane, `PrimaryKey` właściwość nie zostanie ustawiona.  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny `DataTable`klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli i tylko wtedy, gdy wszystkie unikatowe kolumny mają wartość null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale `PrimaryKey` właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny `DataTable`klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane. Ten proces może wymagać kilku rund do serwera.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji dotyczących określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>nie zwraca żadnych wierszy. Użyj metody <xref:System.Data.Common.DbDataAdapter.Fill%2A> , aby dodać wiersze <xref:System.Data.DataTable>do.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 Podczas używania <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, dostawca danych .NET Framework dla SQL Server dołącza klauzulę FOR BROWSE do wykonywanej instrukcji. Użytkownik powinien mieć świadomość potencjalnych efektów ubocznych, takich jak zakłócenia przy użyciu instrukcji SET FMTONLY ON. Aby uzyskać więcej informacji, zobacz [Set FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Poniższy przykład używa klasy pochodnej, <xref:System.Data.SqlClient.SqlDataAdapter>,,, <xref:System.Data.DataSet> wypełnia <xref:System.Data.DataTable>schemat i zwraca.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> , aby wstawić schemat do programu.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości, która określa, jak wstawić schemat.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <summary>Dodaje do określonego <see cref="T:System.Data.DataSet" /> i konfiguruje schemat, aby dopasować go do źródła danych na podstawie określonego <see cref="T:System.Data.SchemaType" /> i <see cref="T:System.Data.DataTable" />. <see cref="T:System.Data.DataTable" /></summary>
        <returns>Odwołanie do kolekcji <see cref="T:System.Data.DataTable" /> obiektów, które zostały dodane <see cref="T:System.Data.DataSet" />do.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pobiera informacje o schemacie ze źródła danych przy użyciu <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Operacja dodaje do miejsca docelowego <xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli i tylko wtedy, gdy wszystkie unikatowe kolumny mają wartość null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale <xref:System.Data.DataTable.PrimaryKey%2A> właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji dotyczących określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 Informacje o kluczu podstawowym są <xref:System.Data.Common.DbDataAdapter.Fill%2A> używane podczas znajdowania i zamieniania wszystkich wierszy, których kolumny klucza pasują do siebie. Jeśli nie jest to wymagane zachowanie, użyj <xref:System.Data.Common.DbDataAdapter.Fill%2A> bez żądania informacji o schemacie.  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.Common.DbDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection> Obiekt skojarzony z poleceniem SELECT musi być prawidłowy, ale nie musi być otwarty. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Jeśli element <xref:System.Data.IDbConnection> jest zamknięty przed wywołaniem, zostanie otwarty w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 Podczas używania <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, dostawca danych .NET Framework dla SQL Server dołącza klauzulę FOR BROWSE do wykonywanej instrukcji. Użytkownik powinien mieć świadomość potencjalnych efektów ubocznych, takich jak zakłócenia przy użyciu instrukcji SET FMTONLY ON. Aby uzyskać więcej informacji, zobacz [Set FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 Poniższy przykład używa klasy pochodnej, <xref:System.Data.SqlClient.SqlDataAdapter>,,, <xref:System.Data.DataSet> wypełnia <xref:System.Data.DataSet>schemat i zwraca.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nie można odnaleźć tabeli źródłowej, z której ma zostać pobrany schemat.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> Do wypełnienia schematem ze źródła danych.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości.</param>
        <param name="command">Instrukcja SELECT języka SQL używana do pobierania wierszy ze źródła danych.</param>
        <param name="behavior">Jedna z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Konfiguruje schemat określonego <see cref="T:System.Data.DataTable" /> na podstawie określonego <see cref="T:System.Data.SchemaType" />, ciągu polecenia i <see cref="T:System.Data.CommandBehavior" /> wartości.</summary>
        <returns><see cref="T:System.Data.DataTable" /> Obiekt, który zawiera informacje o schemacie zwrócone ze źródła danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera schemat ze źródła danych <xref:System.Data.IDbDataAdapter.SelectCommand%2A>przy użyciu. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Obiekt połączenia skojarzony z elementem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, pozostaje otwarte.  
  
 Operacja dodaje do miejsca docelowego <xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli i tylko wtedy, gdy wszystkie unikatowe kolumny mają wartość null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale <xref:System.Data.DataTable.PrimaryKey%2A> właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji dotyczących określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>nie zwraca żadnych wierszy. Użyj metody <xref:System.Data.Common.DbDataAdapter.Fill%2A> , aby dodać wiersze <xref:System.Data.DataTable>do.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 Podczas używania <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, dostawca danych .NET Framework dla SQL Server dołącza klauzulę FOR BROWSE do wykonywanej instrukcji. Użytkownik powinien mieć świadomość potencjalnych efektów ubocznych, takich jak zakłócenia przy użyciu instrukcji SET FMTONLY ON. Aby uzyskać więcej informacji, zobacz [Set FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ta implementacja <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> metody jest chroniona i jest przeznaczona do użytku przez .NET Framework dostawcę danych.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Do wypełnienia schematem ze źródła danych.</param>
        <param name="schemaType">Jedna z <see cref="T:System.Data.SchemaType" /> wartości.</param>
        <param name="command">Instrukcja SELECT języka SQL używana do pobierania wierszy ze źródła danych.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <param name="behavior">Jedna z <see cref="T:System.Data.CommandBehavior" /> wartości.</param>
        <summary>Dodaje do określonego <see cref="T:System.Data.DataSet" /> i konfiguruje schemat, aby dopasować go do źródła danych na podstawie określonego <see cref="T:System.Data.SchemaType" />. <see cref="T:System.Data.DataTable" /></summary>
        <returns>Tablica <see cref="T:System.Data.DataTable" /> obiektów, które zawierają informacje o schemacie zwrócone ze źródła danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda pobiera schemat ze źródła danych <xref:System.Data.IDbDataAdapter.SelectCommand%2A>przy użyciu. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Obiekt połączenia skojarzony z elementem <xref:System.Data.IDbDataAdapter.SelectCommand%2A> musi być prawidłowy, ale nie musi być otwarty. Jeśli połączenie jest zamknięte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, zostanie otwarte w celu pobrania danych, a następnie zamknięcia. Jeśli połączenie jest otwarte przed <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wywołaniem, pozostaje otwarte.  
  
 Operacja dodaje do miejsca docelowego <xref:System.Data.DataSet>. <xref:System.Data.DataTable> <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Następnie dodaje kolumny do <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable>i konfiguruje następujące <xref:System.Data.DataColumn> właściwości, jeśli istnieją one w źródle danych:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Należy ustawić <xref:System.Data.DataColumn.AutoIncrementStep%2A> i <xref:System.Data.DataColumn.AutoIncrementSeed%2A> osobno.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Ponadto konfiguruje <xref:System.Data.DataTable.PrimaryKey%2A> właściwości <xref:System.Data.DataTable.Constraints%2A> i zgodnie z następującymi regułami:  
  
-   Jeśli co najmniej jedna kolumna klucza podstawowego jest zwracana przez <xref:System.Data.IDbDataAdapter.SelectCommand%2A>program, są one używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
-   Jeśli nie zostaną zwrócone żadne kolumny klucza podstawowego, ale unikatowe kolumny, unikatowe kolumny są używane jako klucz podstawowy, jeśli i tylko wtedy, gdy wszystkie unikatowe kolumny mają wartość null. Jeśli którakolwiek z kolumn dopuszcza wartość null, <xref:System.Data.UniqueConstraint> jest dodawana <xref:System.Data.ConstraintCollection>do, ale <xref:System.Data.DataTable.PrimaryKey%2A> właściwość nie jest ustawiona.  
  
-   W przypadku zwrócenia obu kolumn klucza podstawowego i unikatowych kolumn kolumny klucza podstawowego są używane jako kolumny <xref:System.Data.DataTable>klucza podstawowego.  
  
 Należy zauważyć, że klucze podstawowe i unikatowe ograniczenia są dodawane <xref:System.Data.ConstraintCollection> do zasad zgodnie z poprzednimi regułami, ale inne typy ograniczeń nie są dodawane.  
  
 Jeśli unikatowy indeks klastrowany jest zdefiniowany w kolumnie lub kolumnach w tabeli SQL Server i ograniczenie Primary Key jest zdefiniowane w oddzielnym zestawie kolumn, zostaną zwrócone nazwy kolumn w indeksie klastrowanym. Aby zwrócić nazwę lub nazwy kolumn klucza podstawowego, użyj wskazówki zapytania z instrukcją SELECT, która określa nazwę indeksu klucza podstawowego. Aby uzyskać więcej informacji dotyczących określania wskazówek zapytania, zobacz [Wskazówka zapytania (Transact-SQL)](https://msdn.microsoft.com/library/ms181714.aspx).  
  
 ** <xref:System.Data.DataTable>**** Jeśli napotka zduplikowane kolumny podczas wypełniania, generuje ona nazwy dla kolejnych kolumn, używając wzorca "ColumnName 1", "ColumnName 2", "ColumnName 3" i tak dalej. <xref:System.Data.IDataAdapter> Jeśli dane przychodzące zawierają nienazwane kolumny, są umieszczane w <xref:System.Data.DataSet> zależności od wzorca "Kolumna1", "Kolumna2" i tak dalej. Gdy wiele zestawów wyników zostanie dodanych do <xref:System.Data.DataSet> każdego zestawu wyników jest umieszczanych w oddzielnej tabeli. Dodatkowe zestawy wyników są nazywane przez dołączenie wartości całkowitych do określonej nazwy tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje korzystające z nazw kolumn i tabel powinny mieć pewność, że konflikty z tymi wzorcami nazewnictwa nie wystąpią.  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> W takich sytuacjach program <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę i tworzy nową tabelę, jeśli nie istnieje dokładne dopasowanie. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>nie zwraca żadnych wierszy. Użyj metody <xref:System.Data.Common.DbDataAdapter.Fill%2A> , aby dodać wiersze <xref:System.Data.DataTable>do.  
  
> [!NOTE]
>  Podczas obsługi instrukcji SQL Part, które zwracają wiele wyników, implementacja <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla dostawca danych .NET Framework na potrzeby OLE DB pobiera informacje o schemacie tylko dla pierwszego wyniku. Aby pobrać informacje o schemacie dla wielu wyników <xref:System.Data.Common.DbDataAdapter.Fill%2A> , użyj <xref:System.Data.MissingSchemaAction> z zestawem do `AddWithKey`.  
  
 Podczas używania <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, dostawca danych .NET Framework dla SQL Server dołącza klauzulę FOR BROWSE do wykonywanej instrukcji. Użytkownik powinien mieć świadomość potencjalnych efektów ubocznych, takich jak zakłócenia przy użyciu instrukcji SET FMTONLY ON. Aby uzyskać więcej informacji, zobacz [Set FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ta implementacja <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> metody jest chroniona i jest przeznaczona do użytku przez .NET Framework dostawcę danych.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Indeks polecenia, z którego ma zostać pobrany parametr.</param>
        <param name="parameterIndex">Indeks parametru w poleceniu.</param>
        <summary><see cref="T:System.Data.IDataParameter" /> Zwraca z jednego z poleceń w bieżącej partii.</summary>
        <returns><see cref="T:System.Data.IDataParameter" /> Określony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Adapter nie obsługuje partii.</exception>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę, aby umożliwić użytkownikom wykonywanie partii. Implementacja używa <paramref name="commandIdentifier" /> podanego polecenia, aby zlokalizować żądane polecenie, a następnie <paramref name="parameterIndex" /> używa podanej do zlokalizowania żądanego parametru. Na przykład, <paramref name="commandIdentifier" /> a z 0 i a <paramref name="parameterIndex" /> z 0 zwraca pierwszy parametr z pierwszego polecenia w partii.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Numer porządkowy kolumny (liczony od zera) poszczególnych poleceń w partii.</param>
        <param name="recordsAffected">Liczba wierszy, których dotyczy magazyn danych przez określone polecenie w ramach partii.</param>
        <param name="error"><see cref="T:System.Exception" /> Zgłoszono podczas wykonywania określonego polecenia. Zwraca <see langword="null" /> (<see langword="Nothing" /> w Visual Basic), jeśli nie jest zgłaszany żaden wyjątek.</param>
        <summary>Zwraca informacje o pojedynczej próbie aktualizacji w ramach większej aktualizacji wsadowej.</summary>
        <returns>Informacje o pojedynczej próbie aktualizacji w ramach większej aktualizacji wsadowej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostawcy danych, którzy obsługują wsadowe aktualizacje logiki, muszą przesłaniać serię metod wirtualnych <xref:System.Data.Common.DbDataAdapter> w klasie. `GetBatchedRecordsAffected`reprezentuje jedną z tych metod wirtualnych. Klasa polega na `GetBatchedRecordsAffected` określeniu sukcesu lub niepowodzenia poszczególnych prób aktualizacji w ramach partii, aby można było oznaczyć odpowiednio odpowiednie <xref:System.Data.DataRow>. `DbDataAdapter`  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera parametry ustawione przez użytkownika podczas wykonywania instrukcji SELECT języka SQL.</summary>
        <returns>Tablica <see cref="T:System.Data.IDataParameter" /> obiektów, która zawiera parametry ustawione przez użytkownika.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje przetwarzanie wsadowe dla <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Adapter nie obsługuje partii.</exception>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę. Ta metoda daje klasie możliwość zainicjowania wszelkich zasobów niezbędnych do obsługi partii. Na przykład Klasa może przydzielić strukturę danych w celu przechowywania zestawu poleceń w partii.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia polecenie używane do wstawiania nowych rekordów do źródła danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> wstawiania rekordów w źródle danych dla nowych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.InsertCommand%2A> , jeśli ta właściwość nie jest ustawiona, a w elemencie są obecne informacje o kluczu podstawowym, zostaną one automatycznie wygenerowane. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy klasę <xref:System.Data.OleDb.OleDbDataAdapter> pochodną i ustawia niektóre jej właściwości.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">Dane zdarzenia.</param>
        <summary><see cref="E:System.Data.Common.DataAdapter.FillError" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see langword="RowUpdated" /> Podnosi zdarzenie dostawcy danych .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby zapoznać się z omówieniem, zobacz temat [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> w klasie pochodnej należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> metodę klasy bazowej.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see langword="RowUpdating" /> Podnosi zdarzenie dostawcy danych .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby zapoznać się z omówieniem, zobacz temat [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> w klasie pochodnej, należy wywołać <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> metodę klasy podstawy.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia polecenie używane do wybierania rekordów w źródle danych.</summary>
        <value>, Który jest używany podczas <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> wybierania rekordów ze źródła danych do umieszczania w zestawie danych. <see cref="T:System.Data.IDbCommand" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy klasę <xref:System.Data.OleDb.OleDbDataAdapter> pochodną i ustawia niektóre jej właściwości.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL do usuwania rekordów z zestawu danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> usuwania rekordów ze źródła danych dla usuniętych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Common.DbDataAdapter> gdy wystąpienie jest rzutowane <xref:System.Data.IDbDataAdapter> do interfejsu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL służącą do wstawiania nowych rekordów do źródła danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> wstawiania rekordów w źródle danych dla nowych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Common.DbDataAdapter> gdy wystąpienie jest rzutowane <xref:System.Data.IDbDataAdapter> do interfejsu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL służącą do wybierania rekordów w źródle danych.</summary>
        <value>Jest używany podczas <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> wybierania rekordów ze źródła danych do umieszczenia w zestawie danych. <see cref="T:System.Data.IDbCommand" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Common.DbDataAdapter> gdy wystąpienie jest rzutowane <xref:System.Data.IDbDataAdapter> do interfejsu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL służącą do aktualizowania rekordów w źródle danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> aktualizowania rekordów w źródle danych dla zmodyfikowanych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Common.DbDataAdapter> gdy wystąpienie jest rzutowane <xref:System.Data.IDbDataAdapter> do interfejsu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy obiekt, który jest kopią bieżącego wystąpienia.</summary>
        <returns>Nowy obiekt będący kopią tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Common.DbDataAdapter> gdy wystąpienie jest rzutowane <xref:System.ICloneable> do interfejsu.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Końcowa Partia zadań <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.Common.DbDataAdapter>programie ta metoda zgłasza <xref:System.NotSupportedException>. Klasy dziedziczące <xref:System.Data.Common.DbDataAdapter> Po przesłonięciu tej metody w celu zapewnienia pomocy technicznej dla partii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Adapter nie obsługuje partii.</exception>
        <block subset="none" type="overrides"><para>Ta metoda jest chroniona i jest przeznaczona do użytku przez dostawcę danych .NET Framework.  
  
Jeśli klasa, która dziedziczy z <see cref="T:System.Data.Common.DbDataAdapter" /> obsługuje partie, zastępuje tę metodę. Ta metoda daje klasie możliwość usuwania wszelkich zasobów przyznanych do obsługi partii. Na przykład Klasa może cofnąć alokację struktury danych, która zawiera polecenia w partii.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, UPDATE lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Tablica <see cref="T:System.Data.DataRow" /> obiektów używanych do aktualizowania źródła danych.</param>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, UPDATE lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w określonej tablicy w <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.Common.DbDataAdapter.Update%2A> metodę <xref:System.Data.Common.DbDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.Common.DbDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy zauważyć, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę w sytuacjach, w których należy kontrolować sekwencję typów instrukcji (na przykład wstawia przed aktualizacjami). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez **CommandBuilder**. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie odświeża wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DbDataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.Common.DbDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.Common.DbDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.Common.DbDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle wynikiem błędu.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework określa, czy ma być używana oryginalna, aktualna lub proponowana wersja wartości kolumny. Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasę pochodną <xref:System.Data.OleDb.OleDbDataAdapter>, aby zaktualizować źródło danych.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.SystemException">Nie <see cref="T:System.Data.DataRow" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataTable" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataSet" /> istnieje jako źródło.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Służy do aktualizowania źródła danych.</param>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, UPDATE lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w określonym <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.Common.DbDataAdapter.Update%2A> metodę <xref:System.Data.Common.DbDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.Common.DbDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy zauważyć, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę w sytuacjach, w których należy kontrolować sekwencję typów instrukcji (na przykład wstawia przed aktualizacjami). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez **CommandBuilder**. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie odświeża wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DbDataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.Common.DbDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, wówczas pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.Common.DbDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.Common.DbDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle wynikiem błędu.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework określa, czy ma być używana oryginalna, aktualna lub proponowana wersja wartości kolumny. Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasę pochodną <xref:System.Data.OleDb.OleDbDataAdapter>, aby zaktualizować źródło danych.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> Służy do aktualizowania źródła danych.</param>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, UPDATE lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w określonym <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.Common.DbDataAdapter.Update%2A> metodę <xref:System.Data.Common.DbDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.Common.DbDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy zauważyć, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę w sytuacjach, w których należy kontrolować sekwencję typów instrukcji (na przykład wstawia przed aktualizacjami). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez **CommandBuilder**. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie odświeża wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DbDataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.Common.DbDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, wówczas pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.Common.DbDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.Common.DbDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle wynikiem błędu.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework określa, czy ma być używana oryginalna, aktualna lub proponowana wersja wartości kolumny. Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasę pochodną <xref:System.Data.OleDb.OleDbDataAdapter>, aby zaktualizować źródło danych.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.SystemException">Nie <see cref="T:System.Data.DataRow" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataTable" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataSet" /> istnieje jako źródło.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Tablica <see cref="T:System.Data.DataRow" /> obiektów używanych do aktualizowania źródła danych.</param>
        <param name="tableMapping"><see cref="P:System.Data.IDataAdapter.TableMappings" /> Kolekcja do użycia.</param>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, Update lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w określonej tablicy <see cref="T:System.Data.DataSet" /> obiektów.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.Common.DbDataAdapter.Update%2A> metodę <xref:System.Data.Common.DbDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.Common.DbDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy zauważyć, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę w sytuacjach, w których należy kontrolować sekwencję typów instrukcji (na przykład wstawia przed aktualizacjami). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez **CommandBuilder**. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie odświeża wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DbDataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.Common.DbDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, wówczas pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.Common.DbDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.Common.DbDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle wynikiem błędu.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework określa, czy ma być używana oryginalna, aktualna lub proponowana wersja wartości kolumny. Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.SystemException">Nie <see cref="T:System.Data.DataRow" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataTable" /> istnieje do zaktualizowania.  
  
—lub— 
Nie <see cref="T:System.Data.DataSet" /> istnieje jako źródło.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> Służy do aktualizowania źródła danych.</param>
        <param name="srcTable">Nazwa tabeli źródłowej, która ma być używana na potrzeby mapowania tabel.</param>
        <summary>Aktualizuje wartości w bazie danych przez wykonanie odpowiednich instrukcji INSERT, Update lub DELETE dla każdego wstawionego, zaktualizowanego lub usuniętego wiersza w <see cref="T:System.Data.DataSet" /> podanej <see cref="T:System.Data.DataTable" /> nazwie.</summary>
        <returns>Liczba wierszy, które zostały pomyślnie zaktualizowane z <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Data.Common.DbDataAdapter.Update%2A> metodę <xref:System.Data.Common.DbDataAdapter> , bada <xref:System.Data.DataRow.RowState%2A> Właściwość i wykonuje wymagane instrukcje INSERT, Update lub DELETE w sposób iteracyjny dla każdego wiersza, na podstawie kolejności indeksów skonfigurowanych w <xref:System.Data.DataSet>. Na przykład <xref:System.Data.Common.DbDataAdapter.Update%2A> może wykonać instrukcję delete, po której następuje instrukcja INSERT, a następnie inną instrukcję delete ze względu na kolejność wierszy <xref:System.Data.DataTable>w.  
  
 Należy zauważyć, że te instrukcje nie są wykonywane jako proces wsadowy; Każdy wiersz jest aktualizowany pojedynczo. Aplikacja może wywołać <xref:System.Data.DataSet.GetChanges%2A> metodę w sytuacjach, w których należy kontrolować sekwencję typów instrukcji (na przykład wstawiać przed aktualizacją). Aby uzyskać więcej informacji, zobacz [Aktualizowanie źródeł danych za pomocą kart](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)DataAdapters.  
  
 Jeśli instrukcja INSERT, Update lub DELETE nie została określona, <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda generuje wyjątek. Można jednak utworzyć <xref:System.Data.SqlClient.SqlCommandBuilder> obiekt lub <xref:System.Data.OleDb.OleDbCommandBuilder> , aby automatycznie generować instrukcje SQL dla `SelectCommand` aktualizacji z jednej tabeli, jeśli ustawisz właściwość .NET Framework dostawcy danych. Następnie wszystkie dodatkowe instrukcje SQL, które nie są ustawione, są generowane przez **CommandBuilder**. Ta logika generowania wymaga, <xref:System.Data.DataSet>aby informacje o kolumnie klucza znajdowały się w. Aby uzyskać więcej informacji, zobacz [Generowanie poleceń z CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Metoda obsługuje scenariusze, gdzie zawiera <xref:System.Data.DataSet> wiele <xref:System.Data.DataTable> obiektów, których nazwy różnią się tylko wielkością liter. <xref:System.Data.Common.DbDataAdapter.Update%2A> Gdy wiele tabel o tej samej nazwie, ale różnej wielkości liter, istnieje `DataSet`w <xref:System.Data.Common.DbDataAdapter.Update%2A> , wykonuje porównanie z uwzględnieniem wielkości liter, aby znaleźć odpowiednią tabelę, i generuje wyjątek, jeśli nie ma dokładnego dopasowania. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter.Update%2A> jest wywoływana <xref:System.Data.DataSet> i zawiera tylko jeden <xref:System.Data.DataTable> , którego nazwa różni się tylko wielkością liter <xref:System.Data.DataTable> , która jest aktualizowana. W tym scenariuszu porównanie uwzględnia wielkość liter. Poniższy C# kod ilustruje to zachowanie.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> Metoda pobiera wiersze z tabeli wymienionej w pierwszym mapowaniu przed wykonaniem aktualizacji. Następnie odświeża wiersz przy użyciu wartości <xref:System.Data.IDbCommand.UpdatedRowSource%2A> właściwości. <xref:System.Data.Common.DbDataAdapter.Update%2A> Wszystkie zwracane wiersze dodatkowe są ignorowane.  
  
 Po załadowaniu danych z powrotem do programu <xref:System.Data.DataSet> <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> zdarzenie jest zgłaszane, umożliwiając użytkownikowi inspekcję uzgodnionego <xref:System.Data.DataSet> wiersza i parametrów wyjściowych zwracanych przez polecenie. Po pomyślnym zaktualizowaniu wiersza są akceptowane zmiany w tym wierszu.  
  
 W przypadku <xref:System.Data.Common.DbDataAdapter.Update%2A>korzystania z programu kolejność wykonywania jest następująca:  
  
1.  Wartości z <xref:System.Data.DataRow> są przenoszone do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenie jest zgłaszane.  
  
3.  Wykonuje polecenie.  
  
4.  Jeśli polecenie jest ustawione na `FirstReturnedRecord`, wówczas pierwszy zwrócony wynik zostanie umieszczony <xref:System.Data.DataRow>w.  
  
5.  Jeśli istnieją parametry wyjściowe, są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenie jest zgłaszane.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>jest wywoływana.  
  
 Każde polecenie skojarzone z <xref:System.Data.Common.DbDataAdapter> zazwyczaj ma skojarzoną kolekcję parametrów. Parametry są mapowane do bieżącego wiersza za pomocą `SourceColumn` właściwości i `SourceVersion` `Parameter` klasy .NET Framework dostawcy danych. `SourceColumn`odwołuje się <xref:System.Data.DataTable> do kolumny <xref:System.Data.Common.DbDataAdapter> , która zawiera odwołania do uzyskiwania wartości parametrów dla bieżącego wiersza.  
  
 `SourceColumn`odwołuje się do niemapowanej nazwy kolumny przed zastosowaniem jakichkolwiek mapowań tabel. Jeśli `SourceColumn` odwołuje się do nieistniejącej kolumny, podejmowana akcja zależy od jednej z następujących <xref:System.Data.MissingMappingAction> wartości.  
  
|Wartość wyliczenia|Podjęta akcja|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Użyj nazw kolumn źródłowych i nazw tabel w <xref:System.Data.DataSet> przypadku braku mapowania.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> Jest generowany. Gdy mapowania są jawnie ustawione, brakujące mapowanie dla parametru wejściowego jest zwykle wynikiem błędu.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> Jest generowany.|  
  
 Właściwość służy również do mapowania wartości parametrów danych wyjściowych lub wejściowych/wyjściowych z powrotem `DataSet`do. `SourceColumn` Wyjątek jest generowany, jeśli odwołuje się do nieistniejącej kolumny.  
  
 `SourceVersion` Właściwość klasy`Parameter` dostawcy danych .NET Framework określa, czy ma być używana oryginalna, aktualna lub proponowana wersja wartości kolumny. Ta funkcja jest często używana do uwzględniania oryginalnych wartości w klauzuli WHERE instrukcji UPDATE w celu sprawdzenia optymistycznych naruszeń współbieżności.  
  
> [!NOTE]
>  Jeśli wystąpi błąd podczas aktualizowania wiersza, zgłaszany jest wyjątek, a wykonanie aktualizacji nie jest kontynuowane. Aby kontynuować operację aktualizacji bez generowania wyjątków w przypadku napotkania błędu, należy ustawić <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> właściwość na `true` przed wywołaniem <xref:System.Data.Common.DbDataAdapter.Update%2A>. Możesz także odpowiedzieć na błędy w poszczególnych wierszach w ramach `RowUpdated` zdarzenia DataAdapter. Aby kontynuować operację aktualizacji bez generowania `RowUpdated` wyjątku w ramach zdarzenia, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> ustaw właściwość <xref:System.Data.Common.RowUpdatedEventArgs> na <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano klasę pochodną <xref:System.Data.OleDb.OleDbDataAdapter>, aby zaktualizować źródło danych.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" /> Jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">Tabela źródłowa jest nieprawidłowa.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">Próba wykonania instrukcji INSERT, UPDATE lub DELETE spowodowało utratę rekordów, których dotyczy.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która włącza lub wyłącza obsługę przetwarzania wsadowego, oraz określa liczbę poleceń, które mogą być wykonywane w partii.</summary>
        <value>Liczba wierszy do przetworzenia na partię.  
  
 <list type="table"><listheader><term> Wartość to 
 </term><description> Efekt 
 </description></listheader><item><term> 0 
 </term><description> Nie ma żadnego limitu rozmiaru partii.  
  
 </description></item><item><term> 1 
 </term><description> Wyłącza aktualizowanie wsadowe.  
  
 </description></item><item><term> &gt; 1 
 </term><description> Zmiany są wysyłane przy użyciu partii <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> operacji jednocześnie.  
  
 </description></item></list>  

 W przypadku ustawienia tej opcji na wartość inną niż 1 wszystkie polecenia <see cref="T:System.Data.Common.DbDataAdapter" /> skojarzone z <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> właściwością muszą mieć ustawioną **opcję None** lub **OutputParameters**. W przeciwnym razie zostanie zgłoszony wyjątek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> , aby zaktualizować źródło danych ze zmianami <xref:System.Data.DataSet>z. Jeśli dostawca danych obsługuje przetwarzanie wsadowe, może to zwiększyć wydajność aplikacji przez zredukowanie liczby operacji rundy do serwera. W ADO.NET 2,0 ta właściwość jest obsługiwana dla dostawców danych platformy .NET dla SQL Server (SqlClient) i Oracle (OracleClient).  
  
 Wykonanie bardzo dużej partii może obniżyć wydajność. W związku z tym należy przetestować optymalne ustawienie rozmiaru partii przed wdrożeniem aplikacji.  
  
 Zostanie <xref:System.ArgumentOutOfRangeException> wygenerowany, jeśli wartość zostanie ustawiona na liczbę mniejszą od zera.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia polecenie służące do aktualizowania rekordów w źródle danych.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> Używane podczas<see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> aktualizowania rekordów w źródle danych dla zmodyfikowanych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku <xref:System.Data.DataSet> <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> , jeśli ta właściwość nie jest ustawiona, a w elemencie są obecne informacje o kluczu podstawowym, zostaną one automatycznie wygenerowane. <xref:System.Data.Common.DbDataAdapter.Update%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy klasę <xref:System.Data.OleDb.OleDbDataAdapter> pochodną i ustawia niektóre jej właściwości.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipulowanie danymi (ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactories (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Omówienie ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>
