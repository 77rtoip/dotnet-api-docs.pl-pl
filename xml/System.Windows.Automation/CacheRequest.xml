<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba79b367856f83c772f8c7971dde04e0ee956e6d" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909949" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa właściwości i wzorce framework automatyzacji interfejsu użytkownika buforuje, kiedy <see cref="T:System.Windows.Automation.AutomationElement" /> są uzyskiwane.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trwa pobieranie właściwości i wzorce za pośrednictwem [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] wymaga wywołań między procesami, które może wolno dół wydajności. Przez buforowanie wartości wzorców w operacji zbiorczej i ich właściwości, może zwiększyć wydajność aplikacji.  
  
 Utwórz nowe żądanie pamięci podręcznej przez wywołanie konstruktora klasy. Żądanie jest wypełniana powtarzane wywołania <xref:System.Windows.Automation.CacheRequest.Add%2A> metody.  
  
 Tylko jeden <xref:System.Windows.Automation.CacheRequest> mogą być aktywne. Istnieją dwa sposoby aktywacji żądania:  
  
-   Wywołanie <xref:System.Windows.Automation.CacheRequest.Activate%2A> na żądanie. Wypchnięcia to żądanie na stosie, a żądanie jest zdjęte ze stosu, gdy obiekt jest usunięty. W celu zapewnienia usuwania, nawet jeśli zgłoszony wyjątek, użyj wartości zwracanej z <xref:System.Windows.Automation.CacheRequest.Activate%2A> w `using` bloku (`Using` w języku Visual Basic).  
  
-   Wstrzymanie żądania na stosie wewnętrzny przez wywołanie metody <xref:System.Windows.Automation.CacheRequest.Push%2A>. Tylko żądania znajdujące się najwyżej na stosie jest aktywne, a musi być kolejnego usunięte ze stosu przez <xref:System.Windows.Automation.CacheRequest.Pop%2A>. Wyświetlanie żądania dezaktywuje.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] elementy uzyskane podczas żądania jest aktywna będą mieć buforowane wartości dla właściwości i określonych wzorców.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Windows.Automation.CacheRequest.Activate%2A> do pamięci podręcznej wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 Poniższy przykład przedstawia użycie <xref:System.Windows.Automation.CacheRequest.Push%2A> i <xref:System.Windows.Automation.CacheRequest.Pop%2A> do pamięci podręcznej wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Automation.CacheRequest" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> utworzeniu <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawana jako domyślna właściwość do pamięci podręcznej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia to <see cref="T:System.Windows.Automation.CacheRequest" /> jako aktywny Specyfikacja dla elementów, które są zwracane podczas obliczania <see cref="T:System.Windows.Automation.AutomationElement" /> jest wymagane na tym samym wątku.</summary>
        <returns>Obiekt, który służy do usuwania <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej metody zwykle zalecane jest stosowanie <xref:System.Windows.Automation.CacheRequest.Push%2A> i <xref:System.Windows.Automation.CacheRequest.Pop%2A> jako środek aktywacji <xref:System.Windows.Automation.CacheRequest>. Obiekt spoczywa na stosie podczas <xref:System.Windows.Automation.CacheRequest.Activate%2A> o nazwie, a następnie zdjęte ze stosu poza po usunięciu. Aby upewnić się, usuwania, umieść zwracanej wartości w `using` bloku (`Using` w języku Visual Basic).  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Windows.Automation.CacheRequest.Activate%2A> do pamięci podręcznej wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje identyfikator właściwości lub wzorca, aby <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> obiekt jest tworzony, <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawana jako domyślna właściwość do pamięci podręcznej.  
  
 Dodawanie obiektu, który jest już w pamięci podręcznej żądania nie ma znaczenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Identyfikator wzorzec do pamięci podręcznej.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationPattern" /> identyfikator tej <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodawanie wzorca, który jest już w pamięci podręcznej żądania nie ma znaczenia.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Windows.Automation.CacheRequest> i dodać wzorzec pamięci podręcznej.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Identyfikator określania wartości właściwości do pamięci podręcznej.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationProperty" /> identyfikator tej <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> utworzeniu <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawana jako domyślna właściwość do pamięci podręcznej.  
  
 Dodawanie właściwości, która jest już w pamięci podręcznej żądania nie ma znaczenia.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Windows.Automation.CacheRequest> i Dodaj właściwość, która ma być buforowane.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy zwrócone elementy powinna zawierać pełnej odwołania do odpowiadającego [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], lub tylko buforowanych informacji.</summary>
        <value>
          <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> Zwracane elementy mają pełną dokumentację do odpowiadającego [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]; w przeciwnym razie <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> jest to wartość domyślna i określa, że zwracane elementy zawierają pełną dokumentację do odpowiadającego [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None> Określa, że zwracane elementy mają odwołań do odpowiadającego [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]i zawierają tylko informacje w pamięci podręcznej.  
  
 Niektóre operacje na elementach, w tym <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, i <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, wymagają pełną dokumentację; próby wykonania tych na element, który ma wartość none powoduje <xref:System.InvalidOperationException>.  
  
 Przy użyciu <xref:System.Windows.Automation.AutomationElementMode.None> może być bardziej efektywne, gdy są potrzebne tylko właściwości, ponieważ pozwala ona na uniknięcie obciążenie związane z konfigurowaniem pełne odwołań.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> ma ustawioną wartość <xref:System.Windows.Automation.AutomationElementMode.None>, w wyniku którego tylko w pamięci podręcznej właściwości i wzorce są dostępne dla obiektu pobrane.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię tego <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <returns>Modyfikowalną kopię bieżącego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Automation.CacheRequest" /> , który jest aktywny w bieżącym wątku.</summary>
        <value>Aktywne <see cref="T:System.Windows.Automation.CacheRequest" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa aktywne <see cref="T:System.Windows.Automation.CacheRequest" /> ze stosu wewnętrznego dla bieżącego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko aktywne żądanie można usunąć przy użyciu <xref:System.Windows.Automation.CacheRequest.Pop%2A> metody. Próba usunięcia żądania nie bieżącego jedne wyniki Wystąpił wyjątek.  
  
 O ile nie są zagnieżdżania żądań pamięci podręcznej, zaleca się używania <xref:System.Windows.Automation.CacheRequest.Activate%2A> można umieścić żądania na stosie. Przyczyną jest to, że można używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> w `using` bloku (`Using` w języku Visual Basic), zapewniając, że żądanie jest zdjęte ze stosu ze stosu, nawet jeśli zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób dezaktywować <xref:System.Windows.Automation.CacheRequest> przy użyciu <xref:System.Windows.Automation.CacheRequest.Pop%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Próbowano usunąć żądania pamięci podręcznej, który nie był ostatnią wypychana na stosie.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Miejsca <see cref="T:System.Windows.Automation.CacheRequest" /> na stosie stanu wewnętrznego, dzięki czemu aktywnego żądania w bieżącym wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele <xref:System.Windows.Automation.CacheRequest> obiekty mogą być umieszczane na stosie stanu. Należy usunąć żądań pamięci podręcznej ze stosu w kolejności ich zostały przekazane. w przeciwnym razie <xref:System.InvalidOperationException> zgłoszony wyjątek.  
  
 O ile nie są zagnieżdżania żądań pamięci podręcznej, zaleca się używania <xref:System.Windows.Automation.CacheRequest.Activate%2A> można umieścić żądania na stosie. Przyczyną jest to, że można używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> w `using` bloku (`Using` w języku Visual Basic), zapewniając, że żądanie jest zdjęte ze stosu ze stosu, nawet jeśli zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób aktywowania <xref:System.Windows.Automation.CacheRequest> przy użyciu <xref:System.Windows.Automation.CacheRequest.Push%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element drzewa do użycia podczas buforowania.</summary>
        <value>Widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element drzewa. Domyślny widok jest <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe informacje na temat widoków [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element drzewa, zobacz [Przegląd drzewa automatyzacji interfejsu użytkownika](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> ma ustawioną wartość <xref:System.Windows.Automation.Automation.RawViewCondition> tak, że buforowanie jest wykonywane dla wszystkich elementów, niezależnie od tego, czy są one częścią widok zawartości lub widoku formantu.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy buforowanie jest wykonywane tylko dla głównego poddrzewa lub jego elementy podrzędne lub elementów podrzędnych.</summary>
        <value>Co najmniej jednego <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" />, lub <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. Wartość domyślna to <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres buforowanie jest w odniesieniu do obiektu lub obiektów jest pobierana, nie w odniesieniu do obiektu, na którym <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> lub <xref:System.Windows.Automation.AutomationElement.FindAll%2A> jest wywoływana. Zapoznaj się z przykładem.  
  
   
  
## Examples  
 W poniższym przykładzie element pola listy są uzyskiwane z elementu nadrzędnego okna podczas <xref:System.Windows.Automation.CacheRequest> jest aktywna i <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> jest <xref:System.Windows.Automation.TreeScope.Children>. Określone właściwości elementów podrzędnych (to znaczy elementy listy) są przechowywane w pamięci podręcznej i może zostać pobrany z <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> pola listy.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podjęto próbę ustawienia właściwości <see cref="F:System.Windows.Automation.TreeScope.Parent" /> lub <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>