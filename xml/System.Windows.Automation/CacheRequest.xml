<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3c850cfeae6b7ab2904469084e51f8568baab35" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69224061" /></Metadata><TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <TypeSignature Language="F#" Value="type CacheRequest = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa właściwości i wzorce, które struktura automatyzacji interfejsu użytkownika buforuje po <see cref="T:System.Windows.Automation.AutomationElement" /> uzyskaniu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pobieranie właściwości i wzorców przy [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] użyciu wymaga wywołań obejmujących wiele procesów, które mogą spowalniać wydajność. Buforowanie wartości właściwości i wzorców w operacji wsadowej pozwala zwiększyć wydajność aplikacji.  
  
 Utwórz nowe żądanie pamięci podręcznej przez wywołanie konstruktora klasy. Żądanie jest wypełniane przez powtórzone wywołania <xref:System.Windows.Automation.CacheRequest.Add%2A> metody.  
  
 Tylko jeden <xref:System.Windows.Automation.CacheRequest> może być aktywny. Istnieją dwa sposoby aktywacji żądania:  
  
-   Wywołaj <xref:System.Windows.Automation.CacheRequest.Activate%2A> żądanie. Spowoduje to wypchnięcie żądania na stosie, a żądanie jest zdjęte, gdy obiekt zostanie usunięty. Aby zapewnić możliwość usuwania nawet <xref:System.Windows.Automation.CacheRequest.Activate%2A> `using` w przypadku zgłoszenia wyjątku, użyj wartości zwracanej z bloku (`Using` w Visual Basic).  
  
-   Umieść żądanie na stosie wewnętrznym, wywołując <xref:System.Windows.Automation.CacheRequest.Push%2A>metodę. Aktywne jest tylko żądanie najwyższego poziomu na stosie i musi ono być następnym z nich usunięte ze stosu <xref:System.Windows.Automation.CacheRequest.Pop%2A>. Usuwanie żądanie dezaktywuje je.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]elementy uzyskane, gdy żądanie jest aktywne, mają zbuforowane wartości dla określonych właściwości i wzorców.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> do buforowania wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Push%2A> i <xref:System.Windows.Automation.CacheRequest.Pop%2A> do buforowania wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771456(v=vs.90)">Przykład FetchTimer</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Automation.CacheRequest" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest tworzony <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> , identyfikator jest dodawany jako właściwość domyślna do pamięci podręcznej. <xref:System.Windows.Automation.CacheRequest>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; IDisposable" Usage="cacheRequest.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia tę <see cref="T:System.Windows.Automation.CacheRequest" /> wartość jako aktywną specyfikację dla elementów, które są zwracane <see cref="T:System.Windows.Automation.AutomationElement" /> , gdy żądanie jest wymagane w tym samym wątku.</summary>
        <returns>Obiekt, który może być używany do usuwania <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystanie z tej metody jest zwykle preferowane przy <xref:System.Windows.Automation.CacheRequest.Push%2A> użyciu <xref:System.Windows.Automation.CacheRequest.Pop%2A> i jako środka aktywacji <xref:System.Windows.Automation.CacheRequest>. Obiekt jest wypychany do stosu, gdy <xref:System.Windows.Automation.CacheRequest.Activate%2A> jest wywoływany, a następnie zdjęte wyłączone, gdy zostanie usunięty. Aby zapewnić możliwość usuwania, umieść wartość zwracaną w `using` bloku (`Using` w Visual Basic).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> do buforowania wzorców i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje właściwość lub identyfikator wzorca do <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu <xref:System.Windows.Automation.CacheRequest> <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> obiektu identyfikator jest dodawany jako właściwość domyślna do pamięci podręcznej.  
  
 Dodanie obiektu, który znajduje się już w żądaniu pamięci podręcznej, nie ma żadnego wpływu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationPattern -&gt; unit" Usage="cacheRequest.Add pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Identyfikator określający wzorzec do buforowania.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationPattern" /> identyfikator do tego <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodanie wzorca, który znajduje się już w żądaniu pamięci podręcznej, nie ma żadnego wpływu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje <xref:System.Windows.Automation.CacheRequest> , jak utworzyć i dodać wzorzec do buforowania.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationProperty -&gt; unit" Usage="cacheRequest.Add property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Identyfikator określający wartość właściwości do buforowania.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationProperty" /> identyfikator do tego <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest tworzony <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> , identyfikator jest dodawany jako właściwość domyślna do pamięci podręcznej. <xref:System.Windows.Automation.CacheRequest>  
  
 Dodanie właściwości, która znajduje się już w żądaniu pamięci podręcznej, nie ma żadnego wpływu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje <xref:System.Windows.Automation.CacheRequest> , jak utworzyć i dodać właściwość do buforowania.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutomationElementMode : System.Windows.Automation.AutomationElementMode with get, set" Usage="System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy zwracane elementy powinny zawierać pełne odwołania do bazowego [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], czy tylko informacje w pamięci podręcznej.</summary>
        <value><see cref="F:System.Windows.Automation.AutomationElementMode.Full" />Jeśli zwracane elementy mają pełne odwołanie do bazowego [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]; w przeciwnym razie. <see cref="F:System.Windows.Automation.AutomationElementMode.None" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full>jest wartością domyślną i określa, że zwracane elementy zawierają pełne odwołanie do źródłowej [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None>Określa, że zwracane elementy nie mają odwołań do bazowego [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]i zawierają tylko informacje buforowane.  
  
 Niektóre operacje na elementach, <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>w <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>tym, <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, i, wymagają pełnych odwołań; próba wykonania tych operacji na elemencie, który nie ma żadnych wyników <xref:System.InvalidOperationException>w.  
  
 Korzystanie <xref:System.Windows.Automation.AutomationElementMode.None> z programu może być wydajniejsze, gdy są niezbędne tylko właściwości, ponieważ pozwala to uniknąć narzutu związanego z konfigurowaniem pełnych odwołań.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> jest ustawiona na <xref:System.Windows.Automation.AutomationElementMode.None>, z wynikiem, że dla pobranego obiektu są dostępne tylko buforowane właściwości i wzorce.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.CacheRequest" Usage="cacheRequest.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię tego <see cref="T:System.Windows.Automation.CacheRequest" />elementu.</summary>
        <returns>Modyfikowalna kopia bieżącego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Automation.CacheRequest" Usage="System.Windows.Automation.CacheRequest.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Automation.CacheRequest" /> Pobiera, który jest aktywny w bieżącym wątku.</summary>
        <value>Aktywny <see cref="T:System.Windows.Automation.CacheRequest" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; unit" Usage="cacheRequest.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa element aktywny <see cref="T:System.Windows.Automation.CacheRequest" /> z wewnętrznego stosu dla bieżącego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą <xref:System.Windows.Automation.CacheRequest.Pop%2A> metody można usunąć tylko obecnie aktywne żądanie. Próba usunięcia żądania, które nie jest bieżącym, spowoduje wystąpienie wyjątku.  
  
 O ile nie są zagnieżdżane żądania pamięci podręcznej, preferowanym <xref:System.Windows.Automation.CacheRequest.Activate%2A> rozwiązaniem jest umieszczenie żądania na stosie. Przyczyną jest to, że można użyć <xref:System.Windows.Automation.CacheRequest.Activate%2A> `using` wewnątrz bloku (`Using` w Visual Basic), upewniając się, że żądanie jest zdjęte na stosie, nawet jeśli zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak dezaktywować a <xref:System.Windows.Automation.CacheRequest> za pomocą. <xref:System.Windows.Automation.CacheRequest.Pop%2A>  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Podjęto próbę usunięcia żądania pamięci podręcznej, które nie było ostatnim z nich wypchnięte na stos.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberSignature Language="F#" Value="member this.Push : unit -&gt; unit" Usage="cacheRequest.Push " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Automation.CacheRequest" /> Umieszcza na wewnętrznym stosie stanu, udostępniając go jako aktywne żądanie w bieżącym wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na <xref:System.Windows.Automation.CacheRequest> stosie stanu można umieścić wiele obiektów. Żądania pamięci podręcznej muszą zostać usunięte ze stosu w kolejności, w jakiej zostały wypchnięte; w przeciwnym razie zostanie zgłoszony wyjątek.<xref:System.InvalidOperationException>  
  
 O ile nie są zagnieżdżane żądania pamięci podręcznej, preferowanym <xref:System.Windows.Automation.CacheRequest.Activate%2A> rozwiązaniem jest umieszczenie żądania na stosie. Przyczyną jest to, że można użyć <xref:System.Windows.Automation.CacheRequest.Activate%2A> `using` wewnątrz bloku (`Using` w Visual Basic), upewniając się, że żądanie jest zdjęte na stosie, nawet jeśli zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak aktywować <xref:System.Windows.Automation.CacheRequest> program przy użyciu polecenia. <xref:System.Windows.Automation.CacheRequest.Push%2A>  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TreeFilter : System.Windows.Automation.Condition with get, set" Usage="System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa elementu, który ma być używany podczas buforowania.</summary>
        <value>Widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa elementów. Widok domyślny to <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe informacje na temat widoków [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewa elementów, zobacz [Omówienie drzewa automatyzacji interfejsu użytkownika](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> jest ustawiona na <xref:System.Windows.Automation.Automation.RawViewCondition> tak, aby buforowanie zostało wykonane dla wszystkich elementów, bez względu na to, czy są one częścią widoku zawartości, czy do widoku sterowania.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberSignature Language="F#" Value="member this.TreeScope : System.Windows.Automation.TreeScope with get, set" Usage="System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy buforowanie jest wykonywane tylko dla katalogu głównego poddrzewa, czy również dla jego elementów podrzędnych lub podrzędnych.</summary>
        <value>Jeden lub więcej z <see cref="F:System.Windows.Automation.TreeScope.Element" /> <see cref="F:System.Windows.Automation.TreeScope.Children" /> <see cref="F:System.Windows.Automation.TreeScope.Descendants" />,,, lub. <see cref="F:System.Windows.Automation.TreeScope.Subtree" /> Wartość domyślna to <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres buforowania znajduje się w odniesieniu do obiektu lub obiektów, które są pobierane, a nie w odniesieniu do <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> obiektu <xref:System.Windows.Automation.AutomationElement.FindAll%2A> , w którym lub jest wywoływana. Zapoznaj się z przykładem.  
  
   
  
## Examples  
 W poniższym przykładzie element pola listy jest uzyskiwany z nadrzędnego elementu okna, gdy <xref:System.Windows.Automation.CacheRequest> jest aktywny i <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> ma <xref:System.Windows.Automation.TreeScope.Children>wartość. Określone właściwości elementów podrzędnych (czyli elementów listy) są przechowywane w pamięci podręcznej i mogą być pobierane z <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> pola listy.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podjęto próbę ustawienia właściwości na <see cref="F:System.Windows.Automation.TreeScope.Parent" /> lub. <see cref="F:System.Windows.Automation.TreeScope.Ancestors" /></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
  </Members>
</Type>
