<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d6a0e1374a0ca76ecf784ab704906bd584228fb4" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46628104" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <TypeSignature Language="F#" Value="type CacheRequest = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa właściwości i wzorce struktura automatyzacji interfejsu użytkownika buforuje, kiedy <see cref="T:System.Windows.Automation.AutomationElement" /> uzyskuje się.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trwa pobieranie właściwości i wzorce w [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] wymaga wywołania między procesami, które można wolno dół wydajności. Przez buforowanie wartości ich właściwości i wzorców w operacji zbiorczej, może zwiększyć wydajność aplikacji.  
  
 Utwórz nowe żądanie pamięci podręcznej przez wywołanie konstruktora klasy. Żądanie jest wypełniana przez wielokrotnego wywołania <xref:System.Windows.Automation.CacheRequest.Add%2A> metody.  
  
 Tylko jeden <xref:System.Windows.Automation.CacheRequest> może być aktywne. Istnieją dwa sposoby aktywacji na żądanie:  
  
-   Wywołaj <xref:System.Windows.Automation.CacheRequest.Activate%2A> na żądanie. To wypycha żądanie na stosie i żądanie jest zdejmowany, po usunięciu obiektu. Aby zapewnić usuwania, nawet wtedy, gdy wyjątek jest zgłaszany, użyj wartości zwracanej z <xref:System.Windows.Automation.CacheRequest.Activate%2A> w ramach `using` bloku (`Using` w języku Visual Basic).  
  
-   Umieszczanie żądania na wewnętrznym stosie, wywołując <xref:System.Windows.Automation.CacheRequest.Push%2A>. Tylko najwyższego poziomu żądanie na stosie jest aktywne, a musi być kolejny usuwany ze stosu przez <xref:System.Windows.Automation.CacheRequest.Pop%2A>. Usuwanie żądania dezaktywuje.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] elementy uzyskane, gdy żądanie jest aktywne będą mieć buforowane wartości dla właściwości i określonych wzorców.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> wzorce pamięci podręcznej i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Push%2A> i <xref:System.Windows.Automation.CacheRequest.Pop%2A> wzorce pamięci podręcznej i właściwości.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771456(v=vs.90)">Przykładowe FetchTimer</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Automation.CacheRequest" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> utworzeniu <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawany jako domyślna właściwość do pamięci podręcznej.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; IDisposable" Usage="cacheRequest.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia to <see cref="T:System.Windows.Automation.CacheRequest" /> jako aktywny specyfikacji dla elementów, które są zwracane, kiedy <see cref="T:System.Windows.Automation.AutomationElement" /> jest wymagane w tym samym wątku.</summary>
        <returns>Obiekt, który może służyć do usunięcia <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ta zazwyczaj zalecane jest stosowanie <xref:System.Windows.Automation.CacheRequest.Push%2A> i <xref:System.Windows.Automation.CacheRequest.Pop%2A> jako sposób uaktywniania <xref:System.Windows.Automation.CacheRequest>. Obiekt są wypychane na stosie po <xref:System.Windows.Automation.CacheRequest.Activate%2A> jest wywoływana, a następnie zabrany po usunięciu. Aby upewnić się, usuwania, umieść zwracanej wartości w `using` bloku (`Using` w języku Visual Basic).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> wzorce pamięci podręcznej i właściwości.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje właściwość lub wzorzec identyfikatora do <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> obiekt zostanie utworzony, <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawany jako domyślna właściwość do pamięci podręcznej.  
  
 Dodawanie obiektu, który jest już żądanie pamięci podręcznej nie ma znaczenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationPattern -&gt; unit" Usage="cacheRequest.Add pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Identyfikator określania wzorzec na potrzeby pamięci podręcznej.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationPattern" /> to identyfikator <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodawanie wzorca, który jest już żądanie pamięci podręcznej nie ma znaczenia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak skonstruować <xref:System.Windows.Automation.CacheRequest> i dodawanie wzorca przechowywanie w pamięci podręcznej.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationProperty -&gt; unit" Usage="cacheRequest.Add property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Identyfikator, określając wartość właściwości do pamięci podręcznej.</param>
        <summary>Dodaje określony <see cref="T:System.Windows.Automation.AutomationProperty" /> to identyfikator <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Automation.CacheRequest> utworzeniu <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identyfikator jest dodawany jako domyślna właściwość do pamięci podręcznej.  
  
 Dodawanie właściwości żądanie pamięci podręcznej nie ma znaczenia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak skonstruować <xref:System.Windows.Automation.CacheRequest> i Dodaj właściwość, która ma być buforowane.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> Jest aktywny.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutomationElementMode : System.Windows.Automation.AutomationElementMode with get, set" Usage="System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy zwrócone elementy może zawierać pełnej odwołania do bazowego [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], lub tylko buforowanych informacji.</summary>
        <value>
          <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> zwrócone elementy mają pełną dokumentację źródłowy [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]; w przeciwnym razie <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> Wartość domyślna to i określa, że zwracane elementy zawierają pełną dokumentację źródłowy [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None> Określa, że zwracane elementy miało żadnego odwołania do bazowego [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]i zawierać tylko buforowanych informacji.  
  
 Niektóre operacje na elementach, w tym <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, i <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, wymagają pełną dokumentację, próby wykonania tych na element, który nie ma żadnego skutkuje <xref:System.InvalidOperationException>.  
  
 Za pomocą <xref:System.Windows.Automation.AutomationElementMode.None> może być bardziej efektywne, gdy są potrzebne tylko właściwości, takie rozwiązanie pomaga uniknąć obciążenie związane z konfigurowaniem pełne odwołań.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> ustawiono <xref:System.Windows.Automation.AutomationElementMode.None>, z wynikiem, tylko pamięci podręcznej właściwości i wzorce są dostępne dla obiektu pobrane.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.CacheRequest" Usage="cacheRequest.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <returns>Można modyfikować kopię bieżącego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Automation.CacheRequest" Usage="System.Windows.Automation.CacheRequest.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Automation.CacheRequest" /> , który jest aktywny w bieżącym wątku.</summary>
        <value>Aktywny <see cref="T:System.Windows.Automation.CacheRequest" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; unit" Usage="cacheRequest.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa aktywne <see cref="T:System.Windows.Automation.CacheRequest" /> z wewnętrznego stosu dla bieżącego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko aktualnie aktywne żądanie może zostać usunięty przy użyciu <xref:System.Windows.Automation.CacheRequest.Pop%2A> metody. Próba usunięcia żądania, będący nie bieżącego jedne wyniki wyjątek.  
  
 O ile nie są zagnieżdżania żądań pamięci podręcznej, to lepiej jest używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> umieszcza żądanie na stosie. Przyczyną jest to, że można użyć <xref:System.Windows.Automation.CacheRequest.Activate%2A> w ramach `using` bloku (`Using` w języku Visual Basic), zapewniając, że żądanie zostanie zdjęte ze stosu, nawet wtedy, gdy wyjątek jest zgłaszany.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak dezaktywować <xref:System.Windows.Automation.CacheRequest> przy użyciu <xref:System.Windows.Automation.CacheRequest.Pop%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Próbowano usunąć żądanie pamięci podręcznej, który nie był ostatni wypychane na stosie.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberSignature Language="F#" Value="member this.Push : unit -&gt; unit" Usage="cacheRequest.Push " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umieszcza <see cref="T:System.Windows.Automation.CacheRequest" /> na stosie stanu wewnętrznego, dzięki czemu aktywne żądanie dla bieżącego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele <xref:System.Windows.Automation.CacheRequest> obiektów, które można umieścić na stosie stanu. Żądania pamięci podręcznej muszą zostać usunięte z stosu w kolejności, w której zostały one przekazane. w przeciwnym razie <xref:System.InvalidOperationException> zgłaszany jest wyjątek.  
  
 O ile nie są zagnieżdżania żądań pamięci podręcznej, to lepiej jest używać <xref:System.Windows.Automation.CacheRequest.Activate%2A> umieszcza żądanie na stosie. Przyczyną jest to, że można użyć <xref:System.Windows.Automation.CacheRequest.Activate%2A> w ramach `using` bloku (`Using` w języku Visual Basic), zapewniając, że żądanie zostanie zdjęte ze stosu, nawet wtedy, gdy wyjątek jest zgłaszany.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak aktywować <xref:System.Windows.Automation.CacheRequest> przy użyciu <xref:System.Windows.Automation.CacheRequest.Push%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TreeFilter : System.Windows.Automation.Condition with get, set" Usage="System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewo elementów do użycia podczas buforowania.</summary>
        <value>Widok [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewo elementów. Widok domyślny to <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać dodatkowe informacje na temat widoków [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] drzewo elementów, zobacz [Przegląd drzewa automatyzacji interfejsu użytkownika](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> ustawiono <xref:System.Windows.Automation.Automation.RawViewCondition> tak, że buforowanie jest wykonywane dla wszystkich elementów, niezależnie od tego, czy są one częścią zawartości widoku lub w widoku formantu.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberSignature Language="F#" Value="member this.TreeScope : System.Windows.Automation.TreeScope with get, set" Usage="System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy pamięć podręczna jest wykonywane tylko w przypadku głównego poddrzewo lub jego elementy podrzędne lub elementy podrzędne.</summary>
        <value>Co najmniej jeden <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" />, lub <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. Wartość domyślna to <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zakres pamięci podręcznej w odniesieniu do obiektu lub obiektów są pobierane, nie w odniesieniu do obiektu, na którym <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> lub <xref:System.Windows.Automation.AutomationElement.FindAll%2A> jest wywoływana. Zobacz przykład.  
  
   
  
## Examples  
 W poniższym przykładzie element pola listy jest uzyskiwana z elementu nadrzędnego okna podczas <xref:System.Windows.Automation.CacheRequest> jest aktywny i <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> jest <xref:System.Windows.Automation.TreeScope.Children>. Określone właściwości elementów podrzędnych (czyli elementów listy) są przechowywane w pamięci podręcznej i mogą być pobierane z <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> pola listy.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Próbowano ustawić dla właściwości <see cref="F:System.Windows.Automation.TreeScope.Parent" /> lub <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Buforowanie w klientach automatyzacji interfejsu użytkownika</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Używanie buforowania w automatyzacji interfejsu użytkownika</related>
      </Docs>
    </Member>
  </Members>
</Type>