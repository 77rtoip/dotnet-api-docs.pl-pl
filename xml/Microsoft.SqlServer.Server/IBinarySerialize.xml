<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30431016" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia implementację niestandardowych dla typu zdefiniowanego przez użytkownika (UDT) i zdefiniowanych przez użytkownika agregacji serializacji i deserializacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy danych zdefiniowane przez użytkownika (UDTs) i agregacje zdefiniowane przez użytkownika są wymagane do zdefiniowania formacie magazynu, które mogą być <xref:Microsoft.SqlServer.Server.Format>.`Native` lub <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` zezwala programowi SQL Server do obsługi serializacji i deserializacji automatycznie, ale format ma ograniczenia typu typów, które może obsługiwać. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` Umożliwia typy danych zdefiniowane przez użytkownika która agreguje obsługują własną serializację. Typy definiowane przez użytkownika i wartości zagregowanych muszą być oznaczone <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` w `SqlUserDefinedType` lub `SqlUserDefinedAggregate` atrybutu i musi implementować <xref:Microsoft.SqlServer.Server.IBinarySerialize> interfejsu.  
  
 Pamiętaj, że nawet w przypadku serializacji niestandardowej całkowity rozmiar każde wystąpienie musi być w obszarze maksymalny dozwolony limit, obecnie 8000 bajtów.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <see cref="T:System.IO.BinaryReader" /> Strumienia, z którego deserializowany jest obiekt.</param>
        <summary>Generuje typu zdefiniowanego przez użytkownika (UDT) lub agregacji zdefiniowanej przez użytkownika na podstawie jego postaci binarnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> Metody musi odtworzenia obiektu przy użyciu informacji zapisanych przez <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład przedstawia implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody UDT, który używa <xref:System.IO.BinaryReader> można zdeserializować UDT utrwalonych wcześniej. W tym przykładzie przyjęto założenie, że UDT ma dwie właściwości danych: `StringValue` i `DoubleValue`.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <see cref="T:System.IO.BinaryWriter" /> Strumień, do którego serializowany jest UDT lub agregacji zdefiniowanej przez użytkownika.</param>
        <summary>Konwertuje typu zdefiniowanego przez użytkownika (UDT) lub agregacji zdefiniowanej przez użytkownika na jego format binarny, dzięki czemu może zostać utrwalona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapisywanie informacji wystarczających do strumienia danych binarnych, aby umożliwić <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody do odtworzenia z UDT lub agregacji zdefiniowanej przez użytkownika.  
  
   
  
## Examples  
 Poniższy przykład przedstawia implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody UDT, który używa <xref:System.IO.BinaryWriter> do serializacji UDT w formacie binarnym zdefiniowane przez użytkownika. Dopełnienie znak null ma na celu upewnij się, że wartość ciągu jest całkowicie oddzielony od podwójna wartość tak, aby jeden UDT jest porównywany z innego w kodzie języka Transact-SQL, bajtów ciągu są porównywane bajtów ciągu i bajtów podwójne są porównywane podwójne Liczba bajtów.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>