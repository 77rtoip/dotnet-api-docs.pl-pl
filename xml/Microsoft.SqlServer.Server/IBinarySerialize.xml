<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4574ccb9640d4f079497aff5e4795090602a2983" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49134595" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia implementację niestandardową dla typu zdefiniowanego przez użytkownika (UDT) i zdefiniowanych przez użytkownika agregacji serializacji i deserializacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika (UDTs) i agregatów zdefiniowanych przez użytkownika są wymagane do zdefiniowania formacie magazynu, który może być <xref:Microsoft.SqlServer.Server.Format>.`Native` lub <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` zezwala programowi SQL Server do obsługi serializacji i deserializacji automatycznie, ale format ma ograniczeń dotyczących rodzaju typu, która może obsługiwać. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` zezwala na typy zdefiniowane przez użytkownika i agregacji, obsługują własną serializację. Typy zdefiniowane przez użytkownika i agregacje nie muszą być oznaczone <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` w `SqlUserDefinedType` lub `SqlUserDefinedAggregate` oraz atrybut musi implementować <xref:Microsoft.SqlServer.Server.IBinarySerialize> interfejsu.  
  
 Należy pamiętać, że nawet w przypadku niestandardowej serializacji, całkowity rozmiar każdego wystąpienia musi być w obszarze maksymalny dopuszczalny limit, obecnie 8000 bajtów.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <see cref="T:System.IO.BinaryReader" /> Przesyłania strumieniowego, z którego deserializowany jest.</param>
        <summary>Generuje typ zdefiniowany przez użytkownika (UDT) lub Agregacja zdefiniowana przez użytkownika na podstawie jego formy binarnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> Metody muszą odtworzenia obiektu przy użyciu informacji zapisanych przez <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metoda UDT, który używa <xref:System.IO.BinaryReader> można zdeserializować uprzednio utrwalonego UDT. W tym przykładzie założono, że UDT ma dwie właściwości danych: `StringValue` i `DoubleValue`.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <see cref="T:System.IO.BinaryWriter" /> Strumień, do którego serializowany jest UDT lub agregacji zdefiniowanej przez użytkownika.</param>
        <summary>Konwertuje typ zdefiniowany przez użytkownika (UDT) lub Agregacja zdefiniowana przez użytkownika na jego format binarny, dzięki czemu może zostać utrwalona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapisywanie informacji wystarczających do strumienia danych binarnych, aby umożliwić <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody do odtworzenia z UDT lub Agregacja zdefiniowana przez użytkownika.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metoda UDT, który używa <xref:System.IO.BinaryWriter> serializować UDT w formacie binarnym zdefiniowanych przez użytkownika. Dopełnienie znak null ma na celu upewnij się, że wartość ciągu jest całkowicie oddzielony od podwójna wartość tak, aby jeden UDT jest porównywana do innego w kodzie języka Transact-SQL, bajty ciągu są porównywane bajty ciągu i bajtów podwójne są porównywane z double Liczba bajtów.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>