<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef8c011695a45cf43197dda699d3ad988ba9a430" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69303753" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="279fe-101">Zawiera implementację niestandardową dla typu zdefiniowanego przez użytkownika (UDT) oraz serializacji agregacji zagregowanej i deserializacji zdefiniowanej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="279fe-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="279fe-102">Typy zdefiniowane przez użytkownika (UDTs) i agregacje zdefiniowane przez użytkownika są wymagane do zdefiniowania formatu magazynu, który może mieć wartość <xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="279fe-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="279fe-103">lub <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span><span class="sxs-lookup"><span data-stu-id="279fe-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="279fe-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="279fe-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="279fe-105">zezwala SQL Server na automatyczne obsługiwanie serializacji i deserializacji, ale format ma ograniczenia dotyczące rodzaju typów, które może obsłużyć.</span><span class="sxs-lookup"><span data-stu-id="279fe-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="279fe-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="279fe-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="279fe-107">pozwala na obsługę własnych serializacji typów i agregacji zdefiniowanych przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="279fe-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="279fe-108">Typy i agregacje zdefiniowane przez użytkownika muszą być oznaczone przy <xref:Microsoft.SqlServer.Server.Format>użyciu.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="279fe-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="279fe-109">w atrybucie `SqlUserDefinedAggregate` <xref:Microsoft.SqlServer.Server.IBinarySerialize> lub i musi implementować interfejs. `SqlUserDefinedType`</span><span class="sxs-lookup"><span data-stu-id="279fe-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="279fe-110">Należy pamiętać, że nawet w przypadku serializowania niestandardowego łączny rozmiar każdego wystąpienia musi być w maksymalnym dozwolonym limicie, obecnie 8000 bajtów.</span><span class="sxs-lookup"><span data-stu-id="279fe-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="279fe-111"><see cref="T:System.IO.BinaryReader" /> Strumień, z którego jest deserializowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="279fe-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="279fe-112">Generuje typ zdefiniowany przez użytkownika (UDT) lub wartość zagregowaną zdefiniowaną przez użytkownika w postaci binarnej.</span><span class="sxs-lookup"><span data-stu-id="279fe-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="279fe-113">Metoda musi ponownie stanowić Obiekt przy użyciu informacji pisanych <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> przez metodę. <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A></span><span class="sxs-lookup"><span data-stu-id="279fe-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="279fe-114">Poniższy przykład pokazuje implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody UDT, która <xref:System.IO.BinaryReader> używa do deserializacji wcześniej utrwalonego UDT.</span><span class="sxs-lookup"><span data-stu-id="279fe-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="279fe-115">W tym przykładzie przyjęto założenie, że UDT ma `StringValue` dwie `DoubleValue`właściwości danych: i.</span><span class="sxs-lookup"><span data-stu-id="279fe-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="279fe-116"><see cref="T:System.IO.BinaryWriter" /> Strumień, do którego jest serializowana wartość zagregowana lub agregacja zdefiniowana przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="279fe-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span></span></param>
        <summary><span data-ttu-id="279fe-117">Konwertuje typ zdefiniowany przez użytkownika (UDT) lub wartość zagregowaną zdefiniowaną przez użytkownika na format binarny, dzięki czemu może być utrwalony.</span><span class="sxs-lookup"><span data-stu-id="279fe-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="279fe-118">Zapisz wystarczające informacje do strumienia binarnego, aby umożliwić <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metodzie odtworzenia agregacji zdefiniowanej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="279fe-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="279fe-119">Poniższy przykład pokazuje implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody UDT, która <xref:System.IO.BinaryWriter> używa do serializacji UDT w formacie binarnym zdefiniowanym przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="279fe-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="279fe-120">Celem dopełnienia znaku null jest upewnienie się, że wartość ciągu jest całkowicie oddzielona od wartości podwójnej, dzięki czemu jeden UDT jest porównywany z innym w kodzie Transact-SQL, bajty ciągu są porównywane z bajtami ciągu, a podwójne bajty są porównywane z Double szybkość.</span><span class="sxs-lookup"><span data-stu-id="279fe-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
