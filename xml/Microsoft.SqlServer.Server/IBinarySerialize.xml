<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef8c011695a45cf43197dda699d3ad988ba9a430" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69303753" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zawiera implementację niestandardową dla typu zdefiniowanego przez użytkownika (UDT) oraz serializacji agregacji zagregowanej i deserializacji zdefiniowanej przez użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy zdefiniowane przez użytkownika (UDTs) i agregacje zdefiniowane przez użytkownika są wymagane do zdefiniowania formatu magazynu, który może mieć wartość <xref:Microsoft.SqlServer.Server.Format>.`Native` lub <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` zezwala SQL Server na automatyczne obsługiwanie serializacji i deserializacji, ale format ma ograniczenia dotyczące rodzaju typów, które może obsłużyć. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` pozwala na obsługę własnych serializacji typów i agregacji zdefiniowanych przez użytkownika. Typy i agregacje zdefiniowane przez użytkownika muszą być oznaczone przy <xref:Microsoft.SqlServer.Server.Format>użyciu.`UserDefined` w atrybucie `SqlUserDefinedAggregate` <xref:Microsoft.SqlServer.Server.IBinarySerialize> lub i musi implementować interfejs. `SqlUserDefinedType`  
  
 Należy pamiętać, że nawet w przypadku serializowania niestandardowego łączny rozmiar każdego wystąpienia musi być w maksymalnym dozwolonym limicie, obecnie 8000 bajtów.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r"><see cref="T:System.IO.BinaryReader" /> Strumień, z którego jest deserializowany obiekt.</param>
        <summary>Generuje typ zdefiniowany przez użytkownika (UDT) lub wartość zagregowaną zdefiniowaną przez użytkownika w postaci binarnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda musi ponownie stanowić Obiekt przy użyciu informacji pisanych <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> przez metodę. <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody UDT, która <xref:System.IO.BinaryReader> używa do deserializacji wcześniej utrwalonego UDT. W tym przykładzie przyjęto założenie, że UDT ma `StringValue` dwie `DoubleValue`właściwości danych: i.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w"><see cref="T:System.IO.BinaryWriter" /> Strumień, do którego jest serializowana wartość zagregowana lub agregacja zdefiniowana przez użytkownika.</param>
        <summary>Konwertuje typ zdefiniowany przez użytkownika (UDT) lub wartość zagregowaną zdefiniowaną przez użytkownika na format binarny, dzięki czemu może być utrwalony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapisz wystarczające informacje do strumienia binarnego, aby umożliwić <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metodzie odtworzenia agregacji zdefiniowanej przez użytkownika.  
  
   
  
## Examples  
 Poniższy przykład pokazuje implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody UDT, która <xref:System.IO.BinaryWriter> używa do serializacji UDT w formacie binarnym zdefiniowanym przez użytkownika. Celem dopełnienia znaku null jest upewnienie się, że wartość ciągu jest całkowicie oddzielona od wartości podwójnej, dzięki czemu jeden UDT jest porównywany z innym w kodzie Transact-SQL, bajty ciągu są porównywane z bajtami ciągu, a podwójne bajty są porównywane z Double szybkość.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
