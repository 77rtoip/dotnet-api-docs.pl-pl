<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26cfc0ce1aca35aabd501d4d291b309c3488739b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36729783" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1452d-101">Udostępnia implementację niestandardowych dla typu zdefiniowanego przez użytkownika (UDT) i zdefiniowanych przez użytkownika agregacji serializacji i deserializacji.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1452d-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1452d-102">Typy danych zdefiniowane przez użytkownika (UDTs) i agregacje zdefiniowane przez użytkownika są wymagane do zdefiniowania formacie magazynu, które mogą być <xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="1452d-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="1452d-103">lub <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span><span class="sxs-lookup"><span data-stu-id="1452d-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="1452d-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="1452d-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="1452d-105">zezwala programowi SQL Server do obsługi serializacji i deserializacji automatycznie, ale format ma ograniczenia typu typów, które może obsługiwać.</span><span class="sxs-lookup"><span data-stu-id="1452d-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="1452d-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="1452d-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="1452d-107">Umożliwia typy danych zdefiniowane przez użytkownika która agreguje obsługują własną serializację.</span><span class="sxs-lookup"><span data-stu-id="1452d-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="1452d-108">Typy definiowane przez użytkownika i wartości zagregowanych muszą być oznaczone <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="1452d-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="1452d-109">w `SqlUserDefinedType` lub `SqlUserDefinedAggregate` atrybutu i musi implementować <xref:Microsoft.SqlServer.Server.IBinarySerialize> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="1452d-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="1452d-110">Pamiętaj, że nawet w przypadku serializacji niestandardowej całkowity rozmiar każde wystąpienie musi być w obszarze maksymalny dozwolony limit, obecnie 8000 bajtów.</span><span class="sxs-lookup"><span data-stu-id="1452d-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="1452d-111">
            <see cref="T:System.IO.BinaryReader" /> Strumienia, z którego deserializowany jest obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1452d-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1452d-112">Generuje typu zdefiniowanego przez użytkownika (UDT) lub agregacji zdefiniowanej przez użytkownika na podstawie jego postaci binarnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1452d-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1452d-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> Metody musi odtworzenia obiektu przy użyciu informacji zapisanych przez <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1452d-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1452d-114">Poniższy przykład przedstawia implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody UDT, który używa <xref:System.IO.BinaryReader> można zdeserializować UDT utrwalonych wcześniej.</span><span class="sxs-lookup"><span data-stu-id="1452d-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="1452d-115">W tym przykładzie przyjęto założenie, że UDT ma dwie właściwości danych: `StringValue` i `DoubleValue`.</span><span class="sxs-lookup"><span data-stu-id="1452d-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="1452d-116">
            <see cref="T:System.IO.BinaryWriter" /> Strumień, do którego serializowany jest UDT lub agregacji zdefiniowanej przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1452d-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1452d-117">Konwertuje typu zdefiniowanego przez użytkownika (UDT) lub agregacji zdefiniowanej przez użytkownika na jego format binarny, dzięki czemu może zostać utrwalona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1452d-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1452d-118">Zapisywanie informacji wystarczających do strumienia danych binarnych, aby umożliwić <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> metody do odtworzenia z UDT lub agregacji zdefiniowanej przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="1452d-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1452d-119">Poniższy przykład przedstawia implementację <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> metody UDT, który używa <xref:System.IO.BinaryWriter> do serializacji UDT w formacie binarnym zdefiniowane przez użytkownika.</span><span class="sxs-lookup"><span data-stu-id="1452d-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="1452d-120">Dopełnienie znak null ma na celu upewnij się, że wartość ciągu jest całkowicie oddzielony od podwójna wartość tak, aby jeden UDT jest porównywany z innego w kodzie języka Transact-SQL, bajtów ciągu są porównywane bajtów ciągu i bajtów podwójne są porównywane podwójne Liczba bajtów.</span><span class="sxs-lookup"><span data-stu-id="1452d-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>