<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eacd1a5ec4707b956c3ddb1c43f6451deba47c3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69303564" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zezwala na zarządzane procedury składowane działające w procesie w bazie danych SQL Server, aby zwracały wyniki z powrotem do obiektu wywołującego. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie tej klasy jest udostępniane zarządzanym procedurom składowanym za pomocą <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> właściwości <xref:Microsoft.SqlServer.Server.SqlContext> klasy.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> do wybierania wierszy ze źródła danych w procedurze składowanej. W przykładzie jest używana <xref:Microsoft.SqlServer.Server.SqlPipe> do wykonywania polecenia i wysyłania wyników z powrotem do klienta.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Obiekt <see cref="T:System.Data.SqlClient.SqlCommand" /> , który ma zostać wykonany.</param>
        <summary>Wykonuje polecenie przesłane jako parametr i wysyła wyniki do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz żadnych rzeczywistych wyników inne komunikaty i błędy są również wysyłane bezpośrednio do klienta.  
  
 Parametry wyjściowe i zwracane wartości nie są wysyłane do klienta; są one dostępne dla obiektu wywołującego za pomocą kolekcji Parameters obiektu Command.  
  
 Jeśli polecenie nie jest powiązane z połączeniem w procesie, <xref:System.InvalidOperationException> zostanie zgłoszony. Ta metoda nie jest obsługiwana w przypadku poleceń związanych z połączeniami poza procesem.  
  
 W przypadku wystąpienia błędów w <xref:System.Data.SqlClient.SqlCommand> przesłanym obiekcie wyjątki są wysyłane do potoku, ale kopia jest wysyłana również do wywoływania kodu zarządzanego. Jeśli wywołujący kod nie przechwytuje wyjątku, propaguje stos do kodu Transact-SQL i pojawi się w danych wyjściowych dwa razy. Jeśli wywoływany kod przechwytuje wyjątek, odbiorca potoku nadal zobaczy błąd, ale nie będzie zduplikowany błąd.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> do wybierania wierszy ze źródła danych w procedurze składowanej. W przykładzie jest używana <xref:Microsoft.SqlServer.Server.SqlPipe> do wykonywania polecenia i wysyłania wyników z powrotem do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.InvalidOperationException">Ta metoda nie jest obsługiwana w przypadku poleceń związanych z połączeniami poza procesem.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> jest w trybie wysyłania pojedynczych zestawów wyników z powrotem do klienta. Ta właściwość jest tylko do odczytu.</summary>
        <value><see langword="true" />Jeśli metoda została wywołana <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> i jest w trybie wysyłania pojedynczych zestawów wyników z powrotem do klienta; w przeciwnym razie <see langword="false" />. <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła wyniki bezpośrednio do klienta lub bieżącego użytkownika wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda **send** wysyła dane bezpośrednio do klienta lub obiektu wywołującego. Zwykle jest to klient korzystający z metody potoku, ale **** w przypadku zagnieżdżonych procedur składowanych CLR, konsument wyjściowy może być również procedurą składowaną. Na przykład wywołania <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Procedure1 z tekstem polecenia "EXEC Procedure2". Procedure2 jest również zarządzaną procedurą składowaną. Jeśli Procedure2 teraz wywołuje <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, wiersz jest wysyłany do czytnika Procedure1's, a nie do klienta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Zestaw wyników z pojedynczym wierszem wysłany do klienta: <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiekt.</param>
        <summary>Wysyła zestaw wyników z jednym wierszem bezpośrednio do klienta lub bieżącego użytkownika wyjściowego.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> Ma<see langword="null" />wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Zestaw wyników multirow do wysłania do klienta: <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiekt.</param>
        <summary>Wysyła zestaw wyników programu multirow bezpośrednio do klienta lub bieżącego użytkownika wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDataReader> Jeśli obiekt przekazywany jako parametr ma ukryte kolumny, te kolumny nie są propagowane do zestawu wyników wysyłanego do klienta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> Ma<see langword="null" />wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Ciąg komunikatu, który ma zostać wysłany do klienta.</param>
        <summary>Wysyła wiadomość ciągową bezpośrednio do klienta lub bieżącego użytkownika wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg komunikatu jest wysyłany jako komunikat informacyjny do klienta. Aplikacje klienckie mogą słuchać komunikatów przy użyciu różnych mechanizmów, w zależności od interfejsu programowania aplikacji (API) dostępu do danych. Na przykład jeśli klient korzysta z programu ADO.NET, komunikaty są przesyłane przez <xref:System.Data.SqlClient.SqlConnection.InfoMessage> zdarzenie.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> metody do wysyłania ciągu komunikatu bezpośrednio do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="message" /> Jest dłuższa niż 4 000 znaków.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> Ma<see langword="null" />wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oznacza koniec zestawu wyników i zwraca <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> wystąpienie z powrotem do stanu początkowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane mogą wysyłać zestawy wyników do klientów, którzy nie wdrażają programu <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda, wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, zezwala na procedury składowane do wysyłania niestandardowych zestawów wyników do klienta programu.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowe <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>i. Przykład oznacza początek zestawu wyników przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowymi danymi z powrotem do klienta <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> przy użyciu metody i oznacza koniec zestawu wyników przy <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> użyciu metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> Metoda nie została wcześniej wywołana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> Obiekt z wartościami kolumn dla wiersza, który ma zostać wysłany do klienta. Schemat rekordu musi być zgodny ze schematem opisanym w metadanych <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> przekazaną <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> do metody.</param>
        <summary>Wysyła z powrotem pojedynczy wiersz danych do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane mogą wysyłać zestawy wyników do klientów, którzy nie wdrażają programu <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda, wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, zezwala na procedury składowane do wysyłania niestandardowych zestawów wyników do klienta programu.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Metoda wysyła z powrotem pojedynczy wiersz danych do klienta. Wiersze można następnie zwrócić do obiektu wywołującego, wywołując <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>jeden raz dla każdego wysyłanego wiersza. Po wysłaniu wszystkich wierszy wywołanie <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metody jest wymagane do oznaczenia końca zestawu wyników.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowe <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>i. Przykład oznacza początek zestawu wyników przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowymi danymi z powrotem do klienta <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> przy użyciu metody i oznacza koniec zestawu wyników przy <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> użyciu metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> Metoda nie została wcześniej wywołana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> Obiekt, z którego metadane są wyodrębniane i używane do opisywania zestawu wyników.</param>
        <summary>Oznacza początek zestawu wyników do wysłania do klienta i używa parametru rekordu do konstruowania metadanych opisujących zestaw wyników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane mogą wysyłać zestawy wyników do klientów, którzy nie wdrażają programu <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda, wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, zezwala na procedury składowane do wysyłania niestandardowych zestawów wyników do klienta programu.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Metoda oznacza początek zestawu wyników i używa parametru rekordu do konstruowania metadanych opisujących zestaw wyników. Wszystkie kolejne wiersze, wysyłane przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metody, muszą być zgodne z definicją metadanych.  
  
 Należy pamiętać, że <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>po wywołaniu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metody <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> tylko i można ją wywołać. Każda inna metoda w tym samym wystąpieniu <xref:Microsoft.SqlServer.Server.SqlPipe> <xref:System.InvalidOperationException>zgłasza. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>przywraca <xref:Microsoft.SqlServer.Server.SqlPipe> początkowy stan, w którym można wywołać inne metody.  
  
 Po powrocie kontroli do języka Transact-SQL z wykonywania środowiska CLR nie należy próbować używać zmiennej statycznej ani lokalnej zainicjowanej dla pamięci CLR. Na przykład nie należy przechowywać wystąpienia klasy w procesie, na przykład `SQLDataRecord`, która będzie używana po powrocie kontroli z CLR. Jedynym wyjątkiem jest `SQLMetaData` Klasa w procesie.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowe <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData>i. Przykład oznacza początek zestawu wyników przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowymi danymi z powrotem do klienta <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> przy użyciu metody i oznacza koniec zestawu wyników przy <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> użyciu metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> Ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.ArgumentException">Nie <paramref name="record" /> ma kolumn lub nie została zainicjowana.</exception>
        <exception cref="T:System.InvalidOperationException">Metoda inna niż <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> lub <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> została wywołana po <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metodzie.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>
