<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f715fd742165d7d4ffbc7cb2e9be3f2dfa6d157e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37715751" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia zarządzanym procedur składowanych działa w procesie w bazie danych programu SQL Server w celu zwracania wyników z powrotem do obiektu wywołującego. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie tej klasy jest udostępniany zarządzanej procedury przechowywane za pomocą <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> właściwość <xref:Microsoft.SqlServer.Server.SqlContext> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> celu wybrania wierszy ze źródła danych w procedurze składowanej. Następnie w przykładzie <xref:Microsoft.SqlServer.Server.SqlPipe> można wykonać polecenia i wysyłać wyniki do klienta.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> Obiektu do wykonania.</param>
        <summary>Wykonuje polecenie przekazany jako parametr, a następnie wysyła wyniki do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz wszystkie rzeczywiste wyniki inne wiadomości i błędy są również wysyłane bezpośrednio do klienta.  
  
 Dane wyjściowe parametrów i zwracanych wartości nie są wysyłane do klienta; są one dostępne do obiektu wywołującego, za pomocą kolekcji parametrów obiektu polecenia.  
  
 Jeśli polecenie nie jest powiązany z połączenia w trakcie <xref:System.InvalidOperationException> zgłaszany. Ta metoda nie jest obsługiwana w poleceniach powiązane z połączeniami spoza procesu.  
  
 Jeśli występują błędy w <xref:System.Data.SqlClient.SqlCommand> obiektu, który został przesłany wyjątki są wysyłane do potoku, ale kopia był wysyłany również do wywołującego kodu zarządzanego. Jeśli kod wywołujący nie przechwycić wyjątek, wówczas propagowane w górę stosu w kodzie języka Transact-SQL i są wyświetlane dwa razy w danych wyjściowych. Jeśli kod wywołujący przechwycić wyjątek, konsumenta potoku nadal zostanie wyświetlony następujący błąd, ale nie będzie błąd duplikatu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> celu wybrania wierszy ze źródła danych w procedurze składowanej. Następnie w przykładzie <xref:Microsoft.SqlServer.Server.SqlPipe> można wykonać polecenia i wysyłać wyniki do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ta metoda nie jest obsługiwana w poleceniach powiązane z połączeniami spoza procesu.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> jest w trybie wysyłania zestawy pojedynczy wynik do klienta. Ta właściwość jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metoda została wywołana i <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> jest w trybie wysyłania zestawy pojedynczy wynik do klienta; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła wyniki bezpośrednio do klienta lub bieżącego odbiorcy danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Wysyłania** metoda wysyła dane bezpośrednio do klienta lub obiekt wywołujący. Zazwyczaj jest to klient, który pobiera dane wyjściowe z **potoku** metody, ale w przypadku zagnieżdżonych CLR procedury składowane konsumenta danych wyjściowych może również być procedury składowanej. Na przykład wywołuje Procedure1 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> tekstem polecenia "EXEC Procedure2". Procedure2 jest również zarządzanej procedury składowanej. Jeśli teraz wywołuje Procedure2 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, wiersza są wysyłane do firmy Procedure1 czytnika, nie dla klienta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Zestaw wyników pojedynczy wiersz tabeli wysłane do klienta: <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiektu.</param>
        <summary>Wysyła pojedynczy wiersz tabeli zestawu wyników bezpośrednio do klienta lub bieżącego odbiorcy danych wyjściowych.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Zestaw wyników multirow do wysłania do klienta: <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiektu.</param>
        <summary>Wysyła multirow zestawu wyników bezpośrednio do klienta lub bieżącego odbiorcy danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlDataReader> obiekt przekazany jako parametr ma ukrytej kolumn, te kolumny nie są propagowane do zestawu wyników, wysłane do klienta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Ciąg komunikatu do wysłania do klienta.</param>
        <summary>Wysyła komunikat w formacie ciągu bezpośrednio do klienta lub bieżącego odbiorcy danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg komunikatu jest wysyłany jako komunikat informacyjny w do klienta. Aplikacje klienckie może nasłuchiwać komunikatów za pomocą różnych mechanizmów, w zależności od danych dostęp do interfejsu programowania aplikacji (API), używają. Na przykład, jeśli klient korzysta z programu ADO.NET, komunikaty są przesyłane za pośrednictwem <xref:System.Data.SqlClient.SqlConnection.InfoMessage> zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> metodę, aby wysłać ciąg komunikatu o bezpośrednio do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> Jest większa niż 4000 znaków.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oznacza koniec zestawu wyników, a następnie zwraca <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> wystąpienia do stanu początkowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników dla klientów, którzy nie wdrażają <xref:System.Data.SqlClient.SqlDataReader>. Tej metody wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, Zezwalaj na procedur składowanych na potrzeby wysyłania zestawy wyników niestandardowy do klienta.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek rezultat, można ustawić przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody wysyła rekordy z przykładowe dane z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metoda i znaki końca wynik zestawu przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> Metoda nie została wcześniej wywoływana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiekt o wartości kolumn dla wiersza do wysłania do klienta. Schemat dla rekordu musi być zgodna schematu opisany przez metadane <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> przekazany do <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metody.</param>
        <summary>Wysyła pojedynczy wiersz danych do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników dla klientów, którzy nie wdrażają <xref:System.Data.SqlClient.SqlDataReader>. Tej metody wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, umożliwia procedur składowanych na potrzeby wysyłania zestawy wyników niestandardowy do klienta.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Metoda wysyła pojedynczy wiersz danych z powrotem do klienta. Wiersze następnie mogą być zwracane do obiektu wywołującego, wywołując <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, jeden raz dla każdego wiersza, które są wysyłane. Po wysłaniu wszystkich wierszy wywołania <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metoda jest wymagany, aby zaznaczyć koniec zestawu wyników.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek rezultat, można ustawić przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody wysyła rekordy z przykładowe dane z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metoda i znaki końca wynik zestawu przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> Metoda nie została wcześniej wywoływana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Element <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiektu, z której jest wyodrębniany metadanych i używany do opisania zestawu wyników.</param>
        <summary>Oznacza początek zestaw wyników, aby zostać odesłany do klienta, a parametr rekordu do utworzenia metadanych, które opisują zestaw wyników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników dla klientów, którzy nie wdrażają <xref:System.Data.SqlClient.SqlDataReader>. Tej metody wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, Zezwalaj na procedur składowanych na potrzeby wysyłania zestawy wyników niestandardowy do klienta.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Metoda oznacza początek zestaw wyników i jest używany parametr rekordu do utworzenia metadanych, które opisują zestaw wyników. Wszystkie kolejne wiersze, wysyłane przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metody musi odpowiadać tej definicji metadanych.  
  
 Należy pamiętać, że po wywołanie <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, tylko <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> może zostać wywołana. Inne metody, w tym samym wystąpieniu <xref:Microsoft.SqlServer.Server.SqlPipe> zgłasza <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> Ustawia <xref:Microsoft.SqlServer.Server.SqlPipe> do stanu początkowego, gdzie mogą być wywoływane innych metod.  
  
 Po sterowanie powraca do instrukcji języka Transact-SQL z wykonywania CLR, nie należy próbować użyć zmiennej statycznej lub lokalne inicjowany do pamięci CLR. Na przykład, czy przechowuje klasy wystąpienia w toku, na przykład `SQLDataRecord`, które będą używane po formant powraca z aparatu CLR. Jedynym wyjątkiem jest `SQLMetaData` w klasie procesu.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek rezultat, można ustawić przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody wysyła rekordy z przykładowe dane z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metoda i znaki końca wynik zestawu przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metody.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> Nie ma kolumn lub nie został zainicjowany.</exception>
        <exception cref="T:System.InvalidOperationException">Inną metodą niż <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> lub <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> została wywołana po <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metody.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>