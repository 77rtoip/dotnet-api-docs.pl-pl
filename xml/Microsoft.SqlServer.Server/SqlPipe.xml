<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7d2492efd855dc4576dfb178dcc4a5f1819b815" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36729851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia zarządzanym procedur składowanych działa w procesie bazy danych SQL Server, aby wrócić do wywołującego wyników. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie tej klasy jest udostępniana zarządzanych procedury składowane za pośrednictwem <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> właściwość <xref:Microsoft.SqlServer.Server.SqlContext> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> do wybrania wierszy ze źródła danych w procedurze składowanej. W przykładzie następnie użyto <xref:Microsoft.SqlServer.Server.SqlPipe> można wykonać polecenia i wysyłać wyniki do klienta.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> Obiektu do wykonania.</param>
        <summary>Wykonuje polecenie przekazany jako parametr i wysyła wyniki do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz wszystkie rzeczywiste wyniki inne komunikaty i błędy również są wysyłane bezpośrednio do klienta.  
  
 Parametry wyjściowe i zwracanych wartościach nie są wysyłane do klienta; są one dostępne dla obiekt wywołujący, za pomocą obiektu command kolekcji parametrów.  
  
 Jeśli polecenie nie jest powiązana z połączenia w trakcie <xref:System.InvalidOperationException> jest generowany. Ta metoda nie jest obsługiwana na polecenia powiązane z połączeniami poza procesem.  
  
 Jeśli wystąpią błędy w <xref:System.Data.SqlClient.SqlCommand> obiektu, który został przesłany wyjątki są wysyłane do potoku, ale kopia jest również przesyłany do wywołującego kodu zarządzanego. Jeśli kod wywołujący nie catch wyjątku, spowoduje propagowany aż stosu w kodzie języka Transact-SQL i są wyświetlane dwa razy w danych wyjściowych. Jeśli kod wywołujący catch wyjątku, konsumenta potoku nadal zostanie wyświetlony błąd, ale nie będzie błąd duplikatu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlConnection> i <xref:System.Data.SqlClient.SqlCommand> do wybrania wierszy ze źródła danych w procedurze składowanej. W przykładzie następnie użyto <xref:Microsoft.SqlServer.Server.SqlPipe> można wykonać polecenia i wysyłać wyniki do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ta metoda nie jest obsługiwana na polecenia powiązane z połączeniami poza procesem.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> jest w trybie wysłaniem zestawów wyników z jednego z powrotem do klienta. Ta właściwość jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> została wywołana metoda i <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> jest w trybie wysłaniem zestawów wyników z jednego z powrotem do klienta; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła wyniki bezpośrednio do klienta lub bieżącego użytkownika dane wyjściowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Wysyłania** metoda wysyła dane bezpośrednio do klienta lub obiekt wywołujący. Zazwyczaj jest to klient, który wykorzystuje dane wyjściowe z **potoku** metody, ale w przypadku zagnieżdżonych CLR konsument wyjście może również procedury składowane można procedury składowanej. Na przykład wywołuje Procedure1 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> z tekst polecenia "EXEC Procedure2". Procedure2 jest również zarządzanej procedury składowanej. Jeśli teraz wywołuje Procedure2 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, wiersza są wysyłane do czytnika w Procedure1, nie do klienta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Zestaw wyników pojedynczy wiersz wysłane do klienta: <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiektu.</param>
        <summary>Wysyła pojedynczy wiersz zestawu wyników bezpośrednio do klienta lub bieżącego użytkownika dane wyjściowe.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Zestaw wyników multirow do wysłania do klienta: <see cref="T:System.Data.SqlClient.SqlDataReader" /> obiektu.</param>
        <summary>Wysyła multirow zestawu wyników bezpośrednio do klienta lub bieżącego użytkownika dane wyjściowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Data.SqlClient.SqlDataReader> przekazano obiekt jako parametr ma ukryty kolumn, te kolumny nie są propagowane do zestawu wyników wysłane do klienta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Ciąg komunikatu do wysłania do klienta.</param>
        <summary>Wysyła komunikat ciąg bezpośrednio do klienta lub bieżącego użytkownika dane wyjściowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg komunikat jest wysyłany jako komunikat informacyjny do klienta. Aplikacje klienckie można słuchać wiadomości za pomocą różnych mechanizmów, w zależności od danych dostępu interfejsu programowania aplikacji (API), które używają. Na przykład, jeśli klient używa ADO.NET, przesyłać komunikaty za pośrednictwem <xref:System.Data.SqlClient.SqlConnection.InfoMessage> zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> do wysyłania wiadomości ciąg bezpośrednio do klienta.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> Jest większa niż 4000 znaków.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> Jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Oznacza koniec zestawu wyników, a następnie zwraca <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> wystąpienie do stanu początkowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników do klientów, którzy nie wdraża <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, Zezwalaj na procedury składowane w celu wysyłania zestawy wyników niestandardowych do klienta.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek zestawu przy użyciu wyników <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowych danych z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> — metoda i znaków zakończenia wyniku ustawiony za pomocą <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> — metoda.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> — Metoda nie została wcześniej wywołana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiektu z wartości w kolumnach wiersza do wysłania do klienta. Schematu dla rekordu musi być zgodna ze schematem opisanego przez metadane <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> przekazany do <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metody.</param>
        <summary>Wysyła pojedynczy wiersz danych z powrotem do klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników do klientów, którzy nie wdraża <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, umożliwia procedur składowanych do wysyłania zestawy wyników niestandardowych do klienta.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Metoda wysyła pojedynczy wiersz danych z powrotem do klienta. Wiersze mogą następnie zwracany do obiektu wywołującego przez wywołanie metody <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, jeden raz dla każdego wiersza są wysyłane. Po wysłaniu wszystkich wierszy wywołanie <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> metody jest wymagany w celu oznaczenia zakończenia zestawu wyników.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek zestawu przy użyciu wyników <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowych danych z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> — metoda i znaków zakończenia wyniku ustawiony za pomocą <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> — metoda.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> — Metoda nie została wcześniej wywołana.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> obiektu, z którego metadanych jest wyodrębniany i używany do opisania zestawu wyników.</param>
        <summary>Oznacza początek zestawu wyników do wysłania do klienta, a parametr rekordu do utworzenia metadanych, który opisuje zestaw wyników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zarządzane procedury składowane można wysyłać zestawów wyników do klientów, którzy nie wdraża <xref:System.Data.SqlClient.SqlDataReader>. Ta metoda wraz z <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, Zezwalaj na procedury składowane w celu wysyłania zestawy wyników niestandardowych do klienta.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> — Metoda oznacza początek zestawu wyników, a parametr rekordu do utworzenia metadanych, który opisuje zestaw wyników. Wszystkie kolejne wiersze, wysyłane przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> metody, musi odpowiadać tej definicji metadanych.  
  
 Należy pamiętać, że po wywołaniu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, tylko <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> i <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> może zostać wywołana. Inne metody w tym samym wystąpieniu <xref:Microsoft.SqlServer.Server.SqlPipe> zgłasza <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> Ustawia <xref:Microsoft.SqlServer.Server.SqlPipe> do stanu początkowego, gdy inne metody można wywołać.  
  
 Po kontroli zwraca do języka Transact-SQL pochodzący z wykonania na CLR, nie należy próbować użyć zmiennej statyczne lub lokalnego został zainicjowany w pamięci środowiska CLR. Na przykład, czy nie magazynu klasy wystąpienia w toku, na przykład `SQLDataRecord`, który będzie używany po kontroli zwraca z aparatu CLR. Jedynym wyjątkiem jest `SQLMetaData` w klasie procesu.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:Microsoft.SqlServer.Server.SqlDataRecord> i jego <xref:Microsoft.SqlServer.Server.SqlMetaData>. Przykład następnie oznacza początek zestawu przy użyciu wyników <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> metody, wysyła rekordy z przykładowych danych z powrotem do klienta przy użyciu <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> — metoda i znaków zakończenia wyniku ustawiony za pomocą <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> — metoda.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> Jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> Nie ma kolumn lub nie został zainicjowany.</exception>
        <exception cref="T:System.InvalidOperationException">Inną metodą niż <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> lub <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> została wywołana po <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> metody.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>