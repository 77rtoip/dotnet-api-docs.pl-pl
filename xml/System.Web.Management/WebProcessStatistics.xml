<Type Name="WebProcessStatistics" FullName="System.Web.Management.WebProcessStatistics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2613c98443ddfb81624b9fcd88d72748ebeeead" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69138285" /></Metadata><TypeSignature Language="C#" Value="public class WebProcessStatistics" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WebProcessStatistics extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebProcessStatistics" />
  <TypeSignature Language="VB.NET" Value="Public Class WebProcessStatistics" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebProcessStatistics" />
  <TypeSignature Language="F#" Value="type WebProcessStatistics = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje dotyczące oceny kondycji uruchomionego procesu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Monitorowanie kondycji ASP.NET umożliwia personelowi produkcyjnemu i operacyjnemu zarządzanie wdrożonymi aplikacjami sieci Web. <xref:System.Web.Management> Przestrzeń nazw zawiera typy zdarzeń kondycji odpowiedzialne za pakowanie danych kondycji aplikacji oraz typy dostawców odpowiedzialne za przetwarzanie tych danych. Zawiera również typy pomocnicze, które ułatwiają zarządzanie zdarzeniami kondycji.  
  
 Wystąpienia klasy zawierają informacje, które są uzyskiwane <xref:System.Web.Management.WebHeartbeatEvent> przy użyciu typu. <xref:System.Web.Management.WebProcessStatistics>  
  
> [!NOTE]
>  W większości przypadków można używać typów monitorowania kondycji ASP.NET zgodnie z implementacją i kontrolować system monitorowania kondycji, określając wartości w `healthMonitoring` sekcji Konfiguracja. Można również tworzyć własne niestandardowe zdarzenia i dostawców za pomocą typów monitorowania kondycji. Przykład tworzenia klasy zdarzeń niestandardowych można znaleźć w przykładach podanych w tym temacie.  
  
 Poniżej znajduje się fragment pliku konfiguracji, którego można użyć do umożliwienia ASP.NET rejestrowania zdarzeń pulsu zawierających dane statystyczne procesu.  
  
```  
<healthMonitoring   
  enabled="true" heartBeatInterval="100">  
  
    <rules>  
      <add   
        name="Process Statistics"  
        eventName="Heartbeats"   
        provider="EventLogProvider"    
        profile="Default"/>  
    </rules>  
  
</healthMonitoring>  
```  
  
   
  
## Examples  
 Poniższy przykład kodu ma dwie części. Pierwszy jest fragmentem pliku konfiguracji, który umożliwia ASP.NET użycie niestandardowego zdarzenia, które używa tego <xref:System.Web.Management.WebProcessStatistics> typu. Drugi pokazuje, jak zaimplementować to zdarzenie niestandardowe. 
  
 Upewnij się, że zdarzenie niestandardowe zostało zgłoszone w odpowiednim czasie, czyli gdy zostanie zgłoszone równoważnego zdarzenia kondycji systemu.  
  
```  
<healthMonitoring   
  enabled="true" heartBeatInterval="0">  
  
    <eventMappings>  
      <add  name="SampleProcessStatistics" type="SamplesAspNet.SampleWebProcessStatistics, webprocessstatistics, Version=1.0.1585.27289, Culture=neutral, PublicKeyToken=3648e5c763a8239f, processorArchitecture=MSIL"/>  
    </eventMappings>  
  
    <rules>  
      <add   
        name="Custom Process Statistics"  
        eventName="SampleProcessStatistics"   
        provider="EventLogProvider"    
        profile="Default"/>  
    </rules>  
  
</healthMonitoring>  
```  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#1)]
 [!code-vb[System.Web.Management.WebProcessStatistics#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebHeartbeatEvent" />
    <related type="Article" href="https://msdn.microsoft.com/library/e003f224-70fe-4cd8-a71a-2dc81e2d7e4c">Monitorowanie kondycji ASP.NET — Omówienie</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProcessStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebProcessStatistics.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProcessStatistics();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebProcessStatistics" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppDomainCount">
      <MemberSignature Language="C#" Value="public int AppDomainCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppDomainCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.AppDomainCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppDomainCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppDomainCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AppDomainCount : int" Usage="System.Web.Management.WebProcessStatistics.AppDomainCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę domen aplikacji w procesie.</summary>
        <value>Liczba domen aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwykle odnosi się do liczby aplikacji ASP.NET w procesie, w tym domeny domyślnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.AppDomainCount%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#5)]
 [!code-vb[System.Web.Management.WebProcessStatistics#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatToString">
      <MemberSignature Language="C#" Value="public virtual void FormatToString (System.Web.Management.WebEventFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FormatToString(class System.Web.Management.WebEventFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebProcessStatistics.FormatToString(System.Web.Management.WebEventFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub FormatToString (formatter As WebEventFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FormatToString(System::Web::Management::WebEventFormatter ^ formatter);" />
      <MemberSignature Language="F#" Value="abstract member FormatToString : System.Web.Management.WebEventFormatter -&gt; unit&#xA;override this.FormatToString : System.Web.Management.WebEventFormatter -&gt; unit" Usage="webProcessStatistics.FormatToString formatter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatter" Type="System.Web.Management.WebEventFormatter" />
      </Parameters>
      <Docs>
        <param name="formatter"><see cref="T:System.Web.Management.WebEventFormatter" /> Zawiera ustawienia na karcie i wcięcia używane do formatowania informacji o zdarzeniach dotyczących kondycji sieci Web.</param>
        <summary>Formatuje statystyki procesu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Management.WebProcessStatistics.FormatToString%2A> Metoda zapewnia jednolity format informacji o zdarzeniach, który jest przydatny, jeśli dane zdarzenia muszą być rejestrowane i później wyświetlane dla użytkownika. Jest wywoływana wewnętrznie, gdy dostawca wywołuje jedną z <xref:System.Web.Management.WebBaseEvent.ToString%2A> metod.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób formatowania informacji niestandardowych.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#14)]
 [!code-vb[System.Web.Management.WebProcessStatistics#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagedHeapSize">
      <MemberSignature Language="C#" Value="public long ManagedHeapSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ManagedHeapSize" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.ManagedHeapSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedHeapSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ManagedHeapSize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ManagedHeapSize : int64" Usage="System.Web.Management.WebProcessStatistics.ManagedHeapSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar sterty zarządzanej.</summary>
        <value>Rozmiar sterty zarządzanej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.ManagedHeapSize%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#6)]
 [!code-vb[System.Web.Management.WebProcessStatistics#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet">
      <MemberSignature Language="C#" Value="public long PeakWorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.PeakWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakWorkingSet { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet : int64" Usage="System.Web.Management.WebProcessStatistics.PeakWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szczytowy zestaw roboczy dla okresu istnienia procesu do daty.</summary>
        <value>Szczytowy zestaw roboczy procesu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.PeakWorkingSet%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#7)]
 [!code-vb[System.Web.Management.WebProcessStatistics#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessStartTime">
      <MemberSignature Language="C#" Value="public DateTime ProcessStartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ProcessStartTime" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.ProcessStartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessStartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ProcessStartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ProcessStartTime : DateTime" Usage="System.Web.Management.WebProcessStatistics.ProcessStartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czas rozpoczęcia procesu.</summary>
        <value><see cref="T:System.DateTime" /> Czas rozpoczęcia procesu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.ProcessStartTime%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#8)]
 [!code-vb[System.Web.Management.WebProcessStatistics#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestsExecuting">
      <MemberSignature Language="C#" Value="public int RequestsExecuting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestsExecuting" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.RequestsExecuting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestsExecuting As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestsExecuting { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestsExecuting : int" Usage="System.Web.Management.WebProcessStatistics.RequestsExecuting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę aktualnie wykonywanych żądań.</summary>
        <value>Liczba żądań wykonywanych w procesie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Management.WebProcessStatistics.RequestsExecuting%2A> Wartość jest użytecznym wskaźnikiem obciążenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.RequestsExecuting%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#9)]
 [!code-vb[System.Web.Management.WebProcessStatistics#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestsQueued">
      <MemberSignature Language="C#" Value="public int RequestsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.RequestsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestsQueued As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestsQueued { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestsQueued : int" Usage="System.Web.Management.WebProcessStatistics.RequestsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę żądań oczekujących na przetworzenie.</summary>
        <value>Liczba żądań oczekujących na przetworzenie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Management.WebProcessStatistics.RequestsQueued%2A> Wartość jest użytecznym wskaźnikiem obciążenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.RequestsQueued%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#10)]
 [!code-vb[System.Web.Management.WebProcessStatistics#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestsRejected">
      <MemberSignature Language="C#" Value="public int RequestsRejected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestsRejected" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.RequestsRejected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestsRejected As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestsRejected { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestsRejected : int" Usage="System.Web.Management.WebProcessStatistics.RequestsRejected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę odrzuconych żądań.</summary>
        <value>Liczba odrzuconych żądań.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta <xref:System.Web.Management.WebProcessStatistics.RequestsRejected%2A> wartość jest użytecznym wskaźnikiem przeciążonego lub nieprawidłowo funkcjonującego systemu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.RequestsRejected%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#11)]
 [!code-vb[System.Web.Management.WebProcessStatistics#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadCount">
      <MemberSignature Language="C#" Value="public int ThreadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ThreadCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.ThreadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ThreadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadCount : int" Usage="System.Web.Management.WebProcessStatistics.ThreadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę wątków procesu.</summary>
        <value>Łączna liczba wątków procesu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba odnosi się do wątków zarządzanych i niezarządzanych.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.ThreadCount%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#12)]
 [!code-vb[System.Web.Management.WebProcessStatistics#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public long WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebProcessStatistics.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long WorkingSet { long get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet : int64" Usage="System.Web.Management.WebProcessStatistics.WorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zestaw roboczy dla procesu.</summary>
        <value>Zestaw roboczy dla procesu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebProcessStatistics.WorkingSet%2A> jak pobrać wartość.  
  
 [!code-csharp[System.Web.Management.WebProcessStatistics#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/CS/webprocessstatisticsevent.cs#13)]
 [!code-vb[System.Web.Management.WebProcessStatistics#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebProcessStatistics/VB/webprocessstatisticsevent.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
