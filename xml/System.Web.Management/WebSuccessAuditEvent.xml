<Type Name="WebSuccessAuditEvent" FullName="System.Web.Management.WebSuccessAuditEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="64c4a5e69789bc5c0515b2808af9ac7896d2f8b8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30582532" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebSuccessAuditEvent : System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebSuccessAuditEvent extends System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebSuccessAuditEvent&#xA;Inherits WebAuditEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebSuccessAuditEvent : System::Web::Management::WebAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje dotyczące zdarzeń zabezpieczeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Monitorowanie kondycji ASP.NET umożliwia pracownikom produkcyjnego i operacji zarządzania wdrożonej aplikacji sieci Web. <xref:System.Web.Management> Przestrzeń nazw zawiera typy zdarzeń kondycji odpowiedzialnych za tworzenie pakietów danych stanu kondycji aplikacji i typów dostawcy odpowiedzialna za przetwarzanie tych danych. Zawiera ona także pomocnicze typy, które pomagają w trakcie zarządzania zdarzenia kondycji.  
  
 <xref:System.Web.Management.WebSuccessAuditEvent> Klasa jest używana, gdy wystąpi powodzenie operacji związanych z zabezpieczeniami. Na przykład jest pomyślne Autoryzacja adresów URL dla żądania sieci Web.  
  
 Poniższa lista zawiera opis funkcji dla zdarzenia typu <xref:System.Web.Management.WebSuccessAuditEvent> są wywoływane przez platformę ASP.NET:  
  
-   Autoryzacja pliku. Pomyślne warunki są poddawane inspekcji. Tylko nastąpiła autoryzacji pliku przez platformę ASP.NET, gdy tożsamość systemu Windows jest skojarzony z żądaniem. Kod inspekcji zdarzeń powiązanych <xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationSuccess>.  
  
-   Autoryzacja adresów URL. Oznacza on dostęp do zasobu adresu URL udzielania autoryzacji. Pomyślne warunki są poddawane inspekcji. Kod inspekcji zdarzeń powiązanych <xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationSuccess>.  
  
-   Inne warunki zabezpieczenia. Oto lista kodów zdarzenia pokrewne:  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>  
  
 Gdy <xref:System.Web.Management.WebSuccessAuditEvent> jest wywołane, monitorowanie kondycji ASP.NET zwiększa pokrewne inspekcji Powodzenie zdarzenia wywoływane licznika wydajności oraz sprawdza następnie `healthMonitoring` konfigurację w celu ustalenia, czy wszystkie dostawców subskrybować zdarzenia. Jeśli dostawcy subskrybować zdarzenia, ASP.NET wywołuje zdarzenia w celu ich do przetwarzania.  
  
> [!NOTE]
>  Aby wyświetlić licznika wydajności inspekcji Powodzenie zdarzenie zgłaszane w Monitorze systemu (PerfMon) w **Dodaj liczniki** wybierz okno **ASP.NET** z **obiekt wydajności** listy rozwijanej wybierz **inspekcji Powodzenie zdarzenie zgłaszane** licznika wydajności, a następnie kliknij przycisk **Dodaj** przycisku. Aby uzyskać więcej informacji, zobacz [monitorowania wydajności aplikacji ASP.NET](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5).  
  
 Inspekcja sukcesów reprezentują oczekiwany warunek, nie można zasubskrybować je. Możesz uzyskać subskrypcję do nich w celu zapewnienia dostępu inspekcji dla witryny.  
  
> [!NOTE]
>  W większości przypadków będzie można korzystać z typów monitorowanie kondycji programu ASP.NET, zgodnie z implementacją i sterowania monitorowanie kondycji systemu, podając wartości w `healthMonitoring` sekcji konfiguracji. Można również pochodną typy monitorowanie kondycji, aby utworzyć własne niestandardowe zdarzenia i dostawców. Przykład pochodny <xref:System.Web.Management.WebSuccessAuditEvent> klasy, zapoznaj się z przykładem podane w tym temacie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób pochodzi od <xref:System.Web.Management.WebSuccessAuditEvent> klasy można utworzyć zdarzenia inspekcji niestandardowych.  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#1)]  
  
 Poniższy przykład jest fragment pliku konfiguracji, który umożliwia monitorowanie użyć zdarzenia kondycji programu ASP.NET.  
  
```  
<healthMonitoring   
..enabled="true"  
..heartBeatInterval="0">   
  <providers>  
    <add name="EventLogProvider"   
    type="System.Web.Management.EventLogWebEventProvider,  
    System.Web,Version=2.0.3600.0,Culture=neutral,  
    PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  <eventMappings>  
    <add  name="SampleWebSuccessAuditEvent"   
      type="SamplesAspNet.SampleWebSuccessAuditEvent,  
      websuccessauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  <rules>  
    <add name="Custom Failure Audit Default"  
      eventName=" SampleWebFailureAuditEvent "  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebAuditEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzenia.</param>
        <param name="eventCode">Kod skojarzone ze zdarzeniem. Po zaimplementowaniu zdarzenia niestandardowego kodu zdarzenia musi być większa niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> przy użyciu podanych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używana wewnętrznie przez system monitorowanie kondycji programu ASP.NET. Nigdy nie użyjesz jej do utworzenia wystąpienia <xref:System.Web.Management.WebSuccessAuditEvent> obiekt, ale można wywołać konstruktora, podczas implementowania własny typ zdarzenia, który dziedziczy z tej klasy.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A> Konstruktor nie jest przeznaczona do użycia bezpośrednio w kodzie. Jest ona wywoływana przez program ASP.NET. Możesz wywołać <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A> wynikających z konstruktorem <xref:System.Web.Management.WebSuccessAuditEvent> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania tym konstruktorze `SampleWebSuccessAuditEvent` klasy. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.Management.WebSuccessAuditEvent> klasy.  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzenia.</param>
        <param name="eventCode">Kod skojarzone ze zdarzeniem. Po zaimplementowaniu zdarzenia niestandardowego kodu zdarzenia musi być większa niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">
          <see cref="T:System.Web.Management.WebEventCodes" /> Wartość, która określa szczegółowe identyfikator zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> przy użyciu podanych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używana wewnętrznie przez system monitorowanie kondycji programu ASP.NET. Nigdy nie użyjesz jej do utworzenia wystąpienia <xref:System.Web.Management.WebSuccessAuditEvent> obiekt, ale można wywołać konstruktora, podczas implementowania własny typ zdarzenia, który dziedziczy z tej klasy.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A> Konstruktor nie jest przeznaczona do użycia bezpośrednio w kodzie. Jest ona wywoływana przez program ASP.NET. Możesz wywołać <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A> wynikających z konstruktorem <xref:System.Web.Management.WebSuccessAuditEvent> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania tym konstruktorze `SampleWebSuccessAuditEvent` klasy. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.Management.WebSuccessAuditEvent> klasy.  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected internal override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.IncrementPerfCounters" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub IncrementPerfCounters ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void IncrementPerfCounters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa licznik wydajności inspekcji Powodzenie zdarzenia wywoływane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Licznik wydajności inspekcji zgłoszone zdarzenia Powodzenie śledzi liczbę zdarzeń inspekcji pomyślnego uruchamiany od czasu uruchomienia aplikacji. Ta metoda wywołuje również nadrzędnego <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A> metodę, która zwiększa licznik zdarzenia wywoływane. Ten licznik śledzi całkowita liczba zdarzeń zgłaszanych.  
  
 Aby wyświetlić te liczniki wydajności w Monitorze systemu (PerfMon) w **Dodaj liczniki** wybierz okno **ASP.NET** z **obiekt wydajności** listy rozwijanej wybierz pozycję Licznik wydajności, które chcesz wyświetlić, a następnie kliknij przycisk **Dodaj** przycisku. Aby uzyskać więcej informacji, zobacz [monitorowania wydajności aplikacji ASP.NET](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>