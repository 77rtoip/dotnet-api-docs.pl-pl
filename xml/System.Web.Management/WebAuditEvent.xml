<Type Name="WebAuditEvent" FullName="System.Web.Management.WebAuditEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85ccaa06c55e6f82c76c366a2f9ebec609901d0a" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39788174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebAuditEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebAuditEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebAuditEvent&#xA;Inherits WebManagementEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebAuditEvent : System::Web::Management::WebManagementEvent" />
  <TypeSignature Language="F#" Value="type WebAuditEvent = class&#xA;    inherit WebManagementEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Służy jako klasa bazowa dla wszystkich ASP.NET monitorowanie kondycji zdarzeń inspekcji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Monitorowanie kondycji ASP.NET umożliwia produkcyjnym i operacjami personelu do zarządzania wdrożonej aplikacji sieci Web. <xref:System.Web.Management> Przestrzeń nazw zawiera typy zdarzenie kondycji odpowiedzialny za pakowania danych stanu kondycji aplikacji i typów dostawców odpowiedzialna za przetwarzanie tych danych. Zawiera ona także pomocnicze typy, które mogą pomóc podczas zarządzania zdarzenia dotyczące kondycji.  
  
 <xref:System.Web.Management.WebAuditEvent> Klasa to klasa podstawowa, z którego pochodzi klasy zdarzenia inspekcji monitorowania kondycji ASP.NET. Zdarzenia inspekcji generowanie informacji o operacjach związanych z zabezpieczeniami w aplikacji sieci Web i podaj sukcesów i niepowodzeń zdarzenia dla każdej operacji inspekcji.  
  
 Monitorowanie kondycji systemu może zarówno zakończone powodzeniem i niepowodzeniem zdarzenia inspekcji, co oznacza, że aplikację można monitorować w warunkach normalnego i nieprawidłowo. Domyślnie są rejestrowane zdarzenia inspekcji błędów.  
  
 Następujące operacje są poddawane inspekcji przez platformę ASP.NET i może generować zdarzeń inspekcji monitorowanie kondycji powodzenie lub niepowodzenie:  
  
-   Próby logowania dokonywane przez użytkowników aplikacji platformy ASP.NET. Aby uzyskać więcej informacji na temat tej inspekcji, zobacz <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> i <xref:System.Web.Management.WebSuccessAuditEvent>.  
  
-   Zdarzenia związane z zabezpieczeniami, takich jak błędy uwierzytelniania nie powiodło się, próba dostępu do zasobów i inne zdarzenia związane z zabezpieczeniami. Rejestrowanie tych zdarzeń może być przydatne podczas badania element włamania lub ataku na aplikację. Domyślnie nie obsługuje inspekcji towarzyszy błędy autoryzacji użytkowników anonimowych. Aby uzyskać więcej szczegółów na temat inspekcji zdarzeń niepowodzeń, zobacz <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> i <xref:System.Web.Management.WebFailureAuditEvent>.  
  
-   Niestandardowe zdarzenia wygenerowane przez aplikację ASP.NET. Przeprowadź inspekcję zdarzeń niestandardowych, rozszerzając funkcjonalność <xref:System.Web.Management.WebAuditEvent> klasa i klasy pochodne  
  
> [!NOTE]
>  W większości przypadków można używać typów monitorowania kondycji ASP.NET zaimplementowanego i monitorowanie kondycji systemu będzie kontrolować, określając wartości w `healthMonitoring` sekcji konfiguracji. Można również dziedziczyć typów monitorowanie kondycji i tworzyć własne niestandardowe zdarzenia i dostawców. Na przykład pochodząca od <xref:System.Web.Management.WebAuditEvent> klasy, zobacz przykład podane w tym temacie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dziedziczyć <xref:System.Web.Management.WebAuditEvent> klasy w celu utworzenia zdarzenia inspekcji niestandardowych.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#1)]  
  
 Poniżej znajduje się fragment pliku konfiguracji, który umożliwia ASP.NET użyć zdarzenia.  
  
```  
<healthMonitoring   
  enabled="true"  
  heartBeatInterval="0">   
  
  <providers>  
    <add name="EventLogProvider"   
      type="System.Web.Management.EventLogWebEventProvider,  
      System.Web,Version=2.0.3600.0,Culture=neutral,  
      PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  
  <eventMappings>  
    <add  name="SampleWebAuditEvent"   
      type="SamplesAspNet.SampleWebAuditEvent,  
      webauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  
  <rules>  
    <add name="Custom Audit Default"  
      eventName="SampleWebAuditEvent"  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Podczas formatowania zdarzenie niestandardowe informacje do wyświetlania, Zastąp <see cref="M:System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)" /> metody zamiast <see cref="Overload:System.Web.Management.WebBaseEvent.ToString" /> metody. Zapobiegnie to zastąpienia lub naruszeniu systemu poufnych informacji.</para>
    </block>
    <altmember cref="T:System.Web.Management.WebManagementEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebViewStateFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzeń.</param>
        <param name="eventCode">Kod skojarzony ze zdarzeniem. Podczas implementowania zdarzenia niestandardowego kodu zdarzenia musi być większa niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebAuditEvent" /> przy użyciu podanych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używana wewnętrznie przez system monitorowania kondycji ASP.NET. Nigdy nie użyjesz go do utworzenia wystąpienia <xref:System.Web.Management.WebAuditEvent> obiekt, ale można wywołać ten konstruktor podczas implementowania swój własny typ zdarzenia, która dziedziczy z tej klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania tego konstruktora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.Management.WebAuditEvent> klasy.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode, eventDetailCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzeń.</param>
        <param name="eventCode">Kod skojarzony ze zdarzeniem. Podczas implementowania zdarzenia niestandardowego kodu zdarzenia musi być większa niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">
          <see cref="T:System.Web.Management.WebEventCodes" /> Wartość, która określa szczegółowe identyfikator zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebAuditEvent" /> klas z parametrami określonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używana wewnętrznie przez system monitorowania kondycji ASP.NET. Nigdy nie użyjesz go do utworzenia wystąpienia <xref:System.Web.Management.WebAuditEvent> obiekt, ale można wywołać ten konstruktor podczas implementowania swój własny typ zdarzenia, która dziedziczy z tej klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania tego konstruktora. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.Management.WebAuditEvent> klasy.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestInformation">
      <MemberSignature Language="C#" Value="public System.Web.Management.WebRequestInformation RequestInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Management.WebRequestInformation RequestInformation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestInformation As WebRequestInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Management::WebRequestInformation ^ RequestInformation { System::Web::Management::WebRequestInformation ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestInformation : System.Web.Management.WebRequestInformation" Usage="System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Management.WebRequestInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uzyskaj informacje skojarzone z żądaniem sieci Web.</summary>
        <value>Element <see cref="T:System.Web.Management.WebRequestInformation" /> zawierający informacje skojarzone z żądaniem sieci Web.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Skorzystaj z informacji dostarczonych przez <xref:System.Web.Management.WebAuditEvent.RequestInformation%2A> właściwości, aby ułatwić wykrycie przyczyn awarii.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak uzyskać informacje dotyczące żądania za pośrednictwem <xref:System.Web.Management.WebRequestInformation> właściwości.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#5)]
 [!code-vb[System.Web.Management.WebAuditEvent#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Management.WebRequestInformation" />
      </Docs>
    </Member>
  </Members>
</Type>