<Type Name="WebThreadInformation" FullName="System.Web.Management.WebThreadInformation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd0a1e1db24b039457901125154d3e1f62fd61e2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30582106" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebThreadInformation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebThreadInformation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebThreadInformation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebThreadInformation" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebThreadInformation sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o stanie wątku w procesie ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Monitorowanie kondycji ASP.NET umożliwia pracownikom produkcyjnego i operacji zarządzania wdrożonej aplikacji sieci Web. <xref:System.Web.Management> Przestrzeń nazw zawiera typy kondycji zdarzenie odpowiedzialnych za tworzenie pakietów danych stanu kondycji aplikacji i typów dostawcy odpowiedzialna za przetwarzanie tych danych. Zawiera ona także pomocnicze typy, które pomagają w trakcie zarządzania zdarzenia kondycji.  
  
 Wystąpienia <xref:System.Web.Management.WebThreadInformation> klasy zawierają informacje, które są uzyskiwane przy użyciu <xref:System.Web.Management.WebErrorEvent> typu lub <xref:System.Web.Management.WebRequestErrorEvent> typu.  
  
 Aplikacja wymaga odpowiednich uprawnień dostępu do chronionych informacji pochodzącymi od tego typu.  
  
> [!NOTE]
>  W większości przypadków będzie można korzystać z typów monitorowanie kondycji programu ASP.NET, zgodnie z implementacją i sterowania monitorowanie kondycji systemu, podając wartości w `healthMonitoring` sekcji konfiguracji. Można również pochodną typy monitorowanie kondycji, aby utworzyć własne niestandardowe zdarzenia i dostawców. Na przykład tworzenia klasy zdarzeń niestandardowych Zobacz przykład podane w tym temacie.  
  
   
  
## Examples  
 Poniższy przykładowy kod ma dwie części. Pierwsza to fragment pliku konfiguracji, który umożliwia platformę ASP.NET do używania niestandardowych zdarzeń, który używa <xref:System.Web.Management.WebThreadInformation> typu. Drugi przedstawia implementowania zdarzenie niestandardowe, która używa <xref:System.Web.Management.WebThreadInformation> typu.  
  
 Upewnij się, że Twoje niestandardowe zdarzenia jest zgłaszane, we właściwym czasie, oznacza to, gdy zdarzenie kondycji równoważny system, który zastępuje będzie uruchamiany.  
  
```  
<healthMonitoring  
    heartBeatInterval="0" enabled="true">  
  
  <profiles>  
    <add name="Custom"   
      minInstances="1"   
      maxLimit="Infinite"   
      minInterval="00:00:00" />  
  </profiles>  
  
  <eventMappings>  
  
    <add   
      name="SampleWebThreadInformation"   
type="SamplesAspNet.SampleWebThreadInformation,webthreadinformation, Version=1.0.1782.29648, Culture=neutral, PublicKeyToken=b3283a2de7dd3f27, processorArchitecture=MSIL" />  
  
  </eventMappings>  
  
  <rules>  
  
    <add name="Custom Web Thread Info Event"   
      eventName="SampleWebThreadInformation"   
      provider="EventLogProvider"  
      profile="Custom" />  
  
  </rules>  
  
</healthMonitoring>  
```  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#1)]
 [!code-vb[System.Web.Management.WebThreadInformation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebErrorEvent" />
    <altmember cref="T:System.Web.Management.WebRequestErrorEvent" />
    <altmember cref="T:System.Web.Management.WebManagementEvent" />
  </Docs>
  <Members>
    <Member MemberName="FormatToString">
      <MemberSignature Language="C#" Value="public void FormatToString (System.Web.Management.WebEventFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FormatToString(class System.Web.Management.WebEventFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebThreadInformation.FormatToString(System.Web.Management.WebEventFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FormatToString (formatter As WebEventFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FormatToString(System::Web::Management::WebEventFormatter ^ formatter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatter" Type="System.Web.Management.WebEventFormatter" />
      </Parameters>
      <Docs>
        <param name="formatter">
          <see cref="T:System.Web.Management.WebEventFormatter" /> Zawierający ustawienia kartę i wcięcia używany do formatowania danych zdarzenia kondycji sieci Web.</param>
        <summary>Formatuje informacje związane z wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Management.WebThreadInformation.FormatToString%2A> Metoda zapewnia jednolite format informacji o zdarzeniach, co jest przydatne, jeśli dane zdarzenia musi być rejestrowane i później proponowane użytkownikowi. Jest ona wywoływana wewnętrznie, gdy dostawca wywołuje jeden z <xref:System.Web.Management.WebBaseEvent.ToString%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób formatowania niestandardowych informacji.  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#8)]
 [!code-vb[System.Web.Management.WebThreadInformation#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImpersonating">
      <MemberSignature Language="C#" Value="public bool IsImpersonating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImpersonating" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebThreadInformation.IsImpersonating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImpersonating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImpersonating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący tryb personifikacji wątku.</summary>
        <value>
          <see langword="true" /> Jeśli wątek jest wykonywany w trybie personifikacji; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak uzyskać tryb personifikacji wątku.  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#4)]
 [!code-vb[System.Web.Management.WebThreadInformation#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebThreadInformation.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący ślad stosu zarządzanego wątku.</summary>
        <value>Ślad stosu zarządzanego wątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak uzyskać ślad stosu wątku.  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#5)]
 [!code-vb[System.Web.Management.WebThreadInformation#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadAccountName">
      <MemberSignature Language="C#" Value="public string ThreadAccountName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreadAccountName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebThreadInformation.ThreadAccountName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadAccountName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreadAccountName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę konta wątku.</summary>
        <value>Nazwa konta wątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Może być dowolny, jeśli wątek jest wykonywany w trybie personifikacji konta zwracane przez tę właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak można uzyskać nazwy konta wątku.  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#6)]
 [!code-vb[System.Web.Management.WebThreadInformation#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreadID">
      <MemberSignature Language="C#" Value="public int ThreadID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ThreadID" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebThreadInformation.ThreadID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ThreadID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący identyfikator wątku.</summary>
        <value>Bieżący identyfikator wątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nawet jeśli zarządzanych wątków nie mogą mieć bezpośredniego mapowania do wątków systemu operacyjnego, na potrzeby debugowania, zawsze jest przydatne do izolowania z konkretnym wątkiem, gdzie może istnieć problemów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak uzyskać identyfikator wątku.  
  
 [!code-csharp[System.Web.Management.WebThreadInformation#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/CS/webthreadinformation.cs#7)]
 [!code-vb[System.Web.Management.WebThreadInformation#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebThreadInformation/VB/webthreadinformation.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>