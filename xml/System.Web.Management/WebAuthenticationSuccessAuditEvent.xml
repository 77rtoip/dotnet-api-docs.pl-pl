<Type Name="WebAuthenticationSuccessAuditEvent" FullName="System.Web.Management.WebAuthenticationSuccessAuditEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73f43d6ef7624bd089a858b4392acee317eb1ef2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69053867" /></Metadata><TypeSignature Language="C#" Value="public class WebAuthenticationSuccessAuditEvent : System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebAuthenticationSuccessAuditEvent extends System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebAuthenticationSuccessAuditEvent&#xA;Inherits WebSuccessAuditEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebAuthenticationSuccessAuditEvent : System::Web::Management::WebSuccessAuditEvent" />
  <TypeSignature Language="F#" Value="type WebAuthenticationSuccessAuditEvent = class&#xA;    inherit WebSuccessAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebSuccessAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o pomyślnym zdarzeniu uwierzytelniania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Monitorowanie kondycji ASP.NET umożliwia personelowi produkcyjnemu i operacyjnemu zarządzanie wdrożonymi aplikacjami sieci Web. <xref:System.Web.Management> Przestrzeń nazw zawiera typy zdarzeń kondycji odpowiedzialne za pakowanie danych kondycji aplikacji oraz typy dostawców odpowiedzialne za przetwarzanie tych danych. Zawiera również typy pomocnicze, które ułatwiają zarządzanie zdarzeniami kondycji.  
  
 Poniższa lista zawiera opis funkcji, dla których ASP.NET wywołuje zdarzenia typu <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent>.  
  
> [!NOTE]
>  Domyślnie ASP.NET jest skonfigurowany do rejestrowania tylko warunków błędów inspekcji, ponieważ warunki powodzenia rejestrowania mogą poważnie ograniczyć zasoby systemowe.  System można zawsze skonfigurować do rejestrowania warunków powodzenia.  
  
-   Uwierzytelnianie formularzy. Warunki zakończone powodzeniem są poddawane inspekcji. Inspekcje sukcesów obejmują nazwę użytkownika, który został uwierzytelniony. Zamiast tego Inspekcja niepowodzeń nie zawiera nazwy użytkownika, ponieważ zazwyczaj wynika to z biletu, którego odszyfrowanie lub Walidacja nie powiodło się. Oba zawierają adres IP klienta. Powiązany kod inspekcji zdarzeń to <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>.  
  
-   Bezpłatne. Warunki zakończone powodzeniem są poddawane inspekcji. Inspekcja sukcesów i niepowodzeń zawiera nazwę użytkownika, która została podjęta. Żadna z form inspekcji nie będzie zawierać hasła, które było podejmowane, ponieważ mogłoby to spowodować zagrożenie trwałego hasła w dzienniku. Powiązany kod inspekcji zdarzeń to <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>.  
  
 <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> Gdy jest wywoływany, domyślnie aktualizuje licznik wydajności zdarzenia sukcesu uwierzytelniania. Aby wyświetlić ten licznik wydajności w monitorze systemu (PerfMon), w oknie **Dodawanie liczników** wybierz pozycję **ASP.NET** na liście rozwijanej **obiekt wydajności** wybierz licznik wydajności zdarzenia sukcesu uwierzytelniania, a następnie kliknij przycisk Przycisk **Dodaj** . Aby uzyskać więcej informacji, zobacz [Używanie monitora systemu (PerfMon) z aplikacjami ASP.NET](https://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) w witrynie MSDN.  
  
> [!NOTE]
>  W większości przypadków można używać typów monitorowania kondycji ASP.NET zgodnie z implementacją i kontrolować system monitorowania kondycji, określając wartości w `healthMonitoring` sekcji Konfiguracja. Można również tworzyć własne niestandardowe zdarzenia i dostawców za pomocą typów monitorowania kondycji. Przykład wyprowadzania z <xref:System.Web.Management.WebBaseEvent> klasy można znaleźć w przykładach podanych w tym temacie.  
  
   
  
## Examples  
 Ten przykład kodu ma dwie części: fragment pliku konfiguracji, a następnie kod, który pokazuje, jak dostosować <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> zdarzenie.  
  
 Poniżej znajduje się fragment pliku `provider` konfiguracji i `eventMappings` sekcji. Są one już ustawione domyślnie. Jedyną czynnością, którą należy wykonać, jest zapewnienie konfiguracji dla `rules` elementu `healthMonitoring` w sekcji.  
  
```  
<healthMonitoring  
  enabled="true"  
  heartBeatInterval="0">  
  
    <providers>  
      // Configure the provider to process   
      // the health events.  
      <add name="EventLogProvider"  
         type="System.Web.Management.EventLogWebEventProvider,  
         System.Web,Version=2.0.3600.0,Culture=neutral,  
         PublicKeyToken=b03f5f7f11d50a3a"/>  
    </providers>  
  
    <eventMappings>  
       <clear />  
       // Configure the custom event   
       // to handle the audit events.   
        <add name="SampleWebAuthenticationSuccessAuditEvent"   
          type="SamplesAspNet.SampleWebAuthenticationSuccessAuditEvent,  
          webauthsuccessaudit, Version=1.0.1735.23144, Culture=neutral,   
          PublicKeyToken=dd969eda3f3f6ae1, processorArchitecture=MSIL" />  
  
     </eventMappings>  
     <rules>  
       <clear/>  
       // Establish the connection between custom event   
       // and the provider that must process it.  
      <add name="Log Authentication Success Audits"   
        eventName="SampleWebAuthenticationFailureAuditEvent"  
        provider="EventLogProvider"   
        profile="Custom" />\  
     </rules>  
  
</healthMonitoring>  
```  
  
 Poniższy kod przedstawia sposób dostosowywania <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> zdarzenia.  
  
 [!code-csharp[System.Web.Management.WebAuthenticationSuccessAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/CS/WebAuthenticationSuccessAuditEvent.cs#1)]
 [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/VB/WebAuthenticationSuccessAuditEvent.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
    <related type="Article" href="https://msdn.microsoft.com/library/e003f224-70fe-4cd8-a71a-2dc81e2d7e4c">Monitorowanie kondycji ASP.NET — Omówienie</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuthenticationSuccessAuditEvent (string message, object eventSource, int eventCode, string nameToAuthenticate);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, string nameToAuthenticate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, nameToAuthenticate As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuthenticationSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, System::String ^ nameToAuthenticate);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuthenticationSuccessAuditEvent : string * obj * int * string -&gt; System.Web.Management.WebAuthenticationSuccessAuditEvent" Usage="new System.Web.Management.WebAuthenticationSuccessAuditEvent (message, eventSource, eventCode, nameToAuthenticate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="nameToAuthenticate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzenia.</param>
        <param name="eventCode">Kod skojarzony ze zdarzeniem. W przypadku zaimplementowania niestandardowego zdarzenia kod zdarzenia musi być większy niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="nameToAuthenticate">Nazwa uwierzytelnionego użytkownika.</param>
        <summary><see cref="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" /> Inicjuje klasę przy użyciu podanych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używany wewnętrznie przez system monitorowania kondycji ASP.NET. Nigdy nie będzie on używany do tworzenia <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> wystąpienia obiektu, ale można wywołać tego konstruktora podczas implementowania własnego typu zdarzenia, który dziedziczy z tej klasy.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent.%23ctor%2A> Konstruktor nie jest przeznaczony do użycia bezpośrednio w kodzie. Jest on wywoływany przez ASP.NET. Można wywołać <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent.%23ctor%2A> konstruktora podczas wyprowadzania <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> z klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dostosować ten Konstruktor.  
  
 [!code-csharp[System.Web.Management.WebAuthenticationSuccessAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/CS/WebAuthenticationSuccessAuditEvent.cs#2)]
 [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/VB/WebAuthenticationSuccessAuditEvent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuthenticationSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode, string nameToAuthenticate);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode, string nameToAuthenticate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuthenticationSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer, nameToAuthenticate As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuthenticationSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode, System::String ^ nameToAuthenticate);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuthenticationSuccessAuditEvent : string * obj * int * int * string -&gt; System.Web.Management.WebAuthenticationSuccessAuditEvent" Usage="new System.Web.Management.WebAuthenticationSuccessAuditEvent (message, eventSource, eventCode, eventDetailCode, nameToAuthenticate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
        <Parameter Name="nameToAuthenticate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Opis zdarzenia.</param>
        <param name="eventSource">Obiekt, który jest źródłem zdarzenia.</param>
        <param name="eventCode">Kod skojarzony ze zdarzeniem. W przypadku zaimplementowania niestandardowego zdarzenia kod zdarzenia musi być większy niż <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode"><see cref="T:System.Web.Management.WebEventCodes" /> Wartość, która określa szczegółowy identyfikator zdarzenia.</param>
        <param name="nameToAuthenticate">Nazwa uwierzytelnionego użytkownika.</param>
        <summary><see cref="T:System.Web.Management.WebSuccessAuditEvent" /> Inicjuje klasę przy użyciu podanych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest używany wewnętrznie przez system monitorowania kondycji ASP.NET. Nigdy nie będzie on używany do tworzenia <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> wystąpienia obiektu, ale można wywołać tego konstruktora podczas implementowania własnego typu zdarzenia, który dziedziczy z tej klasy.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent.%23ctor%2A> Konstruktor nie jest przeznaczony do użycia bezpośrednio w kodzie. Jest on wywoływany przez ASP.NET. Można wywołać <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent.%23ctor%2A> konstruktora podczas wyprowadzania <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> z klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak dostosować ten Konstruktor.  
  
 [!code-csharp[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/CS/WebAuthenticationSuccessAuditEvent.cs#3)]
 [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/VB/WebAuthenticationSuccessAuditEvent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameToAuthenticate">
      <MemberSignature Language="C#" Value="public string NameToAuthenticate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameToAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameToAuthenticate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NameToAuthenticate { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameToAuthenticate : string" Usage="System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę uwierzytelnionego użytkownika.</summary>
        <value>Nazwa uwierzytelnionego użytkownika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko inspekcje sukcesu zawierają nazwę uwierzytelnionego użytkownika. Inspekcje niepowodzeń nie zawierają nazwy użytkownika, ponieważ zazwyczaj wynika to z niepowodzenia odszyfrowywania lub walidacji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent.NameToAuthenticate%2A> jak używać właściwości.  
  
 [!code-csharp[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/CS/WebAuthenticationSuccessAuditEvent.cs#3)]
 [!code-vb[System.Web.Management.WebAuthenticationSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebAuthenticationSuccessAuditEvent/VB/WebAuthenticationSuccessAuditEvent.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" />
        <altmember cref="T:System.Web.Management.WebEventCodes" />
      </Docs>
    </Member>
  </Members>
</Type>
