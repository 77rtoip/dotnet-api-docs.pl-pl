<Type Name="IEnumeratorContract&lt;C&gt;" FullName="System.AddIn.Contract.Collections.IEnumeratorContract&lt;C&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4dae846d6e71db1b1c62cb8cfd472051ca4f295" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69343078" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumeratorContract&lt;C&gt; : System.AddIn.Contract.IContract where C : IContract" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumeratorContract`1&lt;(class System.AddIn.Contract.IContract) C&gt; implements class System.AddIn.Contract.IContract" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.Collections.IEnumeratorContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumeratorContract(Of C)&#xA;Implements IContract" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename C&gt;&#xA; where C : IContractpublic interface class IEnumeratorContract : System::AddIn::Contract::IContract" />
  <TypeSignature Language="F#" Value="type IEnumeratorContract&lt;'C (requires 'C :&gt; IContract)&gt; = interface&#xA;    interface IContract" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="C">
      <Constraints>
        <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="C">Typ obiektów do wyliczenia. <paramref name="C" />należy zaimplementować <see cref="T:System.AddIn.Contract.IContract" /> interfejs.</typeparam>
    <summary>Wylicza elementy ogólnej kolekcji <see cref="T:System.AddIn.Contract.IContract" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. Wartość zwracana elementu <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> jest niezdefiniowana w tym miejscu. W związku z tym przed <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> wywołaniem <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>należy wywołać metodę wyliczającą do pierwszego elementu kolekcji.  
  
 <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>zwraca ten sam obiekt do <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> momentu wywołania metody. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A>ustawia wartość <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> zwracaną do następnego elementu.  
  
 Jeśli <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> zwrócone `false`, wartość zwracana jest niezdefiniowana. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie czy usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniany, a jego zachowanie staje się niezdefiniowane.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public C GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !C GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrent () As C" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; C GetCurrent();" />
      <MemberSignature Language="F#" Value="abstract member GetCurrent : unit -&gt; 'C" Usage="iEnumeratorContract.GetCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>C</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.AddIn.Contract.IContract" /> Zwraca w kolekcji w bieżącej pozycji modułu wyliczającego.</summary>
        <returns><see cref="T:System.AddIn.Contract.IContract" /> W kolekcji w bieżącej pozycji modułu wyliczającego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> nie jest zdefiniowana w żadnym z następujących warunków:  
  
-   Moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji, natychmiast po utworzeniu modułu wyliczającego lub po <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> wywołaniu. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A>musi zostać wywołana, aby przemieścić moduł wyliczający do pierwszego elementu kolekcji przed wywołaniem <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>.  
  
-   Ostatnie wywołanie <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> zwrócone `false`, które wskazuje koniec kolekcji.  
  
-   Moduł wyliczający jest unieważniony z powodu zmian wprowadzonych w kolekcji, takich jak dodawanie, modyfikowanie lub usuwanie elementów.  
  
 <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>zwraca ten sam obiekt do <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> momentu wywołania metody. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A>ustawia wartość <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> zwracaną do następnego elementu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool" Usage="iEnumeratorContract.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa moduł wyliczający do następnego elementu kolekcji.</summary>
        <returns><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowana do następnego elementu; <see langword="false" /> Jeśli moduł wyliczający przeszedł koniec kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> wywołaniu metody moduł wyliczający jest umieszczony przed pierwszym elementem kolekcji. Pierwsze wywołanie <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> metody przenosi moduł wyliczający do pierwszego elementu kolekcji.  
  
 Jeśli <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> wywołania również `false` zostaną <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> zwrócone do momentu wywołania.  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniony i następne wywołanie <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> lub <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> wygeneruje <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Kolekcja została zmodyfikowana po utworzeniu modułu wyliczającego.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iEnumeratorContract.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia początkową pozycję modułu wyliczającego, która jest wcześniejsza niż pierwszy element w kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniony i następne wywołanie <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> lub <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> wygeneruje <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Kolekcja została zmodyfikowana po utworzeniu modułu wyliczającego.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
