<Type Name="EntityCollection&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityCollection&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bfdd2e1a69b70e8835674d9b2cd2961126c878b6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69126998" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityCollection(Of TEntity)&#xA;Inherits RelatedEnd&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">Typ jednostki kolekcji.</typeparam>
    <summary>Reprezentuje kolekcję obiektów na końcu "wiele" relacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> Jest kolekcją obiektów określonego typu jednostki, która reprezentuje koniec "wiele" relacji jeden-do-wielu lub wiele-do-wielu.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> Jest zwracany przez właściwość nawigacji. Użyj metody do załadowania powiązanych obiektów <xref:System.Data.Objects.DataClasses.EntityCollection%601>do. <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> Do przechowywania niepowiązanej kolekcji obiektów określonego typu jednostki, takich jak wynik <xref:System.Data.Objects.ObjectQuery%601>, użyj wystąpienia <xref:System.Collections.Generic.List%601> klasy.  
  
 Może mieć odpowiednie <xref:System.Data.Objects.DataClasses.EntityReference%601>. <xref:System.Data.Objects.DataClasses.EntityCollection%601> <xref:System.Data.Objects.DataClasses.EntityCollection%601> Gdy model<xref:System.Data.Objects.DataClasses.EntityReference%601> i odwrotne zakończenie tej samej relacji, integralność relacji jest zachowywana na poziomie obiektu. Dwie klasy są synchronizowane automatycznie.  
  
 Klasa ta nie może być dziedziczona.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 Ten przykład wykonuje następujące czynności:  
  
1.  Tworzy dwie nowe `SalesOrderHeader` jednostki i dodaje je `Contact` do jednostki.  
  
2.  Pobiera wszystkie powiązane zakończenia z <xref:System.Data.Objects.DataClasses.RelationshipManager> elementu, który jest skojarzony `Contact` z jednostką.  
  
3.  Wykonuje iterację kolekcji <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  
  
4.  <xref:System.Data.Objects.DataClasses.EntityCollection%601> Pobiera dla każdego powiązanego końca.  
  
5.  <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> Używa metody do usunięcia jednej z jednostek z kolekcji.  
  
6.  Wywołuje metodę <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> , aby określić, czy obiekt został usunięty z kolekcji.  
  
7.  <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Używa metody, aby dodać jednostkę z powrotem.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor publiczny dla <xref:System.Data.Objects.DataClasses.EntityCollection%601> programu jest przeznaczony do użycia przez usługi obiektów podczas deserializacji grafów obiektów. Zamiast korzystać z tego konstruktora należy <xref:System.Data.Objects.DataClasses.EntityCollection%601> uzyskać dostęp do wystąpienia z właściwości nawigacji.  
  
 Do przechowywania niepowiązanej kolekcji obiektów określonego typu jednostki, takich jak wynik <xref:System.Data.Objects.ObjectQuery%601>, należy użyć <xref:System.Collections.Generic.List%601>wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Add : 'Entity -&gt; unit" Usage="entityCollection.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt, który ma zostać dodany do kolekcji. <paramref name="entity" />musi implementować <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
        <summary>Dodaje obiekt do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda dodaje obiekt <xref:System.Data.Objects.DataClasses.EntityCollection%601> do i tworzy relację między dwoma obiektami. <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Gdy obiekt źródłowy jest dołączony do <xref:System.Data.Objects.ObjectContext> wystąpienia <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> , Metoda również <xref:System.Data.Objects.ObjectContext>dodaje obiekt do. Ta operacja jest tłumaczona na operację wstawiania w źródle danych, gdy <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> jest wywoływana. Aby uzyskać więcej informacji, zobacz [Tworzenie, Dodawanie, modyfikowanie i usuwanie obiektów](https://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Metodę można wywołać wiele razy w tym samym wystąpieniu obiektu.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 Ten przykład tworzy dwie nowe `SalesOrderHeader` jednostki, dodaje je `Contact` do jednostki, a po usunięciu obiektu używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metody, aby dodać obiekt z powrotem do kolekcji.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiuje relację między dwoma dołączonymi obiektami w kontekście obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="entityCollection.Attach entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">Kolekcja obiektów w kontekście obiektu, które są powiązane z obiektem źródłowym.</param>
        <summary>Definiuje relacje między obiektem a kolekcją obiektów pokrewnych w kontekście obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Attach%2A> Metoda jest używana do definiowania relacji między obiektem a kolekcją powiązanych obiektów, gdy zarówno obiekt źródłowy, jak i Kolekcja powiązanych obiektów istnieją już w kontekście obiektu. Aby dołączyć obiekt lub Graf obiektu, gdzie relacje są już zdefiniowane, wywołaj <xref:System.Data.Objects.ObjectContext.Attach%2A> metodę <xref:System.Data.Objects.ObjectContext>w. Aby utworzyć nowy obiekt, który jest powiązany z obiektem źródłowym, wywołaj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metodę <xref:System.Data.Objects.DataClasses.EntityCollection%601>w. Aby uzyskać więcej informacji, zobacz Dołączanie [i odłączanie obiektów](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Jeśli kolekcja jest już wypełniana lub częściowo wypełniana, <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> metoda scala istniejące jednostki z podanymi jednostkami. Nie przyjmuje się, że nie jest to kompletny zestaw powiązanych jednostek.  
  
 Wszystkie przekazanie jednostek musi być w <xref:System.Data.EntityState.Unchanged> stanie lub. <xref:System.Data.EntityState.Modified> Obiekty w <xref:System.Data.EntityState.Deleted> stanie są dozwolone tylko wtedy, gdy Menedżer stanu już śledzi wystąpienie relacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entities" />Kolekcja jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Obiekt źródłowy <paramref name="entities" /> lub obiekt w kolekcji jest <see langword="null" /> <see cref="F:System.Data.EntityState.Unchanged" /> lub nie <see cref="F:System.Data.EntityState.Modified" /> jest w stanie.  
  
—lub— 
Nie można zdefiniować relacji na podstawie metadanych modelu EDM. Taka sytuacja może wystąpić, gdy skojarzenie w schemacie koncepcyjnym nie obsługuje relacji między tymi dwoma typami.</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityCollection.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt, który jest dołączany.</param>
        <summary>Definiuje relację między dwoma dołączonymi obiektami w kontekście obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> Metoda jest używana do definiowania relacji między dwoma obiektami, gdy oba obiekty już istnieją w kontekście obiektu. Aby dołączyć obiekt lub Graf obiektu, gdzie relacje są już zdefiniowane, wywołaj <xref:System.Data.Objects.ObjectContext.Attach%2A> metodę <xref:System.Data.Objects.ObjectContext>w. Aby utworzyć nowy obiekt, który jest powiązany z obiektem źródłowym, wywołaj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metodę <xref:System.Data.Objects.DataClasses.EntityCollection%601>w. Aby uzyskać więcej informacji, zobacz Dołączanie [i odłączanie obiektów](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Jeśli masz już załadowane obiekty <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> , metoda scala obiekt wraz z istniejącymi obiektami w <xref:System.Data.Objects.DataClasses.EntityCollection%601>obiekcie. <xref:System.Data.Objects.DataClasses.EntityCollection%601>  
  
 Załączony obiekt nie jest przyjęty jako kompletny zestaw powiązanych obiektów jednostek.  
  
 Obiekt skojarzony z tym <xref:System.Data.Objects.DataClasses.EntityCollection%601> i wszystkie obiekty, które są do niego dołączone, muszą być <xref:System.Data.EntityState.Unchanged> w stanie lub. <xref:System.Data.EntityState.Modified>  
  
 Obiekty w <xref:System.Data.EntityState.Deleted> stanie mogą być dołączane tylko wtedy <xref:System.Data.Objects.ObjectStateManager> , gdy jest już śledzone wystąpienie relacji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 Ten `SalesOrderDetail` przykład dołącza kolekcję odłączonych obiektów i `SalesOrderHeader` odłączonego obiektu do kontekstu obiektu, a następnie `SalesOrderHeader` definiuje relacje między obiektem a każdym `SalesOrderDetail` obiektem.  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> Gdy ma<see langword="null" />wartość.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> Gdy nie można jej powiązać z obiektem źródłowym. Taka sytuacja może wystąpić, gdy skojarzenie w schemacie koncepcyjnym nie obsługuje relacji między tymi dwoma typami.  
  
—lub— 
Gdy oba obiekty są <see langword="null" /> lub nie są <see cref="F:System.Data.EntityState.Unchanged" /> w <see cref="F:System.Data.EntityState.Modified" /> stanie.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="override this.Clear : unit -&gt; unit" Usage="entityCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie jednostki z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A>wykonuje następujące czynności:  
  
-   Ustawia flagę na `false`. <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>  
  
-   Usuwa wszystkie jednostki z kolekcji.  
  
-   Odłącza relacje między usuniętymi jednostkami i właścicielem elementu <xref:System.Data.Objects.DataClasses.EntityCollection%601> <xref:System.Data.Objects.ObjectStateManager>z.  
  
-   Usuwa właściciela <xref:System.Data.Objects.DataClasses.EntityCollection%601> z powiązanych jednostek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="entityCollection.Contains entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt, który ma zostać zlokalizowany w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
        <summary>Określa, czy określony obiekt istnieje w kolekcji.</summary>
        <returns><see langword="true" />Jeśli obiekt znajduje się w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Object.Equals%2A?displayProperty=nameWithType> Używa metody do porównania określonego obiektu z obiektami znajdującymi się już w kolekcji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 Ten przykład wykonuje następujące czynności:  
  
1.  Tworzy dwie nowe `SalesOrderHeader` jednostki i dodaje je `Contact` do jednostki.  
  
2.  Pobiera wszystkie powiązane zakończenia z <xref:System.Data.Objects.DataClasses.RelationshipManager> usługi, która jest skojarzona z jednostką Contact.  
  
3.  Wykonuje iterację kolekcji <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  
  
4.  <xref:System.Data.Objects.DataClasses.EntityCollection%601> Pobiera dla każdego powiązanego końca.  
  
5.  <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> Używa metody do usunięcia jednej z jednostek z kolekcji.  
  
6.  Wywołuje metodę <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> , aby określić, czy obiekt został usunięty z kolekcji.  
  
7.  <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Używa metody, aby dodać jednostkę z powrotem.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TEntity&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="entityCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Tablica, do której mają zostać skopiowane.</param>
        <param name="arrayIndex">Indeks (liczony od zera) w tablicy, w której rozpoczyna się kopiowanie.</param>
        <summary>Kopiuje całą zawartość kolekcji do tablicy, rozpoczynając od określonego indeksu tablicy docelowej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę obiektów zawartych w kolekcji.</summary>
        <value>Liczba elementów, które są zawarte w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Count%2A> Właściwość pobiera liczbę jednostek znajdujących się obecnie w kolekcji lokalnej i nie odzwierciedla rozmiaru kolekcji w źródle danych. Liczba zero nie musi wskazywać, że powiązana kolekcja jest pusta. Aby określić rozmiar kolekcji w źródle danych, wywołaj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metodę lub Dołącz obiekt powiązany w ścieżce zapytania. Aby uzyskać więcej informacji, zobacz [ładowanie powiązanych obiektów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca zapytanie obiektu, które po wykonaniu zwraca ten sam zestaw obiektów, który istnieje w bieżącej kolekcji.</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentuje kolekcję jednostek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do uzyskiwania nowego wystąpienia <xref:System.Data.Objects.ObjectQuery%601> , które zwraca ten sam zestaw obiektów. Jest to przydatne jako punkt początkowy dla bardziej złożonej kwerendy sprzężenia, Unii lub filtrowanego zapytania lub do zwrócenia tych samych obiektów w stanie odłączonym przy użyciu <xref:System.Data.Objects.MergeOption.NoTracking> opcji.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A>służy do filtrowania obiektów w obiekcie, <xref:System.Data.Objects.DataClasses.EntityCollection%601> aby można było powiązać tylko obiekty określonego typu. Aby uzyskać więcej informacji, zobacz [Powiązywanie obiektów z kontrolkami](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
   
  
## Examples  
 Ten przykład jest oparty na zmodyfikowanej wersji programu. Ta wersja obsługuje dziedziczenie na poziomie tabeli przy użyciu `Course` jako typ abstrakcyjny. Wykonaj instrukcje, aby zmodyfikować model szkoły w celu obsługi przykładu dziedziczenia typu tabela w tym temacie.  
  
 Ten przykład pokazuje <xref:System.Data.Objects.DataClasses.EntityCollection%601> , jak używać <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> do filtrowania obiektów w i powiązania tylko z obiektami określonego typu. Aby zapoznać się z pełną wersją tego przykładu [, zobacz How to: Powiązywanie kontrolek z typami](https://msdn.microsoft.com/library/09730c14-3b7b-4563-af4a-7ecfa4e34bd5)pochodnymi.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Gdy obiekt jest w <see cref="F:System.Data.EntityState.Added" /> stanie.  
  
—lub— 
Gdy obiekt jest w <see cref="F:System.Data.EntityState.Detached" /> stanie <see cref="T:System.Data.Objects.MergeOption" /> innym niż <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który jest używany do iteracji obiektów w kolekcji.</summary>
        <returns>Jest <see cref="T:System.Collections.IEnumerator" /> to iteracja zestawu wartości przechowywanych w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />pamięci podręcznej.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy jest tylko <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> do odczytu.</summary>
        <value>Zawsze zwraca <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityCollection.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Określa sposób, w jaki obiekty w tej kolekcji powinny być scalane z obiektami, które mogły zostać zwrócone przez poprzednie zapytania względem <see cref="T:System.Data.Objects.ObjectContext" />tego samego.</param>
        <summary>Ładuje powiązane obiekty do kolekcji przy użyciu określonej opcji scalania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Ta metoda wywołuje wewnętrzną `RelatedEnd.ValidateLoad` metodę przed załadowaniem kolekcji, która sprawdza, czy <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> wywołanie ma poprawne warunki. `RelatedEnd.ValidateLoad` Metoda sprawdza, czy:

* Prawidłowy <xref:System.Data.Objects.ObjectContext> element istnieje.
* Jednostka nie jest w <xref:System.Data.EntityState.Deleted> stanie.
* <xref:System.Data.Objects.MergeOption>dla <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> elementu musi <xref:System.Data.Objects.MergeOption.NoTracking> być if i tylko wtedy, gdy jednostka <xref:System.Data.Objects.MergeOption.NoTracking>źródłowa była. Jeśli jednostka źródłowa została pobrana z <xref:System.Data.Objects.MergeOption>dowolnego innego <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> , może to <xref:System.Data.Objects.MergeOption> być <xref:System.Data.Objects.MergeOption.NoTracking> dowolne, ale (na <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> przykład jednostka mogła zostać załadowana przy użyciu <xref:System.Data.Objects.MergeOption.OverwriteChanges> programu, a opcja może być <xref:System.Data.Objects.MergeOption.AppendOnly>).
* Jeśli `mergeOption` jest <xref:System.Data.Objects.MergeOption.NoTracking>, <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.DataClasses.RelatedEnd>nie jest wywoływana dla już załadowanej jednostki i nie jest wywoływana dla niepustych, nieśledzonych. <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>
  
 Gdy obiekty w kolekcji są już <xref:System.Data.Objects.ObjectContext>załadowane do <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> , Metoda wymusza <xref:System.Data.Objects.MergeOption> określony przez `mergeOption` parametr. Aby uzyskać więcej informacji, zobacz [rozpoznawanie tożsamości, zarządzanie stanami i Change Tracking](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
 Aby jawnie załadować powiązane obiekty, należy wywołać `Load` metodę na powiązanym końcu zwracanym przez właściwość nawigacji. W przypadku relacji jeden-do-wielu należy wywołać <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metodę w. <xref:System.Data.Objects.DataClasses.EntityCollection%601> W przypadku relacji jeden-do-jednego należy wywołać metodę <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>. <xref:System.Data.Objects.DataClasses.EntityReference%601> Spowoduje to załadowanie powiązanych danych obiektu do kontekstu obiektu. Można wyliczyć w `foreach` kolekcji zwracanych wyników przy użyciu pętli (`For Each...Next` w Visual Basic) `Load` i warunkowo wywołać metodę <xref:System.Data.Objects.DataClasses.EntityReference%601> dla i <xref:System.Data.Objects.DataClasses.EntityCollection%601> właściwości dla każdej jednostki w wynikach.  
  
 Metoda <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> ładuje powiązane obiekty ze źródła danych niezależnie od tego, czy <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> jest `true`to.  
  
> [!NOTE]
>  Po wywołaniu <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metody `foreach` podczas wyliczania (C#) lub `For Each` (Visual Basic) usługi obiektów podejmują próbę otwarcia nowego czytnika danych. Ta operacja zakończy się niepowodzeniem, jeśli nie włączono wielu aktywnych zestawów `multipleactiveresultsets=true` wyników przez określenie w parametrach połączenia. Możesz również załadować wynik zapytania do <xref:System.Collections.Generic.List%601> kolekcji. Spowoduje to zamknięcie czytnika danych i umożliwienie wyliczenia kolekcji w celu załadowania obiektów, do których istnieją odwołania.  
  
 Metoda jest synchronizowana <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType> z metodą. <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType>  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 Ten przykład ładuje powiązane `SalesOrderHeader` obiekty `Contact` dla jednostki.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithload)]
 [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithload)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionDeserialized">
      <MemberSignature Language="C#" Value="public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnCollectionDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCollectionDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCollectionDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnCollectionDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnCollectionDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst strumieniowy.</param>
        <summary>Używane wewnętrznie do deserializacji obiektów Entity.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst strumieniowy.</param>
        <summary>Używane wewnętrznie do serializacji obiektów Entity.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Entity -&gt; bool" Usage="entityCollection.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt, który ma zostać usunięty z kolekcji.</param>
        <summary>Usuwa obiekt z kolekcji i oznacza relację do usunięcia.</summary>
        <returns><see langword="true" />Jeśli element został pomyślnie usunięty; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> Metoda usuwa również relację między obiektem źródłowym a obiektem usuwanym z kolekcji. Jeśli relacja ma ograniczenie integralności referencyjnej, wywołanie <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metody dla obiektu zależnego oznacza relację i obiekt zależny do usunięcia. Dzieje się tak, ponieważ ograniczenie wskazuje, że obiekt zależny nie może istnieć bez relacji z elementem nadrzędnym. Aby uzyskać więcej informacji, zobacz [ReferentialConstraint element (CSDL)](https://msdn.microsoft.com/library/24f96a80-85b5-4f2e-a14c-0e3eb6796fa0).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>zwraca `false` , gdy określony obiekt nie znajduje się w kolekcji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod w tym przykładzie, musisz już dodać model sprzedaży AdventureWorks do projektu i skonfigurować projekt do korzystania z Entity Framework. Aby to zrobić, wykonaj procedury opisane w [temacie How to: Ręcznie skonfiguruj projekt](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) Entity Framework i [instrukcje: Ręcznie zdefiniuj model i pliki](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a)mapowania.  
  
 W tym przykładzie użyto <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metody, aby usunąć jedną z jednostek z kolekcji, a następnie <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> wywołuje metodę, aby określić, czy obiekt został usunięty z kolekcji.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />Obiekt jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> Obiekt nie jest dołączony do tego samego kontekstu obiektu.  
  
—lub— 
<paramref name="entity" /> Obiekt nie ma prawidłowego Menedżera relacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który jest używany do iteracji zestawu wartości przechowywanych w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />pamięci podręcznej.</summary>
        <returns>Jest <see cref="T:System.Collections.IEnumerator" /> to iteracja zestawu wartości przechowywanych w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />pamięci podręcznej.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy powiązana kolekcja jednostek składa się z obiektów kolekcji.</summary>
        <value>Ta właściwość zawsze zwraca <see langword="false" /> wartość, <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> ponieważ zawiera obiekty i nie kolekcje.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Objects.DataClasses.EntityCollection%601> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję jako <see cref="T:System.Collections.IList" /> użytą do powiązania danych.</summary>
        <returns><see cref="T:System.Collections.IList" /> Obiektów jednostki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Data.Objects.DataClasses.EntityCollection%601> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.IListSource> do interfejsu.  
  
 Ta metoda umożliwia powiązanie danych z <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Jest on wywoływany przez kontrolkę powiązaną z kolekcją. Aby uzyskać więcej informacji, zobacz [Powiązywanie obiektów z kontrolkami](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
