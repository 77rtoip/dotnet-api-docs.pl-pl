<Type Name="EntityCollection&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityCollection&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="45b9bfc40b016ca73dee531ab7fda4bba501d89f" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53231758" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityCollection(Of TEntity)&#xA;Inherits RelatedEnd&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">Typ jednostki w kolekcji.</typeparam>
    <summary>Reprezentuje kolekcję obiektów na końcu "many" relacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> To kolekcja obiektów typu określonego obiektu, który reprezentuje "many" end relacji jeden do wielu lub wiele do wielu.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> Jest zwracany przez właściwość nawigacji. Użyj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metodę, aby załadować powiązane obiekty do <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Do przechowywania niepowiązanych zbiór obiektów określonego typu, takie jak wynik <xref:System.Data.Objects.ObjectQuery%601>, używając wystąpienia <xref:System.Collections.Generic.List%601> klasy.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> Może mieć odpowiedni <xref:System.Data.Objects.DataClasses.EntityReference%601>. Gdy <xref:System.Data.Objects.DataClasses.EntityCollection%601> i <xref:System.Data.Objects.DataClasses.EntityReference%601> modelu przeciwne kończy się w tej samej relacji integralności relacji jest utrzymywany na poziomie obiektu. Dwie klasy są synchronizowane automatycznie.  
  
 Klasa ta nie może być dziedziczona.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 W tym przykładzie wykonuje następujące czynności:  
  
1.  Tworzy dwa nowe `SalesOrderHeader` jednostki i dodaje je do `Contact` jednostki.  
  
2.  Pobiera wszystkie powiązane kończy się z <xref:System.Data.Objects.DataClasses.RelationshipManager> skojarzony z `Contact` jednostki.  
  
3.  Iteruje po kolekcji <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  
  
4.  Pobiera <xref:System.Data.Objects.DataClasses.EntityCollection%601> dla każdego powiązanego zakończenia.  
  
5.  Używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metodę, aby usunąć jeden z obiektów z kolekcji.  
  
6.  Wywołania <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> metodę pozwala ustalić, czy obiekt został usunięty z kolekcji.  
  
7.  Używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metodę, aby dodać jednostkę ponownie.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor publiczny <xref:System.Data.Objects.DataClasses.EntityCollection%601> jest przeznaczony do użycia przez obiekt usługi podczas deserializacji wykresów obiektów. Powinien uzyskiwać dostęp do wystąpienia <xref:System.Data.Objects.DataClasses.EntityCollection%601> z właściwości nawigacji, a nie za pomocą tego konstruktora.  
  
 Do przechowywania niepowiązanych zbiór obiektów określonego typu, takie jak wynik <xref:System.Data.Objects.ObjectQuery%601>, używając wystąpienia <xref:System.Collections.Generic.List%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Add : 'Entity -&gt; unit" Usage="entityCollection.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt do dodania do kolekcji. <paramref name="entity" /> musisz zaimplementować <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
        <summary>Dodaje obiekt do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Metoda dodaje obiekt, do którego <xref:System.Data.Objects.DataClasses.EntityCollection%601> i tworzy relację między dwoma obiektami. Jeśli obiekt źródłowy jest dołączony do <xref:System.Data.Objects.ObjectContext> wypadku <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metoda dodaje również obiekt do <xref:System.Data.Objects.ObjectContext>. Ta operacja jest tłumaczony na operacji wstawiania danych źródło, gdy <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> jest wywoływana. Aby uzyskać więcej informacji, zobacz [tworzenie, dodawanie, modyfikowanie i usuwanie obiektów](https://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> Metodę można wywoływać wielokrotnie dla tego samego wystąpienia obiektu.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 Ten przykład umożliwia utworzenie dwóch nowych `SalesOrderHeader` jednostek, doda je do `Contact` jednostki, a po usunięciu obiektu, używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metodę, aby dodać obiekt do kolekcji.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiuje relację między dwoma obiektami dołączone w kontekście obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="entityCollection.Attach entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">Kolekcja obiektów w kontekście obiektów, które są powiązane z obiektem źródłowym.</param>
        <summary>Definiuje relacje między obiektem i kolekcji powiązanych obiektów kontekstu obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Attach%2A> Metoda jest używana do definiowania relacje między obiektem i kolekcję obiektów pokrewnych, gdy obiekt źródłowy i kolekcję obiektów pokrewnych już istnieje w kontekście obiektu. Aby dołączyć, gdzie relacje są już zdefiniowane wykresu obiektu lub obiektu, wywołaj <xref:System.Data.Objects.ObjectContext.Attach%2A> metody <xref:System.Data.Objects.ObjectContext>. Aby utworzyć nowy obiekt, który jest powiązany z obiektem źródłowym, wywołaj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metody <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Aby uzyskać więcej informacji, zobacz [Dołączanie i odłączanie obiektów](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Jeśli kolekcja jest już wypełnione lub częściowo wypełnione, <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> metoda scala istniejących jednostek z danej jednostki. Danej jednostki są nie zakłada się, że kompletny zestaw powiązanych jednostek.  
  
 Wszystkie jednostki przekazanej musi znajdować się w <xref:System.Data.EntityState.Unchanged> lub <xref:System.Data.EntityState.Modified> stanu. Obiekty w <xref:System.Data.EntityState.Deleted> stanu są dozwolone tylko, gdy Menedżer stanu jest już śledzony wystąpienie relacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entities" /> Kolekcja jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Obiekt źródłowy lub obiektu w <paramref name="entities" /> kolekcja jest <see langword="null" /> lub nie znajduje się w <see cref="F:System.Data.EntityState.Unchanged" /> lub <see cref="F:System.Data.EntityState.Modified" /> stanu.  
  
—lub— 
Relacji nie można zdefiniować w oparciu o metadanych EDM. Taka sytuacja może wystąpić, gdy skojarzenie w schematu koncepcyjnego nie obsługuje relacji między tymi dwoma typami.</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityCollection.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Dołączany obiekt.</param>
        <summary>Definiuje relację między dwoma obiektami dołączone w kontekście obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> Metoda jest używana do definiowania relacji między dwoma obiektami, gdy oba obiekty już istnieją w kontekście obiektu. Aby dołączyć, gdzie relacje są już zdefiniowane wykresu obiektu lub obiektu, wywołaj <xref:System.Data.Objects.ObjectContext.Attach%2A> metody <xref:System.Data.Objects.ObjectContext>. Aby utworzyć nowy obiekt, który jest powiązany z obiektem źródłowym, wywołaj <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metody <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Aby uzyskać więcej informacji, zobacz [Dołączanie i odłączanie obiektów](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Jeśli <xref:System.Data.Objects.DataClasses.EntityCollection%601> został już załadowany obiektów <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> metoda scala obiektu wraz z istniejących obiektów w <xref:System.Data.Objects.DataClasses.EntityCollection%601>.  
  
 Przyłączonego obiektu nie zakłada się, że kompletny zestaw obiektów powiązanych jednostek.  
  
 Obiekt skojarzony z tym <xref:System.Data.Objects.DataClasses.EntityCollection%601> i musi należeć do wszystkich obiektów, które są podłączone do niego <xref:System.Data.EntityState.Unchanged> lub <xref:System.Data.EntityState.Modified> stanu.  
  
 Obiekty w <xref:System.Data.EntityState.Deleted> stanu może być tylko kiedy dołączone <xref:System.Data.Objects.ObjectStateManager> już służy do śledzenia wystąpienie relacji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 W tym przykładzie dołącza kolekcji o odłączony `SalesOrderDetail` obiektów i odłączyć `SalesOrderHeader` obiektu do kontekstu obiektów, a następnie zdefiniuje relacje pomiędzy `SalesOrderHeader` obiektu, a każdy `SalesOrderDetail` obiektu.  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Gdy <paramref name="entity" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Gdy <paramref name="entity" /> nie może być powiązana z obiektem źródłowym. Taka sytuacja może wystąpić, gdy skojarzenie w schematu koncepcyjnego nie obsługuje relacji między tymi dwoma typami.  
  
—lub— 
Kiedy albo obiekt jest <see langword="null" /> lub nie znajduje się w <see cref="F:System.Data.EntityState.Unchanged" /> lub <see cref="F:System.Data.EntityState.Modified" /> stanu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="override this.Clear : unit -&gt; unit" Usage="entityCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie jednostki z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A> wykonuje następujące czynności:  
  
-   Zestawy <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> flaga `false`.  
  
-   Usuwa wszystkie jednostki z kolekcji.  
  
-   Odłącza relacje między jednostkami usunięte i właściciel <xref:System.Data.Objects.DataClasses.EntityCollection%601> z <xref:System.Data.Objects.ObjectStateManager>.  
  
-   Usuwa właściciela <xref:System.Data.Objects.DataClasses.EntityCollection%601> z powiązanych jednostek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="entityCollection.Contains entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt do zlokalizowania w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
        <summary>Określa, czy konkretny obiekt istnieje w kolekcji.</summary>
        <returns><see langword="true" /> Jeśli obiekt znajduje się w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używa <xref:System.Object.Equals%2A?displayProperty=nameWithType> metody do porównania określony obiekt z obiektami, które już w kolekcji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 W tym przykładzie wykonuje następujące czynności:  
  
1.  Tworzy dwa nowe `SalesOrderHeader` jednostki i dodaje je do `Contact` jednostki.  
  
2.  Pobiera wszystkie powiązane kończy się z <xref:System.Data.Objects.DataClasses.RelationshipManager> skojarzony z jednostką Contact.  
  
3.  Iteruje po kolekcji <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  
  
4.  Pobiera <xref:System.Data.Objects.DataClasses.EntityCollection%601> dla każdego powiązanego zakończenia.  
  
5.  Używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metodę, aby usunąć jeden z obiektów z kolekcji.  
  
6.  Wywołania <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> metodę pozwala ustalić, czy obiekt został usunięty z kolekcji.  
  
7.  Używa <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> metodę, aby dodać jednostkę ponownie.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TEntity&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="entityCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Tablica do skopiowania do.</param>
        <param name="arrayIndex">Rozpoczyna się od zera indeks w tablicy, w których kopiowanie.</param>
        <summary>Kopiuje zawartość kolekcji do tablicy, zaczynając od określonego indeksu tablicy docelowej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę obiektów, które są zawarte w kolekcji.</summary>
        <value>Liczba elementów, które są zawarte w <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Count%2A> Właściwość aktualnie pobiera liczbę jednostek w kolekcji lokalnej i nie będzie odzwierciedlał rozmiar kolekcji w źródle danych. Liczba zero nie musi oznaczać, że powiązane kolekcja jest pusta. Aby określić rozmiar kolekcji w źródle danych, należy wywołać <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metody lub zawierać powiązanego obiektu w ścieżce zapytania. Aby uzyskać więcej informacji, zobacz [ładowanie powiązanych obiektów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100)).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca zapytanie obiektów, które, gdy jest wykonywany, zwraca ten sam zestaw obiektów, która istnieje w bieżącej kolekcji.</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" /> Reprezentujący kolekcji jednostek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana do uzyskania nowego wystąpienia <xref:System.Data.Objects.ObjectQuery%601> , zwraca ten sam zestaw obiektów. Jest to przydatne jako punktu wyjścia dla bardziej złożonych sprzężenia, Unia lub zapytania filtrowanego lub w celu zwrócenia na te same obiekty w stanie odłączony, za pomocą <xref:System.Data.Objects.MergeOption.NoTracking> opcji.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> jest używana do filtrowania obiektów w <xref:System.Data.Objects.DataClasses.EntityCollection%601> umożliwiające powiązanie tylko obiektów określonego typu. Aby uzyskać więcej informacji, zobacz [powiązanie obiektów z kontrolkami](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
   
  
## Examples  
 Ten przykład jest oparty na zmodyfikowaną wersję. Ta wersja obsługuje tabeli na typ dziedziczenia z `Course` jako typ abstrakcyjny. Ukończeni instruktażu, aby zmodyfikować model szkoły do obsługi przykład dziedziczenia tabela wg typu, używany w tym temacie.  
  
 W tym przykładzie pokazano, jak używać <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> w obiektach filtru <xref:System.Data.Objects.DataClasses.EntityCollection%601> i powiązać tylko do obiektów określonego typu. Aby uzyskać pełną wersję tego przykładu, zobacz [jak: Powiązywanie kontrolek z typami pochodnymi](https://msdn.microsoft.com/library/09730c14-3b7b-4563-af4a-7ecfa4e34bd5).  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Gdy obiekt jest w <see cref="F:System.Data.EntityState.Added" /> stanu.  
  
—lub— 
Gdy obiekt jest w <see cref="F:System.Data.EntityState.Detached" /> stanu z <see cref="T:System.Data.Objects.MergeOption" /> innych niż <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który jest używany do iterowania po obiektów w kolekcji.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> , Wykonuje iterację przez zestaw wartości pamięci podręcznej przez <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> jest tylko do odczytu.</summary>
        <value>Zawsze zwraca <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityCollection.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">Określa, jak obiekty w tej kolekcji powinny zostać scalone z obiektami, które może być zwrócony z poprzednich zapytań w odniesieniu do tych samych <see cref="T:System.Data.Objects.ObjectContext" />.</param>
        <summary>Obciążenia związane z obiektów do kolekcji przy użyciu opcji scalania określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Ta metoda wywołuje wewnętrzny `RelatedEnd.ValidateLoad` metoda przed załadowaniem kolekcji, która sprawdza, czy wywołanie <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> ma poprawne warunki. `RelatedEnd.ValidateLoad` Metoda sprawdza, czy:

* Nieprawidłowy <xref:System.Data.Objects.ObjectContext> istnieje.
* Jednostki nie znajduje się w <xref:System.Data.EntityState.Deleted> stanu.
* <xref:System.Data.Objects.MergeOption> Aby uzyskać <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> musi być <xref:System.Data.Objects.MergeOption.NoTracking> tylko wtedy, gdy jednostka źródłowa została <xref:System.Data.Objects.MergeOption.NoTracking>. Jeśli jednostka źródłowa została pobrana z innymi <xref:System.Data.Objects.MergeOption>, <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption> może być cokolwiek ale <xref:System.Data.Objects.MergeOption.NoTracking> (na przykład jednostka może zostały załadowane z <xref:System.Data.Objects.MergeOption.OverwriteChanges> i <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> opcja może być <xref:System.Data.Objects.MergeOption.AppendOnly>).
* Jeśli `mergeOption` jest <xref:System.Data.Objects.MergeOption.NoTracking>, <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> nie jest wywoływana w jednostce już załadowana i <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> nie jest wywoływana w nie jest pusta, nie jest śledzona <xref:System.Data.Objects.DataClasses.RelatedEnd>.
  
 Gdy obiekty w kolekcji zostały już załadowane do <xref:System.Data.Objects.ObjectContext>, <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metoda wymusza <xref:System.Data.Objects.MergeOption> określony przez `mergeOption` parametru. Aby uzyskać więcej informacji, zobacz [rozwiązanie tożsamości, zarządzania stanem i śledzenia zmian](https://msdn.microsoft.com/library/3bd49311-0e72-4ea4-8355-38fe57036ba0).  
  
 By jawnie ładować powiązanych obiektów, należy wywołać `Load` metody w powiązanym zakończeniem zwracany przez właściwość nawigacji. W przypadku relacji jeden do wielu wywołań <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metody <xref:System.Data.Objects.DataClasses.EntityCollection%601>. W przypadku relacji jeden do jednego wywołania <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> na <xref:System.Data.Objects.DataClasses.EntityReference%601>. Spowoduje to załadowanie danych obiektu pokrewnego do kontekstu obiektów. Można wyliczyć kolekcji zwróconych wyników przy użyciu `foreach` pętli (`For Each...Next` w języku Visual Basic) i wywołać warunkowo `Load` metody <xref:System.Data.Objects.DataClasses.EntityReference%601> i <xref:System.Data.Objects.DataClasses.EntityCollection%601> właściwości dla każdej jednostki w wynikach.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> Metoda ładuje obiekty powiązane ze źródła danych czy <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> jest `true`.  
  
> [!NOTE]
>  Gdy wywołujesz <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> metody podczas `foreach` (C#) lub `For Each` wyliczenia (Visual Basic), usługi obiektów podejmuje próbę otwarcia nowego czytnika danych. Ta operacja zakończy się niepowodzeniem, jeśli nie włączono wielu zestawów wyników aktywne, określając `multipleactiveresultsets=true` w parametrach połączenia. Można również załadować wynik kwerendy w <xref:System.Collections.Generic.List%601> kolekcji. Zamyka czytnika danych i umożliwia wyliczania kolekcji można załadować przywoływanych obiektów.  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType> Metody jest zsynchronizowany z <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 W tym przykładzie ładuje powiązane `SalesOrderHeader` obiektów dla `Contact` jednostki.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithload)]
 [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithload)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionDeserialized">
      <MemberSignature Language="C#" Value="public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnCollectionDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCollectionDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCollectionDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnCollectionDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnCollectionDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst strumieniowy.</param>
        <summary>Używana wewnętrznie w celu wykonania deserializacji obiekty jednostki.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst strumieniowy.</param>
        <summary>Używana wewnętrznie w celu wykonywania serializacji obiektów jednostki.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Entity -&gt; bool" Usage="entityCollection.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">Obiekt do usunięcia z kolekcji.</param>
        <summary>Usuwa obiekt z kolekcji i oznaczy relacji do usunięcia.</summary>
        <returns><see langword="true" /> Jeśli element został pomyślnie usunięty; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> Metoda spowoduje również usunięcie relacji między obiektem źródłowym i obiekt usuwana z kolekcji. Jeśli relacja ma ograniczenie integralności referencyjnej, wywołanie <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metody na obiekt zależny oznacza zarówno relacji, jak i obiektu zależnego do usunięcia. Dzieje się tak, ponieważ ograniczenie wskazuje, że obiekt zależny nie może istnieć bez relacji do elementu nadrzędnego. Aby uzyskać więcej informacji, zobacz [elemencie ReferentialConstraint (CSDL)](https://msdn.microsoft.com/library/24f96a80-85b5-4f2e-a14c-0e3eb6796fa0).  
  
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> Zwraca `false` Jeśli określony obiekt nie jest w kolekcji.  
  
   
  
## Examples  
 Ten przykład jest oparty na. Aby uruchomić kod, w tym przykładzie, musi już dodane AdventureWorks Sales Model do projektu i skonfigurować projekt, aby używać programu Entity Framework. Aby to zrobić, wykonaj procedury w [jak: Ręczne konfigurowanie projektu programu Entity Framework](https://msdn.microsoft.com/library/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) i [jak: Ręcznie zdefiniować modelu i mapowania plików](https://msdn.microsoft.com/library/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  
  
 W tym przykładzie użyto <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> metodę, aby usunąć jeden z obiektów z kolekcji, a następnie wywołania <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> metodę pozwala ustalić, czy obiekt został usunięty z kolekcji.  
  
 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> obiekt jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> Obiektu nie jest dołączony do tego samego kontekstu obiektów.  
  
—lub— 
<paramref name="entity" /> Obiekt nie ma Menedżer relacji prawidłowe.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który jest używany do iterowania po zestaw wartości pamięci podręcznej przez <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> , Wykonuje iterację przez zestaw wartości pamięci podręcznej przez <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja powiązanych jednostek składa się z kolekcji obiektów.</summary>
        <value>Właściwość ta zwraca zawsze <see langword="false" /> ponieważ <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> zawiera obiekty i kolekcje nie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.Objects.DataClasses.EntityCollection%601> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję jako <see cref="T:System.Collections.IList" /> używane dla wiązania danych.</summary>
        <returns><see cref="T:System.Collections.IList" /> Obiektów jednostek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Data.Objects.DataClasses.EntityCollection%601> wystąpienia jest rzutowany na <xref:System.ComponentModel.IListSource> interfejsu.  
  
 Ta metoda umożliwia powiązanie danych <xref:System.Data.Objects.DataClasses.EntityCollection%601>. Jest ona wywoływana przez formant powiązany z kolekcji. Aby uzyskać więcej informacji, zobacz [powiązanie obiektów z kontrolkami](https://msdn.microsoft.com/library/2fd34855-929b-4303-a91e-4bb69d958f2b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>