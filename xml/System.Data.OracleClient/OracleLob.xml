<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50450c275873f575e5c59e0fc9ae7e325e7cd529" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52212106" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje dużego obiektu binarnego (<see langword="LOB" />) typ danych przechowywanych na serwerze bazy danych Oracle. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Różni się od <xref:System.Data.OracleClient.OracleBFile> , dane są przechowywane na serwerze, a nie w pliku fizycznego w systemie operacyjnym. Może to być także obiekt odczytu i zapisu, w odróżnieniu od <xref:System.Data.OracleClient.OracleBFile>, który jest zawsze tylko do odczytu.  
  
 <xref:System.Data.OracleClient.OracleLob> Może być jednym z następujących <xref:System.Data.OracleClient.OracleType> typów danych.  
  
|Typ danych typu OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` typu danych, który zawiera dane binarne o maksymalnym rozmiarze 4 gigabajty (GB). To jest mapowany <xref:System.Array> typu <xref:System.Byte>.|  
|`Clob`|Oracle `CLOB` typu danych, która zawiera znak danych na podstawie domyślny znak zestawu na serwerze o maksymalnym rozmiarze 4 GB. To jest mapowany <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` typu danych, który zawiera znak danych oparte na national zestawu znaków na serwerze o maksymalnym rozmiarze 4 GB. To jest mapowany <xref:System.String>.|  
  
 Deweloper aplikacji .NET można pobrać programu Oracle `LOB` wartości na typy danych podstawowych platformy .NET, takich jak <xref:System.Array> typu <xref:System.Byte> i <xref:System.String>, lub wyspecjalizowanych <xref:System.Data.OracleClient.OracleLob> typu danych. <xref:System.Data.OracleClient.OracleLob> Klasy obsługuje odczytywanie danych z oraz zapisywanie do programu Oracle `LOB` w bazie danych programu Oracle.  
  
 Poniżej przedstawiono główne cechy <xref:System.Data.OracleClient.OracleLob> typu danych, które odróżnia go od podstawowych typów danych .NET:  
  
-   Po pobraniu programu Oracle `LOB` wartość z bazy danych Oracle do <xref:System.Data.OracleClient.OracleLob> klasy, można zmienić `LOB` danych w otwartych transakcji i zmiany bezpośrednio są odzwierciedlane w bazie danych. Po pobraniu programu Oracle `LOB` wartością do <xref:System.Array> typu <xref:System.Byte> lub <xref:System.String> i zaktualizować te macierze zmiany nie są odzwierciedlane w bazie danych.  
  
-   Kiedy używasz <xref:System.Data.OracleClient.OracleLob> klasy, aby uzyskać dostęp fragment `LOB` wartość, tylko tym fragmencie jest przekazywana do klienta z bazy danych Oracle. Kiedy używasz <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> metodę, aby uzyskać dostęp fragment `LOB` wartość całą zawartość wartości są przekazywane do klienta z bazy danych Oracle.  
  
 Aby uzyskać <xref:System.Data.OracleClient.OracleLob> obiektu, wywołaj <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> metody.  
  
 Można skonstruować <xref:System.Data.OracleClient.OracleLob> , ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócona z serwera ma wartość NULL, tak jak pokazano w tym przykładzie:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zera bajtowych `LOB` , <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 Wybieranie `LOB` zwraca kolumnę zawierającą wartości null <xref:System.Data.OracleClient.OracleLob.Null>.  
  
 Należy rozpocząć transakcji przed uzyskaniem tymczasowego `LOB`. W przeciwnym razie <xref:System.Data.OracleClient.OracleDataReader> może zakończyć się niepowodzeniem w celu uzyskania danych później.  
  
 Można również otworzyć tymczasowego `LOB` Oracle, wywołując DBMS_LOB. CREATETEMPORARY system przechowywane procedury i powiązanie `LOB` parametr wyjściowy. Po stronie klienta, tymczasowego `LOB` zachowuje się jak na podstawie tabeli `LOB`. Na przykład, aby zaktualizować tymczasowy `LOB`, muszą być ujęte w transakcji.  
  
 W poniższym przykładzie C# pokazano sposób otwierania tymczasowego `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  Dziedziczonego <xref:System.IO.Stream.WriteByte%2A> metoda kończy się niepowodzeniem, jeśli używane w danych znakowych i <xref:System.InvalidOperationException> zgłaszany. Użyj <xref:System.Data.OracleClient.OracleLob.Write%2A> metody zamiast tego.  
>   
>  Tymczasowe `LOB`są takie same, tylko zamykane, gdy połączenie jest zamknięte, ale z puli i pod obciążeniem, tymczasowy `LOB`s nie zamykaj konsoli. Ten problem można rozwiązać, usuwając tymczasowe `LOB`, wywołując `tempLob.Dispose()`.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">
          <see langword="LOB" /> z którego mają zostać dołączone do danych.</param>
        <summary>Dołącza dane z określonego <see langword="LOB" /> do bieżącego <see langword="LOB" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
 Wszystkie dane ze źródła `LOB` jest dołączany na końcu bieżącego `LOB`. Pozycja ani `LOB` obliczeniem i zmienić w trakcie tego procesu.  
  
 Podstawowe typy danych zawsze musi być taka sama. Na przykład, jeśli są dołączane z <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być także <xref:System.Data.OracleClient.OracleType.NClob>.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null, lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapobiega uruchomieniu którego podczas wykonywania operacji zapisu wielu wyzwalaczy po stronie serwera.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapobiega uruchomieniu którego podczas wykonywania operacji odczytu wiele wyzwalaczy po stronie serwera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Otwiera `LOB` w <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> tryb; dlatego `LOB` mogą być odczytane tylko od, nie zapisywać, odpowiedniego wywołania <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>. Aby wykonać operacje zapisu partii `LOB`, wywołaj <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> za pomocą <xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji obecnie zgłasza programu Oracle "ORA 22293: już otwarty w ramach jednej transakcji biznesowych" błąd. Ponadto, jeśli można uzyskać `LOB` przy użyciu innego <xref:System.Data.OracleClient.OracleDataReader>, a oryginalny obiekt wywołujący nie została wywołana <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> ma generowaną metodę, ten sam błąd. W związku z tym, należy wywołać <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metoda po zakończeniu przy użyciu <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">Tryb (jeden z <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> wartości) w którym <see langword="LOB" /> można uzyskać dostęp między tą <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> wywołania i odpowiedni <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> wywołania.</param>
        <summary>Wyzwalacze po stronie serwera uniemożliwia wyzwalania wykonywaniem wielu odczytu i zapisu w trybie dostępu określonego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji obecnie zgłasza programu Oracle "ORA 22293: już otwarty w ramach jednej transakcji biznesowych" błąd. Ponadto, jeśli można uzyskać `LOB` przy użyciu innego <xref:System.Data.OracleClient.OracleDataReader>, a oryginalny obiekt wywołujący nie została wywołana <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> ma generowaną metodę, ten sam błąd. W związku z tym, należy wywołać <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metoda po zakończeniu przy użyciu <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see langword="LOB" /> można odczytać strumienia.</summary>
        <value>
          <see langword="true" /> Jeśli <see langword="LOB" /> strumień obsługuje Odczyt, w przeciwnym razie <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy do przodu i do tyłu wyszukiwanie operacje mogą być wykonywane.</summary>
        <value>
          <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty, w przeciwnym razie <see langword="true" />. Zawsze <see langword="true" /> dla <see cref="F:System.Data.OracleClient.OracleLob.Null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawsze zwraca wartość true, niezależnie od tego, czy <see langword="LOB" /> obsługuje pisanie lub nie.</summary>
        <value>Zawsze zwraca <see langword="true" />, niezależnie od tego, czy wiadomość po otwarciu lub nazwa aktualnie otwartego <see langword="LOB" /> obsługuje pisanie lub nie, <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapisać `LOB`, musi mieć pozyskanym `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiona transakcji lokalnej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą minimalną liczbę bajtów, które można pobrać z lub wysyłania do serwera podczas operacji odczytu/zapisu.</summary>
        <value>Minimalna liczba bajtów do pobrania lub wysłania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez obiekt <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> właściwość nie jest ustawienie dla programu .NET Framework Data Provider for Oracle. Zamiast tego jest wartość, która Oracle wywołania interfejsu (OCI) używa podczas komunikowania się z serwerem. Użyj <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> aby upewnić się, że fragmenty po stronie klienta mają taki sam rozmiar. Odczyt lub zapis na mniejsze fragmenty nie będzie buforować dane i powoduje, że komunikacji dwustronnej zoptymalizowane pod kątem mniej do serwera, ponieważ pakiet nie jest odebrania lub wysłania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nową <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu, który odwołuje się do tej samej bazy danych Oracle <see langword="LOB" /> co oryginalny <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</summary>
        <returns>Nowy <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu, który odwołuje się do tej samej bazy danych Oracle <see langword="LOB" /> co oryginalny <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości nowej <xref:System.Data.OracleClient.OracleLob> obiektu początkowo miały te same wartości jak oryginalnego obiektu. Jednak po ukończeniu <xref:System.Data.OracleClient.OracleLob.Clone%2A> zostanie zakończone, każdy <xref:System.Data.OracleClient.OracleLob> obiektu jest niezależna od innych. Na przykład zmiana wartości <xref:System.Data.OracleClient.OracleLob.Position%2A> właściwość w oryginalnym <xref:System.Data.OracleClient.OracleLob> nie zmienia wartość <xref:System.Data.OracleClient.OracleLob.Position%2A> na kopii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Data.OracleClient.OracleConnection" /> używane przez to wystąpienie elementu <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Połączenie ze źródłem danych.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe <see cref="T:System.Data.OracleClient.OracleLob" />.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczbę skopiowanych bajtów. Nie obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze musi być taka sama. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być także <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowego jest za końcem docelowego `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między końcem `LOB` i Przesunięcie docelowe poza koniec jest dopełniana zerami dla `BLOB` typów danych i miejsca do magazynowania dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może pomyślnie, ale nie aktualizować `LOB` na serwerze. W takim jednak lokalna kopia `LOB` zostaną zaktualizowane. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` Metoda Czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określonych w <paramref name="destination" /> parametr ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe <see cref="T:System.Data.OracleClient.OracleLob" /></param>
        <param name="destinationOffset">Przesunięcie, do którego należy kopiować. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być parzystą liczbą bajtów.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" /> z określoną ilością danych.</summary>
        <returns>Liczbę skopiowanych bajtów. Nie obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze musi być taka sama. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być także <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowego jest za końcem docelowego `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między końcem `LOB` i Przesunięcie docelowe poza koniec jest dopełniana zerami dla `BLOB` typów danych i miejsca do magazynowania dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` Metoda Czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określonych w <paramref name="destination" /> parametru jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="destinationOffset" /> parametr jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Wartość określona w <paramref name="destinationOffset" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> typem danych nie jest jeszcze.  
  
—lub— 
Należy określić <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych jako parzystą liczbą bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">Przesunięcie do skopiowania. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <param name="destination">Miejsce docelowe <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />.</param>
        <param name="destinationOffset">Przesunięcie docelowej, do którego należy kopiować. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <param name="amount">Ilość danych, w bajtach, aby skopiować. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" /> z określoną ilością danych oraz przesunięcie źródła.</summary>
        <returns>Liczbę skopiowanych bajtów. Nie obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze musi być taka sama. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być także <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowego jest za końcem docelowego `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między końcem `LOB` i Przesunięcie docelowe poza koniec jest dopełniana zerami dla `BLOB` typów danych i miejsca do magazynowania dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` Metoda Czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określonych w <paramref name="destination" /> parametru jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="amount" />, <paramref name="sourceOffset" />, lub <paramref name="destinationOffset" /> parametr jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Wartość określona w <paramref name="amount" />, <paramref name="sourceOffset" />, lub <paramref name="destinationOffset" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> typem danych nie jest jeszcze.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia wyzwalaczy po stronie serwera, aby wznowić uruchomieniu którego po wykonaniu wiele operacji zapisu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> metoda przed rozpoczęciem wykonywania operacji zapisu na <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa dane z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Spowoduje usunięcie wszystkich danych z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba bajtów wymazane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> nie obcięcia danych. `LOB` Długość pozostaje taka sama dla `BLOB` typu danych i dane wymazane zastępuje 0x00. `CLOB` i `NCLOB` typy danych są zastępowane przez miejsca do magazynowania.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie, z którego można wymazać. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <param name="amount">Ilość danych, w bajtach, aby wymazać. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <summary>Usuwa określoną ilość danych z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba bajtów wymazane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suma wartości w `offset` i `amount` parametry mogą być większe niż rozmiar <xref:System.Data.OracleClient.OracleLob>. W związku z tym, określając wartość większą niż zwracany przez <xref:System.Data.OracleClient.OracleLob.Length%2A> właściwość zakończy się pomyślnie; jednak <xref:System.Data.OracleClient.OracleLob.Erase%2A> tylko usuwa do końca <xref:System.Data.OracleClient.OracleLob>. (Podobnie, jeśli wartość ujemna jest przekazywany do `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> powiedzie się, ale tylko wymazać, zaczynając od początku <xref:System.Data.OracleClient.OracleLob>.) To zachowanie różni się od pozostałych <xref:System.Data.OracleClient.OracleLob.Read%2A> i <xref:System.Data.OracleClient.OracleLob.Write%2A> metody i ofert korzyści można wymazać wszystkie dane na podstawie wartości określonego przez `offset` bez wprowadzania dodatkowych obie strony na serwerze, aby sprawdzić rozmiar rzeczywisty.  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> nie obcięcia danych. `LOB` Długość pozostaje taka sama dla `BLOB` typu danych i dane wymazane zastępuje 0x00. `CLOB` i `NCLOB` typy danych są zastępowane przez miejsca do magazynowania.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  W tej wersji operacji zapisu tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nie są obecnie obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tej wersji ta metoda nie działa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aplikacja o nazwie <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metody.</summary>
        <value>
          <see langword="true" /> Jeśli aplikacja o nazwie <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metody, w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy używany jest serwer Oracle 8.0.5 Oracle "ORA 00600: kod błędu wewnętrznego" jest zgłaszany wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Data.OracleClient.OracleLob" /> jest <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> strumienia.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.OracleClient.OracleLob" /> jest <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> strumienia, w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Data.OracleClient.OracleLob" /> jest tymczasowa <see langword="LOB" />.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.OracleClient.OracleLob" /> jest tymczasowa <see langword="LOB" />, w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższy przykład pokazuje, jak utworzenie tymczasowego `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca rozmiar <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Rozmiar <see cref="T:System.Data.OracleClient.OracleLob" /> w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar <xref:System.Data.OracleClient.OracleLob> zawsze jest zwracany w bajtach dla wszystkich typów danych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca <see langword="LOB" /> typu danych.</summary>
        <value>Jedną z <see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" /> typów danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Może być jedną z następujących <xref:System.Data.OracleClient.OracleType> typów danych.  
  
|Typ danych typu OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` typu danych, który zawiera dane binarne o maksymalnym rozmiarze 4 gigabajty. To jest mapowany <xref:System.Array> typu <xref:System.Byte>.|  
|`Clob`|Oracle `CLOB` na serwerze, o maksymalnym rozmiarze 4 gigabajty ustawić typ danych, która zawiera znak danych na podstawie domyślny znak. To jest mapowany <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` typu danych, który zawiera znak danych oparte na national zestawu znaków na serwerze o maksymalnym rozmiarze 4 gigabajty. To jest mapowany <xref:System.String>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje wartość null <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można skonstruować <xref:System.Data.OracleClient.OracleLob> , ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócona z serwera ma wartość NULL, tak jak pokazano w tym przykładzie:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zero bajtów `LOB` , <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący odczytu pozycji w <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</summary>
        <value>Bieżąca pozycja w ciągu <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumień musi obsługiwać wyszukiwanie do pobierania lub ustawiania położenia. Użyj <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> właściwości w celu określenia, czy strumień obsługuje wyszukiwanie.  
  
 Wyszukiwanie w dowolne miejsce poza długość strumienia jest obsługiwana. Wyszukiwanie do nieparzysta położenia w przypadku `CLOB` i `NCLOB` obsługiwana jest również typy danych. Aby uzyskać więcej informacji, zobacz sekcję Uwagi <xref:System.Data.OracleClient.OracleLob.Read%2A> właściwości.  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A> Właściwości nie zachować liczbę bajtów ze strumienia, który ma zostać wykorzystany, dlatego zostało pominięte, lub obu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Po powrocie z tej metody buforu zawiera określonej tablicy bajtów z wartością pomiędzy <paramref name="offset" /> i (<paramref name="offset" /> + <paramref name="count" />) zastąpione przez Bajty odczytane z bieżącego źródła.</param>
        <param name="offset">Zerze przesunięcie w <paramref name="buffer" /> od którego należy rozpocząć przechowywanie danych odczytany ze strumienia bieżącego. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <param name="count">Maksymalna liczba bajtów do odczytu z bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <summary>Odczytuje sekwencji bajtów z bieżącej <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i postęp odczytu pozycji w strumieniu przez liczbę bajtów.</summary>
        <returns>Całkowita liczba bajtów odczytanych w buforze. Przyczyną może być mniejsza niż żądana liczba bajtów Jeśli czy liczby bajtów nie są obecnie dostępne lub zero (0), jeśli został osiągnięty koniec strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A> Metoda odczytuje maksymalnie `count` bajtów z bieżącego przesyłania strumieniowego i zapisuje je w `buffer` począwszy od `offset`. Bieżącą pozycję w strumieniu jest zaawansowany przez liczbę bajtów odczytanych; Jednakże jeśli wystąpi wyjątek, bieżącą pozycję w strumieniu pozostaje niezmieniony. <xref:System.Data.OracleClient.OracleLob.Read%2A> Zwraca liczbę odczytanych bajtów. Wartość zwracana wynosi zero, tylko wtedy, gdy pozycji obecnie znajduje się na końcu strumienia. <xref:System.Data.OracleClient.OracleLob.Read%2A> blokuje, dopóki nie mogą być odczytywane co najmniej jednego bajtu danych w przypadku, gdy dane są niedostępne.<xref:System.Data.OracleClient.OracleLob.Read%2A> Zwraca wartość 0, jeśli użytkownik podejmie próbę odczytu z `LOB` gdy bieżące położenie jest na końcu `LOB`. <xref:System.Data.OracleClient.OracleLob.Read%2A> może zwracać mniej bajtów niż żądany, nawet jeżeli nie osiągnięto koniec strumienia.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. Dlatego podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, możesz zawsze do czynienia z liczbą bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg tekstowy zawierający znaki z trzech zostanie zapisany jako `NCLOB` na serwerze bazy danych Oracle, gdzie zestaw znaków co najmniej 4 bajtów na znak, a także wykonywania `Read` operacji, można określić długość ciągu jako 6 bajtów, chociaż istnieje przechowywane jako 12 bajtów na serwerze.  
  
 W poniższym przykładzie C# pokazano, jak odczytać <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipluate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 Można skonstruować <xref:System.Data.OracleClient.OracleLob> , ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócona z serwera ma wartość NULL, tak jak pokazano w poniższym przykładzie.  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zero bajtów `LOB` , <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> lub <paramref name="count" /> parametr nie jest dodatni.  
  
—lub— 
Suma parametrów przesunięcia i licznika jest większa niż długość buforu.  
  
—lub— 
Wartość określona w <paramref name="amount" /> lub <paramref name="offset" /> parametr jest mniejsza od zera lub większa niż 4 gigabajty.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie bajtów względem początkowego. Jeśli <paramref name="offset" /> jest ujemna, nowe położenie poprzedza pozycji określonej przez <paramref name="origin" /> przez liczbę bajtów określoną przez <paramref name="offset" />. Jeśli <paramref name="offset" /> wynosi zero, nowe położenie jest na pozycji określonej przez <paramref name="origin" />. Jeśli <paramref name="offset" /> jest dodatnia, nowe miejsce poniżej pozycji określonej przez <paramref name="origin" /> przez liczbę bajtów określoną przez <paramref name="offset" />.</param>
        <param name="origin">Wartości typu <see cref="T:System.IO.SeekOrigin" /> wskazujące punkt odniesienia używany do uzyskania nowej pozycji.</param>
        <summary>Ustawia położenie na bieżącym <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</summary>
        <returns>Nowa pozycja w ciągu bieżącego strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `offset` jest ujemna, nowe położenie musi poprzedzać pozycji określonej przez `origin` przez liczbę bajtów określoną przez `offset`. Jeśli `offset` wynosi zero, Nowa pozycja musi być w położeniu wskazanym przez `origin`. Jeśli `offset` jest dodatnia, nowe miejsce, należy wykonać w położeniu wskazanym przez `origin` przez liczbę bajtów określoną przez `offset`.  
  
 Wyszukiwanie w dowolne miejsce poza długość strumienia jest obsługiwana. Wyszukiwanie do nieparzysta położenia w przypadku `CLOB` i `NCLOB` obsługiwana jest również typy danych. Aby uzyskać więcej informacji, zobacz sekcję Uwagi <xref:System.Data.OracleClient.OracleLob.Read%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="origin" /> Parametr nie zawiera prawidłowej wartości.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Pozycja wynikowy wykracza poza długość wartości.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Wymagana długość bieżącej <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia, w bajtach. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <summary>Ustawia długość <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia do wartości mniejszej niż bieżąca długość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Próbując zwiększyć długość <xref:System.Data.OracleClient.OracleLob> strumienia kończy się niepowodzeniem i zwraca "komunikat: ORA 22926: określona przycinania długość jest większa niż długość bieżącą wartość obiektu LOB" z serwera bazy danych Oracle.  
  
 Strumień musi obsługiwać zarówno pisanie i znalezienia dla <xref:System.Data.OracleClient.OracleLob.SetLength%2A> funkcji.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. Dlatego podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, możesz zawsze do czynienia z liczbą bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg tekstowy zawierający znaki z trzech zostanie zapisany jako `NCLOB` na serwerze bazy danych Oracle, gdzie zestaw znaków co najmniej 4 bajtów na znak, a także wykonywania `SetLength` operacji, można określić długość ciągu jako 6 bajtów, chociaż istnieje przechowywane jako 12 bajtów na serwerze.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  Operacja zapisu element tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="value" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> typem danych nie jest jeszcze.  
  
—lub— 
Wartość określona w <paramref name="value" /> parametr jest mniejsza od zera lub większa niż 4 gigabajty.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość strumienia środowiska uruchomieniowego języka wspólnego odpowiada wartości podstawowej.</summary>
        <value>Aby uzyskać <see cref="F:System.Data.OracleClient.OracleType.Blob" />, tablicę typu <see langword="Byte[]" />. Aby uzyskać <see cref="F:System.Data.OracleClient.OracleType.Clob" /> i <see cref="F:System.Data.OracleClient.OracleType.NClob" />, <see langword="String" />. W przypadku danych o wartości null <see cref="T:System.DBNull" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać <xref:System.Data.OracleClient.OracleType.Blob> typy danych <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca cały danych bazowych jako ciągły tablicy typu `Byte[]`. Aby uzyskać <xref:System.Data.OracleClient.OracleType.Clob> i <xref:System.Data.OracleClient.OracleType.NClob> typy danych <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca wszystkie dane jako `String` — typ danych. W przypadku danych o wartości null <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca <xref:System.DBNull>. Porównując wartości zwracane, rozróżnienie między pustymi danymi o wartości null i dane.  
  
> [!NOTE]
>  Zaletą używania `LOB` typy danych to możliwość pobierania dużych ilości danych we fragmentach po stronie klienta. Jednak jeśli używasz <xref:System.Data.OracleClient.OracleLob.Value%2A>, możesz uzyskać wszystkie dane dla `LOB` kolumny jako jeden ciągły fragmentów, co może znacznie zwiększyć obciążenie aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Ta metoda kopiuje liczbę bajtów określoną w <paramref name="count" /> z <paramref name="buffer" /> do bieżącego strumienia.</param>
        <param name="offset">Zerze przesunięcie w <paramref name="buffer" /> od którego należy zacząć kopiowanie bajtów do bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <param name="count">Liczba bajtów do zapisania bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, to musi być liczbą parzystą.</param>
        <summary>Zapisuje sekwencję bajtów do bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i przesuwa bieżącą pozycję w tym strumieniu, liczba zapisanych bajtów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu zakończy się pomyślnie, pozycji w strumieniu jest przesuwany o liczba zapisanych bajtów. Jeśli wystąpi wyjątek, pozycji w strumieniu nie jest zmieniany.  
  
 Zapisu poza końcem `LOB` jest dozwolone i powiększa `LOB` , liczba zapisanych bajtów.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. Dlatego podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, możesz zawsze do czynienia z liczbą bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg tekstowy zawierający znaki z trzech zostanie zapisany jako `NCLOB` na serwerze bazy danych Oracle, gdzie zestaw znaków co najmniej 4 bajtów na znak, a także wykonywania `Write` operacji, można określić długość ciągu jako 6 bajtów, chociaż istnieje przechowywane jako 12 bajtów na serwerze.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
 W poniższym przykładzie C# pokazano, jak zapisywać <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  Operacja zapisu element tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Parametr to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> lub <paramref name="count" /> parametr nie jest dodatni.  
  
—lub— 
Suma <paramref name="offset" /> i <paramref name="count" /> parametrów jest większy niż <paramref name="buffer" /> długości.  
  
—lub— 
Wartość określona w <paramref name="count" /> lub <paramref name="offset" /> parametr jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Należy określić <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych jako parzystą liczbą bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd bazy danych Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">Bajtów do zapisu do strumienia.</param>
        <summary>Zapisuje bajt bieżąca pozycja w <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i przesuwa do przodu pozycję w strumieniu przez jednego bajtu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu zakończy się pomyślnie, pozycji w strumieniu jest przesuwany o jednym bajtem. Jeśli wystąpi wyjątek, pozycji w strumieniu nie jest zmieniany.  
  
 Zapisu poza końcem `LOB` jest dozwolone i powiększa `LOB` przez jednego bajtu.  
  
 Można zapisać do `LOB`, użytkownik musi mieć pobrany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć lokalne transakcja, została uruchomiona.  
  
> [!NOTE]
>  Operacja zapisu element tylko do odczytu `LOB` może się powieść, ale nie powoduje aktualizacji `LOB` na serwerze. W takim jednak lokalna kopia `LOB` jest aktualizowana. W związku z tym, później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>