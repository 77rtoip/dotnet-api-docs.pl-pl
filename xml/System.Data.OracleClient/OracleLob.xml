<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a83f377d4f34b227bcd3770e76cd7f0e774d7ce6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69371640" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje typ danych dużego obiektu binarnego (<see langword="LOB" />) przechowywanego na serwerze Oracle. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Różni się <xref:System.Data.OracleClient.OracleBFile> od, że dane są przechowywane na serwerze, a nie w pliku fizycznym w systemie operacyjnym. Może być również obiektem do odczytu i zapisu, w przeciwieństwie <xref:System.Data.OracleClient.OracleBFile>do elementu, który jest zawsze tylko do odczytu.  
  
 Może być jednym z tych <xref:System.Data.OracleClient.OracleType> typów danych. <xref:System.Data.OracleClient.OracleLob>  
  
|Typ danych OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Typ danych `BLOB` Oracle zawierający dane binarne o maksymalnym rozmiarze wynoszącym 4 gigabajty (GB). To mapuje do <xref:System.Array> typu. <xref:System.Byte>|  
|`Clob`|Typ danych `CLOB` Oracle, który zawiera dane znakowe, na podstawie domyślnego zestawu znaków na serwerze z maksymalnym rozmiarem wynoszącym 4 GB. To mapuje <xref:System.String>na.|  
|`NClob`|Typ danych `NCLOB` Oracle, który zawiera dane znakowe, na podstawie Narodowego zestawu znaków na serwerze o maksymalnym rozmiarze wynoszącym 4 GB. To mapuje <xref:System.String>na.|  
  
 Deweloper aplikacji platformy .NET może pobrać wartości Oracle `LOB` do podstawowych typów danych .NET, takich jak <xref:System.Array> typ <xref:System.Byte> i <xref:System.String>lub wyspecjalizowany <xref:System.Data.OracleClient.OracleLob> typ danych. Klasa obsługuje odczytywanie danych z i zapisywanie do programu Oracle `LOB` w bazie danych Oracle. <xref:System.Data.OracleClient.OracleLob>  
  
 Poniżej przedstawiono główne cechy <xref:System.Data.OracleClient.OracleLob> typu danych, które odróżniają go od podstawowych typów danych .NET:  
  
-   Po pobraniu wartości Oracle `LOB` z bazy danych programu Oracle <xref:System.Data.OracleClient.OracleLob> do klasy można zmienić `LOB` dane w otwartej transakcji, a zmiany zostaną odzwierciedlone bezpośrednio do bazy danych. Jeśli pobierasz wartość Oracle `LOB` <xref:System.Array> do typu <xref:System.Byte> lub <xref:System.String> i zaktualizujesz te tablice, zmiany nie zostaną odzwierciedlone w bazie danych.  
  
-   W przypadku korzystania <xref:System.Data.OracleClient.OracleLob> z klasy w celu uzyskania dostępu do fragmentu `LOB` wartości tylko ten fragment jest przesyłany z bazy danych programu Oracle do klienta. W przypadku korzystania z <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> metody w celu uzyskania dostępu do fragmentu `LOB` wartości cała zawartość wartości jest przesyłana z bazy danych programu Oracle do klienta.  
  
 Aby uzyskać <xref:System.Data.OracleClient.OracleLob> obiekt, <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> Wywołaj metodę.  
  
 Można utworzyć obiekt <xref:System.Data.OracleClient.OracleLob> , który ma wartość null, przy użyciu tego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używana głównie do testowania, czy `LOB` zwracana z serwera ma wartość null, co ilustruje poniższy przykład:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość null `LOB` zachowuje się podobnie do zera w tym samym `LOB` bajcie <xref:System.Data.OracleClient.OracleLob.Read%2A> , a zawsze zwraca zero bajtów.  
  
 Wybór kolumny zawierającej wartość NULL zwraca <xref:System.Data.OracleClient.OracleLob.Null>. `LOB`  
  
 Należy rozpocząć transakcję przed uzyskaniem tymczasowej `LOB`. W przeciwnym razie może nie być możliwe późniejsze uzyskanie danych. <xref:System.Data.OracleClient.OracleDataReader>  
  
 Możesz również otworzyć tymczasową `LOB` w programie Oracle, wywołując DBMS_LOB. Procedura składowana procedury składowanej systemu i powiązania `LOB` parametru wyjściowego. Po stronie klienta tymczasowy `LOB` zachowuje się jak oparty `LOB`na tabeli. Na przykład, aby zaktualizować tymczasowy `LOB`, musi być ujęty w transakcji.  
  
 Poniższy C# przykład pokazuje, jak otworzyć tymczasowy `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  Metoda dziedziczona <xref:System.IO.Stream.WriteByte%2A> kończy się niepowodzeniem, jeśli <xref:System.InvalidOperationException> jest używana z danymi znakowymi i jest zgłaszany. Zamiast tego użyj metody. <xref:System.Data.OracleClient.OracleLob.Write%2A>  
>   
>  Tymczasowe `LOB`s są zamykane tylko wtedy, gdy połączenie jest zamknięte, ale z buforowaniem i ładowaniem `LOB`tymczasowym nie zamyka się. Można rozwiązać ten problem, usuwając tymczasowy `LOB`, przez wywołanie. `tempLob.Dispose()`  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">, <see langword="LOB" /> Z którego mają zostać dołączone dane.</param>
        <summary>Dołącza dane z określonego <see langword="LOB" /> do bieżącego. <see langword="LOB" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
 Wszystkie dane ze źródła `LOB` są dołączane na końcu bieżącego `LOB`elementu. Pozycja żadnej wartości nie `LOB` jest oceniana ani zmieniana w trakcie tego procesu.  
  
 Podstawowe typy danych muszą zawsze być takie same. Na przykład, jeśli dołączysz z <xref:System.Data.OracleClient.OracleType.NClob>, miejscem docelowym <xref:System.Data.OracleClient.OracleLob> musi być <xref:System.Data.OracleClient.OracleType.NClob>również.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt źródłowy <see cref="T:System.Data.OracleClient.OracleLob" /> został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uniemożliwia wyzwalanie wyzwalaczy po stronie serwera podczas wykonywania wielu operacji zapisu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapobiega wyzwalaniu wyzwalania po stronie serwera podczas wykonywania wielu operacji odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Otwiera tryb w; w <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> związku z tym, <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> możnatylkoodczytywaćz,niezapisywaćdo,ażdo`LOB`odpowiedniego `LOB` wywołania do. Aby wykonać operacje zapisu `LOB`wsadowego w, Połącz <xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite> <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> z.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji powoduje obecnie wyrzucanie programu Oracle "ORA-22293: W ramach tej samej transakcji Wystąpił błąd. Ponadto, jeśli uzyskasz `LOB` inny <xref:System.Data.OracleClient.OracleDataReader>, a oryginalny <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> obiekt wywołujący nie wywołał metody, zostanie wygenerowany ten sam błąd. W związku z tym, należy <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> wywołać metodę po zakończeniu korzystania z. <xref:System.Data.OracleClient.OracleLob>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">Tryb (jedna <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> z wartości), w <see langword="LOB" /> którym można uzyskać dostęp do tego <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> wywołania i odpowiednie <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> wywołanie.</param>
        <summary>Zapobiega wyzwalaniu wyzwalania po stronie serwera podczas wykonywania wielu operacji odczytu i zapisu w określonym trybie dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji powoduje obecnie wyrzucanie programu Oracle "ORA-22293: W ramach tej samej transakcji Wystąpił błąd. Ponadto, jeśli uzyskasz `LOB` inny <xref:System.Data.OracleClient.OracleDataReader>, a oryginalny <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> obiekt wywołujący nie wywołał metody, zostanie wygenerowany ten sam błąd. W związku z tym, należy <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> wywołać metodę po zakończeniu korzystania z. <xref:System.Data.OracleClient.OracleLob>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see langword="LOB" /> czy strumień może być odczytany.</summary>
        <value><see langword="true" />Jeśli strumień obsługuje odczytywanie, w <see langword="false" /> przeciwnym razie <see langword="LOB" /> , jeśli jest zamknięty lub usunięty. <see langword="LOB" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy można wykonywać operacje wyszukiwania do przodu i do tyłu.</summary>
        <value><see langword="false" />Jeśli jest zamknięte lub usunięte, w przeciwnym <see langword="true" />razie. <see langword="LOB" /> Zawsze <see langword="true" /> dla <see cref="F:System.Data.OracleClient.OracleLob.Null" />programu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawsze zwraca wartość true, niezależnie od tego, <see langword="LOB" /> czy obsługuje pisać czy nie.</summary>
        <value>Zawsze zwraca <see langword="true" />, niezależnie od tego, czy otwarte lub <see langword="LOB" /> nieusunięte, obsługuje zapis <see langword="LOB" /> lub nie, <see langword="false" /> jeśli jest zamknięty lub usunięty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi rozpocząć transakcję lokalną.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą minimalną liczbę bajtów do pobrania lub wysłania do serwera podczas operacji odczytu/zapisu.</summary>
        <value>Minimalna liczba bajtów do pobrania lub wysłania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> właściwość nie jest ustawieniem .NET Framework dostawca danych dla programu Oracle. Zamiast tego jest to wartość, która jest stosowana przez interfejs wywołania Oracle (OCI) podczas komunikacji z serwerem. Użyj <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> , aby upewnić się, że fragmenty po stronie klienta mają ten sam rozmiar. Odczyt lub zapis w mniejszych fragmentach nie buforuje danych i powoduje przeprowadzenie mniej zoptymalizowanej rundy z serwerem, ponieważ pełny pakiet nie jest odbierany lub wysyłany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt, który odwołuje się do tego samego programu <see cref="T:System.Data.OracleClient.OracleLob" /> Oracle <see langword="LOB" /> co oryginalny obiekt.</summary>
        <returns>Nowy <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt, który odwołuje się do <see langword="LOB" /> tego samego elementu <see cref="T:System.Data.OracleClient.OracleLob" /> Oracle co oryginalny obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości nowego <xref:System.Data.OracleClient.OracleLob> obiektu początkowo mają takie same wartości jak w przypadku oryginalnego obiektu. Jednak po <xref:System.Data.OracleClient.OracleLob.Clone%2A> zakończeniu, każdy <xref:System.Data.OracleClient.OracleLob> obiekt jest niezależny od drugiego. Na przykład zmiana wartości <xref:System.Data.OracleClient.OracleLob.Position%2A> właściwości w oryginalnym <xref:System.Data.OracleClient.OracleLob> nie powoduje zmiany wartości <xref:System.Data.OracleClient.OracleLob.Position%2A> kopii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka bieżący strumień i zwalnia zasoby skojarzone ze strumieniem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera użycie przez to wystąpienie <see cref="T:System.Data.OracleClient.OracleLob" />. <see cref="T:System.Data.OracleClient.OracleConnection" /></summary>
        <value>Połączenie ze źródłem danych.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje z tego <see cref="T:System.Data.OracleClient.OracleLob" /> do lokalizacji docelowej <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe <see cref="T:System.Data.OracleClient.OracleLob" />.</param>
        <summary>Kopiuje z tego <see cref="T:System.Data.OracleClient.OracleLob" /> do lokalizacji docelowej <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba skopiowanych bajtów. Spowoduje to wykluczenie wszystkich uzupełnionych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych muszą zawsze być takie same. Na przykład, jeśli kopiujesz z <xref:System.Data.OracleClient.OracleType.NClob>, obiekt docelowy <xref:System.Data.OracleClient.OracleLob> musi być <xref:System.Data.OracleClient.OracleType.NClob>również.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec miejsca docelowego `LOB` `LOB` , do którego dane są kopiowane, są rozszerzane. Odstęp między końcem `LOB` i przesunięciem docelowym poza końcem jest dopełniany zerami dla `BLOB` typów danych i spacji dla `CLOB` typów danych i `NCLOB` .  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może powieść się, ale nie `LOB` zaktualizować na serwerze programu. W takim przypadku jednak lokalna kopia `LOB` programu zostanie zaktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
>   
>  Metoda nie czyści zawartości miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania. `CopyTo`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.OracleClient.OracleLob" /> Określony<paramref name="destination" /> w parametrze ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe<see cref="T:System.Data.OracleClient.OracleLob" /></param>
        <param name="destinationOffset">Przesunięcie, do którego ma zostać skopiowane. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba bajtów.</param>
        <summary>Kopiuje z tego <see cref="T:System.Data.OracleClient.OracleLob" /> miejsca do lokalizacji <see cref="T:System.Data.OracleClient.OracleLob" /> docelowej o określonej ilości danych.</summary>
        <returns>Liczba skopiowanych bajtów. Spowoduje to wykluczenie wszystkich uzupełnionych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych muszą zawsze być takie same. Na przykład, jeśli kopiujesz z <xref:System.Data.OracleClient.OracleType.NClob>, obiekt docelowy <xref:System.Data.OracleClient.OracleLob> musi być <xref:System.Data.OracleClient.OracleType.NClob>również.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec miejsca docelowego `LOB` `LOB` , do którego dane są kopiowane, są rozszerzane. Odstęp między końcem `LOB` a przesunięciem docelowym poza końcem jest dopełniany zerami dla `BLOB` typów danych i spacji dla `CLOB` typów danych i `NCLOB` .  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
>   
>  Metoda nie czyści zawartości miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania. `CopyTo`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.OracleClient.OracleLob" /> Określony<paramref name="destination" /> w parametrze jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="destinationOffset" /> parametrze jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Wartość określona w <paramref name="destinationOffset" /> parametrze <see langword="CLOB" /> lub <see langword="NCLOB" /> dla typu danych nie jest parzysta.  
  
—lub— 
Należy określić i <see langword="CLOB" /> <see langword="NCLOB" /> podać typy danych jako parzystą liczbę bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">Przesunięcie, z którego ma zostać skopiowane. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <param name="destination">Miejsce docelowe <see langword="OracleLob" /> <see cref="N:System.Data.OracleClient" />.</param>
        <param name="destinationOffset">Przesunięcie docelowe, do którego ma zostać skopiowane. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <param name="amount">Ilość danych (w bajtach) do skopiowania. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <summary>Kopiuje z tego <see cref="T:System.Data.OracleClient.OracleLob" /> do lokalizacji docelowej <see cref="T:System.Data.OracleClient.OracleLob" /> o określonej ilości danych i przesunięcia źródła.</summary>
        <returns>Liczba skopiowanych bajtów. Spowoduje to wykluczenie wszystkich uzupełnionych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych muszą zawsze być takie same. Na przykład, jeśli kopiujesz z <xref:System.Data.OracleClient.OracleType.NClob>, obiekt docelowy <xref:System.Data.OracleClient.OracleLob> musi być <xref:System.Data.OracleClient.OracleType.NClob>również.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec miejsca docelowego `LOB` `LOB` , do którego dane są kopiowane, są rozszerzane. Odstęp między końcem `LOB` a przesunięciem docelowym poza końcem jest dopełniany zerami dla `BLOB` typów danych i spacji dla `CLOB` typów danych i `NCLOB` .  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
>   
>  Metoda nie czyści zawartości miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania. `CopyTo`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.OracleClient.OracleLob" /> Określony<paramref name="destination" /> w parametrze jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="amount" />parametrze, <paramref name="sourceOffset" />, lub <paramref name="destinationOffset" /> jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Wartość <paramref name="amount" />określona w <paramref name="destinationOffset" /> parametrze <see langword="CLOB" /> lub dla typu danych lub <see langword="NCLOB" />nie <paramref name="sourceOffset" />jest parzysta.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez ten obiekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia wyzwalaczom po stronie serwera wznowienie uruchamiania po wykonaniu wielu operacji zapisu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Data.OracleClient.OracleLob>metodę przed rozpoczęciem wykonywania operacji zapisu na. <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wymazuje dane z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kasuje wszystkie dane z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba wymazanych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A>Nie obcina danych. Długość pozostaje taka sama `BLOB` dla typu danych, a wymazane dane są zastępowane przez 0x00. `LOB` `CLOB`i `NCLOB` typy danych są zamieniane na spacje.  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie, z którego ma zostać wymazane. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <param name="amount">Ilość danych, w bajtach, do wymazania. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <summary>Wymazuje określoną ilość danych z tego <see cref="T:System.Data.OracleClient.OracleLob" />elementu.</summary>
        <returns>Liczba wymazanych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suma wartości w `offset` parametrach i `amount` może być większa niż rozmiar <xref:System.Data.OracleClient.OracleLob>. W związku z tym określenie wartości większej niż zwracana przez <xref:System.Data.OracleClient.OracleLob.Length%2A> Właściwość powiedzie się, ale <xref:System.Data.OracleClient.OracleLob.Erase%2A> tylko zostanie wymazany <xref:System.Data.OracleClient.OracleLob>na końcu. (Podobnie, jeśli wartość ujemna jest przenoszona do `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> powiedzie się, ale tylko wymazywanie <xref:System.Data.OracleClient.OracleLob>od początku elementu). To zachowanie różni się od <xref:System.Data.OracleClient.OracleLob.Read%2A> metod i <xref:System.Data.OracleClient.OracleLob.Write%2A> i oferuje możliwość wymazania wszystkich danych z wartości określonej przez `offset` nie przeprowadzenia dodatkowej komunikacji między serwerami w celu zweryfikowania rzeczywistego rozmiaru.  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A>Nie obcina danych. Długość pozostaje taka sama `BLOB` dla typu danych, a wymazane dane są zastępowane przez 0x00. `LOB` `CLOB`i `NCLOB` typy danych są zamieniane na spacje.  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  W tej wersji operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obecnie nie jest obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie działa w tej wersji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aplikacja nazywa <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metodę.</summary>
        <value><see langword="true" />Jeśli aplikacja wywołała <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metodę, <see langword="false" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku korzystania z serwera Oracle 8.0.5 jest generowany wyjątek "ORA-00600: wewnętrzny kod błędu".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Data.OracleClient.OracleLob" /> <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> jest to strumień.</summary>
        <value><see langword="true" /><see cref="T:System.Data.OracleClient.OracleLob" /> Jeśli <see langword="false" />jest to strumień,<see cref="F:System.Data.OracleClient.OracleBFile.Null" /> w przeciwnym razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Data.OracleClient.OracleLob" /> czy jest to tymczasowa. <see langword="LOB" /></summary>
        <value><see langword="true" />Jeśli jest to tymczasowa <see langword="LOB" />, w przeciwnym razie <see langword="false" />. <see cref="T:System.Data.OracleClient.OracleLob" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższy przykład pokazuje, jak utworzyć tymczasowy `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca rozmiar <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Rozmiar <see cref="T:System.Data.OracleClient.OracleLob" /> w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar <xref:System.Data.OracleClient.OracleLob> jest zawsze zwracany w bajtach dla wszystkich typów danych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca <see langword="LOB" /> typ danych.</summary>
        <value>Jeden z <see cref="T:System.Data.OracleClient.OracleType" /> <see langword="LOB" /> typów danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Może być jednym z następujących <xref:System.Data.OracleClient.OracleType> typów danych. <xref:System.Data.OracleClient.OracleLob>  
  
|Typ danych OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Typ danych `BLOB` Oracle zawierający dane binarne o maksymalnym rozmiarze wynoszącym 4 gigabajty. To mapuje do <xref:System.Array> typu. <xref:System.Byte>|  
|`Clob`|Typ danych `CLOB` Oracle, który zawiera dane znakowe, na podstawie domyślnego zestawu znaków na serwerze z maksymalnym rozmiarem wynoszącym 4 gigabajty. To mapuje <xref:System.String>na.|  
|`NClob`|Typ danych `NCLOB` Oracle, który zawiera dane znakowe, na podstawie Narodowego zestawu znaków na serwerze o maksymalnym rozmiarze wynoszącym 4 gigabajty. To mapuje <xref:System.String>na.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje obiekt o <see cref="T:System.Data.OracleClient.OracleLob" /> wartości null.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można utworzyć obiekt <xref:System.Data.OracleClient.OracleLob> , który ma wartość null, przy użyciu tego formatu:  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 Ta technika jest używana głównie do testowania, czy `LOB` zwracana z serwera ma wartość null, co ilustruje poniższy przykład:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość null `LOB` zachowuje się podobnie do zera w tym `LOB` samym bajcie, <xref:System.Data.OracleClient.OracleLob.Read%2A> a zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą pozycję odczytu w <see cref="T:System.Data.OracleClient.OracleLob" /> strumieniu.</summary>
        <value>Bieżąca pozycja w <see cref="T:System.Data.OracleClient.OracleLob" /> strumieniu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumień musi obsługiwać wyszukiwanie w celu pobrania lub ustawienia pozycji. <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> Użyj właściwości, aby określić, czy strumień obsługuje wyszukiwanie.  
  
 Wyszukiwanie w dowolnej lokalizacji poza długością strumienia jest obsługiwane. Wyszukiwanie w pozycji `CLOB` nieparzystej i `NCLOB` typów danych jest również obsługiwane. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Data.OracleClient.OracleLob.Read%2A> uwagi właściwości.  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A> Właściwość nie śledzi liczby bajtów ze strumienia, który został zużyty, pominięty lub oba te elementy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Gdy ta metoda zwraca, <paramref name="offset" /> bufor zawiera określoną tablicę bajtową z wartościami między i (<paramref name="offset" /> + <paramref name="count" />) zastąpionych przez Bajty odczytane z bieżącego źródła.</param>
        <param name="offset">Przesunięcie bajtu (liczony od zera <paramref name="buffer" /> ), w którym rozpocznie się przechowywanie danych odczytanych z bieżącego strumienia. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <param name="count">Maksymalna liczba bajtów, które mają być odczytane z bieżącego strumienia. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <summary>Odczytuje sekwencję bajtów z bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i postępuje zgodnie z pozycją w strumieniu przez liczbę odczytanych bajtów.</summary>
        <returns>Całkowita liczba bajtów odczytywanych w buforze. Ta wartość może być mniejsza niż liczba bajtów żądana, jeśli wiele bajtów nie jest obecnie dostępna lub zero (0), jeśli osiągnięto koniec strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda odczytuje `buffer` maksymalnie bajtów z bieżącego strumienia i zapisuje je w czasie `offset`od. `count` <xref:System.Data.OracleClient.OracleLob.Read%2A> Bieżąca pozycja w strumieniu jest zaawansowana przez liczbę odczytanych bajtów; Jeśli jednak wystąpi wyjątek, bieżąca pozycja w strumieniu pozostaje niezmieniona. <xref:System.Data.OracleClient.OracleLob.Read%2A>Zwraca liczbę odczytanych bajtów. Wartość zwracana jest równa zero tylko wtedy, gdy pozycja znajduje się na końcu strumienia. <xref:System.Data.OracleClient.OracleLob.Read%2A>Program zablokuje do momentu odczytania co najmniej jednego bajtu danych, w przypadku, gdy żadne dane nie są dostępne.<xref:System.Data.OracleClient.OracleLob.Read%2A> Zwraca wartość 0, jeśli próbujesz odczytać z `LOB` elementu, gdy bieżące położenie jest na `LOB`końcu. <xref:System.Data.OracleClient.OracleLob.Read%2A>może zwrócić mniejszą liczbę bajtów niż żądana, nawet jeśli koniec strumienia nie został osiągnięty.  
  
 Dostawca danych .NET Framework dla programu Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym `CLOB` w `NCLOB` przypadku uzyskiwania dostępu do typów danych i korzystania z nich zawsze ponosisz liczbę bajtów, gdzie każdy znak ma 2 bajty. Na przykład jeśli ciąg tekstowy zawierający trzy znaki jest zapisywany jako `NCLOB` na serwerze Oracle, gdzie zestaw znaków wynosi 4 bajty na znak, a `Read` wykonywanie operacji jest możliwe, należy określić długość ciągu jako 6 bajtów, chociaż jest to przechowywane jako 12 bajtów na serwerze.  
  
 Poniższy C# przykład ilustruje sposób odczytywania <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipulate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 Można utworzyć obiekt <xref:System.Data.OracleClient.OracleLob> , który ma wartość null, przy użyciu tego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używana głównie do testowania, czy `LOB` zwracana z serwera ma wartość null, jak pokazano w poniższym przykładzie.  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość null `LOB` zachowuje się podobnie do zera w tym `LOB` samym bajcie, <xref:System.Data.OracleClient.OracleLob.Read%2A> a zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Jest odwołaniem null (<see langword="Nothing" /> w Visual Basic). <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> parametrze lub <paramref name="count" /> nie jest dodatnia.  
  
—lub— 
Suma parametrów przesunięcia i liczby jest większa niż długość buforu.  
  
—lub— 
Wartość określona w <paramref name="amount" /> parametrze lub <paramref name="offset" /> jest mniejsza od zera lub większa niż 4 gigabajty.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie bajtów względem źródła. Jeśli <paramref name="offset" /> jest ujemna, Nowa pozycja poprzedza pozycję <paramref name="origin" /> określoną przez liczbę bajtów określoną przez <paramref name="offset" />. Jeśli <paramref name="offset" /> wartość jest równa zero, Nowa pozycja jest pozycją <paramref name="origin" />określoną przez. Jeśli <paramref name="offset" /> jest wartością dodatnią, Nowa pozycja jest zgodna z pozycją <paramref name="origin" /> określoną przez <paramref name="offset" />liczbę bajtów określoną przez.</param>
        <param name="origin">Wartość typu <see cref="T:System.IO.SeekOrigin" /> wskazująca punkt odniesienia używany do uzyskania nowego położenia.</param>
        <summary>Ustawia pozycję w bieżącym <see cref="T:System.Data.OracleClient.OracleLob" /> strumieniu.</summary>
        <returns>Nowa pozycja w bieżącym strumieniu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `offset` jest ujemna, Nowa pozycja musi poprzedzać pozycję `origin` określoną przez liczbę bajtów określoną przez `offset`. Jeśli `offset` wartość jest równa zero, Nowa pozycja musi być pozycją `origin`określoną przez. Jeśli `offset` jest dodatnia, Nowa pozycja musi następować po pozycji określonej `origin` przez `offset`liczbę bajtów określoną przez.  
  
 Wyszukiwanie w dowolnej lokalizacji poza długością strumienia jest obsługiwane. Wyszukiwanie w pozycji `CLOB` nieparzystej i `NCLOB` typów danych jest również obsługiwane. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Data.OracleClient.OracleLob.Read%2A> uwagi właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="origin" /> Parametr nie zawiera prawidłowej wartości.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Pozycja wyników przekracza długość wartości.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Data.OracleClient.OracleLob" /> Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Wymagana długość bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia w bajtach. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <summary>Ustawia długość <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia do wartości mniejszej niż bieżąca długość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Próba zwiększenia długości <xref:System.Data.OracleClient.OracleLob> strumienia kończy się niepowodzeniem i zwraca komunikat: ORA-22926: określona długość przycinania jest większa niż bieżąca długość wartości LOB z serwera Oracle.  
  
 Strumień musi obsługiwać zarówno funkcję zapisu, jak i <xref:System.Data.OracleClient.OracleLob.SetLength%2A> wyszukiwanie.  
  
 Dostawca danych .NET Framework dla programu Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym `CLOB` w `NCLOB` przypadku uzyskiwania dostępu do typów danych i korzystania z nich zawsze ponosisz liczbę bajtów, gdzie każdy znak ma 2 bajty. Na przykład jeśli ciąg tekstowy zawierający trzy znaki jest zapisywany jako `NCLOB` na serwerze Oracle, gdzie zestaw znaków wynosi 4 bajty na znak, a `SetLength` wykonywanie operacji jest możliwe, należy określić długość ciągu jako 6 bajtów, chociaż jest to przechowywane jako 12 bajtów na serwerze.  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  Operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="value" /> parametrze <see langword="CLOB" /> lub <see langword="NCLOB" /> dla typu danych nie jest parzysta.  
  
—lub— 
Wartość określona w <paramref name="value" /> parametrze jest mniejsza od zera lub większa niż 4 gigabajty.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera równoważną wartość strumienia środowiska uruchomieniowego języka wspólnego z wartości źródłowej.</summary>
        <value>Dla <see cref="F:System.Data.OracleClient.OracleType.Blob" />, tablica typu <see langword="Byte[]" />. Dla <see cref="F:System.Data.OracleClient.OracleType.Clob" /> i <see cref="F:System.Data.OracleClient.OracleType.NClob" />, .<see langword="String" /> Dla danych <see cref="T:System.DBNull" />o wartości null.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Data.OracleClient.OracleType.Blob> przypadku <xref:System.Data.OracleClient.OracleLob.Value%2A> typów danych zwraca całe dane bazowe jako ciągłą tablicę typu `Byte[]`. W <xref:System.Data.OracleClient.OracleType.Clob> przypadku <xref:System.Data.OracleClient.OracleType.NClob> typów `String` danych i zwraca wszystkie dane jako typ danych. <xref:System.Data.OracleClient.OracleLob.Value%2A> W przypadku danych <xref:System.Data.OracleClient.OracleLob.Value%2A> o wartości <xref:System.DBNull>NULL zwraca wartość. Porównując zwrócone wartości, można odróżnić puste dane, dane o wartości null i dane.  
  
> [!NOTE]
>  Zaletą korzystania `LOB` z typów danych jest możliwość pobierania dużych ilości danych w fragmentach na kliencie. Jeśli <xref:System.Data.OracleClient.OracleLob.Value%2A>jednak używasz, uzyskujesz wszystkie dane `LOB` dla kolumny jako jeden ciągły fragment, co może znacząco zwiększyć obciążenie aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Ta metoda kopiuje liczbę bajtów określoną w <paramref name="count" /> elemencie od <paramref name="buffer" /> do bieżącego strumienia.</param>
        <param name="offset">Przesunięcie bajtu (liczony od zera <paramref name="buffer" /> ), w którym rozpocznie się kopiowanie bajtów do bieżącego strumienia. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <param name="count">Liczba bajtów do zapisania w bieżącym strumieniu. Dla <see langword="CLOB" /> i<see langword="NCLOB" /> typów danych, musi to być parzysta liczba.</param>
        <summary>Zapisuje sekwencję bajtów do bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i postępuje bieżącą pozycję w tym strumieniu przez liczbę zapisanych bajtów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu powiedzie się, pozycja w strumieniu zastąpi przez liczbę zapisanych bajtów. Jeśli wystąpi wyjątek, pozycja w strumieniu pozostaje niezmieniona.  
  
 Zapis poza końcem `LOB` jest dozwolony i powiększa się `LOB` o liczbę zapisywanych bajtów.  
  
 Dostawca danych .NET Framework dla programu Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym `CLOB` w `NCLOB` przypadku uzyskiwania dostępu do typów danych i korzystania z nich zawsze ponosisz liczbę bajtów, gdzie każdy znak ma 2 bajty. Na przykład jeśli ciąg tekstowy zawierający trzy znaki jest zapisywany jako `NCLOB` na serwerze Oracle, gdzie zestaw znaków wynosi 4 bajty na znak, a `Write` wykonywanie operacji jest możliwe, należy określić długość ciągu jako 6 bajtów, chociaż jest to przechowywane jako 12 bajtów na serwerze.  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
 Poniższy C# przykład ilustruje sposób zapisu do <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  Operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr jest odwołaniem o wartości null<see langword="Nothing" /> (w Visual Basic). <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> parametrze lub <paramref name="count" /> nie jest dodatnia.  
  
—lub— 
Suma <paramref name="offset" /> <paramref name="count" />parametrówi jest większa niż Długość.<paramref name="buffer" />  
  
—lub— 
Wartość określona w <paramref name="count" /> parametrze lub <paramref name="offset" /> jest mniejsza od zera lub większa niż 4 gigabajty.  
  
—lub— 
Należy określić i <see langword="CLOB" /> <see langword="NCLOB" /> podać typy danych jako parzystą liczbę bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja nie znajduje się w transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Bajt do zapisu w strumieniu.</param>
        <summary>Zapisuje bajty w bieżącym położeniu w <see cref="T:System.Data.OracleClient.OracleLob" /> strumieniu i przesuwa pozycję w strumieniu o jeden bajt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu powiedzie się, pozycja w strumieniu zastąpi o jeden bajt. Jeśli wystąpi wyjątek, pozycja w strumieniu pozostaje niezmieniona.  
  
 Zapis poza końcem `LOB` jest dozwolony i powiększa `LOB` o jeden bajt.  
  
 Aby można było zapisać `LOB`w, należy `LOB` pobrać klauzulę using for Update w instrukcji SQL SELECT, a użytkownik musi mieć uruchomioną transakcję lokalną.  
  
> [!NOTE]
>  Operacja zapisu w trybie tylko `LOB` do odczytu może zakończyć się powodzeniem, ale nie `LOB` aktualizuje na serwerze. W takim przypadku jednak lokalna kopia `LOB` programu jest aktualizowana. W związku z tym późniejsze operacje odczytu <xref:System.Data.OracleClient.OracleLob> na obiekcie mogą zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
