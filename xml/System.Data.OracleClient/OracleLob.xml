<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f752621e9496b0bd55f13fe4c3cb60aecdfbea99" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30446847" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje dużego obiektu binarnego (<see langword="LOB" />) typu danych przechowywanych na serwerze programu Oracle. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Różni się od <xref:System.Data.OracleClient.OracleBFile> ponieważ dane są przechowywane na serwerze zamiast w pliku fizycznego w systemie operacyjnym. Może to być także obiekt odczytu i zapisu w odróżnieniu od <xref:System.Data.OracleClient.OracleBFile>, która zawsze jest tylko do odczytu.  
  
 <xref:System.Data.OracleClient.OracleLob> Może być jedną z tych <xref:System.Data.OracleClient.OracleType> typów danych.  
  
|Typ danych typu OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` typ danych zawierający dane binarne o maksymalnym rozmiarze 4 gigabajty (GB). Mapuje to <xref:System.Array> typu <xref:System.Byte>.|  
|`Clob`|Oracle `CLOB` ustawić typ danych zawierający dane znakowe, oparte na domyślny znak na serwerze, o maksymalnym rozmiarze 4 GB. Mapuje to <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` typ danych zawierający dane znakowe oparte na znak national ustawić na serwerze o maksymalnym rozmiarze 4 GB. Mapuje to <xref:System.String>.|  
  
 Deweloper aplikacji .NET można pobrać programu Oracle `LOB` wartości na podstawowe typy danych .NET, takie jak <xref:System.Array> typu <xref:System.Byte> i <xref:System.String>, lub specjalne <xref:System.Data.OracleClient.OracleLob> — typ danych. <xref:System.Data.OracleClient.OracleLob> Klasy obsługuje Odczyt danych z oraz zapisywanie do programu Oracle `LOB` w bazie danych programu Oracle.  
  
 Poniżej przedstawiono główne cechy <xref:System.Data.OracleClient.OracleLob> odróżniający go od podstawowe typy danych .NET typ danych:  
  
-   Po pobraniu programu Oracle `LOB` wartości z bazy danych programu Oracle do <xref:System.Data.OracleClient.OracleLob> klasy, można zmienić `LOB` danych w otwartych transakcji i zmiany bezpośrednio zostaną odzwierciedlone w bazie danych. Jeśli pobieranie programu Oracle `LOB` wartości do <xref:System.Array> typu <xref:System.Byte> lub <xref:System.String> i zaktualizować te tablic, zmiany nie są uwzględniane w bazie danych.  
  
-   Jeśli używasz <xref:System.Data.OracleClient.OracleLob> klasę, aby uzyskać dostęp fragment `LOB` wartość, tylko że fragmentu jest przekazywana do klienta z bazy danych programu Oracle. Jeśli używasz <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> metody dostępu fragment do `LOB` wartość całą zawartość wartości są przekazywane do klienta z bazy danych programu Oracle.  
  
 Aby uzyskać <xref:System.Data.OracleClient.OracleLob> obiekt, należy wywołać <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> metody.  
  
 Można utworzyć <xref:System.Data.OracleClient.OracleLob> który ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócone z serwera ma wartość NULL, jak pokazano w poniższym przykładzie:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zera.-bajtowych `LOB` w tym <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 Wybieranie `LOB` kolumny, która zawiera wartość null, zwraca <xref:System.Data.OracleClient.OracleLob.Null>.  
  
 Należy rozpocząć transakcji przed uzyskaniem tymczasowej `LOB`. W przeciwnym razie <xref:System.Data.OracleClient.OracleDataReader> może zakończyć się niepowodzeniem do uzyskiwania danych później.  
  
 Można również otworzyć tymczasowej `LOB` w oprogramowaniu Oracle przez wywołanie metody DBMS_LOB. CREATETEMPORARY system przechowywane procedury i powiązanie `LOB` parametru wyjściowego. Po stronie klienta, tymczasowej `LOB` zachowuje się jak na podstawie tabeli `LOB`. Na przykład, aby zaktualizować tymczasowy `LOB`, musi być ujęta w transakcji.  
  
 W poniższym przykładzie C# pokazano, jak otworzyć tymczasowej `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  Dziedziczonego <xref:System.IO.Stream.WriteByte%2A> metody zakończy się niepowodzeniem, jeśli jest używana z danych znakowych i <xref:System.InvalidOperationException> jest generowany. Użyj <xref:System.Data.OracleClient.OracleLob.Write%2A> metody zamiast tego.  
>   
>  Tymczasowe `LOB`s są tylko zamknięty, jeśli połączenie jest zamknięte, ale z puli i pod obciążeniem, tymczasowego `LOB`nie zamykaj s. Ten problem można rozwiązać przez usuwanie tymczasowy `LOB`, wywołując `tempLob.Dispose()`.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">
          <see langword="LOB" /> Umożliwiające dołączanie danych.</param>
        <summary>Dołącza dane z określonego <see langword="LOB" /> do bieżącego <see langword="LOB" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
 Wszystkie dane ze źródła `LOB` jest dołączany do końca bieżącego `LOB`. Pozycja ani `LOB` obliczone lub zmienione w trakcie tego procesu.  
  
 Podstawowe typy danych zawsze muszą być takie same. Na przykład, jeśli są dołączane z <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być również <xref:System.Data.OracleClient.OracleType.NClob>.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> ma wartość null, lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Źródło <see cref="T:System.Data.OracleClient.OracleLob" /> obiektów został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapobiega uruchamiania podczas wykonywania operacji zapisu na wiele wyzwalaczy po stronie serwera.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapobiega uruchamiania podczas wykonywania operacji odczytu wiele wyzwalaczy po stronie serwera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Otwiera `LOB` w <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> tryb; w związku z tym `LOB` mogą być odczytywane tylko od, nie zapisywać, odpowiedniego wywołania <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>. Do wykonania operacji zapisu partii do `LOB`, wywołaj <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> z <xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji obecnie zgłasza programu Oracle "ORA 22293: LOB już otwarty w tej samej transakcji" błąd. Ponadto, jeśli można uzyskać `LOB` przy użyciu innego <xref:System.Data.OracleClient.OracleDataReader>, i oryginalny obiekt wywołujący nie wywołał <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metody, ten sam błąd jest generowany. W związku z tym należy wywołać <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metody po zakończeniu przy użyciu <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">Tryb (jeden z <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> wartości) w którym <see langword="LOB" /> mogą uzyskiwać między tą <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> połączeń i odpowiadający mu <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> wywołania.</param>
        <summary>Wyzwalacze po stronie serwera uniemożliwia wyzwalania podczas wykonywania wielu odczytu i zapisu w określony tryb dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
 Wywoływanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> więcej niż jeden raz w ramach tej samej transakcji obecnie zgłasza programu Oracle "ORA 22293: LOB już otwarty w tej samej transakcji" błąd. Ponadto, jeśli można uzyskać `LOB` przy użyciu innego <xref:System.Data.OracleClient.OracleDataReader>, i oryginalny obiekt wywołujący nie wywołał <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metody, ten sam błąd jest generowany. W związku z tym należy wywołać <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> metody po zakończeniu przy użyciu <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see langword="LOB" /> można odczytać strumienia.</summary>
        <value>
          <see langword="true" /> Jeśli <see langword="LOB" /> strumienia obsługuje Odczyt, w przeciwnym razie <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy do przodu i do tyłu operacji szukania mogą być wykonywane.</summary>
        <value>
          <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty, w przeciwnym razie <see langword="true" />. Zawsze <see langword="true" /> dla <see cref="F:System.Data.OracleClient.OracleLob.Null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawsze zwraca wartość true, niezależnie od tego, czy <see langword="LOB" /> obsługuje zapisywania lub nie.</summary>
        <value>Zawsze zwraca <see langword="true" />, niezależnie od tego, czy istnieje otwarty lub undisposed <see langword="LOB" /> obsługuje zapisywania lub nie, <see langword="false" /> Jeśli <see langword="LOB" /> jest zamknięty lub usunięty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą minimalną liczbę bajtów do pobrania z lub wysyłać do serwera podczas operacji odczytu/zapisu.</summary>
        <value>Minimalna liczba bajtów do pobrania lub wysłania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> właściwość nie jest ustawienie programu .NET Framework Data Provider for Oracle. Zamiast tego jest wartość Oracle Call Interface (OCI) używa podczas komunikowania się z serwerem. Użyj <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> aby upewnić się, że fragmenty po stronie klienta mają taki sam rozmiar. Odczytu lub zapisu w mniejsze fragmenty nie będzie buforować dane i powoduje, że podróż zoptymalizowanych pod kątem mniej na serwerze, ponieważ pakiet nie jest odebranych lub wysłanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu, który odwołuje się do tego samego Oracle <see langword="LOB" /> jak oryginał <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</summary>
        <returns>Nowy <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu, który odwołuje się do tego samego Oracle <see langword="LOB" /> jak oryginał <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości nowego <xref:System.Data.OracleClient.OracleLob> obiekt początkowo ma takie same wartości jak w przypadku oryginalnego obiektu. Jednak po <xref:System.Data.OracleClient.OracleLob.Clone%2A> zostanie zakończone, w każdym <xref:System.Data.OracleClient.OracleLob> obiekt jest niezależna od innych. Na przykład zmiana wartości <xref:System.Data.OracleClient.OracleLob.Position%2A> właściwości w pierwotnej <xref:System.Data.OracleClient.OracleLob> nie zmienia wartości <xref:System.Data.OracleClient.OracleLob.Position%2A> na kopii.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Data.OracleClient.OracleConnection" /> używane przez to wystąpienie elementu <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Połączenie ze źródłem danych.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe <see cref="T:System.Data.OracleClient.OracleLob" />.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba bajtów skopiowanych. Obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze muszą być takie same. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być również <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec docelowy `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między koniec `LOB` i Przesunięcie docelowe wykraczał poza jest uzupełniana zerami dla `BLOB` typy danych i obszarów dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizować `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` zostaną zaktualizowane. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` — Metoda nie czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określony w <paramref name="destination" /> parametr ma wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">Miejsce docelowe <see cref="T:System.Data.OracleClient.OracleLob" /></param>
        <param name="destinationOffset">Przesunięcie, do którego zostaną skopiowane. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych, musi to być parzysta liczba bajtów.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" /> z określoną ilością danych.</summary>
        <returns>Liczba bajtów skopiowanych. Obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze muszą być takie same. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być również <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec docelowy `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między koniec `LOB` i Przesunięcie docelowe wykraczał poza jest uzupełniana zerami dla `BLOB` typy danych i obszarów dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` — Metoda nie czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określony w <paramref name="destination" /> parametru jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="destinationOffset" /> parametrów jest mniejsza niż zero lub większa niż 4 GB.  
  
 —lub—  
  
 Wartość określona w <paramref name="destinationOffset" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> — typ danych nie jest jeszcze.  
  
 —lub—  
  
 Należy określić <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych jako parzystą liczbą bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">Przesunięcie do skopiowania. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <param name="destination">Miejsce docelowe <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />.</param>
        <param name="destinationOffset">Przesunięcie docelowe, do którego zostaną skopiowane. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <param name="amount">Ilość danych w bajtach, aby skopiować. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <summary>Kopie z tej <see cref="T:System.Data.OracleClient.OracleLob" /> do miejsca docelowego <see cref="T:System.Data.OracleClient.OracleLob" /> z określoną ilością danych i przesunięcie źródła.</summary>
        <returns>Liczba bajtów skopiowanych. Obejmuje to wszystkie wypełniony bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podstawowe typy danych zawsze muszą być takie same. Na przykład, jeśli kopiujesz <xref:System.Data.OracleClient.OracleType.NClob>, miejsce docelowe <xref:System.Data.OracleClient.OracleLob> musi być również <xref:System.Data.OracleClient.OracleType.NClob>.  
  
 Jeśli przesunięcie docelowe wykracza poza koniec docelowy `LOB`, `LOB` jest rozszerzony do którego dane są kopiowane. Odstęp między koniec `LOB` i Przesunięcie docelowe wykraczał poza jest uzupełniana zerami dla `BLOB` typy danych i obszarów dla `CLOB` i `NCLOB` typy danych.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
>   
>  `CopyTo` — Metoda nie czyści zawartość miejsca docelowego `OracleLob` przed wykonaniem operacji kopiowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Określony w <paramref name="destination" /> parametru jest pełny.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="amount" />, <paramref name="sourceOffset" />, lub <paramref name="destinationOffset" /> parametrów jest mniejsza niż zero lub większa niż 4 GB.  
  
 —lub—  
  
 Wartość określona w <paramref name="amount" />, <paramref name="sourceOffset" />, lub <paramref name="destinationOffset" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> — typ danych nie jest jeszcze.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia wyzwalaczy po stronie serwera można wznowić uruchamiania po wykonaniu wielu operacji zapisu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> metoda przed rozpoczęciem wykonywania operacji zapisu na <xref:System.Data.OracleClient.OracleLob>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa dane z tego <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Spowoduje usunięcie wszystkich danych z tej <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba bajtów wymazane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> nie obcięcia danych. `LOB` Długość jest taka sama dla `BLOB` typu danych i wymazywania danych zastępuje 0x00. `CLOB` i `NCLOB` typy danych są zastępowane przez spacje.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie, z których chcesz wymazać. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <param name="amount">Ilość danych w bajtach, aby wymazać. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <summary>Usuwa określoną ilością danych z tej <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <returns>Liczba bajtów wymazane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suma wartości w `offset` i `amount` parametry mogą być większe niż rozmiar <xref:System.Data.OracleClient.OracleLob>. W związku z tym, określając wartość większą niż zwróconą przez <xref:System.Data.OracleClient.OracleLob.Length%2A> właściwości zakończy się pomyślnie; jednak <xref:System.Data.OracleClient.OracleLob.Erase%2A> usuwa tylko na końcu <xref:System.Data.OracleClient.OracleLob>. (Podobnie, jeśli wartość ujemna jest przekazywana do `offset`, <xref:System.Data.OracleClient.OracleLob.Erase%2A> powiedzie się, ale tylko wymazać, zaczynając od początku <xref:System.Data.OracleClient.OracleLob>.) To zachowanie różni się od elementu <xref:System.Data.OracleClient.OracleLob.Read%2A> i <xref:System.Data.OracleClient.OracleLob.Write%2A> metody i ofert zaletą możliwość usunięcia wszystkich danych z wartości określona przez `offset` bez wprowadzania dodatkowych obie strony na serwerze, aby sprawdzić rzeczywisty rozmiar.  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> nie obcięcia danych. `LOB` Długość jest taka sama dla `BLOB` typu danych i wymazywania danych zastępuje 0x00. `CLOB` i `NCLOB` typy danych są zastępowane przez spacje.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  W tej wersji, operacja zapisu na tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nie są obecnie obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tej wersji ta metoda nie działa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aplikacja o nazwie <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metody.</summary>
        <value>
          <see langword="true" /> Jeśli aplikacja o nazwie <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> metody, w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy używany jest serwer programu Oracle 8.0.5, Oracle "ORA 00600: kod błędu wewnętrznego" wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Data.OracleClient.OracleLob" /> jest <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> strumienia.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.OracleClient.OracleLob" /> jest <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> strumienia, w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Data.OracleClient.OracleLob" /> jest tymczasowej <see langword="LOB" />.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Data.OracleClient.OracleLob" /> jest tymczasowej <see langword="LOB" />, w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższym przykładzie pokazano, jak utworzyć tymczasowej `LOB`.  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca rozmiar <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
        <value>Rozmiar <see cref="T:System.Data.OracleClient.OracleLob" /> w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar <xref:System.Data.OracleClient.OracleLob> zawsze jest zwracany w bajtach dla wszystkich typów danych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która zwraca <see langword="LOB" /> — typ danych.</summary>
        <value>Jeden z <see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" /> typów danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> Może być jedną z następujących <xref:System.Data.OracleClient.OracleType> typów danych.  
  
|Typ danych typu OracleType|Opis|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` typ danych zawierający dane binarne o maksymalnym rozmiarze 4 gigabajty. Mapuje to <xref:System.Array> typu <xref:System.Byte>.|  
|`Clob`|Oracle `CLOB` na serwerze, o maksymalnym rozmiarze 4 gigabajty ustawić typ danych zawierający dane znakowe, oparte na domyślny znak. Mapuje to <xref:System.String>.|  
|`NClob`|Oracle `NCLOB` typ danych zawierający dane znakowe oparte na zestaw na serwerze o maksymalnym rozmiarze 4 gigabajty national znaków. Mapuje to <xref:System.String>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje wartość null <see cref="T:System.Data.OracleClient.OracleLob" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można utworzyć <xref:System.Data.OracleClient.OracleLob> który ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócone z serwera ma wartość NULL, jak pokazano w poniższym przykładzie:  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zero bajtów `LOB` w tym <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący odczytu pozycja w <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</summary>
        <value>Bieżąca pozycja w <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumień musi obsługiwać wyszukiwania można pobrać lub ustawić pozycji. Użyj <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> właściwości w celu określenia, czy strumień obsługuje operacji wyszukiwania.  
  
 Wyszukiwanie w dowolne miejsce powyżej długość strumienia jest obsługiwana. Wyszukiwanie do nieparzysta położenia w przypadku `CLOB` i `NCLOB` jest również obsługiwane typy danych. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Data.OracleClient.OracleLob.Read%2A> właściwości.  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A> Właściwości nie zachować śledzić liczbę bajtów ze strumienia, który zostały wykorzystane, zostało pominięte, lub obie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Po powrocie z tej metody bufor zawiera określonej tablicy bajtów z wartością pomiędzy <c>przesunięcie</c> i (<c>przesunięcie</c> + <c>liczba</c>) zastępuje bajtów odczytywane z bieżącego źródła.</param>
        <param name="offset">Zerze przesunięcie w <c>buforu</c> rozpoczęcia przechowywania danych przeczytanie z bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <param name="count">Maksymalna liczba bajtów, które mają być odczytane z bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <summary>Odczytuje sekwencję bajtów z bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i poprawę pozycji w strumieniu przez liczbę bajtów do odczytu.</summary>
        <returns>Całkowita liczba bajtów odczytanych w buforze. To może być mniejsza niż żądana liczba bajtów Jeśli wiele bajtów nie są obecnie dostępne, czy zero (0), jeśli został osiągnięty koniec strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A> Metoda odczytuje maksymalnie `count` bajtów z bieżącego strumienia i przechowuje je w `buffer` począwszy od `offset`. Bieżącą pozycję w strumieniu jest zaawansowane przez liczbę bajtów odczytanych; Jednak jeśli wystąpi wyjątek, bieżącą pozycję w strumieniu nie jest zmieniany. <xref:System.Data.OracleClient.OracleLob.Read%2A> Zwraca liczbę bajtów do odczytu. Zwracana wartość wynosi zero, tylko wtedy, gdy pozycja jest obecnie na koniec strumienia. <xref:System.Data.OracleClient.OracleLob.Read%2A> blokuje dopóki co najmniej jednego bajtu danych mogą być odczytywane; w przypadku, gdy nie są dostępne żadne dane.<xref:System.Data.OracleClient.OracleLob.Read%2A> Zwraca wartość 0, jeśli próba odczytu z `LOB` po bieżące położenie jest na końcu `LOB`. <xref:System.Data.OracleClient.OracleLob.Read%2A> może zwrócić mniej bajtów niż żądana, nawet jeżeli nie osiągnięto koniec strumienia.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, należy zawsze działasz liczba bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg zawierający trzy znaki tekstu jest zapisywany jako `NCLOB` na serwerze programu Oracle, gdy zestaw znaków wynosi 4 bajty na znak i wykonaniu `Read` operację, określ długość ciągu 6 bajtów, chociaż jest przechowywane jako 12 bajtów na serwerze.  
  
 W poniższym przykładzie C# pokazano, jak można odczytać <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipluate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 Można utworzyć <xref:System.Data.OracleClient.OracleLob> który ma wartość NULL, używając następującego formatu:  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 Ta technika jest używany głównie do testowania czy `LOB` zwrócone z serwera ma wartość NULL, jak pokazano w poniższym przykładzie.  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 Wartość NULL `LOB` działa podobnie do zero bajtów `LOB` w tym <xref:System.Data.OracleClient.OracleLob.Read%2A> zakończy się pomyślnie i zawsze zwraca zero bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> lub <paramref name="count" /> parametru nie jest dodatni.  
  
 —lub—  
  
 Suma przesunięcia i liczby parametrów jest większa niż długość buforu.  
  
 —lub—  
  
 Wartość określona w <paramref name="amount" /> lub <paramref name="offset" /> parametrów jest mniejsza niż zero lub większa niż 4 GB.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie bajtów, względem źródła. Jeśli <c>przesunięcie</c> jest ujemna, nowe położenie poprzedza pozycja określona przez <c>pochodzenia</c> przez liczbę bajtów określona przez <c>przesunięcie</c>. Jeśli <c>przesunięcie</c> wynosi zero, nowe położenie jest pozycja określona przez <c>pochodzenia</c>. Jeśli <c>przesunięcie</c> jest dodatnia, nowe położenie następuje pozycja określona przez <c>pochodzenia</c> przez liczbę bajtów określona przez <c>przesunięcie</c>.</param>
        <param name="origin">Wartości typu <see cref="T:System.IO.SeekOrigin" /> wskazujący punkt odniesienia używany do uzyskania nowego położenia.</param>
        <summary>Ustawia położenie na bieżącej <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia.</summary>
        <returns>Nowa pozycja w ramach bieżącego strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `offset` jest ujemna, Nowa pozycja musi poprzedzać pozycja określona przez `origin` przez liczbę bajtów określona przez `offset`. Jeśli `offset` wynosi zero, Nowa pozycja musi być pozycja określona przez `origin`. Jeśli `offset` jest dodatnia, nowe położenie wykonaj pozycja określona przez `origin` przez liczbę bajtów określona przez `offset`.  
  
 Wyszukiwanie w dowolne miejsce powyżej długość strumienia jest obsługiwana. Wyszukiwanie do nieparzysta położenia w przypadku `CLOB` i `NCLOB` jest również obsługiwane typy danych. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Data.OracleClient.OracleLob.Read%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="origin" /> Parametru nie zawiera prawidłowej wartości.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikowa pozycji wykracza poza długość wartości.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> Obiektów został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Wymagana długość bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia w bajtach. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <summary>Ustawia długość <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia do wartości mniejszej niż bieżąca długość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Próba zwiększ długość <xref:System.Data.OracleClient.OracleLob> strumienia kończy się niepowodzeniem i zwraca "komunikat: ORA 22926: określona przycinania długość jest większa niż długość bieżącą wartość LOB" z serwerem programu Oracle.  
  
 Strumień musi obsługiwać zarówno zapisu i wyszukiwania dla <xref:System.Data.OracleClient.OracleLob.SetLength%2A> funkcji.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, należy zawsze działasz liczba bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg zawierający trzy znaki tekstu jest zapisywany jako `NCLOB` na serwerze programu Oracle, gdy zestaw znaków wynosi 4 bajty na znak i wykonaniu `SetLength` operację, określ długość ciągu 6 bajtów, chociaż jest przechowywane jako 12 bajtów na serwerze.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  Operacja zapisu A tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w <paramref name="value" /> parametr <see langword="CLOB" /> lub <see langword="NCLOB" /> — typ danych nie jest jeszcze.  
  
 —lub—  
  
 Wartość określona w <paramref name="value" /> parametrów jest mniejsza niż zero lub większa niż 4 GB.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wspólnej strumienia środowiska wykonawczego języka odpowiednikiem wartości podstawowej.</summary>
        <value>Aby uzyskać <see cref="F:System.Data.OracleClient.OracleType.Blob" />, tablicy typu <see langword="Byte[]" />. Aby uzyskać <see cref="F:System.Data.OracleClient.OracleType.Clob" /> i <see cref="F:System.Data.OracleClient.OracleType.NClob" />, <see langword="String" />. W przypadku wartości null danych <see cref="T:System.DBNull" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać <xref:System.Data.OracleClient.OracleType.Blob> typy danych <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca cały danych jako ciągłe tablicy typu `Byte[]`. Dla <xref:System.Data.OracleClient.OracleType.Clob> i <xref:System.Data.OracleClient.OracleType.NClob> typy danych <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca wszystkie dane jako `String` — typ danych. W przypadku wartości null danych <xref:System.Data.OracleClient.OracleLob.Value%2A> zwraca <xref:System.DBNull>. Porównując wartości zwracane rozróżniania między pustymi danymi o wartości null danych i danych.  
  
> [!NOTE]
>  Zaletą używania `LOB` typy danych jest możliwość pobrania dużych ilości danych w fragmentów po stronie klienta. Jednak jeśli używasz <xref:System.Data.OracleClient.OracleLob.Value%2A>, uzyskać wszystkich danych `LOB` kolumny jako jednym fragmencie ciągłym, która może znacznie zwiększyć obciążenie aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów. Ta metoda umożliwia skopiowanie liczbę bajtów określonych w <c>liczba</c> z <c>buforu</c> do bieżącego strumienia.</param>
        <param name="offset">Zerze przesunięcie w <c>buforu</c> jaką należy zacząć kopiowanie bajtów do bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <param name="count">Liczba bajtów do zapisania bieżącego strumienia. Aby uzyskać <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych to musi być liczbą parzystą.</param>
        <summary>Zapisuje sekwencję bajtów do bieżącego <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i przechodzi przez liczba zapisanych bajtów bieżącą pozycję w tym strumieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu zakończy się pomyślnie, pozycja w strumieniu przechodzi przez liczba zapisanych bajtów. Jeśli wystąpi wyjątek, pozycja w strumieniu nie jest zmieniany.  
  
 Pisanie za końcem `LOB` jest dozwolone i powiększa `LOB` przez liczba zapisanych bajtów.  
  
 .NET Framework Data Provider for Oracle obsługuje wszystkie `CLOB` i `NCLOB` dane w formacie Unicode. W związku z tym podczas uzyskiwania dostępu do `CLOB` i `NCLOB` typy danych, należy zawsze działasz liczba bajtów, gdzie każdy znak jest 2 bajty. Na przykład, jeśli ciąg zawierający trzy znaki tekstu jest zapisywany jako `NCLOB` na serwerze programu Oracle, gdy zestaw znaków wynosi 4 bajty na znak i wykonaniu `Write` operację, określ długość ciągu 6 bajtów, chociaż jest przechowywane jako 12 bajtów na serwerze.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
 W poniższym przykładzie C# pokazano, jak zapisać <xref:System.Data.OracleClient.OracleLob> obiektów.  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  Operacja zapisu A tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Parametr jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość w <paramref name="offset" /> lub <paramref name="count" /> parametru nie jest dodatni.  
  
 —lub—  
  
 Suma <paramref name="offset" /> i <paramref name="count" /> parametrów jest większy niż <paramref name="buffer" /> długości.  
  
 —lub—  
  
 Wartość określona w <paramref name="count" /> lub <paramref name="offset" /> parametrów jest mniejsza niż zero lub większa niż 4 GB.  
  
 —lub—  
  
 Należy określić <see langword="CLOB" /> i <see langword="NCLOB" /> typy danych jako parzystą liczbą bajtów.</exception>
        <exception cref="T:System.InvalidOperationException">Ta operacja nie jest w obrębie transakcji, <see cref="T:System.Data.OracleClient.OracleLob" /> obiekt ma wartość null lub połączenie jest zamknięte.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Wystąpił błąd programu Oracle.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">Bajtów do zapisania w strumieniu.</param>
        <summary>Zapisuje bajt bieżącą pozycję w <see cref="T:System.Data.OracleClient.OracleLob" /> strumienia i zmienia pozycję w strumieniu przez jednego bajtu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu zakończy się pomyślnie, pozycja w strumieniu przechodzi przez jednego bajtu. Jeśli wystąpi wyjątek, pozycja w strumieniu nie jest zmieniany.  
  
 Pisanie za końcem `LOB` jest dozwolone i powiększa `LOB` przez jednego bajtu.  
  
 Można zapisać do `LOB`, musi być pobierany `LOB` przy użyciu klauzuli FOR UPDATE w instrukcji SQL SELECT, a musi mieć uruchomiony transakcji lokalnej.  
  
> [!NOTE]
>  Operacja zapisu A tylko do odczytu `LOB` może się powieść, ale nie aktualizuje `LOB` na serwerze. W takim przypadku jednak lokalna kopia `LOB` jest aktualizowany. W związku z tym później operacji odczytu na <xref:System.Data.OracleClient.OracleLob> obiektu może zwrócić wyniki operacji zapisu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>