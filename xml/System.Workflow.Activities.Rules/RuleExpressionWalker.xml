<Type Name="RuleExpressionWalker" FullName="System.Workflow.Activities.Rules.RuleExpressionWalker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17f8992329f96b386d1bdff11ec00c504dcc5d07" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36454943" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class RuleExpressionWalker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RuleExpressionWalker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.Rules.RuleExpressionWalker" />
  <TypeSignature Language="VB.NET" Value="Public Class RuleExpressionWalker" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuleExpressionWalker abstract sealed" />
  <TypeSignature Language="F#" Value="type RuleExpressionWalker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Propaguje bieżące zachowanie w wyrażeniu do węzłów podrzędnych. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest używana przez wszystkie <xref:System.Workflow.Activities.Rules.IRuleExpression> metody propagację zachowania do węzłów podrzędnych.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AnalyzeUsage">
      <MemberSignature Language="C#" Value="public static void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, System.CodeDom.CodeExpression expression, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AnalyzeUsage(class System.Workflow.Activities.Rules.RuleAnalysis analysis, class System.CodeDom.CodeExpression expression, bool isRead, bool isWritten, class System.Workflow.Activities.Rules.RulePathQualifier qualifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AnalyzeUsage (analysis As RuleAnalysis, expression As CodeExpression, isRead As Boolean, isWritten As Boolean, qualifier As RulePathQualifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AnalyzeUsage(System::Workflow::Activities::Rules::RuleAnalysis ^ analysis, System::CodeDom::CodeExpression ^ expression, bool isRead, bool isWritten, System::Workflow::Activities::Rules::RulePathQualifier ^ qualifier);" />
      <MemberSignature Language="F#" Value="static member AnalyzeUsage : System.Workflow.Activities.Rules.RuleAnalysis * System.CodeDom.CodeExpression * bool * bool * System.Workflow.Activities.Rules.RulePathQualifier -&gt; unit" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage (analysis, expression, isRead, isWritten, qualifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="analysis" Type="System.Workflow.Activities.Rules.RuleAnalysis" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="isRead" Type="System.Boolean" />
        <Parameter Name="isWritten" Type="System.Boolean" />
        <Parameter Name="qualifier" Type="System.Workflow.Activities.Rules.RulePathQualifier" />
      </Parameters>
      <Docs>
        <param name="analysis">
          <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> Wystąpienie, które przechowuje symbole reprezentujący właściwości i pola używane przez warunków reguł i akcji.</param>
        <param name="expression">Wyrażenie, które było wykonywane.</param>
        <param name="isRead">
          <see langword="true" /> Jeśli pola i właściwości do odczytu przez <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> mają być dodawane do <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; w przeciwnym razie <see langword="false" />.</param>
        <param name="isWritten">
          <see langword="true" /> Jeśli pola i właściwości zapisanych przez <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> mają być dodawane do <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; w przeciwnym razie <see langword="false" />.</param>
        <param name="qualifier">Ścieżka pola lub właściwości określony do tego punktu.</param>
        <summary>Identyfikuje pola i właściwości używanych przez wyrażenie i dodaje je jako symbole <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> wystąpienia.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="analysis" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeExpression Clone (System.CodeDom.CodeExpression originalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeExpression Clone(class System.CodeDom.CodeExpression originalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clone (originalExpression As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeExpression ^ Clone(System::CodeDom::CodeExpression ^ originalExpression);" />
      <MemberSignature Language="F#" Value="static member Clone : System.CodeDom.CodeExpression -&gt; System.CodeDom.CodeExpression" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Clone originalExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="originalExpression">Wyrażenie, na podstawie klonowania.</param>
        <summary>Tworzy kopię bezpośrednich podrzędnych węzłów bieżącego <see cref="T:System.CodeDom.CodeExpression" />.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeExpression" /> jest taki sam jak to wystąpienie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decompile">
      <MemberSignature Language="C#" Value="public static void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression expression, System.CodeDom.CodeExpression parentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Decompile(class System.Text.StringBuilder stringBuilder, class System.CodeDom.CodeExpression expression, class System.CodeDom.CodeExpression parentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Decompile(System::Text::StringBuilder ^ stringBuilder, System::CodeDom::CodeExpression ^ expression, System::CodeDom::CodeExpression ^ parentExpression);" />
      <MemberSignature Language="F#" Value="static member Decompile : System.Text.StringBuilder * System.CodeDom.CodeExpression * System.CodeDom.CodeExpression -&gt; unit" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile (stringBuilder, expression, parentExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters", MessageId="0#")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringBuilder" Type="System.Text.StringBuilder" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="parentExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="stringBuilder">
          <see cref="T:System.Text.StringBuilder" /> Zawiera modyfikowalną ciąg znaków.</param>
        <param name="expression">Bieżący <see cref="T:System.CodeDom.CodeExpression" />.</param>
        <param name="parentExpression">Element nadrzędny <see cref="T:System.CodeDom.CodeExpression" />.</param>
        <summary>Dekompilację węzłów podrzędnych wyrażenia w postaci ciągu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public static System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution, System.CodeDom.CodeExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.Activities.Rules.RuleExpressionResult Evaluate(class System.Workflow.Activities.Rules.RuleExecution execution, class System.CodeDom.CodeExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Evaluate (execution As RuleExecution, expression As CodeExpression) As RuleExpressionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Workflow::Activities::Rules::RuleExpressionResult ^ Evaluate(System::Workflow::Activities::Rules::RuleExecution ^ execution, System::CodeDom::CodeExpression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Evaluate : System.Workflow.Activities.Rules.RuleExecution * System.CodeDom.CodeExpression -&gt; System.Workflow.Activities.Rules.RuleExpressionResult" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate (execution, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="execution" Type="System.Workflow.Activities.Rules.RuleExecution" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="execution">
          <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> Można wykonać wyrażenia.</param>
        <param name="expression">
          <see cref="T:System.CodeDom.CodeExpression" /> Do oceny.</param>
        <summary>Oblicza wyrażenie i wszystkie wyrażenia podrzędnego.</summary>
        <returns>
          <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> Wskazująca wynik obliczania wyrażenia.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="execution" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static bool Match (System.CodeDom.CodeExpression firstExpression, System.CodeDom.CodeExpression secondExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Match(class System.CodeDom.CodeExpression firstExpression, class System.CodeDom.CodeExpression secondExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Match (firstExpression As CodeExpression, secondExpression As CodeExpression) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Match(System::CodeDom::CodeExpression ^ firstExpression, System::CodeDom::CodeExpression ^ secondExpression);" />
      <MemberSignature Language="F#" Value="static member Match : System.CodeDom.CodeExpression * System.CodeDom.CodeExpression -&gt; bool" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Match (firstExpression, secondExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="secondExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="firstExpression">Pierwszy <see cref="T:System.CodeDom.CodeExpression" /> do porównania.</param>
        <param name="secondExpression">Drugi <see cref="T:System.CodeDom.CodeExpression" /> do porównania.</param>
        <summary>Porównuje bieżący wyrażenie i podrzędne węzły do innego wyrażenia, aby sprawdzić, czy są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli wyrażenia są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, System.CodeDom.CodeExpression expression, bool isWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.Activities.Rules.RuleExpressionInfo Validate(class System.Workflow.Activities.Rules.RuleValidation validation, class System.CodeDom.CodeExpression expression, bool isWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Validate (validation As RuleValidation, expression As CodeExpression, isWritten As Boolean) As RuleExpressionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Workflow::Activities::Rules::RuleExpressionInfo ^ Validate(System::Workflow::Activities::Rules::RuleValidation ^ validation, System::CodeDom::CodeExpression ^ expression, bool isWritten);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Workflow.Activities.Rules.RuleValidation * System.CodeDom.CodeExpression * bool -&gt; System.Workflow.Activities.Rules.RuleExpressionInfo" Usage="System.Workflow.Activities.Rules.RuleExpressionWalker.Validate (validation, expression, isWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validation" Type="System.Workflow.Activities.Rules.RuleValidation" />
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="isWritten" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="validation">
          <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> Do zarządzania procesem weryfikacji.</param>
        <param name="expression">
          <see cref="T:System.CodeDom.CodeExpression" /> Do oceny.</param>
        <param name="isWritten">
          <see langword="true" /> Jeśli pola i właściwości zapisanych przez <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> są przechowywane w <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Sprawdza, czy węzły wyrażenia i podrzędne są prawidłowo skonfigurowane i nie zawiera błędów.</summary>
        <returns>
          <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> Dla <see cref="T:System.CodeDom.CodeExpression" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="validation" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="expression" /> Jest równa null i kolekcji błędów na <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> obiekt jest odwołanie o wartości null (<see langword="Nothing" />).</exception>
      </Docs>
    </Member>
  </Members>
</Type>