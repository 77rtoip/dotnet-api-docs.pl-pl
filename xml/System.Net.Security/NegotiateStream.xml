<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30558877" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia strumienia, który wykorzystuje protokół negocjacji zabezpieczeń na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w ramach komunikacji klient serwer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Net.Security.NegotiateStream> klasy do uwierzytelniania i ułatwiającym ochronę informacji przesyłanych między klientem serwerem. Przy użyciu <xref:System.Net.Security.NegotiateStream>, można wykonaj następujące czynności.  
  
-   Poświadczenia klienta do serwera zostały wysłane do Personifikacja lub delegowanie.  
  
-   Żądanie uwierzytelniania serwera.  
  
-   Szyfrowanie i/lub podpisać danych przed przesłaniem.  
  
 Uwierzytelnianie odbywa się przed przesłaniem informacji. Klienci żądają uwierzytelnianie przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> metod, które blokują dopiero po zakończeniu uwierzytelniania, lub asynchroniczną <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metody, które nie blokują podczas oczekiwania na ukończenie uwierzytelniania. Serwery żądania uwierzytelniania przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody. Klient oraz opcjonalnie serwera, jest uwierzytelniany przy użyciu protokołu zabezpieczeń Negotiate. W systemach Windows 95/98 Windows NT LAN Manager (NTLM) to protokół używany do uwierzytelniania. Na innych platformach protokołu Kerberos jest używany protokół uwierzytelniania Jeśli zarówno klient, jak i serwer obsługują w przeciwnym razie uwierzytelnianie NTLM jest używany. Aby uzyskać szczegółowe opisy tych protokołów w dokumentacji zestawu SDK platformy w witrynie MSDN, w msdn.microsoft.com/library/. <xref:System.Net.Security.NegotiateStream> Klasy przeprowadza uwierzytelnianie za pomocą interfejsu dostawcy obsługi zabezpieczeń (SSPI).  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń, które będą używane przez <xref:System.Net.Security.NegotiateStream> do zabezpieczania danych podczas przesyłania. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania. Możesz uzyskać informacje na temat zdalnego klienta lub serwera przy użyciu <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> właściwości.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 Wysyłanie danych przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.Write%2A> lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> metody. Odbieranie danych przy użyciu synchronicznej <xref:System.Net.Security.NegotiateStream.Read%2A> lub asynchroniczne <xref:System.Net.Security.NegotiateStream.BeginRead%2A> metody. Jeśli zabezpieczeń usług, takich jak podpisywania lub szyfrowania są włączone, są one automatycznie stosowane do danych przez <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Net.Security.NegotiateStream> Przesyła dane przy użyciu wprowadzona podczas tworzenia strumienia <xref:System.Net.Security.NegotiateStream>. Jeśli podasz to zasadniczy strumień masz możliwość określenia, czy zamknięcia <xref:System.Net.Security.NegotiateStream> zamyka również odpowiedniego strumienia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje po stronie klienta połączenia klient serwer, który używa <xref:System.Net.Security.NegotiateStream>. Klient uwierzytelniania i asynchronicznie wysyła wiadomość do serwera.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 Poniższy przykład kodu pokazuje połączenia klient serwer, który używa po stronie serwera <xref:System.Net.Security.NegotiateStream> do uwierzytelniania klienta i przeczytaj wiadomość wysłana przez klienta.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Security.NegotiateStream" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapobiec <xref:System.Net.Security.NegotiateStream> zamknięcie strumienia, który zostanie podana, użyj funkcji <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> konstruktora.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">A <see cref="T:System.IO.Stream" /> obiekt używany przez <see cref="T:System.Net.Security.NegotiateStream" /> do wysyłania i odbierania danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Security.NegotiateStream" /> przy użyciu określonego <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tego konstruktora.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">A <see cref="T:System.IO.Stream" /> obiekt używany przez <see cref="T:System.Net.Security.NegotiateStream" /> do wysyłania i odbierania danych.</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> Aby wskazać, że zamknięcia, to <see cref="T:System.Net.Security.NegotiateStream" /> nie ma wpływu <c>innerstream</c>; <see langword="false" /> aby wskazać, że zamknięcia, to <see cref="T:System.Net.Security.NegotiateStream" /> również zamyka <c>innerStream</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Security.NegotiateStream" /> przy użyciu określonego <see cref="T:System.IO.Stream" /> i zachowanie zamknięcie strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu `true` dla `leaveStreamOpen` parametru zamknięcia <xref:System.Net.Security.NegotiateStream> nie ma wpływu `innerStream` strumienia; należy jawnie zamknąć `innerStream` gdy nie jest już potrzebne.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tego konstruktora. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Net.Security.NegotiateStream> klasy.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="innerStream" /> jest równa <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu klienta <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego klienta i powiązania kanału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację za pomocą <xref:System.Net.Security.SslStream.TransportContext%2A> właściwości skojarzonych <xref:System.Net.Security.SslStream>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> nie jest prawidłową wartością.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> ma wartość null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonego poświadczenia, opcje uwierzytelniania i powiązania kanału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację za pomocą <xref:System.Net.Security.SslStream.TransportContext%2A> właściwości skojarzonych <xref:System.Net.Security.SslStream>.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> nie jest prawidłową wartością.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu klienta <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego klienta.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego klienta i powiązania kanału.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, i wymagane jest uwierzytelnianie wzajemne. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację za pomocą <xref:System.Net.Security.SslStream.TransportContext%2A> właściwości skojarzonych <xref:System.Net.Security.SslStream>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> nie jest prawidłową wartością.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> ma wartość null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klientów do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa określonego poświadczenia, opcje uwierzytelniania i powiązania kanału.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Używane do ochrony rozszerzonej, który jest przekazywany do metody w `binding` parametru może być pobierane przez aplikację za pomocą <xref:System.Net.Security.SslStream.TransportContext%2A> właściwości skojarzonych <xref:System.Net.Security.SslStream>.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> nie jest prawidłową wartością.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obsługuje po stronie serwera uwierzytelniania dla połączenia klient serwer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te metody zablokowanie, gdy uwierzytelnianie jest w toku. Aby zapobiec blokuje podczas oczekiwania na ukończenie uwierzytelniania aplikacji, użyj <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Ta metoda umożliwia blokowanie przed zakończeniem operacji. Aby uniknąć zablokowania przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obsługuje po stronie serwera uwierzytelniania dla połączenia klient serwer jako operację asynchroniczną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <summary>Metoda wywoływana przez klienta do uwierzytelniania serwerów i opcjonalnie serwera, w przypadku połączenia klient serwer jako operację asynchroniczną. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task" />  
  
 Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Ten obiekt służy do próby uwierzytelnienia r.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rozpoczyna operację asynchroniczną do uwierzytelniania połączenia z serwerem klienta po stronie klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie tej metody nie blokują w trakcie uwierzytelniania. Aby zablokować podczas oczekiwania na ukończenie uwierzytelniania, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu klienta <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, a poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. <xref:System.Net.Security.NegotiateStream> Klasy utworzy główną nazwę usługi, używany do wzajemnego uwierzytelniania.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tej metody, aby rozpocząć asynchronicznej uwierzytelniania dla klienta.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania korzysta z określonych poświadczeń. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określone poświadczenia i powiązania kanału. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określonych poświadczeń i opcje uwierzytelniania. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> Używany do ochrony rozszerzonej.</param>
        <param name="targetName">Nazwy usługi (SPN), który unikatowo identyfikuje uwierzytelniania serwera.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="allowedImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez klientów, aby rozpocząć operację asynchroniczną na potrzeby uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa określone poświadczenia, opcje uwierzytelniania i powiązania kanału. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.  
  
 \- lub -  
  
 <paramref name="targetName" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania, co serwer. Strumień nie można użyć, aby ponowić próbę uwierzytelniania jako klient.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rozpoczyna operację asynchroniczną do obsługi uwierzytelniania klient serwer połączenia po stronie serwera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie tej metody nie blokują w trakcie uwierzytelniania. Aby zablokować podczas oczekiwania na ukończenie uwierzytelniania, należy użyć <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa zasad określonym rozszerzonej ochrony. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie przy użyciu serwera <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Nie nazwy usługi (SPN) jest określona dla serwera. Poziom personifikacji <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, poziom zabezpieczeń jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> przeciążenia metody.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera i opcje uwierzytelniania. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby użyć jawnych <see cref="T:System.Net.NetworkCredential" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> Używany do ustalenia tożsamości klienta.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> Używany do ochrony rozszerzonej.</param>
        <param name="requiredProtectionLevel">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości, wskazując usługi zabezpieczeń dla tego strumienia.</param>
        <param name="requiredImpersonationLevel">Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości i wskazujący, jak użyć poświadczenia klienta do dostępu do zasobów serwera.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu uwierzytelniania.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Metoda wywoływana przez serwery, aby rozpocząć operację asynchroniczną do uwierzytelniania klienta i opcjonalnie serwera, w przypadku połączenia klient serwer. Proces uwierzytelniania używa poświadczeń określonego serwera, opcje uwierzytelniania i zasady ochrony rozszerzonej. Ta metoda nie są blokowane.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj `requiredProtectionLevel` parametr żądania usługi zabezpieczeń dla danych przesyłanych za pomocą uwierzytelnionych strumienia. Na przykład, aby dane zaszyfrowana i podpisana, należy określić <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> wartość. Pomyślne uwierzytelnienie nie gwarantuje, że żądanie <xref:System.Net.Security.ProtectionLevel> zostały przyznane. Należy sprawdzić <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>.  
  
 Jeśli `policy` parametr jest `null`, używana rozszerzona zasada ochrony ma <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> ustawioną <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> przeciążenia metody.  
  
 Należy ukończyć operację asynchroniczną uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> i <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> na zasady ochrony rozszerzonej przekazano <paramref name="policy" /> znajdują się parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> musi być <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, lub <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Błąd już wystąpił uwierzytelniania.  
  
 \- lub -  
  
 Ten strumień został wcześniej wykorzystana do uwierzytelniania jako klient. Strumień nie można użyć, aby ponowić próbę uwierzytelniania, co serwer.</exception>
        <exception cref="T:System.NotSupportedException">System operacyjny Windows 95 i Windows 98 nie są obsługiwane.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> Ustawiono parametr <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> na platformie, która nie obsługuje ochrony rozszerzonej.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> odczytać tablicy, która odbiera bajtów ze strumienia.</param>
        <param name="offset">Liczony od zera lokalizacja w <c>buforu</c> rozpoczęcia przechowywania danych przeczytanie tego strumienia.</param>
        <param name="count">Maksymalna liczba bajtów do odczytania ze strumienia.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po zakończeniu operacji odczytu.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji odczytu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchroniczną odczytu, która odczytuje dane ze strumienia i zapisuje go w określonej tablicy.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, operacji odczytu odczytuje dane z podstawowego strumienia, sprawdza integralność danych i odszyfrowuje je. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda uruchamia asynchronicznych operacji odczytu na źródłowego strumienia.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, należy użyć <xref:System.Net.Security.NegotiateStream.Read%2A> metody.  
  
 Operacja odczytu asynchronicznego musi wykonać wywołanie <xref:System.Net.Security.NegotiateStream.EndRead%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> Klasa nie obsługuje wiele równoczesnych operacji odczytu. Jeśli podjęto próbę uruchomienia operacji odczytu podczas odczytywania innej operacji jest już wykonywane na ten sam strumień <xref:System.NotSupportedException> zostanie wygenerowany wyjątek.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje uruchamiania asynchronicznych operacji odczytu. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Net.Security.NegotiateStream> klasy.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> jest mniejsza niż 0.  
  
 \- lub -  
  
 <paramref name="offset" /> jest większa niż długość <paramref name="buffer" />.  
  
 \- lub -  
  
 <paramref name="offset" /> plus <paramref name="count" /> jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Operacja odczytu nie powiodła się.  
  
 \- lub -  
  
 Szyfrowanie jest w użyciu, ale nie można odszyfrować danych.</exception>
        <exception cref="T:System.NotSupportedException">Istnieje już operacja odczytu w toku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która dostarcza bajtów do zapisania w strumieniu.</param>
        <param name="offset">Liczony od zera lokalizacja w <c>buforu</c> w której ma zostać rozpoczęte odczytywanie bajtów do zapisania w strumieniu.</param>
        <param name="count">
          <see cref="T:System.Int32" /> Wartość, która określa liczbę bajtów do odczytu z <c>buforu</c>.</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po ukończeniu operacji zapisu.</param>
        <param name="asyncState">Zdefiniowane przez użytkownika obiekt zawierający informacje o operacji zapisu. Ten obiekt jest przekazywany do <c>asyncCallback</c> delegować po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchronicznego zapisu, która zapisuje <see cref="T:System.Byte" />s z określonego bufora do strumienia.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Obiekt wskazujący stan operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, ta metoda odczytuje dane z bufora, są szyfrowane, znaki, lub szyfruje podpisuje go i przesyła je przy użyciu podstawowego strumienia. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda uruchamiania operacji zapis asynchroniczny w strumieniu podstawowym.  
  
 Ta metoda jest asynchroniczne i nie są blokowane podczas operacji. Aby zablokować przed zakończeniem operacji, należy użyć <xref:System.Net.Security.NegotiateStream.Read%2A> metody.  
  
 Operacja odczytu asynchronicznego musi wykonać wywołanie <xref:System.Net.Security.NegotiateStream.EndWrite%2A> metody. Zazwyczaj metoda jest wywoływana przez `asyncCallback` delegowanie. Aby uzyskać szczegółowe informacje o korzystaniu z modelem programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> Klasa nie obsługuje wiele równoczesnych zapisu. Jeśli podjęto próbę uruchomienia operacji zapisu, gdy inna operacja zapisu jest już wykonywane na ten sam strumień <xref:System.NotSupportedException> zostanie wygenerowany wyjątek.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje rozpoczyna operację asynchronicznego zapisu.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 Następująca metoda jest wywoływana po zakończeniu operacji.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- lub -  
  
 <paramref name="offset" /> jest większa niż długość <paramref name="buffer" />.  
  
 \- lub -  
  
 <paramref name="offset" /> plus count jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Operacja zapisu nie powiodła się.  
  
 \- lub -  
  
 Szyfrowanie jest w użyciu, ale nie można zaszyfrować dane.</exception>
        <exception cref="T:System.NotSupportedException">Istnieje już w toku operacji zapisu.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy zasadniczy strumień jest możliwy do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli podczas uwierzytelniania i zasadniczy strumień jest możliwy do odczytu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pomyślnego uwierzytelnienia, ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanRead%2A> właściwość źródłowego strumienia. Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy wyszukiwać źródłowego strumienia.</summary>
        <value>Ta właściwość zawsze zwraca <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie należy próbować ustawiać pozycja <xref:System.Net.Security.NegotiateStream> obiektu lub jego źródłowego strumienia. Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy zasadniczy strumień obsługuje limity czasu.</summary>
        <value>
          <see langword="true" /> Jeśli zasadniczy strumień obsługuje limity czasu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanTimeout%2A> właściwość źródłowego strumienia. Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy zasadniczy strumień jest zapisywalna.</summary>
        <value>
          <see langword="true" /> Jeśli podczas uwierzytelniania i zasadniczy strumień jest zapisywalny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku pomyślnego uwierzytelnienia, ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.CanWrite%2A> właściwość źródłowego strumienia. Zasadniczy strumień został określony podczas tworzenia wystąpienia <xref:System.Net.Security.NegotiateStream> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Net.Security.NegotiateStream" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i <xref:System.Object.Finalize%2A> metody. `Dispose()` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr ma wartość true, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Net.Security.NegotiateStream> odwołania. Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose(Boolean)" /> należy uważać, aby nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see langword="Dispose(Boolean)" />, zobacz [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see cref="M:System.Object.Finalize" />, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [przesłaniania metody Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie do wystąpienia <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</param>
        <summary>Kończy operację uwierzytelniania oczekujących asynchronicznych klienta, który został uruchomiony z wywołania <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi. Gdy uwierzytelnienie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 Aby wykonać tę operację synchronicznie, użyj jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> nie została utworzona przez wywołanie do <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Uwierzytelnianie nie jest oczekujący klienta do wykonania.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie do wystąpienia <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</param>
        <summary>Kończy operację uwierzytelniania oczekujących asynchronicznych klienta, który został uruchomiony z wywołania <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.  
  
 Gdy uwierzytelnianie zakończy się powodzeniem, należy zaznaczyć <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> i <xref:System.Net.Security.NegotiateStream.IsSigned%2A> właściwości, aby ustalić, jakie usługi zabezpieczeń są używane przez <xref:System.Net.Security.NegotiateStream>. Sprawdź <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> właściwości w celu określenia, czy wystąpiły wzajemnego uwierzytelniania.  
  
 Jeśli uwierzytelnianie nie powiedzie się, zostanie wyświetlony <xref:System.Security.Authentication.AuthenticationException> lub <xref:System.Security.Authentication.InvalidCredentialException>. W takim przypadku możesz ponowić próbę uwierzytelniania za pomocą różnych poświadczeń.  
  
 Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> nie została utworzona przez wywołanie do <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Uwierzytelnianie nie powiodło się. Tego obiektu można używać, aby ponowić próbę uwierzytelnienia.</exception>
        <exception cref="T:System.InvalidOperationException">Uwierzytelnianie nie jest oczekiwanie na zakończenie.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie do wystąpienia <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Kończy się asynchronicznych operacji odczytu uruchomione z wywołaniem do <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>A <see cref="T:System.Int32" /> wartość, która określa liczbę bajtów do odczytu strumienia podstawowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.  
  
 Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.Read%2A> metody.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że końcowa asynchronicznych operacji odczytu. Na przykład, który pokazuje uruchamiania operacji, zobacz <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">AsyncResult nie została utworzona przez wywołanie do <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
        <exception cref="T:System.IO.IOException">Operacja odczytu nie powiodła się.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwrócony przez wywołanie do wystąpienia <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>Kończy operację asynchronicznego zapisu, które zostało uruchomione z wywołaniem do <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli działanie nie zostało ukończone, ta metoda blokuje, dopóki nie robi.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
 Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Security.NegotiateStream.Write%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano metodę, która jest wywoływana, aby ukończyć operację asynchronicznego zapisu. Na przykład, który pokazuje uruchamiania operacji, zobacz <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">AsyncResult nie została utworzona przez wywołanie do <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
        <exception cref="T:System.IO.IOException">Operacja zapisu nie powiodła się.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wszystkie buforowane dane są zapisywane w podstawowej urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wywołuje <xref:System.IO.Stream.Flush%2A> w strumieniu podstawowym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje opróżnianie strumienia.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, jaki serwer może za pomocą poświadczeń klienta.</summary>
        <value>Jeden z <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pomyślnie uwierzytelnić przed wywołaniem tej metody. Klienci określić poziom personifikacji, gdy będą one żądać uwierzytelniania przez wywoływanie jednej z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metody. Jeśli uwierzytelnianie bez określania <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> jest używany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Uwierzytelnianie nie powiodło się lub nie przeprowadzono.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy uwierzytelnianie zakończyło się pomyślnie.</summary>
        <value>
          <see langword="true" /> Jeśli wystąpiły pomyślne uwierzytelnienie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uwierzytelnianie klientów przez wywołanie metody <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metody. Serwery uwierzytelniania przez wywołanie metody <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość wskazującą, czy to <see cref="T:System.Net.Security.NegotiateStream" /> używa szyfrowania danych.</summary>
        <value>
          <see langword="true" /> Jeśli dane są szyfrowane przed przesyłanych za pośrednictwem sieci i odszyfrować po osiągnięciu zdalny punkt końcowy; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Szyfrowanie pomaga chronić prywatność danych. ułatwia to znaczy, upewnij się, że gdy dane są przesyłane go nie może być odszyfrowywane przez osoby trzecie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy zarówno serwer, jak i klienta zostały uwierzytelnione.</summary>
        <value>
          <see langword="true" /> Jeśli serwer został uwierzytelniony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wzajemne uwierzytelnianie jest określony przez klienta, gdy klient oczekuje, że serwer o podanie poświadczeń dla uwierzytelniania. Domyślnie klienci żądają wzajemnego uwierzytelniania.  
  
 Protokół negocjacji wybiera protokołu NTLM lub Kerberos w zależności od protokołów zabezpieczeń obsługiwane przez klienta i serwera. Uwierzytelnianie NTLM nie obsługuje uwierzytelniania wzajemnego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy lokalny strony połączenia używane przez to <see cref="T:System.Net.Security.NegotiateStream" /> został uwierzytelniony jako serwer.</summary>
        <value>
          <see langword="true" /> Jeśli lokalny punkt końcowy został pomyślnie uwierzytelniony jako po stronie serwera uwierzytelnionego połączenia; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli uwierzytelnianie nie powiodło się lub nie zostało przeprowadzone, ta właściwość zwraca `false`.  
  
 Na potrzeby uwierzytelniania, co serwer, wywołaj <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Boolean" /> wartość, która wskazuje, czy dane wysyłane przy użyciu tego strumienia jest podpisany.</summary>
        <value>
          <see langword="true" /> Jeśli dane podpisu przed przesyłanych; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podpisywanie danych zapewnia ochronę integralności danych. to znaczy pomaga odbiorcy określić, czy dane została naruszona przesyłane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość strumienia podstawowego.</summary>
        <value>A <see cref="T:System.Int64" /> , który określa długość strumienia podstawowego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.Length%2A> właściwość źródłowego strumienia. Jeśli nie można wyszukać zasadniczy strumień, ta właściwość zazwyczaj spowoduje zgłoszenie wyjątku. Typ środowiska wykonawczego zasadniczy strumień określa typu run-time wyjątku, który jest generowany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Pobieranie wartości tej właściwości nie jest obsługiwane, gdy strumień podstawowy <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżącą pozycję w strumieniu podstawowym.</summary>
        <value>A <see cref="T:System.Int64" /> , który określa bieżącą pozycję w strumieniu podstawowym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.Position%2A> właściwość źródłowego strumienia. Jeśli nie można wyszukać zasadniczy strumień, ta właściwość zazwyczaj spowoduje zgłoszenie wyjątku. Typ środowiska wykonawczego zasadniczy strumień określa typu run-time wyjątku, który jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Ustawienie tej właściwości nie jest obsługiwane.  
  
 \- lub -  
  
 Pobieranie wartości tej właściwości nie jest obsługiwane, gdy strumień podstawowy <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> odczytać tablicy, która odbiera bajtów ze strumienia.</param>
        <param name="offset">A <see cref="T:System.Int32" /> zawierający liczony od zera lokalizacja w <c>buforu</c> rozpoczęcia przechowywania danych przeczytanie tego strumienia.</param>
        <param name="count">A <see cref="T:System.Int32" /> zawierający maksymalną liczbę bajtów do odczytania ze strumienia.</param>
        <summary>Odczytuje dane z tego strumienia i zapisuje go w określonej tablicy.</summary>
        <returns>A <see cref="T:System.Int32" /> wartość, która określa liczbę bajtów do odczytu strumienia podstawowego. Jeśli nie ma więcej danych do odczytu, zwraca wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda odczytuje maksymalnie `count` bajtów z bieżącego strumienia i przechowuje je w `buffer` począwszy od `offset`.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
 Aby wykonać tę operację asynchronicznie, użyj <xref:System.Net.Security.NegotiateStream.BeginRead%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje odczytu z <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Operacja odczytu nie powiodła się.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
        <exception cref="T:System.NotSupportedException">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operacja jest już w toku.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas operacji odczytu blokuje oczekiwanie na dane.</summary>
        <value>A <see cref="T:System.Int32" /> , który określa czas, jaki upłynie przed operacja odczytu nie powiedzie się.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.ReadTimeout%2A> właściwość źródłowego strumienia. W przypadku ustawienia tej właściwości <xref:System.IO.Stream.ReadTimeout%2A> wartość w podstawowym strumieniu jest równa określonej wartości.  
  
 Jeśli strumień podstawowy <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> jest (w milisekundach) i ma ustawioną wartość <xref:System.Threading.Timeout.Infinite> domyślnie, który odczytywać operacji, czy nie upłynął limit czasu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o tożsamości strona zdalna udostępniania tego uwierzytelnionego strumienia.</summary>
        <value>
          <see cref="T:System.Security.Principal.IIdentity" /> Obiektu, który opisuje tożsamość zdalnego punktu końcowego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas dostępu do klienta, ta właściwość zwraca <xref:System.Security.Principal.GenericIdentity> zawierające główną nazwę usługi (SPN) serwera i protokołu uwierzytelniania. Podczas dostępu do serwera, ta właściwość zwraca <xref:System.Security.Principal.WindowsIdentity> opisujący klienta. Jeśli <xref:System.Security.Principal.WindowsIdentity> jest niedostępny, informacje o kliencie zwrócony do serwera w <xref:System.Security.Principal.GenericIdentity>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Uwierzytelnianie nie powiodło się lub nie przeprowadzono.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Ta wartość jest ignorowana.</param>
        <param name="origin">Ta wartość jest ignorowana.</param>
        <summary>Zgłasza wyjątek <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Zawsze zwraca <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie wywołuj tej metody. Jest dziedziczone, ale nie jest obsługiwana przez <xref:System.Net.Security.NegotiateStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Wyszukiwanie nie jest obsługiwana w <see cref="T:System.Net.Security.NegotiateStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Int64" /> Wartość określająca długość strumienia.</param>
        <summary>Ustawia długość strumienia podstawowego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która dostarcza zapisanych w strumieniu bajtów.</param>
        <param name="offset">
          <see cref="T:System.Int32" /> Zawierający liczony od zera lokalizacja w <c>buforu</c> w której ma zostać rozpoczęte odczytywanie bajtów do zapisania w strumieniu.</param>
        <param name="count">A <see cref="T:System.Int32" /> zawierającą liczbę bajtów do odczytania ze <c>buforu</c>.</param>
        <summary>Zapis do określonej liczby miejsc <see cref="T:System.Byte" />s do źródłowego strumienia, używając określonego bufora i przesunięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po włączeniu szyfrowania, podpisywania, lub szyfrowania i podpisywania, ta metoda odczytuje dane z bufora, są szyfrowane, znaki, lub szyfruje podpisuje go i przesyła je przy użyciu podstawowego strumienia. Jeśli żadne dodatkowe zabezpieczenia usług, takich jak podpisywania lub szyfrowania danych są używane, ta metoda wywołuje <xref:System.IO.Stream.Write%2A> w strumieniu podstawowym.  
  
 Ta metoda umożliwia blokowanie podczas operacji zapisu. Aby zapobiec blokowanie zakończy działanie, należy użyć <xref:System.Net.Security.NegotiateStream.Write%2A> metody.  
  
 Nie można wywołać tej metody, dopóki pomyślnym uwierzytelnieniu. W celu uwierzytelnienia wywoływanie jednego z <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, lub <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metody.  
  
 <xref:System.Net.Security.NegotiateStream> Klasa nie obsługuje wiele równoczesnych zapisu. Jeśli podjęto próbę uruchomienia operacji zapisu, gdy inna operacja zapisu jest już wykonywane na ten sam strumień <xref:System.NotSupportedException> zostanie wygenerowany wyjątek.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zapisywanie <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- lub -  
  
 <paramref name="offset" /> jest większa niż długość <paramref name="buffer" />.  
  
 \- lub -  
  
 <paramref name="offset" /> plus count jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Operacja zapisu nie powiodła się.  
  
 \- lub -  
  
 Szyfrowanie jest w użyciu, ale nie można zaszyfrować dane.</exception>
        <exception cref="T:System.NotSupportedException">Istnieje już w toku operacji zapisu.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został zamknięty.</exception>
        <exception cref="T:System.InvalidOperationException">Nie przeprowadzono uwierzytelniania.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas operacji zapisu blokuje oczekiwanie na dane.</summary>
        <value>A <see cref="T:System.Int32" /> , który określa czas, jaki upłynie przed operacja zapisu nie powiedzie się.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwrócona przez wywołanie <xref:System.IO.Stream.WriteTimeout%2A> właściwość źródłowego strumienia. Operacje na zestawie określona wartość Określa <xref:System.IO.Stream.WriteTimeout%2A> wartość w strumieniu podstawowym.  
  
 Jeśli strumień podstawowy <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> jest (w milisekundach) i ma ustawioną wartość <xref:System.Threading.Timeout.Infinite> domyślnie, które zapisują operacji, czy nie upłynął limit czasu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyświetlania wartości tej właściwości.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>