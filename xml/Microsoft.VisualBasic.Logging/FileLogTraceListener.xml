<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56b8b0a046b7c0bb8ea509712cdf549a83d29b98" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36727537" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia prosty odbiornik, który kieruje dane wyjściowe rejestrowania do pliku.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa umożliwia automatyczne obsługi funkcji archiwizuj plików dzienników, zgodnie z potrzebami, na podstawie codzienne lub poszczególnych aplikacji. Ta funkcja archiwizacji automatyczne pomaga zmniejszyć obowiązków konserwacji deweloperom i administratorom.  
  
 Wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> mogą być dodawane do <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> lub <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, aby przekierować dane wyjściowe z rejestrowanie do pliku tekstowego. Wystąpienia tej klasy można również dodać do `My.Application.Log` lub `My.Log` (dla aplikacji sieci Web) w aplikacjach Visual Basic. Aby uzyskać więcej informacji, zobacz [wskazówki: zmiana gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Główne funkcje tej klasy to:  
  
1.  *Funkcje archiwizacji*. Pliki dziennika wygenerowane przez tę klasę nadawane są nazwy zgodne nazwie podstawowej i daty, wraz z liczbą odróżnienia pliku dziennika kolejnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
     Jawne nazwy pliku jest `baseName`[-`dateStamp`] [-`version`] log, gdzie:  
  
    -   `baseName` Część jest nazwę dziennika w podstawowych określoną przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
    -   `dateStamp` Część ma format "RRRR-MM-DD" i jest ona wyświetlana podczas <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
    -   Jeśli wymagane jest więcej niż jeden plik dziennika o tej samej `baseName` i `dateStamp`, `version` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
2.  *Wiele wystąpień klasy*. Jeśli wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy zapisuje do pliku, który jest używany:  
  
    -   Klasa udziałów pliku, jeśli jest on używany przez inne wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy w tym samym procesie.  
  
    -   Klasa tworzy nowy plik dziennika przy użyciu nazwy dostępne dalej, jeśli plik jest używany przez inny proces.  
  
3.  *Bezpieczeństwo wątków*. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasy są bezpieczne dla wątków. Dzięki temu można bezpiecznie zapisywać komunikaty w dzienniku przez wiele wątków bez używania blokad.  
  
 **Lokalizacja pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> Ma właściwość <xref:Microsoft.VisualBasic.Logging.LogFileLocation> wyliczeniu, aby określić jeden z typowych katalogów można zapisać pliku dziennika w celu.  
  
-   Do zapisania w dzienniku do innej lokalizacji, należy ustawić <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości do tej lokalizacji.  
  
 **Nazwa pliku dziennika**  
  
-   Nazwa podstawowego pliku dziennika jest określona przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   Nazwa bieżącego pliku dziennika można odczytać z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> właściwości. Pochodzi od innych właściwości i bieżący stan dzienniki w systemie plików.  
  
 **Dziennik konserwacji**  
  
-   Minimalna częstotliwość tworzenia nowych plików dziennika jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości. Jeśli wartość jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>nowy plik dziennika jest tworzony co najmniej jeden raz każdego dnia lub tygodnia i sygnaturę daty jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
-   Maksymalny rozmiar (w bajtach) pliku dziennika jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> właściwości. Jeśli rozmiar pliku przekracza rozmiar, przejrzeć dodatkowe komunikaty zapisywane w dzienniku są porzucane i, w zależności od <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości, jest zgłaszany wyjątek.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> Właściwość określa ilość wolnego miejsca (w bajtach) muszą być dostępne. Dzięki temu, upewnij się, że <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy nie będą korzystać z wszystkich dostępnego miejsca na dysku. Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> zapisuje właściwości w celu określenia zachowania dziennika, gdy istnieją poniżej <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> wolnych bajtów.  
  
 **Ustawienia danych wyjściowych w pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> Właściwość określa, czy zasadniczy strumień powinien opróżniany automatycznie po każdym zapisu w pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> Właściwość określa, czy dołączyć wiadomości do bieżącego pliku dziennika, jeśli dozwolone, lub zapisanie ich do nowego pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwość określa ciąg do użycia na potrzeby oddzielającego pola wiadomości dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> Właściwość określa kodowanie używane podczas tworzenia nowego pliku dziennika.  
  
 **Dane wyjściowe pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> i <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metody zapisywania wiadomości do pliku dziennika. Te metody Sprawdź <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości, oraz wszelkie istniejące dzienniki o takiej samej nazwie podstawowej, aby określić, czy należy utworzyć nowy dziennik.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> Metody opróżnia komunikaty obecnie w buforze dane wyjściowe do pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> Metody zamyka plik dziennika, dzięki czemu mogą być używane przez inne procesy.  
  
 **Włączanie danych wyjściowych**  
  
 Należy włączyć śledzenie i debugowanie, aby użyć nasłuchującego śledzenia. Następująca składnia jest określonych kompilatora. Jeśli używasz kompilatory innego niż C# lub Visual Basic, zapoznaj się z dokumentacją, dla Twojej kompilatora.  
  
-   Aby włączyć debugowanie w języku C#, Dodaj `/d:DEBUG` flagi do wiersza polecenia kompilatora podczas kompilowania kodu lub można dodać `#define DEBUG` na początku pliku. W języku Visual Basic, Dodaj `/d:DEBUG=True` flagi kompilatora wiersza polecenia.  
  
-   Aby włączyć śledzenie w języku C#, Dodaj `/d:TRACE` flagi do wiersza polecenia kompilatora podczas kompilacji kodu, lub Dodaj `#define TRACE` na początku pliku. W języku Visual Basic, Dodaj `/d:TRACE=True` flagi kompilatora wiersza polecenia.  
  
 Aby ustawić poziom odbiornik sieci, należy edytować plik konfiguracji aplikacji. W ramach tego pliku można dodać odbiornik, ustaw jej typ i ustawienie jego parametrów, Usuń odbiornik lub wyczyść wszystkie odbiorniki wcześniej ustawiane przez aplikację. Plik konfiguracji powinien być sformatowany jak w następującym przykładzie.  
  
 W tym przykładzie do uruchomienia należy podać nazwę FQDN zestawu. Aby uzyskać informacje o tym, jak można uzyskać w pełni kwalifikowanej nazwy zestawu, zobacz [nazwy zestawu](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy i ustawia nazwę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy o nazwie domyślnej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia nazwę wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy FileLogTraceListener.  
  
 Dostęp można uzyskać nazwy wystąpienia za pośrednictwem <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />. Nazwa wystąpienia obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasa o podanej nazwie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia nazwę wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy do `name`.  
  
 Dostęp można uzyskać nazwy wystąpienia traktować <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy dołączyć dane wyjściowe do bieżącego pliku lub zapisać go do nowego pliku.</summary>
        <value>
          <see langword="Boolean" />, z <see langword="True" /> wskazujący, że dane wyjściowe są dołączane do bieżącego pliku i <see langword="False" /> wskazujący, że dane wyjściowe są zapisywane do nowego pliku. Domyślne ustawienie dla tej właściwości jest <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> właściwość jest `False`, dane wyjściowe są zapisywane do nowego pliku. Gdy ta właściwość jest `True`, dane wyjściowe są dołączane do bieżącego pliku, chyba że:  
  
-   Plik wyjściowy jest zablokowany przez inny proces. W takim przypadku nowy plik dziennika jest tworzony z numerem wersji, która jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
-   Bieżący rozmiar pliku jest większy niż co <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> umożliwia właściwości. W takiej sytuacji przejrzeć dodatkowe komunikaty są porzucane i, w zależności od <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości, jest zgłaszany wyjątek.  
  
-   Istniejącej nazwy pliku jest nieaktualny zgodnie z harmonogramem tworzenia dziennika określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości. W takim przypadku nowy plik dziennika jest tworzony i sygnaturę daty jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy zapisywanie w strumieniu plików dziennika opróżnia bufor.</summary>
        <value>
          <see langword="Boolean" />, z <see langword="True" /> wskazującą, czy strumień jest opróżniany po każdym zapisu; w przeciwnym razie wpisy dziennika są buforowane i zapisywane bardziej efektywnie. Domyślne ustawienie dla tej właściwości jest <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False` Ustawienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> właściwości zapewnia najlepszą wydajność w przypadku większości aplikacji, ponieważ jest bardziej wydajne, można zapisać wiele komunikatów do pliku dziennika w tym samym czasie. Można użyć <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> bufor wyjściowy metody Flush wszystkie wiadomości w pliku dziennika. Można również użyć <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metodę, która niejawnie opróżnienia strumienia przed zamknięciem pliku dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę podstawową dla plików dziennika, który jest używany do tworzenia nazwy pełnego pliku dziennika.</summary>
        <value>
          <see langword="String" />. Nazwa podstawowa dla plików dziennika. Wartość domyślna to nazwa produktu aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> Właściwość określa nazwę podstawową dla plików dziennika, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> zapisuje klasy.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwość zawiera nazwę aktualnie pełnego pliku dziennika. Jest ona generowana zgodnie ze ścieżki dziennika, nazwy bazy datę i numer odróżniający go od różnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
 Jawnej postaci pełnej nazwy pliku jest `path` \\ `baseName`[-`dateStamp`] [-`iteration`] log, gdzie  
  
-   `path` Części jest określany przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości i, jeśli wartość tej właściwości jest równa <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości.  
  
-   `baseName` Część jest nazwę dziennika w podstawowych określoną przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   `dateStamp` Część ma format "RRRR-MM-DD" i jest ona wyświetlana podczas <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> ustawiono <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Jeśli wymagane jest więcej niż jeden plik dziennika o tej samej `baseName` i `dateStamp`, `iteration` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka zasadniczy strumień dla bieżącego pliku dziennika i zwalnia wszystkie zasoby skojarzone z bieżącym strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie należy wywołać <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metoda jawnie, ponieważ <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasa zarządza podstawowym pary.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia katalog pliku dziennika podczas <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> właściwość jest ustawiona na <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />.</summary>
        <value>
          <see langword="String" />, która jest nazwa katalogu pliku dziennika. Domyślne ustawienie dla tej właściwości jest katalogu użytkownika dla danych aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwość jest ustawiona, ustawia również <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> Właściwość spowoduje zgłoszenie wyjątku, jeśli katalogu nie można rozpoznać.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ogranicznik używany do ograniczania pola wiadomości dziennika.</summary>
        <value>
          <see langword="String" />, która jest ogranicznik używany dla pola wiadomości dziennika. Domyślne ustawienie dla tej właściwości jest znak TABULACJI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwości umożliwia zmianę domyślnym ogranicznikiem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, co należy zrobić podczas zapisywania do pliku dziennika i mniej wolnego miejsca niż określone przez <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> właściwości.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Określa, co należy zrobić, podczas próby zapisu do dziennika, plików i jest mniej wolnego miejsca niż określone przez <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> właściwości, lub jeśli rozmiar pliku dziennika jest większa niż co <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> umożliwia właściwości. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwość jest ustawiona na <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, komunikaty dziennika dyskretnie są odrzucane, jeśli nie ma wystarczającej ilości miejsca na dysku zarezerwowane. Jest to zachowanie domyślne, a nie dopuszcza proste aplikacje z niepowodzeniem, jeśli dysk jest zapełniony.  
  
 Można ustawić bardziej niezawodnych aplikacji <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>i Dodaj `Try...Catch` bloki wokół całego kodu, który zapisuje w dzienniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> zwalnia zasoby zarządzane i niezarządzane; <see langword="False" /> wersje tylko zasobów niezarządzanych.</param>
        <summary>Zamyka zasadniczy strumień i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy `disposing` parametr jest `True`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> odwołania. Ta metoda wywołuje `Dispose` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose" />, nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />.  Ta metoda wywołuje <see langword="Dispose" /> metody klasy podstawowej, <see langword="Dispose" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kodowanie do użycia podczas tworzenia nowego pliku dziennika.</summary>
        <value>
          <see cref="T:System.Text.Encoding" />, która jest kodowanie do użycia podczas tworzenia nowego pliku dziennika. Wartość domyślna tej właściwości to <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy Dołączanie tekstu do istniejącego pliku dziennika, używane jest kodowanie dla tego pliku zamiast kodowania określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liczba opróżnień zasadniczy strumień, który zapisuje do bieżącego pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> metodę, aby zapisać wszystkie buforowane dane do bieżącego pliku dziennika.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę bieżącego pełnego pliku dziennika.</summary>
        <value>
          <see langword="String" />, która jest bieżąca nazwa pełnego pliku dziennika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwość zawiera nazwę aktualnie pełnego pliku dziennika. Jest ona generowana zgodnie ze ścieżki dziennika, nazwy bazy datę i numer odróżniający go od różnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
 Jawne nazwy pełny plik dziennika jest `path` \\ `baseName`[-`dateStamp`] [-`iteration`] log, gdzie:  
  
-   `path` Części jest określany przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości i, jeśli wartość tej właściwości jest równa <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości.  
  
-   `baseName` Część jest nazwę dziennika w podstawowych określoną przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   `dateStamp` Część ma format RRRR-MM-DD i jest ona wyświetlana podczas <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Jeśli wymagane jest więcej niż jeden plik dziennika o tej samej `baseName` i `dateStamp`, `iteration` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera obsługiwane przez odbiornik śledzenia atrybutów niestandardowych konfiguracji XML.</summary>
        <returns>
          <see langword="String" /> Tablica zawierająca atrybuty konfiguracji XML rozpoznaje tego odbiornika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe atrybuty dla <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> mogą być używane w pliku konfiguracji XML sterujące zachowaniem wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy. Przy użyciu innych atrybutu powoduje, że wyjątek konfiguracji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy nazwa hosta komputera rejestrowania powinny obejmować dane wyjściowe.</summary>
        <value>
          <see langword="Boolean" />. Użyj <see langword="True" /> Jeśli identyfikator hosta mają zostać uwzględnione; w przeciwnym razie użyj <see langword="False" />. Wartość domyślna to <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konfigurowanie zachowań, użyj właściwości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> i <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia lokalizację plików dziennika.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, która jest lokalizację pliku dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości można ustawić ścieżki dziennika do jednego ze wstępnie zdefiniowanych ścieżek, określany przez <xref:Microsoft.VisualBasic.Logging.LogFileLocation> wartości wyliczenia.  
  
|**Wartość lokalizacji**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|Ścieżka do danych aplikacji, które są współużytkowane przez wszystkich użytkowników, w formacie:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` jest:<br /><br /> C:\Documents and Settings\All Users\Application danych<br /><br /> Wartości `CompanyName`, `ProductName`, i `ProductVersion` pochodzą z zestawu.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Ścieżka do pliku wykonywalnego, który uruchomił aplikację.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|Ścieżka do danych aplikacji przez użytkownika w formacie:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` jest:<br /><br /> C:\Documents and Settings\\`username`\Application danych<br /><br /> Wartości `CompanyName`, `ProductName`, i `ProductVersion` pochodzić tworzą zestaw.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|Ścieżka folderu tymczasowego bieżącego systemu.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Jeśli ciąg <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> jest pusta, a następnie użyć jej jako ścieżka; w przeciwnym razie użyj ścieżki dla danych aplikacji użytkownika.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa datę, aby uwzględnić w nazwach plików dziennika.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Oznacza to, które Data do uwzględnienia w nazwach plików dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przypisać jeden z <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> wartości wyliczenia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości w celu określenia, które Data do uwzględnienia w nazwach plików dziennika.  
  
 Format daty jest RRRR-MM-DD. Aby uzyskać więcej informacji na temat formatu nazwy pliku dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
|**LogFileCreationSchedule value**|**Data według nazwy pliku dziennika**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|W polu Nazwa pliku dziennika, należy uwzględnić bieżącą datę.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Nie dołączaj daty w polu Nazwa pliku dziennika.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Pierwszy dzień tygodnia bieżącego należy uwzględnić w nazwa pliku dziennika.<br /><br /> Tydzień rozpoczyna się w sobotę.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalny dozwolony rozmiar pliku dziennika w bajtach.</summary>
        <value>
          <see langword="Long" />. Jest to rozmiar maksymalny dozwolony plik dziennika w bajtach. Wartość domyślna to 5000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do upewnij się, że pliki dziennika nie zwiększa zbyt duży.  
  
 Jeśli rozmiar pliku dziennika (w bajtach) jest większa niż wartość tej właściwości, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> zgłoszono klasy próby zapisu komunikatu w dzienniku, komunikat zostanie odrzucony, a awarii jest dyskretnej lub wyjątek, który występuje w zależności od wartości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>właściwości. W przeciwnym razie wiadomość jest zapisywane w dzienniku, jeśli ilość wolnego miejsca na dysku (w bajtach) jest mniejsza niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeśli ta właściwość ma ustawioną wartość mniej niż 1000.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość wolnego miejsca na dysku w bajtach konieczne przed komunikaty można zapisać pliku dziennika.</summary>
        <value>
          <see langword="Long" />. Jest to ilość wolnego miejsca na dysku to konieczne. Wartość domyślna to 10000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do upewnij się, że pliki dziennika nie wypełnia całkowicie dysku.  
  
 Jeśli ilość wolnego miejsca (w bajtach) jest mniejsza niż wartość tej właściwości, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> zgłoszono klasy próby zapisu komunikatu w dzienniku, komunikat zostanie odrzucony, a awarii jest dyskretnej lub wyjątek, który występuje w zależności od wartości < C2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  właściwości. W przeciwnym razie wiadomości są zapisywane w dzienniku, jeśli rozmiar pliku dziennika (w bajtach) jest większa niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gdy ta właściwość ma ustawioną wartość mniejszą niż 0.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje śledzenia danych do pliku wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody nie mają być wywoływany przez kod aplikacji. Te metody są wywoływane przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy, aby zapisywać danych wyjściowych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła śledzenia, który wywołał tej metody.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="data">Dane śledzenia do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, obiekt danych i informacji o zdarzeniu do pliku wyjściowego i strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i kontekstu informacje dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 W poniższej tabeli wymieniono pola danych wyjściowych w kolejności ich występowania. Pola są rozdzielone przez ciąg który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Zawsze|Wartość `name`.|  
|`severity`|Zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Zawsze|Reprezentacja ciągu `id`.|  
|`message`|Zawsze|Reprezentacja ciągu `data`.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> jest właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła śledzenia, który wywołał tej metody.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="data">Tablica obiektów, aby emitować jako dane.</param>
        <summary>Zapisuje śledzenia informacji, tablicę obiektów danych i informacji o zdarzeniu do pliku wyjściowego i strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formaty danych i kontekst informacje dla danych wyjściowych  
  
2.  Tworzy nowy plik dziennika, w razie potrzeby  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera pola danych wyjściowych w kolejności ich występowania. Pola są rozdzielone przez ciąg który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Zawsze|Wartość `name`.|  
|`severity`|Zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Zawsze|Reprezentacja ciągu `id`.|  
|`message`|Zawsze|Ciąg składający się z reprezentacji ciągu każdego elementu w `data`, rozdzielonych <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> jest właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisy śledzenia informacji i zdarzeń do pliku wyjściowego i strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metody nie mają być wywoływany przez kod aplikacji. Te metody są wywoływane przez członków <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy, aby zapisywać danych wyjściowych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła śledzenia, który wywołał tej metody.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje śledzenia informacji, wiadomość i zdarzeń informacji do pliku wyjściowego i strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i kontekstu informacje dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera pola danych wyjściowych w kolejności ich występowania. Pola są rozdzielone przez ciąg który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Zawsze.|Wartość `name`.|  
|`severity`|Zawsze.|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Zawsze.|Reprezentacja ciągu `id`.|  
|`message`|Zawsze.|Wartość `message`.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> jest właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła śledzenia, który wywołał tej metody.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>argumentów</c> tablicy.</param>
        <param name="args">
          <see langword="Object" /> Tablicę zawierającą zero lub więcej obiektów do formatowania.</param>
        <summary>Zapisuje śledzenia informacji, sformatowany tablicę obiektów i informacji o zdarzeniu do pliku wyjściowego i strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i kontekstu informacje dla danych wyjściowych.  
  
2.  Tworzy nową nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera pola danych wyjściowych w kolejności ich występowania. Pola są rozdzielone przez ciąg który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Zawsze|Wartość `name`.|  
|`severity`|Zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Zawsze|Reprezentacja ciągu `id`.|  
|`message`|Zawsze|Dane w `args` sformatowane `format` ciągu i do konwersji ciągów za pomocą Niezmienna kultura.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Niezmienna kultura jest używany na potrzeby konwersji ciągu.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> jest właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Niestandardowy komunikat do zapisania.</param>
        <summary>Zapisuje komunikat dosłownego wyrażenia na dysku, bez żadnych informacji dodatkowy kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> Metoda zapisuje określonego komunikatu do pliku dziennika bez żadnych informacji dodatkowy kontekst.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody służące do dołączania informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Niestandardowy komunikat do zapisania.</param>
        <summary>Zapisuje komunikat dosłownego wyrażenia na dysku, następuje bieżącego terminator wiersza, bez żadnych informacji dodatkowy kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> Metoda zapisuje określonego komunikatu do pliku dziennika bez żadnych informacji dodatkowy kontekst.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody służące do dołączania informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>