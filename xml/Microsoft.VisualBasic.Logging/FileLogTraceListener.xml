<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="79d81733dd974b761fa8f5c8e73982d5652e1db8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69318626" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia prosty odbiornik, który kieruje rejestrowanie danych wyjściowych do pliku.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa zapewnia zautomatyzowane możliwości konserwacji w celu archiwizowania plików dziennika w miarę potrzeby, codziennie lub dla aplikacji. Ta Automatyczna funkcja archiwizowania pomaga zmniejszyć zakres obowiązków związanych z konserwacją dla deweloperów i administratorów.  
  
 Wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> można dodać do kolekcji lub <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> , <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> aby przekierować dane wyjściowe z rejestrowania do pliku tekstowego. Wystąpienia tej klasy można również dodać do `My.Application.Log` lub `My.Log` (dla aplikacji sieci Web) w aplikacjach Visual Basic. Aby uzyskać więcej informacji, [zobacz Przewodnik: Zmienianie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Główne funkcje tej klasy to:  
  
1.  *Funkcja archiwizowania*. Pliki dziennika wygenerowane przez tę klasę są nazywane zgodnie z nazwą podstawową i datą oraz cyfrą, aby odróżnić plik dziennika od kolejnych wersji dziennika. Nowe pliki dziennika są tworzone w zależności od wymagań.  
  
     Jawna forma nazwy pliku to `baseName`[-`dateStamp`] [-`version`]. log, gdzie:  
  
    -   Częścią jest podstawowa nazwa dziennika określona <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> przez właściwość. `baseName`  
  
    -   Część ma format "rrrr-mm-dd" i jest pokazywany, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>. `dateStamp`  
  
    -   Jeśli do nazwy pliku jest wymagany więcej niż jeden plik dziennika `baseName` z `dateStamp`tą samą `version` i, częścią `Integer`, liczbą dodatnią.  
  
2.  *Wiele wystąpień klasy*. Jeśli wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy zapisuje do pliku, który jest w użyciu:  
  
    -   Klasa udostępnia plik, jeśli jest używany przez inne wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy w tym samym procesie.  
  
    -   Klasa tworzy nowy plik dziennika przy użyciu kolejnej dostępnej nazwy, jeśli plik jest używany przez inny proces.  
  
3.  *Bezpieczeństwo wątków*. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa jest bezpieczna wątkowo. Dzięki temu można bezpiecznie pisać komunikaty do dziennika z wielu wątków bez używania blokad.  
  
 **Lokalizacja pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> Właściwość<xref:Microsoft.VisualBasic.Logging.LogFileLocation> przyjmuje Wyliczenie, aby określić jeden z typowych katalogów, w których ma zostać zapisany plik dziennika.  
  
-   Aby zapisać dziennik w innej lokalizacji, ustaw <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwość na tę lokalizację.  
  
 **Nazwa pliku dziennika**  
  
-   Nazwa podstawowa pliku dziennika jest określona przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwość.  
  
-   Nazwa bieżącego pliku dziennika może być odczytana z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> właściwości. Pochodzi ona z kilku innych właściwości i bieżącego stanu dzienników w systemie plików.  
  
 **Konserwacja dzienników**  
  
-   Minimalna częstotliwość tworzenia nowych plików dziennika jest określana na podstawie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości. Gdy wartość jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, nowy plik dziennika jest tworzony co najmniej raz dziennie lub tygodnia, a <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Sygnatura daty jest dołączana do nazwy.  
  
-   Maksymalny rozmiar pliku dziennika jest określany przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> właściwość. Jeśli rozmiar pliku dziennika przekracza ten rozmiar, dodatkowe komunikaty zapisywane w dzienniku są odrzucane i, w zależności <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> od właściwości, zostanie zgłoszony wyjątek.  
  
-   Właściwość <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> określa, ile wolnego miejsca (w bajtach) musi być dostępne. Pozwala to zagwarantować, że <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa nie będzie zużywać całego dostępnego miejsca na dysku. Użyj właściwości, aby określić zachowanie zapisów w dzienniku, gdy liczba wolnych bajtów jest mniejsza niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  
  
 **Ustawienia danych wyjściowych w pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> Właściwość określa, czy strumień źródłowy ma być opróżniany automatycznie po każdym zapisie w pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> Właściwość określa, czy dołączać komunikaty do bieżącego pliku dziennika, jeśli są dozwolone, lub zapisywać je w nowym pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwość określa ciąg używany do ograniczania pól w wiadomości dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> Właściwość określa kodowanie, które ma być używane podczas tworzenia nowego pliku dziennika.  
  
 **Dane wyjściowe pliku dziennika**  
  
-   Metody <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> i<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> zapisują komunikaty do pliku dziennika. Te metody sprawdzają <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> Właściwość wraz z istniejącymi dziennikami o tej samej nazwie bazowej, aby określić, czy należy utworzyć nowy dziennik.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> Metoda opróżnia wszystkie komunikaty znajdujące się obecnie w buforze wyjściowym do pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> Metoda zamyka plik dziennika, aby mógł być używany przez inne procesy.  
  
 **Włączanie danych wyjściowych**  
  
 Musisz włączyć śledzenie lub debugowanie, aby użyć odbiornika śledzenia. Następująca składnia jest specyficzna dla kompilatora. Jeśli używasz kompilatorów innych niż C# lub Visual Basic, zapoznaj się z dokumentacją kompilatora.  
  
-   Aby włączyć debugowanie w C#, Dodaj `/d:DEBUG` flagę do wiersza polecenia kompilatora podczas kompilowania kodu lub możesz dodać `#define DEBUG` do góry pliku. W Visual Basic Dodaj `/d:DEBUG=True` flagę do wiersza polecenia kompilatora.  
  
-   Aby włączyć śledzenie C#, Dodaj `/d:TRACE` flagę do wiersza polecenia kompilatora podczas kompilowania kodu lub Dodaj `#define TRACE` do góry pliku. W Visual Basic Dodaj `/d:TRACE=True` flagę do wiersza polecenia kompilatora.  
  
 Aby ustawić poziom odbiornika, edytuj plik konfiguracyjny aplikacji. W tym pliku można dodać odbiornik, ustawić jego typ i ustawić jego parametry, usunąć odbiornik lub wyczyścić wszystkie detektory wcześniej ustawione przez aplikację. Plik konfiguracji powinien być sformatowany jak w poniższym przykładzie.  
  
 Aby można było uruchomić ten przykład, należy podać w pełni kwalifikowaną nazwę zestawu. Aby uzyskać informacje na temat uzyskiwania w pełni kwalifikowanej nazwy zestawu, zobacz [nazwy zestawów](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="https://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">Przewodnik: zmienianie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy i ustawia nazwę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy z nazwą domyślną.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia nazwę <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> wystąpienia klasy na FileLogTraceListener.  
  
 Możesz uzyskać dostęp do nazwy wystąpienia za pomocą <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see langword="String" />. Nazwa obiektu wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy o podanej nazwie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ustawia nazwę <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> wystąpienia klasy na. `name`  
  
 Możesz uzyskać dostęp do nazwy wystąpienia jako <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy dołączać dane wyjściowe do bieżącego pliku, czy zapisywać je do nowego pliku.</summary>
        <value><see langword="Boolean" />, wskazując, że dane wyjściowe są dołączane do bieżącego pliku i <see langword="False" /> wskazują, że dane wyjściowe są zapisywane w nowym pliku. <see langword="True" /> Ustawieniem domyślnym tej właściwości jest <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy właściwość ma `False`wartość, dane wyjściowe są zapisywane w nowym pliku. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> Gdy właściwość ma `True`wartość, dane wyjściowe są dołączane do bieżącego pliku, chyba że:  
  
-   Plik wyjściowy jest zablokowany przez inny proces. W takiej sytuacji nowy plik dziennika jest tworzony z numerem wersji, który jest dołączony do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
-   Bieżący rozmiar pliku jest większy niż wartość dozwolona dla <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> właściwości. W tej sytuacji dodatkowe komunikaty są odrzucane i, w zależności <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> od właściwości, zgłaszany jest wyjątek.  
  
-   Istniejąca nazwa pliku jest nieaktualna zgodnie z harmonogramem tworzenia dziennika określonym przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwość. W takiej sytuacji tworzony jest nowy plik dziennika, a Sygnatura daty jest dołączana do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy zapis w strumieniu pliku dziennika opróżnia bufor.</summary>
        <value><see langword="Boolean" />, ze <see langword="True" /> wskazaniem, że strumień jest opróżniany po każdym zapisie; w przeciwnym razie wpisy dziennika są buforowane i zapisywane bardziej wydajnie. Ustawieniem domyślnym tej właściwości jest <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False` Ustawienie<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> właściwości zapewnia najlepszą wydajność większości aplikacji, ponieważ jest bardziej wydajny zapisanie wielu komunikatów w pliku dziennika jednocześnie. Możesz użyć metody, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> aby opróżnić wszystkie komunikaty znajdujące się obecnie w buforze wyjściowym pliku dziennika. Można również użyć <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metody, która niejawnie opróżnia strumień przed zamknięciem pliku dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę podstawową dla plików dziennika, która jest używana do tworzenia pełnej nazwy pliku dziennika.</summary>
        <value><see langword="String" />. Podstawowa nazwa plików dziennika. Wartość domyślna to nazwa produktu aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość określa podstawową nazwę plików dziennika, do których jest <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> zapisywany Klasa. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwość zawiera bieżącą pełną nazwę pliku dziennika. Jest generowana zgodnie ze ścieżką dziennika, nazwą podstawową, datą i liczbą, aby odróżnić ją od różnych wersji dziennika. Nowe pliki dziennika są tworzone w zależności od wymagań.  
  
 Jawna `path`forma pełnej nazwy pliku dziennika to \\ `baseName`[-`dateStamp`] [-`iteration`]. log, gdzie  
  
-   Część jest określana <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> przez właściwość i, jeśli ta wartość właściwości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> jest ustawiona na <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>właściwość. `path`  
  
-   Częścią jest podstawowa nazwa dziennika określona <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> przez właściwość. `baseName`  
  
-   Część ma format "rrrr-mm-dd" i jest pokazywany, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest ustawiona na <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>. `dateStamp`  
  
-   Jeśli do nazwy pliku jest wymagany więcej niż jeden plik dziennika `baseName` z `dateStamp`tą samą `iteration` i, częścią `Integer`, liczbą dodatnią.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka źródłowy strumień bieżącego pliku dziennika i zwalnia wszystkie zasoby skojarzone z bieżącym strumieniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie trzeba jawnie wywoływać <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metody, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> ponieważ Klasa zarządza podstawową parą.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia katalog pliku dziennika, gdy <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> właściwość jest ustawiona na. <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /></summary>
        <value><see langword="String" />, która jest nazwą katalogu plików dziennika. Ustawieniem domyślnym tej właściwości jest katalog użytkownika dla danych aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy właściwość jest ustawiona, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> ustawia również właściwość na <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> Właściwość zgłosi wyjątek, jeśli nie można rozpoznać katalogu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ogranicznik używany do rozgraniczania pól w komunikacie dziennika.</summary>
        <value><see langword="String" />, czyli ogranicznik używany dla pól w wiadomości dziennika. Domyślnym ustawieniem tej właściwości jest znak TABULACJi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwość pozwala zmienić domyślny ogranicznik.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, jakie czynności należy wykonać podczas zapisywania w pliku dziennika, a ilość wolnego miejsca na dysku jest mniejsza niż określona <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> przez właściwość.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Określa, jakie czynności należy wykonać podczas próby zapisu w pliku dziennika, a ilość wolnego miejsca na dysku jest mniejsza niż określona przez <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> właściwość lub czy rozmiar pliku dziennika jest większy od <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> dozwolonej właściwości. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy właściwość jest ustawiona na <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, komunikaty dziennika są odrzucane dyskretnie, jeśli nie ma wystarczającej ilości zarezerwowanego miejsca na dysku. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> Jest to zachowanie domyślne i uniemożliwia niepowodzenie prostej aplikacji, jeśli dysk jest zbyt pełny.  
  
 Bardziej niezawodne aplikacje mogą ustawiać <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwość na <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>i dodawać `Try...Catch` bloki otaczające cały kod, który zapisuje dane w dzienniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="True" />Zwalnia zasoby zarządzane i niezarządzane; <see langword="False" /> zwalnia tylko niezarządzane zasoby.</param>
        <summary>Zamyka źródłowy strumień i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy parametr ma wartość `True`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> których odwołują się te odwołania. `disposing` Ta metoda wywołuje `Dispose` metodę każdego przywoływanego obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose" />należy zachować ostrożność, aby nie odwoływać się do obiektów, które zostały wcześniej usunięte <see langword="Dispose" />w ramach wcześniejszego wywołania do.  
  
Ta metoda wywołuje <see langword="Dispose" /> metodę klasy bazowej, <see langword="Dispose" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kodowanie, które ma być używane podczas tworzenia nowego pliku dziennika.</summary>
        <value><see cref="T:System.Text.Encoding" />, który jest kodowaniem używanym podczas tworzenia nowego pliku dziennika. Wartość domyślna tej właściwości to <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas dołączania tekstu do istniejącego pliku dziennika, kodowanie dla tego pliku jest używane zamiast kodowania określonego przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia źródłowy strumień, który zapisuje dane do bieżącego pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> , aby zapisać wszystkie dane buforowane do bieżącego pliku dziennika.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą pełną nazwę pliku dziennika.</summary>
        <value><see langword="String" />, czyli bieżąca pełna nazwa pliku dziennika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwość zawiera bieżącą pełną nazwę pliku dziennika. Jest generowana zgodnie ze ścieżką dziennika, nazwą podstawową, datą i liczbą, aby odróżnić ją od różnych wersji dziennika. Nowe pliki dziennika są tworzone w zależności od wymagań.  
  
 Jawna `path`forma pełnej nazwy pliku dziennika to \\ `baseName`[-`dateStamp`] [-`iteration`]. log, gdzie:  
  
-   Część jest określana <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> przez właściwość i, jeśli ta wartość właściwości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> jest ustawiona na <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>właściwość. `path`  
  
-   Częścią jest podstawowa nazwa dziennika określona <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> przez właściwość. `baseName`  
  
-   Część ma format rrrr-mm-dd i jest wyświetlana, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>. `dateStamp`  
  
-   Jeśli do nazwy pliku jest wymagany więcej niż jeden plik dziennika `baseName` z `dateStamp`tą samą `iteration` i, częścią `Integer`, liczbą dodatnią.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera niestandardowe atrybuty konfiguracji XML obsługiwane przez odbiornik śledzenia.</summary>
        <returns><see langword="String" />Tablica zawierająca atrybuty konfiguracji XML rozpoznawane przez ten odbiornik.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Atrybuty niestandardowe dla programu <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> mogą być używane w pliku konfiguracyjnym XML do kontrolowania zachowania wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy. Użycie dowolnego innego atrybutu powoduje wyjątek konfiguracji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy nazwa hosta maszyny rejestrowania powinna być uwzględniona w danych wyjściowych.</summary>
        <value><see langword="Boolean" />. Użyj <see langword="True" /> , jeśli należy uwzględnić identyfikator hosta; w przeciwnym razie <see langword="False" />Użyj. Wartość domyślna to <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości, aby skonfigurować zachowanie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metod i. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia lokalizację dla plików dziennika.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, czyli lokalizację pliku dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości, aby ustawić ścieżkę dziennika na jedną ze wstępnie zdefiniowanych ścieżek, ustaloną <xref:Microsoft.VisualBasic.Logging.LogFileLocation> przez wartości wyliczenia. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>  
  
|**Wartość lokalizacji**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|Ścieżka do danych aplikacji, które są współużytkowane przez wszystkich użytkowników, w formacie:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` :<br /><br /> C:\Documents and Settings\All Users\Application — dane<br /><br /> Wartości `CompanyName`, `ProductName`i pochodzązzestawu.`ProductVersion`|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Ścieżka do pliku wykonywalnego, który uruchomił aplikację.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|Ścieżka do danych aplikacji użytkownika z formatem:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` :<br /><br /> C:\Dokumenty i ustawienia\\`username`\Dane danych<br /><br /> Wartości `CompanyName`, `ProductName`i tworzązestaw.`ProductVersion`|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|Ścieżka do tymczasowego folderu systemowego.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Jeśli ciąg określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> nie jest pusty, użyj go jako ścieżki; w przeciwnym razie użyj ścieżki dla danych aplikacji użytkownika.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa datę, która ma zostać uwzględniona w nazwach plików dziennika.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Wskazuje datę, która ma zostać uwzględniona w nazwach plików dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przypisz jedną z <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> wartości wyliczenia do właściwości, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> aby określić datę, która ma zostać uwzględniona w nazwach plików dziennika.  
  
 Format daty to RRRR-MM-DD. Aby uzyskać więcej informacji na temat formatu nazwy pliku dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
|**LogFileCreationSchedule value**|**Data w nazwie pliku dziennika**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Dołącz bieżącą datę do nazwy pliku dziennika.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Nie dołączaj daty do nazwy pliku dziennika.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Dołącz pierwszy dzień bieżącego tygodnia w nazwie pliku dziennika.<br /><br /> Tydzień zaczyna się w sobotę.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalny dozwolony rozmiar pliku dziennika w bajtach.</summary>
        <value><see langword="Long" />. Jest to maksymalny dozwolony rozmiar pliku dziennika w bajtach. Wartość domyślna to 5000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej właściwości, aby upewnić się, że pliki dziennika nie rosną zbyt duże.  
  
 Jeśli rozmiar pliku dziennika (w bajtach) jest większy niż wartość tej właściwości, wtedy, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa próbuje napisać komunikat do dziennika, komunikat zostanie odrzucony i błąd jest dyskretny lub zostanie zgłoszony wyjątek w zależności od wartości parametru <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>właściwość. W przeciwnym razie komunikat jest zapisywana w dzienniku, jeśli ilość wolnego miejsca na dysku (w bajtach) jest mniejsza niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gdy wartość tej właściwości jest równa wartości mniejszej niż 1000.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość wolnego miejsca na dysku (w bajtach), aby umożliwić zapisanie komunikatów w pliku dziennika.</summary>
        <value><see langword="Long" />. Jest to ilość wolnego miejsca na dysku. Wartość domyślna to 10000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej właściwości, aby upewnić się, że pliki dziennika nie wypełniają całkowicie dysku.  
  
 Jeśli ilość wolnego miejsca na dysku (w bajtach) jest mniejsza niż wartość tej właściwości, wtedy, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa próbuje zapisać komunikat do dziennika, komunikat zostanie odrzucony i błąd jest dyskretny lub zostanie zgłoszony wyjątek w zależności od wartości parametru < Właściwość C2 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> > . W przeciwnym razie komunikat jest zapisywana w dzienniku, jeśli rozmiar pliku dziennika (w bajtach) jest większy niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gdy ta właściwość jest ustawiona na wartość mniejszą niż 0.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia do pliku wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>metody nie są przeznaczone do wywołania przez kod aplikacji. Te metody są wywoływane przez elementy członkowskie <xref:System.Diagnostics.Debug>klasy, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> , aby zapisać dane śledzenia do danych wyjściowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła śledzenia, które wywołało tę metodę.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Dane śledzenia do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, obiekt danych i informacje o zdarzeniu w pliku lub strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, w razie potrzeby.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>, zobacz.  
  
 Poniższa tabela zawiera listę pól wyjściowych w kolejności, w jakiej się pojawiają. Pola są rozdzielane przez ciąg, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> określa właściwość i po którym następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjściowy**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Ciąg reprezentujący `id`.|  
|`message`|zawsze|Ciąg reprezentujący `data`.|  
|`callStack`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Callstack>|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość .`eventCache`|  
|`CorrelationID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.LogicalOperationStack>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`DateTime`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.DateTime>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ProcessID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ProcessId>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ThreadID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ThreadId>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`Timestamp`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Timestamp>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`HostName`|Gdy właściwość jest `True`. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła śledzenia, które wywołało tę metodę.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Tablica obiektów do emisji jako dane.</param>
        <summary>Zapisuje informacje o śledzeniu, tablicę obiektów danych i informacje o zdarzeniach w pliku wyjściowym lub strumieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych,  
  
2.  Tworzy nowy plik dziennika, w razie potrzeby,  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>, zobacz.  
  
 Ta tabela zawiera listę pól wyjściowych w kolejności, w jakiej są wyświetlane. Pola są rozdzielane przez ciąg, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> określa właściwość i po którym następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjściowy**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Ciąg reprezentujący `id`.|  
|`message`|zawsze|Ciąg składający się z ciągu reprezentującego każdy element w `data`, każdy oddzielony <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>przez.|  
|`callStack`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Callstack>|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość .`eventCache`|  
|`CorrelationID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.LogicalOperationStack>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`DateTime`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.DateTime>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ProcessID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ProcessId>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ThreadID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ThreadId>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`Timestamp`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Timestamp>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`HostName`|Gdy właściwość jest `True`. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu i zdarzeniu w pliku lub strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>metody nie są przeznaczone do wywołania przez kod aplikacji. Te metody są wywoływane przez elementy członkowskie <xref:System.Diagnostics.Debug>klasy, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> , aby zapisać dane śledzenia do danych wyjściowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła śledzenia, które wywołało tę metodę.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje informacje o śledzeniu, komunikat i informacje o zdarzeniu w pliku lub strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, w razie potrzeby.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>, zobacz.  
  
 Ta tabela zawiera listę pól wyjściowych w kolejności, w jakiej są wyświetlane. Pola są rozdzielane przez ciąg, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> określa właściwość i po którym następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjściowy**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Stałego.|Wartość `name`.|  
|`severity`|Stałego.|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Stałego.|Ciąg reprezentujący `id`.|  
|`message`|Stałego.|Wartość `message`.|  
|`callStack`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Callstack>|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość .`eventCache`|  
|`CorrelationID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.LogicalOperationStack>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`DateTime`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.DateTime>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ProcessID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ProcessId>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ThreadID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ThreadId>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`Timestamp`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Timestamp>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`HostName`|Gdy właściwość jest `True`. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache"><see cref="T:System.Diagnostics.TraceEventCache" /> Obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła śledzenia, które wywołało tę metodę.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odpowiadają obiektom w <paramref name="args" /> tablicy.</param>
        <param name="args"><see langword="Object" /> Tablica zawierająca zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje informacje śledzenia, sformatowaną tablicę obiektów i informacje o zdarzeniu do pliku wyjściowego lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, w razie potrzeby.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowego pliku dziennika <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>, zobacz.  
  
 Ta tabela zawiera listę pól wyjściowych w kolejności, w jakiej są wyświetlane. Pola są rozdzielane przez ciąg, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> określa właściwość i po którym następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjściowy**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Ciąg reprezentujący `id`.|  
|`message`|zawsze|Dane `args` sformatowane`format` za pomocą ciągu i przy użyciu niezmiennej kultury dla konwersji ciągów.|  
|`callStack`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Callstack>|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość .`eventCache`|  
|`CorrelationID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.LogicalOperationStack>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`DateTime`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.DateTime>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ProcessID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ProcessId>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`ThreadID`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.ThreadId>|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość .`eventCache`|  
|`Timestamp`|Gdy flaga jest ustawiona <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości. <xref:System.Diagnostics.TraceOptions.Timestamp>|Ciąg reprezentujący <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache`właściwość. Kultura niezmienna jest używana do konwersji ciągów.|  
|`HostName`|Gdy właściwość jest `True`. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Niestandardowa wiadomość do zapisania.</param>
        <summary>Zapisuje komunikat Verbatim na dysku bez dodatkowych informacji kontekstowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> Metoda zapisuje określony komunikat do pliku dziennika bez dodatkowych informacji kontekstowych.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metod, aby uwzględnić informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Niestandardowa wiadomość do zapisania.</param>
        <summary>Zapisuje komunikat Verbatim na dysku, po którym następuje bieżący terminator wiersza, bez dodatkowych informacji kontekstowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> Metoda zapisuje określony komunikat do pliku dziennika bez dodatkowych informacji kontekstowych.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metod, aby uwzględnić informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
