<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fd87b5c87ae90cca751677a1ff302a09e3997d6b" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52216279" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia prosty odbiornik, który kieruje dane wyjściowe rejestrowania w pliku.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasa udostępnia możliwość obsługi automatycznych archiwizuj plików dzienników, zgodnie z potrzebami, na podstawie dziennego lub poszczególnych aplikacji. To automatyczne funkcje archiwizacji zmniejsza obowiązki konserwacji deweloperów i administratorów.  
  
 Wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> mogą być dodawane do <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> lub <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, aby przekierować dane wyjściowe możliwości logowania się do pliku tekstowego. Wystąpienia tej klasy mogą być również dodawane do `My.Application.Log` lub `My.Log` (dla aplikacji sieci Web) w aplikacjach Visual Studio. Aby uzyskać więcej informacji, zobacz [wskazówki: Zmienianie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Główne funkcje tej klasy to:  
  
1.  *Funkcje archiwizacji*. Pliki dziennika generowane przez tę klasę, są nazywane zgodnie z podstawowej nazwy i daty, wraz z liczbą odróżnienia pliku dziennika kolejnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
     Formularz jawne nazwy pliku jest `baseName`[-`dateStamp`] [-`version`] .log, gdzie:  
  
    -   `baseName` Część jest nazwa dziennika podstawowe, określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
    -   `dateStamp` Część ma format "RRRR-MM-DD" i jest on wyświetlany, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
    -   Jeśli potrzebny jest więcej niż jeden plik dziennika o takiej samej `baseName` i `dateStamp`, `version` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
2.  *Wiele wystąpień klas*. Jeśli wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy zapisuje do pliku, który jest w użyciu:  
  
    -   Klasa udziałów pliku, jeśli jest on używany przez inne wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy, w tym samym procesie.  
  
    -   Klasy tworzy nowy plik dziennika przy użyciu nazwy dostępnych dalej, jeśli plik jest używany przez inny proces.  
  
3.  *Bezpieczeństwo wątku*. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Klasy jest bezpieczny dla wątków. Dzięki temu można bezpiecznie zapisywać komunikaty w dzienniku z wielu wątków bez używania blokad.  
  
 **Lokalizacja pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> Właściwość przyjmuje <xref:Microsoft.VisualBasic.Logging.LogFileLocation> wyliczeniu, aby określić jedną z typowych katalogów do zapisania pliku dziennika.  
  
-   Aby zapisać w dzienniku do innej lokalizacji, należy ustawić <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości do tej lokalizacji.  
  
 **Nazwa pliku dziennika**  
  
-   Podstawowa nazwa pliku dziennika jest określona przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   Nazwa bieżącego pliku dziennika może odczytywać <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> właściwości. Jest on uzyskiwany z innych właściwości i bieżący stan dzienniki w systemie plików.  
  
 **Obsługę dziennika**  
  
-   Minimalna częstotliwość tworzenia nowych plików dziennika jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości. Jeśli wartość to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>nowy plik dziennika jest tworzony co najmniej jeden raz każdego dnia lub tygodnia, oraz sygnatura daty jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
-   Maksymalny rozmiar (w bajtach) w pliku dziennika jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> właściwości. Jeśli rozmiar pliku przekracza ten rozmiar, dodatkowe komunikaty w dzienniku są porzucane i zależnie od tego, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości, zgłaszany jest wyjątek.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> Właściwość określa ilość wolnego miejsca (w bajtach) muszą być dostępne. Dzięki temu, upewnij się, że <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy nie zużyje wszystkich dostępnego miejsca na dysku. Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> zapisuje właściwości, aby określić zachowanie dziennika, gdy istnieją mniej niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> wolnych bajtów.  
  
 **Ustawienia wyjściowego pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> Właściwość określa, czy zasadniczy strumień powinny być automatycznie czyszczona po każdym zapisie do pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> Właściwość określa, czy należy dołączyć wiadomości do bieżącego pliku dziennika, jeśli jest to dozwolone, lub zapisania ich do nowego pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwość określa ciąg do użycia dla rozdzielający pola komunikatu dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> Właściwość określa kodowanie do użycia podczas tworzenia nowego pliku dziennika.  
  
 **Dane wyjściowe pliku dziennika**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> i <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metod zapisywania komunikatów w pliku dziennika. Sprawdź te metody <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości wraz z wszelkie istniejące dzienniki o takiej samej nazwie podstawowej, aby określić, jeśli należy utworzyć nowy dziennik.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> Metoda opróżnia wszystkie komunikaty, obecnie w buforze dane wyjściowe do pliku dziennika.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> Metoda zamyka plik dziennika, dzięki czemu mogą być używane przez inne procesy.  
  
 **Włączanie danych wyjściowych**  
  
 Należy włączyć śledzenie lub debugowania do detektorów śledzenia użycia. Następująca składnia jest specyficzne dla kompilatora. Jeśli używasz kompilatorów innych niż C# lub Visual Basic, można znaleźć w dokumentacji kompilatora.  
  
-   Aby włączyć debugowanie w języku C#, należy dodać `/d:DEBUG` flagi do wiersza polecenia kompilatora podczas kompilowania kodu lub można dodać `#define DEBUG` na początku pliku. W języku Visual Basic należy dodać `/d:DEBUG=True` flagi kompilatora w wierszu polecenia.  
  
-   Aby włączyć śledzenie w języku C#, należy dodać `/d:TRACE` flagi do wiersza polecenia kompilatora podczas kompilowania kodu lub dodać `#define TRACE` na początku pliku. W języku Visual Basic należy dodać `/d:TRACE=True` flagi kompilatora w wierszu polecenia.  
  
 Aby ustawić poziom z odbiornikiem, przeprowadź edycję pliku konfiguracji aplikacji. W tym pliku może dodania odbiornika, ustaw jej typ i ustawić jej parametry, usunąć odbiornik lub usuń zaznaczenie wszystkich obiektów nasłuchujących wcześniej ustawione przez aplikację. Plik konfiguracyjny powinny być sformatowane tak jak w poniższym przykładzie.  
  
 W tym przykładzie do uruchamiania należy podać w pełni kwalifikowanej nazwy zestawu. Aby uzyskać informacje o sposobie uzyskiwania w pełni kwalifikowanej nazwy zestawu, zobacz [nazw zestawów](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="https://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">Wskazówki: zmienianie, gdzie My.Application.Log zapisuje informacje</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy i ustawia nazwę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy z domyślną nazwą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody ustawia nazwę wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy FileLogTraceListener.  
  
 Dostęp można uzyskać nazwy wystąpienia za pośrednictwem <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see langword="String" />. Nazwa obiektu wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> klasy o podanej nazwie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody ustawia nazwę wystąpienia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy `name`.  
  
 Dostęp można uzyskać nazwę wystąpienia traktować <xref:System.Diagnostics.TraceListener.Name%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy należy dołączyć dane wyjściowe do bieżącego pliku ani pisać go do nowego pliku.</summary>
        <value><see langword="Boolean" />, za pomocą <see langword="True" /> wskazujący, że dane wyjściowe są dołączane do bieżącego pliku i <see langword="False" /> wskazujący, że dane wyjściowe są zapisywane do nowego pliku. Domyślne ustawienie dla tej właściwości jest <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> właściwość `False`, plik wyjściowy zostanie zapisany do nowego pliku. Jeśli właściwość jest `True`, dane wyjściowe są dołączane do bieżącego pliku, chyba że:  
  
-   Plik wyjściowy jest zablokowany przez inny proces. W takiej sytuacji nowy plik dziennika jest tworzony z numerem wersji, która jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
-   Bieżący rozmiar pliku jest większa niż co <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> właściwość umożliwia. W takiej sytuacji dodatkowe komunikaty są porzucane i zależnie od tego, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości, zgłaszany jest wyjątek.  
  
-   Istniejącej nazwy pliku jest nieaktualna zgodnie z harmonogramem tworzenia dziennika określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości. W takiej sytuacji nowy plik dziennika jest tworzony i sygnatura daty jest włączona do <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nazwy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy zapisywania do strumienia pliku dziennika opróżnia bufor.</summary>
        <value><see langword="Boolean" />, za pomocą <see langword="True" /> wskazujący, że strumień jest opróżniany po każdym zapisie; w przeciwnym razie wpisy dziennika są buforowane i zapisywane wydajniej. Domyślne ustawienie dla tej właściwości jest <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False` Ustawienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> właściwość zapewnia najlepszą wydajność w przypadku większości aplikacji, ponieważ jest bardziej wydajne, można zapisać wiele wiadomości do pliku dziennika, w tym samym czasie. Możesz użyć <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> metodę, aby opróżnić komunikaty aktualnie w pliku dziennika danych wyjściowych buforu. Można również użyć <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metody, która niejawnie opróżnia strumienia przed zamknięciem pliku dziennika.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę podstawową dla plików dziennika, który jest używany do tworzenia nazwy pełnego pliku dziennika.</summary>
        <value><see langword="String" />. Podstawowa nazwa dla plików dziennika. Wartością domyślną jest nazwa produktu aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> Właściwość określa nazwę podstawową dla plików dziennika, który <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> zapisuje klasy.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwości zapewnia bieżąca nazwa pełnego pliku dziennika. Są one generowane zgodnie z ścieżka dziennika, nazwy bazy, datę i numer odróżniający go od różnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
 Jawne formularz pełnej nazwy pliku jest `path` \\ `baseName`[-`dateStamp`] [-`iteration`] .log, gdzie  
  
-   `path` Część jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości i, jeśli wartość tej właściwości jest równa <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości.  
  
-   `baseName` Część jest nazwa dziennika podstawowe, określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   `dateStamp` Część ma format "RRRR-MM-DD" i jest on wyświetlany, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> ustawiono <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Jeśli potrzebny jest więcej niż jeden plik dziennika o takiej samej `baseName` i `dateStamp`, `iteration` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka zasadniczy strumień dla bieżącego pliku dziennika i zwalnia wszystkie zasoby skojarzone z bieżącym strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie trzeba wywoływać <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metoda jawnie, ponieważ <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasa zarządza podstawowym pary.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia katalog pliku dziennika podczas <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> właściwość jest ustawiona na <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />.</summary>
        <value><see langword="String" />, która jest nazwą katalog pliku dziennika. Ustawieniem domyślnym dla tej właściwości jest katalogu użytkownika dla danych aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwość jest ustawiona, określa też <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwość <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> Właściwość spowoduje zgłoszenie wyjątku, jeśli katalog nie jest możliwe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Separator używany do ograniczania pola komunikatu dziennika.</summary>
        <value><see langword="String" />, który jest Separator używany dla pól w komunikatu dziennika. Ustawieniem domyślnym dla tej właściwości jest znak TABULACJI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> Właściwości umożliwia zmianę domyślnym ogranicznikiem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, co można zrobić podczas zapisywania pliku dziennika i mniej wolnego miejsca niż określone przez <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> właściwości.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Określa, co można zrobić podczas próby zapisu w dzienniku plików i ma mniej wolnego miejsca niż określone przez <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> właściwość, czy rozmiar pliku dziennika jest większa niż co <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> właściwość umożliwia. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwość jest ustawiona na <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, komunikaty dziennika dyskretnie są odrzucane, jeśli nie ma wystarczającej ilości miejsca na dysku zarezerwowane. Jest to domyślne zachowanie i zapobiega prostej aplikacji z kończy się niepowodzeniem, jeśli dysk jest zapełniony.  
  
 Bardziej niezawodnych aplikacji można ustawić <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> właściwości <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>i Dodaj `Try...Catch` bloki wokół cały kod, który zapisuje w dzienniku.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="True" /> zwalnia zasoby zarządzane i niezarządzane; <see langword="False" /> wersje tylko niezarządzane zasoby.</param>
        <summary>Zamyka zasadniczy strumień i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy `disposing` parametr jest `True`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane że <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> odwołania. Ta metoda wywołuje `Dispose` metoda każdego obiektu, do którego istnieje odwołanie.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose" />, nie należy odwoływać się do obiektów, które zostały wcześniej zlikwidowane wcześniejszym wywołaniem do <see langword="Dispose" />.  
  
Ta metoda wywołuje <see langword="Dispose" /> metody klasy bazowej, <see langword="Dispose" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kodowanie do użycia podczas tworzenia nowego pliku dziennika.</summary>
        <value><see cref="T:System.Text.Encoding" />, która jest kodowanie do użycia podczas tworzenia nowego pliku dziennika. Wartość domyślna tej właściwości to <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy Dołączanie tekstu do istniejącego pliku dziennika, kodowanie dla tego pliku jest używana zamiast kodowanie określone przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia zasadniczy strumień, który zapisuje do bieżącego pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> metodę, aby zapisać wszystkie buforowane dane bieżącego pliku dziennika.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę bieżącego pełnego pliku dziennika.</summary>
        <value><see langword="String" />, która jest bieżąca nazwa pełnego pliku dziennika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> Właściwości zapewnia bieżąca nazwa pełnego pliku dziennika. Są one generowane zgodnie z ścieżka dziennika, nazwy bazy, datę i numer odróżniający go od różnych wersji dziennika. Nowe pliki dziennika są tworzone na zgodnie z potrzebami.  
  
 Formularz jawne nazwy pełny plik dziennika jest `path` \\ `baseName`[-`dateStamp`] [-`iteration`] .log, gdzie:  
  
-   `path` Część jest określana przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwości i, jeśli wartość tej właściwości jest równa <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> właściwości.  
  
-   `baseName` Część jest nazwa dziennika podstawowe, określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> właściwości.  
  
-   `dateStamp` Część ma format RRRR-MM-DD, i jest on wyświetlany, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> jest <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> lub <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Jeśli potrzebny jest więcej niż jeden plik dziennika o takiej samej `baseName` i `dateStamp`, `iteration` część dodatnią `Integer`, jest dodawany do nazwy pliku.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera obsługiwane przez odbiornik śledzenia atrybutów niestandardowych konfiguracji XML.</summary>
        <returns><see langword="String" /> Tablica zawierająca atrybutów konfiguracji XML, które są rozpoznawane przez ten odbiornik.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niestandardowe atrybuty dla <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> mogą być używane w pliku konfiguracji XML w przypadku kontroli zachowania wystąpienie <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy. Przy użyciu innego atrybutu powoduje, że wyjątek konfiguracji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy nazwa hosta komputera rejestrowania ma być uwzględniany w danych wyjściowych.</summary>
        <value><see langword="Boolean" />. Użyj <see langword="True" /> Jeśli identyfikator hosta mają zostać uwzględnione; w przeciwnym razie użyj <see langword="False" />. Wartość domyślna to <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konfigurowanie zachowania za pomocą właściwości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> i <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia lokalizację plików dziennika.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, które znajdują się w pliku dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> właściwość można ustawić ścieżki dziennika do jednego z wstępnie zdefiniowanych ścieżek, określane przez <xref:Microsoft.VisualBasic.Logging.LogFileLocation> wartości wyliczenia.  
  
|**Wartość lokalizacji**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|Ścieżka do danych aplikacji, które są współużytkowane przez wszystkich użytkowników, przy użyciu formatu:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` jest:<br /><br /> C:\Documents and Settings\All Users\Application danych<br /><br /> Wartości `CompanyName`, `ProductName`, i `ProductVersion` pochodzą z zestawu.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Ścieżka do pliku wykonywalnego, który uruchomił aplikację.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|Ścieżka dla danych aplikacji użytkownika, przy użyciu formatu:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Typowa wartość dla `BasePath` jest:<br /><br /> C:\Documents and Settings\\`username`\Application danych<br /><br /> Wartości `CompanyName`, `ProductName`, i `ProductVersion` pochodzą tworzą zestaw.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|Ścieżka folderu tymczasowego bieżącego systemu.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Jeśli ten ciąg jest określony przez <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> jest puste, a następnie użyj go jako ścieżkę; w przeciwnym razie użyj ścieżki dla danych aplikacji użytkownika.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, które Data do uwzględnienia w nazwach plików dziennika.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Oznacza to, które Data do uwzględnienia w nazwach plików dziennika. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przypisać jedną z <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> wartości wyliczenia <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> właściwości w celu określenia, których data do uwzględnienia w nazwach plików dziennika.  
  
 Format daty to RRRR-MM-DD. Aby uzyskać więcej informacji na temat formatu nazwa pliku dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
|**LogFileCreationSchedule value**|**Data w nazwie pliku dziennika**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Obejmują bieżącą datę w polu Nazwa pliku dziennika.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Nie dołączaj datę w polu Nazwa pliku dziennika.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Dołączyć pierwszego dnia tygodnia bieżącej nazwy pliku dziennika.<br /><br /> Tydzień rozpoczyna się w sobotę.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalny dozwolony rozmiar pliku dziennika w bajtach.</summary>
        <value><see langword="Long" />. Jest to rozmiar maksymalny dozwolony pliku dziennika, w bajtach. Wartość domyślna to 5000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej właściwości, aby upewnić się, że pliki dziennika nie rośnie za duży.  
  
 Jeśli rozmiar pliku dziennika (w bajtach) jest większa niż wartość tej właściwości, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy próbuje zapisać komunikat w dzienniku, komunikat zostanie odrzucony, a błąd jest w trybie cichym lub wyjątek, który jest generowany w zależności od wartości <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>właściwości. W przeciwnym razie komunikat jest zapisywane w dzienniku, gdy ilość wolnego miejsca na dysku (w bajtach) jest mniejsza niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeśli ta właściwość jest równa wartości mniej niż 1000.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość wolnego miejsca na dysku, w bajtach, niezbędne przed komunikaty mogą być zapisywane w pliku dziennika.</summary>
        <value><see langword="Long" />. Jest to ilość wolnego miejsca na dysku to konieczne. Wartość domyślna to 10000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej właściwości, aby upewnić się, że pliki dziennika nie wypełnia całkowicie dysku.  
  
 Jeśli ilość wolnego miejsca (w bajtach) jest mniejsza niż wartość tej właściwości, gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> klasy próbuje zapisać komunikat w dzienniku, komunikat zostanie odrzucony, a błąd jest w trybie cichym lub wyjątek, który jest generowany w zależności od wartości < C2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  właściwości. W przeciwnym razie komunikat jest zapisywane w dzienniku, jeśli rozmiar pliku dziennika (w bajtach) jest większa niż <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeśli ta właściwość jest równa wartości mniejszej niż 0.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia do pliku wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody nie są przeznaczone do wywołania przez kod aplikacji. Te metody są wywoływane przez elementy członkowskie <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia w danych wyjściowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła śledzenia, która wywołała tej metody.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Dane śledzenia do emitowania.</param>
        <summary>Zapisuje informacje śledzenia, obiekt danych i informacji o zdarzeniach do wyjściowego pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera listę pól danych wyjściowych, w kolejności, w jakiej znajdują się. Pola są rozdzielone przez ciąg, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następują terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Reprezentacja ciągu `id`.|  
|`message`|zawsze|Reprezentacja ciągu `data`.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła śledzenia, która wywołała tej metody.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Tablica obiektów do emitowania jako dane.</param>
        <summary>Zapisuje śledzenia informacji, tablicy obiektów danych i informacji o zdarzeniach do wyjściowego pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych  
  
2.  Tworzy nowy plik dziennika, jeśli to konieczne,  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Ta tabela zawiera pola danych wyjściowych w kolejności, w której są wyświetlane. Pola są rozdzielone przez ciąg, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następują terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Reprezentacja ciągu `id`.|  
|`message`|zawsze|Ciąg składający się z ciągu reprezentującego każdego elementu w `data`, rozdzielonych <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisy śledzenia i informacje o zdarzeniach do wyjściowego pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metody nie są przeznaczone do wywołania przez kod aplikacji. Te metody są wywoływane przez elementy członkowskie <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia w danych wyjściowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła śledzenia, która wywołała tej metody.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje śledzenia informacji, wiadomości i informacje o zdarzeniach do wyjściowego pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera listę pól danych wyjściowych w kolejności, w jakiej są wyświetlane. Pola są rozdzielone przez ciąg, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następują terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|Zawsze.|Wartość `name`.|  
|`severity`|Zawsze.|Nazwa wartości wyliczenia `eventType`.|  
|`id`|Zawsze.|Reprezentacja ciągu `id`.|  
|`message`|Zawsze.|Wartość `message`.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> obiekt, który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła śledzenia, która wywołała tej metody.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <paramref name="args" /> tablicy.</param>
        <param name="args"><see langword="Object" /> Tablica zawierająca zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje śledzenia informacji, sformatowane tablicę obiektów i informacji o zdarzeniach do wyjściowego pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody:  
  
1.  Formatuje dane i informacje kontekstu dla danych wyjściowych.  
  
2.  Tworzy nową nowy plik dziennika, jeśli to konieczne.  
  
3.  Zapisuje informacje w pliku dziennika.  
  
 Aby uzyskać więcej informacji na temat tworzenia nowych plików dziennika, zobacz <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Poniższa tabela zawiera listę pól danych wyjściowych w kolejności, w jakiej są wyświetlane. Pola są rozdzielone przez ciąg, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> właściwość określa i następuje terminator wiersza.  
  
|**Pole**|**Warunek wyjścia**|**Opis**|  
|---------------|--------------------------|---------------------|  
|`source`|zawsze|Wartość `name`.|  
|`severity`|zawsze|Nazwa wartości wyliczenia `eventType`.|  
|`id`|zawsze|Reprezentacja ciągu `id`.|  
|`message`|zawsze|Dane w `args` sformatowany przy użyciu `format` ciągu i przy użyciu niezmiennej kultury do konwersji ciągów.|  
|`callStack`|Gdy <xref:System.Diagnostics.TraceOptions.Callstack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> Właściwość `eventCache`.|  
|`CorrelationID`|Gdy <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`DateTime`|Gdy <xref:System.Diagnostics.TraceOptions.DateTime> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.DateTime%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ProcessID`|Gdy <xref:System.Diagnostics.TraceOptions.ProcessId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`ThreadID`|Gdy <xref:System.Diagnostics.TraceOptions.ThreadId> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> Właściwość `eventCache`.|  
|`Timestamp`|Gdy <xref:System.Diagnostics.TraceOptions.Timestamp> flaga jest ustawiona we <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Reprezentacja ciągu <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> właściwość `eventCache`. Do konwersji ciągu jest używana kultura niezmienna.|  
|`HostName`|Gdy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> właściwość `True`.|Nazwa komputera.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Niestandardowy komunikat do zapisania.</param>
        <summary>Zapisuje komunikat verbatim na dysku, bez żadnych informacji dodatkowy kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> Metoda zapisuje szczegółowy komunikat o błędzie do pliku dziennika bez żadnych informacji dodatkowy kontekst.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody służące do dołączania informacje kontekstu w danych wyjściowych dzienników.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. Niestandardowy komunikat do zapisania.</param>
        <summary>Zapisuje komunikat verbatim na dysku, następuje bieżącego terminator wiersza bez żadnych informacji dodatkowy kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> Metoda zapisuje szczegółowy komunikat o błędzie do pliku dziennika bez żadnych informacji dodatkowy kontekst.  
  
 Użyj jednej z <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metody służące do dołączania informacje kontekstu w danych wyjściowych dzienników.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>