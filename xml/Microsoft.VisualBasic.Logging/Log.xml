<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5ea75c108ff9f90bf6aeb0e7bb261e3d43aec0e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69318606" /></Metadata><TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera właściwości i metody zapisywania informacji o zdarzeniach i wyjątkach w detektorach dzienników aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt zawiera prosty punkt wejścia, z którego można [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]uzyskać dostęp do usług rejestrowania. `My.Application.Log` Metody `WriteEntry` i`WriteException` zapisują komunikaty do odbiorników dzienników aplikacji. Odbiorniki można skonfigurować przy użyciu pliku konfiguracyjnego aplikacji. Aby uzyskać więcej informacji, [zobacz Przewodnik: Zmiana miejsca, w którym my. Application.](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) Log zapisuje informacje i [pracuje z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 `My.Application.Log` Obiekt jest dostępny tylko dla aplikacji klienckich. W przypadku aplikacji sieci Web `My.Log`należy użyć programu. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 W poniższej tabeli przedstawiono przykłady zadań z obiektem `My.Application.Log`.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o zdarzeniu dla odbiorników dziennika aplikacji|[Instrukcje: Zapisuj komunikaty dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Zapisz informacje o wyjątku dla odbiorników dziennika aplikacji|[Instrukcje: Wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określanie miejsca `My.Application.Log` zapisu informacji|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteEntry` jak używać metody do rejestrowania informacji o śledzeniu. Aby uzyskać więcej informacji, zobacz [jak: Zapisuj komunikaty](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)dziennika.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see cref="T:System.String" />. Nazwa do nadania <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> obiektowi właściwości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera plik, który <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> jest obiektem, który <see langword="Log" /> jest zależny od obiektu.</summary>
        <value>Obiekt, który jest zależny od <see langword="Log" /> obiektu. <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości można określić bieżącą konfigurację <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> obiektu.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Rozwiązywanie problemów: odbiorcy dzienników</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> obiekt i dodaje go <see cref="P:System.Diagnostics.TraceSource.Listeners" /> do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda tworzy nowe <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, ustawia jego nazwę na `FileLog`, a następnie konfiguruje je do rejestrowania komunikatów o poziomie <xref:System.Diagnostics.SourceLevels.Information> ważności i większym. Nowy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> obiekt zostanie następnie dodany <xref:System.Diagnostics.TraceSource.Listeners%2A> do kolekcji.  
  
 Wywołuje metodę, <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> Jeśli właściwość nie została skonfigurowana. <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> Źródło śledzenia można skonfigurować w pliku konfiguracji aplikacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera do <see cref="T:System.Diagnostics.TraceSource" /> obiektu, który jest zależny od <see langword="Log" /> obiektu.</summary>
        <value>Obiekt, który jest zależny od <see langword="Log" /> obiektu. <see cref="T:System.Diagnostics.TraceSource" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości można określić bieżącą konfigurację `Log` obiektu.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Jest to zaawansowany element członkowski; nie jest wyświetlana w IntelliSense, o ile nie zostanie wybrana karta **wszystkie** .  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `TraceSource` z właściwością.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Pobierz informacje dla każdego z `Log` odbiorników dziennika obiektu.|[Rozwiązywanie problemów: Odbiorniki dzienników](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Rozwiązywanie problemów: odbiorcy dzienników</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje komunikat do odbiorników dziennika aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wymagany. Komunikat do logowania. Jeśli <paramref name="message" /> jest<see langword="Nothing" />, jest używany pusty ciąg.</param>
        <summary>Zapisuje komunikat do odbiorników dziennika aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metoda zapisuje komunikat do odbiorników dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteEntry` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują `id` argumentu, zapisywana w dzienniku jest definiowana przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteEntry` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o zdarzeniu dla odbiorników dziennika aplikacji|[Instrukcje: Zapisuj komunikaty dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określanie miejsca `Log` zapisu informacji|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteEntry` jak używać metody do rejestrowania informacji o śledzeniu. Aby uzyskać więcej informacji, zobacz [jak: Zapisuj komunikaty](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)dziennika.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` na`My.Log.WriteEntry` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Instrukcje: zapisywanie komunikatów dziennika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Wymagany. Komunikat do logowania. Jeśli <paramref name="message" /> jest<see langword="Nothing" />, jest używany pusty ciąg.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see langword="TraceEventType.Information" />.</param>
        <summary>Zapisuje komunikat do odbiorników dziennika aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metoda zapisuje komunikat do odbiorników dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteEntry` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują `id` argumentu, zapisywana w dzienniku jest definiowana przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteEntry` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o zdarzeniu dla odbiorników dziennika aplikacji|[Instrukcje: Zapisuj komunikaty dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określanie miejsca `Log` zapisu informacji|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteEntry` jak używać metody do rejestrowania informacji o śledzeniu. Aby uzyskać więcej informacji, zobacz [jak: Zapisuj komunikaty](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)dziennika.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` na`My.Log.WriteEntry` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Instrukcje: zapisywanie komunikatów dziennika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Wymagana. Komunikat do logowania. Jeśli <paramref name="message" /> jest<see langword="Nothing" />, jest używany pusty ciąg.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identyfikator wiadomości, zazwyczaj używany na potrzeby korelacji. Domyślnie powiązane z wpisem <c>EntryType</c> zgodnie z opisem w tabeli.</param>
        <summary>Zapisuje komunikat do odbiorników dziennika aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metoda zapisuje komunikat do odbiorników dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteEntry` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują `id` argumentu, zapisywana w dzienniku jest definiowana przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteEntry` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o zdarzeniu dla odbiorników dziennika aplikacji|[Instrukcje: Zapisuj komunikaty dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określanie miejsca `Log` zapisu informacji|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteEntry` jak używać metody do rejestrowania informacji o śledzeniu. Aby uzyskać więcej informacji, zobacz [jak: Zapisuj komunikaty](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)dziennika.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` na`My.Log.WriteEntry` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Instrukcje: zapisywanie komunikatów dziennika</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o wyjątku w detektorach dzienników aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagany. Wyjątek do zarejestrowania.</param>
        <summary>Zapisuje informacje o wyjątku w detektorach dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątku dla detektorów dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteException` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują argumentu, identyfikator zapisany w dzienniku jest definiowany przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteException` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o wyjątku dla detektorów dziennika zdarzeń aplikacji.|[Instrukcje: Wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określ, `Log` gdzie są zapisywane informacje.|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteException` jak używać metody do rejestrowania wyjątków. Usuń komentarz z `Dim` wierszy `MsgBox` i, aby wywołać <xref:System.NullReferenceException> wyjątek. Aby uzyskać więcej informacji, zobacz [jak: Wyjątki](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)dzienników.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteException` na`My.Log.WriteException` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Instrukcje: Rejestruj wyjątki w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagane. Wyjątek do zarejestrowania.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Ciąg do dołączenia do wiadomości. Domyślnie jest to pusty ciąg.</param>
        <summary>Zapisuje informacje o wyjątku w detektorach dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątku dla detektorów dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteException` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują argumentu, identyfikator zapisany w dzienniku jest definiowany przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteException` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o wyjątku dla detektorów dziennika zdarzeń aplikacji.|[Instrukcje: Wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określ, `Log` gdzie są zapisywane informacje.|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteException` jak używać metody do rejestrowania wyjątków. Usuń komentarz z `Dim` wierszy `MsgBox` i, aby wywołać <xref:System.NullReferenceException> wyjątek. Aby uzyskać więcej informacji, zobacz [jak: Wyjątki](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)dzienników.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteException` na`My.Log.WriteException` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Instrukcje: Rejestruj wyjątki w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagany. Wyjątek do zarejestrowania.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Ciąg do dołączenia do wiadomości. Domyślnie jest to pusty ciąg.</param>
        <param name="id">Identyfikator wiadomości, zazwyczaj używany na potrzeby korelacji. Domyślnie powiązane z wpisem <c>EntryType</c> zgodnie z opisem w tabeli w sekcji uwagi.</param>
        <summary>Zapisuje informacje o wyjątku w detektorach dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątku dla detektorów dziennika zdarzeń aplikacji.  
  
 W aplikacjach `Log` klienckich obiekt jest dostępny `My.Application.Log` za pomocą obiektu. W aplikacjach `Log` sieci Web obiekt jest dostępny `My.Log` za pomocą obiektu.  
  
 Aby dowiedzieć się, które odbiorniki dzienników odbierają `WriteException` komunikaty metody, zobacz [Przewodnik: Ustalanie, gdzie my. Application. log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)zapisuje informacje. Można zmienić domyślne odbiorniki dzienników. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 W przypadku przeciążeń, które `id` nie przyjmują argumentu, identyfikator zapisany w dzienniku jest definiowany przez poniższą tabelę.  
  
|`severity`|Wartooć`id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `WriteException` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz informacje o wyjątku dla detektorów dziennika zdarzeń aplikacji.|[Instrukcje: Wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określ, `Log` gdzie są zapisywane informacje.|[Przewodnik: Ustalanie, gdzie my. Application. Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**Tak**|  
|Biblioteka klas|**Tak**|  
|Aplikacja konsoli|**Tak**|  
|Biblioteka formantów systemu Windows|**Tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**Tak**|  
|Witryna sieci Web|**Tak**|  
  
   
  
## Examples  
 Ten przykład pokazuje, `My.Application.Log.WriteException` jak używać metody do rejestrowania wyjątków. Usuń komentarz z `Dim` wierszy `MsgBox` i, aby wywołać <xref:System.NullReferenceException> wyjątek. Aby uzyskać więcej informacji, zobacz [jak: Wyjątki](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)dzienników.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Ten przykład kodu można uruchomić tylko w aplikacji klienckiej. Zmień `My.Application.Log.WriteException` na`My.Log.WriteException` na aplikacje sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod z częściowym zaufaniem wywołuje metodę, ale zapisuje w odbiorniku dziennika zdarzeń, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Praca z dziennikami aplikacji w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Instrukcje: Rejestruj wyjątki w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Przewodnik: ustalanie lokalizacji, w której element My.Application.Log zapisuje informacje</related>
      </Docs>
    </Member>
  </Members>
</Type>
