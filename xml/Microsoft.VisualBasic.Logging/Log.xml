<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c4cc930b825342b7919d7b5a0a9a55bf3e97fb0a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36658926" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia właściwości i metody dla zapisywania informacji o zdarzeń i wyjątków na odbiorniki dzienników aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Log` Obiekt zapewnia punkt wejścia prostego, z którego można uzyskać dostępu do [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]do rejestrowania usług. `WriteEntry` i `WriteException` metody zapisał komunikatów w aplikacji odbiorniki dzienników. Odbiorniki można skonfigurować w pliku konfiguracji aplikacji. Aby uzyskać więcej informacji, zobacz [wskazówki: zmiana gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) i [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 `My.Application.Log` Obiekt jest dostępny tylko dla aplikacji klienckich. Dla aplikacji sieci Web, użyj `My.Log`. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `My.Application.Log` obiektu.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisywanie informacji o aplikacji odbiorniki logu zdarzeniach|[Instrukcje: zapisywanie komunikatów dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Zapisuje informacje o wyjątku do odbiorniki dzienników aplikacji|[Instrukcje: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określenie miejsca `My.Application.Log` zapisuje informacje|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteEntry` metody do rejestrowania informacji śledzenia. Aby uzyskać więcej informacji, zobacz [porady: pisanie wiadomości dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. Nazwa ma zostać przypisany do <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> właściwości obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:Microsoft.VisualBasic.Logging.Log" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera plik <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> obiektu źródłową <see langword="Log" /> obiektu.</summary>
        <value>Zwraca <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> obiektu źródłową <see langword="Log" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do określenia bieżącej konfiguracji <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> obiektu.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> obiektu i dodaje go do <see cref="P:System.Diagnostics.TraceSource.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda tworzy nowy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, ustawia jego nazwę na `FileLog`i skonfiguruje je do komunikaty dziennika poziomu ważności <xref:System.Diagnostics.SourceLevels.Information> lub nowszej. Nowy <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> następnie dodać obiektu do <xref:System.Diagnostics.TraceSource.Listeners%2A> kolekcji.  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> Wywołuje metodę, jeśli <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> właściwości nie został skonfigurowany. Źródło śladu można skonfigurować w pliku konfiguracyjnym aplikacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera do <see cref="T:System.Diagnostics.TraceSource" /> obiektu źródłową <see langword="Log" /> obiektu.</summary>
        <value>Zwraca <see cref="T:System.Diagnostics.TraceSource" /> obiektu źródłową <see langword="Log" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do określenia bieżącej konfiguracji `Log` obiektu.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Jest to zaawansowane elementu członkowskiego; niewidoczne w IntelliSense dopiero po wybraniu **wszystkie** kartę.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `TraceSource` właściwości.  
  
|Do|Zobacz|  
|--------|---------|  
|Pobierz informacje dla każdego z `Log` odbiorniki logu obiektu.|[Rozwiązywanie problemów: odbiorcy dzienników](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje komunikat odbiorniki dzienników aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wymagana. Komunikat do logowania. Jeśli <c>komunikat</c> jest <see langword="Nothing" />, pusty ciąg jest używany.</param>
        <summary>Zapisuje komunikat odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metody zapisuje komunikat odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteEntry` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argumentu, `id` zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteEntry` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisywanie informacji o aplikacji odbiorniki logu zdarzeniach|[Instrukcje: zapisywanie komunikatów dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określenie miejsca `Log` zapisuje informacje|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteEntry` metody do rejestrowania informacji śledzenia. Aby uzyskać więcej informacji, zobacz [porady: pisanie wiadomości dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` do `My.Log.WriteEntry` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Wymagana. Komunikat do logowania. Jeśli <c>komunikat</c> jest <see langword="Nothing" />, pusty ciąg jest używany.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see langword="TraceEventType.Information" />.</param>
        <summary>Zapisuje komunikat odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metody zapisuje komunikat odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteEntry` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argumentu, `id` zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteEntry` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisywanie informacji o aplikacji odbiorniki logu zdarzeniach|[Instrukcje: zapisywanie komunikatów dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określenie miejsca `Log` zapisuje informacje|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteEntry` metody do rejestrowania informacji śledzenia. Aby uzyskać więcej informacji, zobacz [porady: pisanie wiadomości dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` do `My.Log.WriteEntry` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jednym z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Wymagana. Komunikat do logowania. Jeśli <c>komunikat</c> jest <see langword="Nothing" />, pusty ciąg jest używany.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identyfikator komunikatu zwykle używane na potrzeby korelacji. Domyślnie związane z <c>typu wpisu</c> zgodnie z opisem w tabeli.</param>
        <summary>Zapisuje komunikat odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Metody zapisuje komunikat odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteEntry` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argumentu, `id` zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteEntry` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisywanie informacji o aplikacji odbiorniki logu zdarzeniach|[Instrukcje: zapisywanie komunikatów dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Określenie miejsca `Log` zapisuje informacje|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteEntry` metody do rejestrowania informacji śledzenia. Aby uzyskać więcej informacji, zobacz [porady: pisanie wiadomości dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteEntry` do `My.Log.WriteEntry` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jednym z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o wyjątku odbiorniki dzienników aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagana. Wyjątek do logowania.</param>
        <summary>Zapisuje informacje o wyjątku odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątek odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteException` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argument, identyfikator zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteException` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisuje informacje o wyjątku do odbiorników dziennik zdarzeń aplikacji.|[Instrukcje: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określenie miejsca `Log` zapisuje informacje.|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteException` metoda rejestrowania wyjątków. Usuń znaczniki komentarza `Dim` i `MsgBox` wiersze spowodują <xref:System.NullReferenceException> wyjątku. Aby uzyskać więcej informacji, zobacz [porady: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteException` do `My.Log.WriteException` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagana. Wyjątek do logowania.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Ciąg do dołączenia do wiadomości. Domyślnie jest to pusty ciąg.</param>
        <summary>Zapisuje informacje o wyjątku odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątek odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteException` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argument, identyfikator zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteException` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisuje informacje o wyjątku do odbiorników dziennik zdarzeń aplikacji.|[Instrukcje: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określenie miejsca `Log` zapisuje informacje.|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteException` metoda rejestrowania wyjątków. Usuń znaczniki komentarza `Dim` i `MsgBox` wiersze spowodują <xref:System.NullReferenceException> wyjątku. Aby uzyskać więcej informacji, zobacz [porady: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteException` do `My.Log.WriteException` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jednym z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Wymagana. Wyjątek do logowania.</param>
        <param name="severity">Typ komunikatu. Domyślnie <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Ciąg do dołączenia do wiadomości. Domyślnie jest to pusty ciąg.</param>
        <param name="id">Identyfikator komunikatu zwykle używane na potrzeby korelacji. Domyślnie związane z <c>typu wpisu</c> zgodnie z opisem w tabeli w sekcji uwag.</param>
        <summary>Zapisuje informacje o wyjątku odbiorniki dzienników aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Metoda zapisuje informacje zawarte w wyjątek odbiorniki dzienników zdarzeń aplikacji.  
  
 W aplikacjach klienckich `Log` obiekt jest dostępny za pośrednictwem `My.Application.Log` obiektu. W aplikacji sieci Web `Log` obiekt jest dostępny za pośrednictwem `My.Log` obiektu.  
  
 Aby dowiedzieć się, w którym dzienniku odbierania odbiorników `WriteException` wiadomości metody, zobacz [wskazówki: Ustalanie gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Odbiorniki logu domyślne można zmienić. Aby uzyskać więcej informacji, zobacz [Praca z dziennikami aplikacji](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Do przeciążenia, które nie przyjmują `id` argument, identyfikator zapisywane w dzienniku jest zdefiniowany w poniższej tabeli.  
  
|`severity`|Domyślne `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 W poniższej tabeli przedstawiono przykłady dotyczące zadań `WriteException` metody.  
  
|Do|Zobacz|  
|--------|---------|  
|Zapisuje informacje o wyjątku do odbiorników dziennik zdarzeń aplikacji.|[Instrukcje: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Określenie miejsca `Log` zapisuje informacje.|[Przewodnik: ustalanie, gdzie My.Application.Log zapisuje informacje](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Dostępność według typu projektu  
  
|Typ projektu|Dostępne|  
|------------------|---------------|  
|Aplikacja systemu Windows|**tak**|  
|Biblioteka klas|**tak**|  
|Aplikacja konsoli|**tak**|  
|Biblioteka formantów systemu Windows|**tak**|  
|Biblioteka formantów sieci Web|Nie|  
|Usługa systemu Windows|**tak**|  
|Witryna sieci Web|**tak**|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia `My.Application.Log.WriteException` metoda rejestrowania wyjątków. Usuń znaczniki komentarza `Dim` i `MsgBox` wiersze spowodują <xref:System.NullReferenceException> wyjątku. Aby uzyskać więcej informacji, zobacz [porady: wyjątki dziennika](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 W tym przykładzie kodu można uruchomić tylko w obrębie aplikacji klienckiej. Zmień `My.Application.Log.WriteException` do `My.Log.WriteException` dla aplikacji sieci Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Typ komunikatu nie jest jednym z <see cref="T:System.Diagnostics.TraceEventType" /> wartości wyliczenia.</exception>
        <exception cref="T:System.Security.SecurityException">Kod w częściowej relacji zaufania wywołuje metodę, ale zapisuje w dzienniku zdarzeń odbiornik, który wymaga pełnego zaufania.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
  </Members>
</Type>