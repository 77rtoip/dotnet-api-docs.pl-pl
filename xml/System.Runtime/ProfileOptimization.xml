<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="858f0245329b150023b79f4536c24c775356f272" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532966" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zwiększa wydajność uruchomienia domeny aplikacji w aplikacji, które wymagają przy użyciu kompilatora just in time (JIT), wykonując kompilacji tła metod, które mogą wykonać, na podstawie profilów utworzone podczas poprzednich kompilacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Optymalizacja profil wymaga wielordzeniowych komputera. Te metody są ignorowane na innych komputerach.  
  
 Zawsze inicjowania optymalizacji profil w domenie aplikacji profil, który został utworzony podczas poprzedniego używany jest do odczytu. Informacje w profilu służą do przewodnika tła kompilacji, określając metod, które są najczęściej wykonywane podczas uruchamiania. W przypadku komputerów wielordzeniowych ta zwiększa szanse, że metoda jest już kompilowane w czasie, gdy są potrzebne, aby wywołać przy użyciu kompilatora JIT nie ma wątku głównego aplikacji.  
  
 Plik profilu jest zastępowany przy każdym użyciu, więc zawsze zawiera najnowsze informacje o tym, które metody są używane podczas uruchamiania.  
  
 Optymalizacja profile nie są ograniczone do uruchomienia domeny aplikacji. Służy do żadnego działania wymagające obciążona kompilatora JIT. Można zachować wiele profilów dla domeny aplikacji, dzięki czemu każdy takie działanie ma własny profil.  
  
 Aby użycie profilów optymalizacji w domenie aplikacji, należy wywołać <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> — metoda i określ folder, w którym są przechowywane profile. Folder musi już istnieć. Aby rozpocząć korzystanie z profilu, należy wywołać <xref:System.Runtime.ProfileOptimization.StartProfile%2A> — metoda i określ nazwę pliku profilu. Jeśli plik nie został wcześniej zapisany, zostanie utworzony przy pierwszym użyciu. Brak nie razem korzyści pierwszy wydajności, gdy tworzony jest profil.  
  
 Optymalizacja profilu nie zmienia kolejność wykonywania metody. Metody nie są wykonywane w wątku tła; Jeśli metoda jest skompilowany, ale nigdy nie wywołuje, po prostu nie jest używane. Jeśli plik profilu jest uszkodzony lub nie można zapisać w określonym folderze, (na przykład, ponieważ folder nie istnieje), wykonanie programu jest kontynuowane bez optymalizację profilowania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Pełna ścieżka do folderu, w którym są przechowywane pliki profilu dla bieżącej domeny aplikacji.</param>
        <summary>Włącza optymalizację profilowania dla bieżącej domeny aplikacji i ustawia folder do przechowywania plików profilu optymalizacji. Na komputerze jednordzeniowy metody jest ignorowana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody należy wywołać przed wywołaniem <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metody po raz pierwszy w bieżącej domenie aplikacji. Jeśli należy wywołać <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> więcej niż raz w tej samej domenie aplikacji, wszystkie wywołania po pierwszym zostaną zignorowane.  
  
 Określony folder musi już istnieć. Jeśli nie istnieje, wywołanie tej metody nie tworzy go i profilowania nie występuje.  
  
 Na komputerach, które nie mają wiele rdzeni ta metoda jest ignorowana.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Nazwa pliku profilu do użycia.</param>
        <summary>Uruchamia just in time (JIT) kompilacji metod, które wcześniej zostały zapisane w pliku określonego profilu wątku w tle. Uruchamia proces rejestrowania bieżącego użycia metody, który później spowoduje zastąpienie pliku określonego profilu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony profil istnieje w folderze określonym przez <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> metody, zawiera informacje służy do określania kolejności kompilowane metod w wątku tła. <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Metoda tworzy profil, jeśli jeszcze nie istnieje i inicjuje rejestrowanie użycia metody.  
  
 Tylko metody, które są rzeczywiście nazywane są rejestrowane, niezależnie od tego, czy zostały skompilowane na wątku w tle lub wątku głównego aplikacji. Metoda jest kompilowana w wątku głównego aplikacji, jeśli aplikacja musi wywołać ją przed wątku w tle został on skompilowany.  
  
 Kod, który wykonuje rejestrowanie śledzi współczynnik, w którym są kompilowane metod, łącznie z metod, które są kompilowane w wątku tła i w głównym wątku. Gdy częstotliwość spada poniżej poziomu ustalonej nagrywania zatrzymuje. Nagrywanie również zatrzymuje, jeśli liczba kompilacji JIT przekroczy ustalonej górny limit.  
  
 Jeśli <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> nie wywołano metody dla bieżącej domeny aplikacji lub jeśli komputer nie ma wiele rdzeni <xref:System.Runtime.ProfileOptimization.StartProfile%2A> — metoda nie ma wpływu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>