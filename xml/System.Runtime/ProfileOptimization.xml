<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="080972883de9a24a3ad924070590e7903719dc51" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39954807" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zwiększa wydajność uruchamiania domen aplikacji w aplikacjach, które wymagają kompilator just-in-time (JIT), wykonując kompilacja tła metod, które mogą być wykonywane na podstawie profilów utworzone podczas poprzednich kompilacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Optymalizacja profilem wymaga wyspecjalizowanymi komputera. Te metody są ignorowane na innych komputerach.  
  
 Zawsze należy zainicjować optymalizacji profilu w domenie aplikacji, profil, który został utworzony podczas wcześniejsze użycie jest do odczytu. Informacje w profilu są używane przeprowadzenie kompilacja tła, określając metody, które z największym prawdopodobieństwem mogą być wykonywane w czasie uruchamiania. Na komputerach wielordzeniowych ta zwiększa szanse, że metoda jest już skompilowany przez razem, gdy jest potrzebna, tak aby wątek główny aplikacji nie trzeba wywoływać kompilator JIT.  
  
 Plik profilu jest zastępowany przy każdym użyciu, dzięki czemu zawsze zawiera najnowsze informacje o tym, które metody są używane podczas uruchamiania.  
  
 Profile optymalizacji nie są ograniczone do uruchomienia domeny aplikacji. Służy do dowolnego działania, które będzie wymagać intensywnie korzysta z kompilatora JIT. Można obsługiwać wiele profilów dla domeny aplikacji, tak, aby każde takie działanie ma własny profil.  
  
 Aby używać optymalizacji profile w domenie aplikacji, należy wywołać <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> metody i określ folder, w którym są przechowywane profilów. Folder musi już istnieć. Aby rozpocząć korzystanie z profilu, należy wywołać <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metody i określ nazwę pliku profilu. Jeśli plik nie został wcześniej zapisany, jest ona tworzona przy pierwszym użyciu. To czas korzyści pierwszy wydajności zostanie utworzony profil.  
  
 Optymalizacja profilem nie powoduje zmiany kolejności wykonywania metod. Metody nie są wykonywane w wątku w tle; Jeśli metoda jest skompilowany, ale nigdy nie wywołuje się, ją po prostu nie jest używany. Jeśli plik profilu jest uszkodzony lub nie można zapisać do określonego folderu (na przykład, ponieważ folder nie istnieje), wykonanie programu jest kontynuowane bez przeprowadzania optymalizacji profilowania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Pełna ścieżka do folderu, w którym są przechowywane pliki profilu dla bieżącej domeny aplikacji.</param>
        <summary>Włącza optymalizację profilowania dla bieżącej domeny aplikacji i skonfigurowanie folderu, w którym są przechowywane pliki profilu optymalizacji. Na komputerze jednordzeniowy metoda jest ignorowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę metodę należy wywołać przed wywołaniem <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metoda po raz pierwszy w bieżącej domenie aplikacji. Jeśli wywołasz <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> więcej niż jeden raz w tej samej domenie aplikacji, wszystkie wywołania po pierwszym są ignorowane.  
  
 Określony folder musi już istnieć. Jeśli nie istnieje, wywołanie tej metody nie tworzenie maszyny wirtualnej i profilowania nie występuje.  
  
 Na komputerach, które nie mają wiele rdzeni metoda ta jest ignorowana.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Nazwa pliku profilu, który ma być używany.</param>
        <summary>Uruchamia just-in-time (JIT) kompilacja metod, które zostały wcześniej zapisane w pliku określonego profilu w wątku tła. Rozpoczyna się proces rejestrowania bieżącego korzystanie z metody, które później zastępuje plik określony profil.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony profil istnieje w folderze określonym przez <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> metody, informacje o niej służy do określania kolejności, w której metody są kompilowane w wątku w tle. <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Metoda tworzy profil, jeśli jeszcze nie istnieje i inicjuje rejestrowanie użycia metody.  
  
 Rejestrowane są tylko metody, które faktycznie są wywoływane niezależnie od tego, czy zostały skompilowane na wątku w tle lub wątku głównego aplikacji. Metoda jest kompilowana w wątku głównym aplikacji, jeśli aplikacja musi wywołać go przed wątku w tle został on skompilowany.  
  
 Kod, który wykonuje rejestrowanie do śledzenia szybkości, o której metody są kompilowane, włączając w to metody, które są kompilowane w wątku tła i w głównym wątku. Zatrzymuje, gdy współczynnik spada poniżej poziomu wstępnie rejestrowania. Jeśli liczba kompilacji JIT przekracza wstępnie górny limit również zatrzymuje rejestrowanie.  
  
 Jeśli <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> nie wywołano metody dla bieżącej domeny aplikacji lub jeśli komputer nie ma wiele rdzeni <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metoda nie ma wpływu.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>