<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata><Meta Name="ms.openlocfilehash" Value="916f23bf2eac9e6f461ae43fb4363cf0182b89f3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69086699" /></Metadata><TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zwiększa wydajność uruchamiania domen aplikacji w aplikacjach, które wymagają kompilatora just-in-Time (JIT), wykonując kompilację w tle metod, które mogą być wykonywane na podstawie profilów utworzonych podczas poprzednich kompilacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Optymalizacja profilu wymaga komputera wielordzeniowego. Metody są ignorowane na innych komputerach.  
  
 Za każdym razem, gdy zostanie zainicjowany Optymalizacja profilu w domenie aplikacji, zostanie odczytany profil, który został utworzony podczas poprzedniego użycia. Informacje w profilu są używane do przewodnika po kompilacji w tle, identyfikując metody, które najprawdopodobniej będą wykonywane podczas uruchamiania. Na komputerach z procesorem wielordzeniowym zwiększa to prawdopodobieństwo, że metoda jest już skompilowana przez czas, który jest wymagany, aby główny wątek aplikacji nie musi wywoływać kompilatora JIT.  
  
 Plik profilu jest zastępowany przy każdym użyciu, więc zawsze zawiera najnowsze informacje o tym, które metody są używane podczas uruchamiania.  
  
 Profile optymalizacji nie są ograniczone do uruchamiania domeny aplikacji. Mogą one być używane w przypadku wszystkich działań, które wymagają dużego użycia kompilatora JIT. Można zachować wiele profilów dla domeny aplikacji, tak aby każde takie działanie miało własny profil.  
  
 Aby używać profilów optymalizacji w domenie aplikacji, należy wywołać <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> metodę i określić folder, w którym są przechowywane profile. Folder musi już istnieć. Aby rozpocząć korzystanie z profilu, należy wywołać <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metodę i określić nazwę pliku profilu. Jeśli plik nie został wcześniej zarejestrowany, jest tworzony przy pierwszym użyciu. Podczas pierwszego tworzenia profilu nie ma żadnej korzyści z wydajności.  
  
 Optymalizacja profilu nie zmienia kolejności, w której metody są wykonywane. Metody nie są wykonywane w wątku w tle; Jeśli metoda jest skompilowana, ale nigdy nie jest wywoływana, nie jest po prostu używana. Jeśli plik profilu jest uszkodzony lub nie można go zapisać w określonym folderze (na przykład, ponieważ folder nie istnieje), wykonanie programu jest kontynuowane bez profilowania optymalizacji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Pełna ścieżka do folderu, w którym są przechowywane pliki profilu dla bieżącej domeny aplikacji.</param>
        <summary>Włącza profilowanie optymalizacji dla bieżącej domeny aplikacji i ustawia folder, w którym są przechowywane pliki profilu optymalizacji. Na komputerze z jednym rdzeniem metoda jest ignorowana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać tę metodę przed wywołaniem <xref:System.Runtime.ProfileOptimization.StartProfile%2A> metody po raz pierwszy w bieżącej domenie aplikacji. Jeśli wywołajesz <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> więcej niż jeden raz w tej samej domenie aplikacji, wszystkie wywołania po pierwszej zostaną zignorowane.  
  
 Określony folder musi już istnieć. Jeśli nie istnieje, wywołanie tej metody nie powoduje jej utworzenia i nie ma żadnego profilowania.  
  
 W przypadku komputerów, które nie mają wielu rdzeni, ta metoda jest ignorowana.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Nazwa pliku profilu do użycia.</param>
        <summary>Uruchamia kompilację just-in-Time (JIT) metod, które zostały wcześniej zarejestrowane w określonym pliku profilu, w wątku w tle. Uruchamia proces rejestrowania bieżącej metody użycia, która później zastępuje określony plik profilu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony profil istnieje w folderze określonym przez <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> metodę, zawarte w nim informacje są używane do określenia kolejności, w której metody są kompilowane w wątku w tle. <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Metoda tworzy profil, jeśli jeszcze nie istnieje, i inicjuje nagrywanie metody użycia.  
  
 Tylko metody, które są faktycznie wywoływane, są rejestrowane, niezależnie od tego, czy zostały skompilowane w wątku w tle, czy w wątku aplikacji głównej. Metoda jest kompilowana w wątku głównej aplikacji, jeśli aplikacja musi wywołać ją przed skompilowaniem jej przez wątek w tle.  
  
 Kod, który wykonuje nagrywanie śledzi szybkość, z jaką metody są kompilowane, łącznie z metodami, które są kompilowane w wątku w tle i w wątku głównym. Gdy stawka spadnie poniżej wstępnie określonego poziomu, nagrywanie zostanie zatrzymane. Nagrywanie jest również przerywane, jeśli częstotliwość kompilacji JIT przekracza wstępnie określony górny limit.  
  
 Jeśli metoda nie została wywołana dla bieżącej domeny aplikacji lub jeśli komputer nie ma wielu rdzeni <xref:System.Runtime.ProfileOptimization.StartProfile%2A> , metoda nie ma żadnego wpływu. <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
