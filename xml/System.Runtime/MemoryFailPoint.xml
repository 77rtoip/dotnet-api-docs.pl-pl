<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1d40f8a8a99bf05bb613279f96e44d6af30c24b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755976" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Sprawdza, czy wystarczające zasoby pamięci przed wykonaniem operacji. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta klasa jest przeznaczona do użycia podczas tworzenia zaawansowanych.  
  
 Utworzenie wystąpienia <xref:System.Runtime.MemoryFailPoint> klasy tworzy bramę pamięci. Brama pamięci sprawdza, czy wystarczającą liczbą zasobów przed zainicjowaniem działanie, które wymaga dużej ilości pamięci. Niepowodzenie wyboru powoduje <xref:System.InsufficientMemoryException> zgłaszanego wyjątku. Ten wyjątek uniemożliwia uruchomienie operacji i zmniejsza prawdopodobieństwo wystąpienia awarii ze względu na brak zasobów. Dzięki temu zmniejszyć wydajność, aby uniknąć <xref:System.OutOfMemoryException> wyjątku oraz ewentualne uszkodzenia stanu, które mogą wynikać z nieprawidłowej obsługi wyjątków w dowolnych miejscach w kodzie.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niej. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku. Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.  
  
 Zgłaszając <xref:System.InsufficientMemoryException> wyjątku, aplikacja może rozróżnić prognozę, nie będą mogli wykonać operację i częściowo ukończone operacji, która może być uszkodzony stan aplikacji. Umożliwia to aplikacji zmniejszyć częstotliwość zasady eskalacji Pesymistyczna może wymagać zwalnianie bieżącego <xref:System.AppDomain> lub odtwarzania procesu.  
  
 <xref:System.Runtime.MemoryFailPoint> sprawdza, czy wystarczającą ilość pamięci i następujących po sobie wirtualnej przestrzeni adresowej dostępnych w wszystkich wyrzucania elementów bezużytecznych sterty i może zwiększyć rozmiar pliku wymiany.  <xref:System.Runtime.MemoryFailPoint> sprawia, że nie gwarancje dotyczące długoterminowego dostępność pamięci w okresie istnienia bramy, ale obiekty wywołujące zawsze należy używać <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metodę, aby upewnić się, że zasoby skojarzone z <xref:System.Runtime.MemoryFailPoint> zostaną zwolnione.  
  
 Aby użyć bramy pamięci, należy utworzyć <xref:System.Runtime.MemoryFailPoint> obiektu i określ liczbę megabajtów (MB) pamięci, powinien użyć następnej operacji. Jeśli wystarczającej ilości pamięci nie jest dostępna, <xref:System.InsufficientMemoryException> wyjątku.  
  
 Parametr konstruktora musi być dodatnią liczbą całkowitą. Podnosi wartość ujemną <xref:System.ArgumentOutOfRangeException> wyjątku.  
  
 <xref:System.Runtime.MemoryFailPoint> operuje na szczegółowości 16 MB. Wszelkie wartości, które są mniejsze niż 16 MB są traktowane jako 16 MB, a inne wartości są traktowane jako kolejną wielokrotnością największej liczby 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> umożliwia aplikacji wolne, aby zapobiegać uruchamianiu jej pamięci w sposób błędny.  Należy jej używać w zakresie leksykalnym.  Poniższy przykład powoduje uruchomienie wątków do przetwarzania elementów w kolejce pracy.  Zanim każdy wątek jest uruchomiony, dostępne zasoby pamięci są zaznaczone, przy użyciu <xref:System.Runtime.MemoryFailPoint>.  Jeśli wyjątek jest zgłaszany, Metoda główna czeka, aż pamięci jest dostępny przed uruchomieniem następnego wątku.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Wywoływanie niezarządzanego kodu. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Rozmiar wymaganej pamięci w megabajtach. Musi to być wartością dodatnią.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.MemoryFailPoint" /> klasy, określając ilość pamięci wymaganej do pomyślnego wykonania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Empirically można określić ilość pamięci używane przez aplikację do przetwarzania elementu roboczego.  Aby oszacować wielkość pamięci wymaganych przez aplikację do przetwarzania żądań, należy rozważyć użycie <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metodę, aby określić ilość pamięci dostępna przed i po wywołanie metody, która przetwarza elementu roboczego. Zobacz <xref:System.Runtime.MemoryFailPoint> klasy dla przykładu kodu, który dynamicznie określa wartość `sizeInMegabytes` parametru.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób określania ilości pamięci, który wymaga metody, podczas wykonywania. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Runtime.MemoryFailPoint> klasy.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar pamięci jest ujemna.</exception>
        <exception cref="T:System.InsufficientMemoryException">Ma za mało pamięci, aby rozpocząć wykonywanie kodu, chronione przez bramy.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> po zakończeniu przy użyciu <xref:System.Runtime.MemoryFailPoint>. <xref:System.Runtime.MemoryFailPoint.Dispose%2A> Pozostawia metoda <xref:System.Runtime.MemoryFailPoint> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Runtime.MemoryFailPoint>, trzeba zwolnić wszystkie odwołania do <xref:System.Runtime.MemoryFailPoint> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Runtime.MemoryFailPoint> zajmowaną przez wystąpienie. Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.Runtime.MemoryFailPoint>. W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.Runtime.MemoryFailPoint> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia, że zasoby są zwalniane, a inne operacje oczyszczania są wykonywane, gdy moduł odśmiecania pamięci odzyskuje <see cref="T:System.Runtime.MemoryFailPoint" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduł odśmiecania pamięci wywołuje <xref:System.Runtime.MemoryFailPoint.Finalize%2A> metody, gdy bieżący obiekt jest gotowy do można sfinalizować.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>