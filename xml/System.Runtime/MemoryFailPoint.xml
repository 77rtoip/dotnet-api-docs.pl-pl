<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b11c2bd29525f877cab2d7c61c490166f17c7eb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69086716" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Sprawdza, czy zasoby pamięci są wystarczające przed wykonaniem operacji. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta klasa jest przeznaczona do użycia w zaawansowanym opracowywaniu.  
  
 Utworzenie wystąpienia <xref:System.Runtime.MemoryFailPoint> klasy tworzy bramę pamięci. Brama pamięci sprawdza wystarczającą ilość zasobów przed zainicjowaniem działania wymagającego dużej ilości pamięci. Niepowodzenie sprawdzania powoduje <xref:System.InsufficientMemoryException> , że wystąpił wyjątek. Ten wyjątek uniemożliwia uruchomienie operacji i zmniejsza prawdopodobieństwo niepowodzenia z powodu braku zasobów. Pozwala to zmniejszyć wydajność, aby uniknąć <xref:System.OutOfMemoryException> wyjątków i wszelkich uszkodzeń stanu, które mogą wynikać z nieprawidłowej obsługi wyjątku w dowolnych lokalizacjach w kodzie.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejs. Po zakończeniu korzystania z typu należy usunąć jego wartość bezpośrednio lub pośrednio. Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku. Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.  
  
 <xref:System.InsufficientMemoryException> Zwracając wyjątek, aplikacja może rozróżnić oszacowanie, że operacja nie będzie mogła zostać ukończona, oraz częściowo ukończoną operację, która może spowodować uszkodzenie stanu aplikacji. Dzięki temu aplikacja może ograniczyć częstotliwość pesymistycznych zasad eskalacji, które mogą wymagać wyładowania bieżącego <xref:System.AppDomain> lub odzyskania procesu.  
  
 <xref:System.Runtime.MemoryFailPoint>sprawdza, czy wystarczająca ilość pamięci i kolejnej wirtualnej przestrzeni adresowej są dostępne we wszystkich stertach odzyskiwania pamięci i może zwiększyć rozmiar pliku wymiany.  <xref:System.Runtime.MemoryFailPoint>nie udziela żadnych gwarancji dotyczących długoterminowej dostępności pamięci w okresie istnienia bramy, ale obiekty wywołujące powinny zawsze używać <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metody, aby zapewnić, że zasoby skojarzone z systemem <xref:System.Runtime.MemoryFailPoint> są wydane.  
  
 Aby użyć bramy pamięci, należy utworzyć <xref:System.Runtime.MemoryFailPoint> obiekt i określić liczbę megabajtów (MB) pamięci, która powinna zostać użyta w następnej operacji. Jeśli nie jest dostępna wystarczająca ilość pamięci, <xref:System.InsufficientMemoryException> zostanie zgłoszony wyjątek.  
  
 Parametr konstruktora musi być dodatnią liczbą całkowitą. Wartość ujemna wywołuje <xref:System.ArgumentOutOfRangeException> wyjątek.  
  
 <xref:System.Runtime.MemoryFailPoint>działa z dokładnością do 16 MB. Wszystkie wartości mniejsze niż 16 MB są traktowane jako 16 MB, a inne wartości są traktowane jako najbliższe największe wielokrotności 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint>umożliwia aplikacji spowolnienie działania, aby uniknąć braku pamięci w sposób uszkodzony.  Powinien być używany w zakresie leksykalnym.  Poniższy przykład uruchamia wątki, aby przetwarzać elementy w kolejce roboczej.  Przed uruchomieniem każdego wątku, dostępne zasoby pamięci są sprawdzane przy <xref:System.Runtime.MemoryFailPoint>użyciu.  Jeśli wystąpi wyjątek, Metoda Main czeka na dostępność pamięci przed uruchomieniem następnego wątku.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Wywoływanie niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Akcja zabezpieczeń:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Wymagany rozmiar pamięci (w megabajtach). Musi to być wartość dodatnia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Runtime.MemoryFailPoint" /> klasy, określając ilość pamięci wymaganej do pomyślnego wykonania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ilość pamięci używanej przez aplikację do przetwarzania elementu pracy można określić jako doświadczalnie.  Aby oszacować ilość pamięci wymaganej przez aplikację do przetworzenia żądania, należy rozważyć użycie <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metody w celu określenia ilości pamięci dostępnej przed i po wywołaniu metody, która przetwarza element roboczy. Zapoznaj <xref:System.Runtime.MemoryFailPoint> się z klasą przykładu kodu, który dynamicznie Określa wartość `sizeInMegabytes` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak określić ilość pamięci wymaganej do wykonania przez metodę. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Runtime.MemoryFailPoint> klasy.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar pamięci jest ujemny.</exception>
        <exception cref="T:System.InsufficientMemoryException">Za mało pamięci, aby rozpocząć wykonywanie kodu chronionego przez bramę.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.Runtime.MemoryFailPoint" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> po zakończeniu korzystania z <xref:System.Runtime.MemoryFailPoint>. <xref:System.Runtime.MemoryFailPoint.Dispose%2A> Metoda<xref:System.Runtime.MemoryFailPoint> pozostawia w stanie niezdatnym do użytku. Po wywołaniu <xref:System.Runtime.MemoryFailPoint>należy wydać wszystkie odwołania <xref:System.Runtime.MemoryFailPoint> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Runtime.MemoryFailPoint> , którą zajmował. Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Runtime.MemoryFailPoint>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Runtime.MemoryFailPoint> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia, że zasoby są zwolnione i inne operacje czyszczenia są wykonywane, gdy moduł zbierający <see cref="T:System.Runtime.MemoryFailPoint" /> elementy bezużyteczne odzyskuje obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduł zbierający elementy bezużyteczne wywołuje metodę, <xref:System.Runtime.MemoryFailPoint.Finalize%2A> gdy bieżący obiekt jest gotowy do sfinalizowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
