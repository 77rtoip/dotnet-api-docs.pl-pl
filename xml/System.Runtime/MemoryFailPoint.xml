<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e44bc871caa29f826e0555271beb6a45d2de1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30567343" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Sprawdza, czy wystarczające zasoby pamięci przed wykonaniem operacji. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta klasa jest przeznaczony do użycia w zaawansowanych programowanie.  
  
 Utworzenie wystąpienia <xref:System.Runtime.MemoryFailPoint> klasy tworzy bramę pamięci. Brama pamięci sprawdza wystarczających zasobów przed zainicjowaniem działanie, które wymaga dużej ilości pamięci. Niepowodzenie sprawdzania powoduje <xref:System.InsufficientMemoryException> zgłaszanego wyjątku. Ten wyjątek uniemożliwia uruchomienie operacji i zmniejsza prawdopodobieństwo wystąpienia błędu powodu braku zasobów. Umożliwia to zmniejszyć wydajność, aby uniknąć <xref:System.OutOfMemoryException> wyjątku i ewentualne uszkodzenia stanu, które mogą wynikać z nieprawidłowej obsługi wyjątków w dowolnej lokalizacji w kodzie.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku. Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.  
  
 Przez zgłaszanie <xref:System.InsufficientMemoryException> wyjątek, aplikację można rozróżnić szacunkową operacji nie będzie mógł ukończyć i częściowo ukończoną operację, która może spowodować uszkodzenie stanu aplikacji. Umożliwia to aplikacji zmniejszyć częstotliwość zasady eskalacji pesymistyczne, które mogą wymagać zwalnianie bieżącego <xref:System.AppDomain> lub odtwarzania procesu.  
  
 <xref:System.Runtime.MemoryFailPoint> sprawdza, czy są dostępne w wszystkich pamięci sterty wystarczającą ilość pamięci i kolejnych wirtualnej przestrzeni adresowej, a może zwiększyć rozmiar pliku wymiany.  <xref:System.Runtime.MemoryFailPoint> sprawia, że nie gwarancje dostępności długoterminowych pamięć przez cały okres istnienia bramy, ale wywołań zawsze należy używać <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metody, aby upewnić się, że zasoby skojarzone z <xref:System.Runtime.MemoryFailPoint> są wydawane.  
  
 Aby użyć bramy pamięci, należy utworzyć <xref:System.Runtime.MemoryFailPoint> obiektu i określ liczbę megabajtów (MB) pamięci oczekiwanej do użycia w następnej operacji. Jeśli nie jest dostępna wystarczająca ilość pamięci <xref:System.InsufficientMemoryException> wyjątku.  
  
 Parametr konstruktora musi być dodatnią liczbą całkowitą. Wartość ujemna powoduje <xref:System.ArgumentOutOfRangeException> wyjątku.  
  
 <xref:System.Runtime.MemoryFailPoint> operuje na poziom szczegółowości 16 MB. Wszystkie wartości mniejszej niż 16 MB są traktowane jako 16 MB, a inne wartości są traktowane jako największy dalej wielokrotnością 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> umożliwia aplikacji powolna, aby uniknąć brakiem pamięci w sposób błędny.  Powinien być używany w zakresie leksykalne.  Poniższy przykład powoduje uruchomienie wątków przetwarzania elementów w kolejce pracy.  Przed każdy wątek jest uruchomiony, dostępne zasoby pamięci są zaznaczone, przy użyciu <xref:System.Runtime.MemoryFailPoint>.  Jeśli wyjątek głównej metody oczekuje, aż przed uruchomieniem następnego wątku jest dostępnej pamięci.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Wywoływanie niezarządzanego kodu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Rozmiar wymaganej pamięci w megabajtach. To musi być wartością dodatnią.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.MemoryFailPoint" /> klasy określania ilości pamięci wymaganej do pomyślnego wykonania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Empirycznie można określić ilość pamięci używany przez aplikację do przetworzenia elementu roboczego.  Aby oszacować ilość pamięci tę aplikację do przetwarzania żądań, należy rozważyć użycie <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metodę, aby określić ilość pamięci dostępnej przed i po wywołaniu metody, która przetwarza elementu roboczego. Zobacz <xref:System.Runtime.MemoryFailPoint> klasy dla przykładowego kodu, który dynamicznie określa wartość `sizeInMegabytes` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób określania ilości pamięci, który wymaga metody podczas wykonywania. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Runtime.MemoryFailPoint> klasy.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar pamięci jest ujemna.</exception>
        <exception cref="T:System.InsufficientMemoryException">Jest za mało pamięci, aby rozpocząć wykonywanie kodu chronione przez bramę.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Runtime.MemoryFailPoint.Dispose%2A> po zakończeniu przy użyciu <xref:System.Runtime.MemoryFailPoint>. <xref:System.Runtime.MemoryFailPoint.Dispose%2A> Pozostawia metody <xref:System.Runtime.MemoryFailPoint> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Runtime.MemoryFailPoint>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Runtime.MemoryFailPoint> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.Runtime.MemoryFailPoint> klasy. Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.Runtime.MemoryFailPoint.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Runtime.MemoryFailPoint>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.MemoryFailPoint> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gwarantuje, że zasoby są zwalniane i inne operacje oczyszczania są wykonywane, gdy moduł garbage collector zwraca <see cref="T:System.Runtime.MemoryFailPoint" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.MemoryFailPoint.Finalize%2A> metody, gdy bieżący obiekt jest gotowy do przetwarzania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>