<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b11c2bd29525f877cab2d7c61c490166f17c7eb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69086716" /></Metadata><TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c74f8-101">Sprawdza, czy zasoby pamięci są wystarczające przed wykonaniem operacji.</span><span class="sxs-lookup"><span data-stu-id="c74f8-101">Checks for sufficient memory resources before executing an operation.</span></span> <span data-ttu-id="c74f8-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="c74f8-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="c74f8-103">Ta klasa jest przeznaczona do użycia w zaawansowanym opracowywaniu.</span><span class="sxs-lookup"><span data-stu-id="c74f8-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="c74f8-104">Utworzenie wystąpienia <xref:System.Runtime.MemoryFailPoint> klasy tworzy bramę pamięci.</span><span class="sxs-lookup"><span data-stu-id="c74f8-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="c74f8-105">Brama pamięci sprawdza wystarczającą ilość zasobów przed zainicjowaniem działania wymagającego dużej ilości pamięci.</span><span class="sxs-lookup"><span data-stu-id="c74f8-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="c74f8-106">Niepowodzenie sprawdzania powoduje <xref:System.InsufficientMemoryException> , że wystąpił wyjątek.</span><span class="sxs-lookup"><span data-stu-id="c74f8-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="c74f8-107">Ten wyjątek uniemożliwia uruchomienie operacji i zmniejsza prawdopodobieństwo niepowodzenia z powodu braku zasobów.</span><span class="sxs-lookup"><span data-stu-id="c74f8-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="c74f8-108">Pozwala to zmniejszyć wydajność, aby uniknąć <xref:System.OutOfMemoryException> wyjątków i wszelkich uszkodzeń stanu, które mogą wynikać z nieprawidłowej obsługi wyjątku w dowolnych lokalizacjach w kodzie.</span><span class="sxs-lookup"><span data-stu-id="c74f8-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c74f8-109">Ten typ implementuje <xref:System.IDisposable> interfejs.</span><span class="sxs-lookup"><span data-stu-id="c74f8-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="c74f8-110">Po zakończeniu korzystania z typu należy usunąć jego wartość bezpośrednio lub pośrednio.</span><span class="sxs-lookup"><span data-stu-id="c74f8-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="c74f8-111">Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku.</span><span class="sxs-lookup"><span data-stu-id="c74f8-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="c74f8-112">Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c74f8-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="c74f8-113">Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.</span><span class="sxs-lookup"><span data-stu-id="c74f8-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="c74f8-114"><xref:System.InsufficientMemoryException> Zwracając wyjątek, aplikacja może rozróżnić oszacowanie, że operacja nie będzie mogła zostać ukończona, oraz częściowo ukończoną operację, która może spowodować uszkodzenie stanu aplikacji.</span><span class="sxs-lookup"><span data-stu-id="c74f8-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="c74f8-115">Dzięki temu aplikacja może ograniczyć częstotliwość pesymistycznych zasad eskalacji, które mogą wymagać wyładowania bieżącego <xref:System.AppDomain> lub odzyskania procesu.</span><span class="sxs-lookup"><span data-stu-id="c74f8-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="c74f8-116"><xref:System.Runtime.MemoryFailPoint>sprawdza, czy wystarczająca ilość pamięci i kolejnej wirtualnej przestrzeni adresowej są dostępne we wszystkich stertach odzyskiwania pamięci i może zwiększyć rozmiar pliku wymiany.</span><span class="sxs-lookup"><span data-stu-id="c74f8-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="c74f8-117"><xref:System.Runtime.MemoryFailPoint>nie udziela żadnych gwarancji dotyczących długoterminowej dostępności pamięci w okresie istnienia bramy, ale obiekty wywołujące powinny zawsze używać <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metody, aby zapewnić, że zasoby skojarzone z systemem <xref:System.Runtime.MemoryFailPoint> są wydane.</span><span class="sxs-lookup"><span data-stu-id="c74f8-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="c74f8-118">Aby użyć bramy pamięci, należy utworzyć <xref:System.Runtime.MemoryFailPoint> obiekt i określić liczbę megabajtów (MB) pamięci, która powinna zostać użyta w następnej operacji.</span><span class="sxs-lookup"><span data-stu-id="c74f8-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="c74f8-119">Jeśli nie jest dostępna wystarczająca ilość pamięci, <xref:System.InsufficientMemoryException> zostanie zgłoszony wyjątek.</span><span class="sxs-lookup"><span data-stu-id="c74f8-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="c74f8-120">Parametr konstruktora musi być dodatnią liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="c74f8-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="c74f8-121">Wartość ujemna wywołuje <xref:System.ArgumentOutOfRangeException> wyjątek.</span><span class="sxs-lookup"><span data-stu-id="c74f8-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="c74f8-122"><xref:System.Runtime.MemoryFailPoint>działa z dokładnością do 16 MB.</span><span class="sxs-lookup"><span data-stu-id="c74f8-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="c74f8-123">Wszystkie wartości mniejsze niż 16 MB są traktowane jako 16 MB, a inne wartości są traktowane jako najbliższe największe wielokrotności 16 MB.</span><span class="sxs-lookup"><span data-stu-id="c74f8-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c74f8-124"><xref:System.Runtime.MemoryFailPoint>umożliwia aplikacji spowolnienie działania, aby uniknąć braku pamięci w sposób uszkodzony.</span><span class="sxs-lookup"><span data-stu-id="c74f8-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="c74f8-125">Powinien być używany w zakresie leksykalnym.</span><span class="sxs-lookup"><span data-stu-id="c74f8-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="c74f8-126">Poniższy przykład uruchamia wątki, aby przetwarzać elementy w kolejce roboczej.</span><span class="sxs-lookup"><span data-stu-id="c74f8-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="c74f8-127">Przed uruchomieniem każdego wątku, dostępne zasoby pamięci są sprawdzane przy <xref:System.Runtime.MemoryFailPoint>użyciu.</span><span class="sxs-lookup"><span data-stu-id="c74f8-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="c74f8-128">Jeśli wystąpi wyjątek, Metoda Main czeka na dostępność pamięci przed uruchomieniem następnego wątku.</span><span class="sxs-lookup"><span data-stu-id="c74f8-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="c74f8-129">Wywoływanie niezarządzanego kodu.</span><span class="sxs-lookup"><span data-stu-id="c74f8-129">for calling unmanaged code.</span></span> <span data-ttu-id="c74f8-130">Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="c74f8-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="c74f8-131">Akcja zabezpieczeń:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span><span class="sxs-lookup"><span data-stu-id="c74f8-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span></span></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes"><span data-ttu-id="c74f8-132">Wymagany rozmiar pamięci (w megabajtach).</span><span class="sxs-lookup"><span data-stu-id="c74f8-132">The required memory size, in megabytes.</span></span> <span data-ttu-id="c74f8-133">Musi to być wartość dodatnia.</span><span class="sxs-lookup"><span data-stu-id="c74f8-133">This must be a positive value.</span></span></param>
        <summary><span data-ttu-id="c74f8-134">Inicjuje nowe wystąpienie <see cref="T:System.Runtime.MemoryFailPoint" /> klasy, określając ilość pamięci wymaganej do pomyślnego wykonania.</span><span class="sxs-lookup"><span data-stu-id="c74f8-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c74f8-135">Ilość pamięci używanej przez aplikację do przetwarzania elementu pracy można określić jako doświadczalnie.</span><span class="sxs-lookup"><span data-stu-id="c74f8-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="c74f8-136">Aby oszacować ilość pamięci wymaganej przez aplikację do przetworzenia żądania, należy rozważyć użycie <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metody w celu określenia ilości pamięci dostępnej przed i po wywołaniu metody, która przetwarza element roboczy.</span><span class="sxs-lookup"><span data-stu-id="c74f8-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="c74f8-137">Zapoznaj <xref:System.Runtime.MemoryFailPoint> się z klasą przykładu kodu, który dynamicznie Określa wartość `sizeInMegabytes` parametru.</span><span class="sxs-lookup"><span data-stu-id="c74f8-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c74f8-138">W poniższym przykładzie pokazano, jak określić ilość pamięci wymaganej do wykonania przez metodę.</span><span class="sxs-lookup"><span data-stu-id="c74f8-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="c74f8-139">Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Runtime.MemoryFailPoint> klasy.</span><span class="sxs-lookup"><span data-stu-id="c74f8-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c74f8-140">Określony rozmiar pamięci jest ujemny.</span><span class="sxs-lookup"><span data-stu-id="c74f8-140">The specified memory size is negative.</span></span></exception>
        <exception cref="T:System.InsufficientMemoryException"><span data-ttu-id="c74f8-141">Za mało pamięci, aby rozpocząć wykonywanie kodu chronionego przez bramę.</span><span class="sxs-lookup"><span data-stu-id="c74f8-141">There is insufficient memory to begin execution of the code protected by the gate.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="c74f8-142">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="c74f8-142">requires full trust for the immediate caller.</span></span> <span data-ttu-id="c74f8-143">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span><span class="sxs-lookup"><span data-stu-id="c74f8-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c74f8-144">Zwalnia wszystkie zasoby używane przez <see cref="T:System.Runtime.MemoryFailPoint" />program.</span><span class="sxs-lookup"><span data-stu-id="c74f8-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c74f8-145">Wywołaj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> po zakończeniu korzystania z <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="c74f8-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="c74f8-146"><xref:System.Runtime.MemoryFailPoint.Dispose%2A> Metoda<xref:System.Runtime.MemoryFailPoint> pozostawia w stanie niezdatnym do użytku.</span><span class="sxs-lookup"><span data-stu-id="c74f8-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="c74f8-147">Po wywołaniu <xref:System.Runtime.MemoryFailPoint>należy wydać wszystkie odwołania <xref:System.Runtime.MemoryFailPoint> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Runtime.MemoryFailPoint> , którą zajmował.</span><span class="sxs-lookup"><span data-stu-id="c74f8-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="c74f8-148">Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="c74f8-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c74f8-149">Zawsze wywołuj <xref:System.Runtime.MemoryFailPoint.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Runtime.MemoryFailPoint>do.</span><span class="sxs-lookup"><span data-stu-id="c74f8-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="c74f8-150">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Runtime.MemoryFailPoint> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="c74f8-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c74f8-151">Zapewnia, że zasoby są zwolnione i inne operacje czyszczenia są wykonywane, gdy moduł zbierający <see cref="T:System.Runtime.MemoryFailPoint" /> elementy bezużyteczne odzyskuje obiekt.</span><span class="sxs-lookup"><span data-stu-id="c74f8-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c74f8-152">Moduł zbierający elementy bezużyteczne wywołuje metodę, <xref:System.Runtime.MemoryFailPoint.Finalize%2A> gdy bieżący obiekt jest gotowy do sfinalizowania.</span><span class="sxs-lookup"><span data-stu-id="c74f8-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>
