<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="437366316ce58bcfea56939a19c7db1f254780e9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30694283" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AspNetWebSocket&#xA;Inherits WebSocket" />
  <TypeSignature Language="C++ CLI" Value="public ref class AspNetWebSocket sealed : System::Net::WebSockets::WebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje połączenie pełnego dupleksu w czasie rzeczywistym między serwerem sieci web i klienta w aplikacji ASP.NET.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje wszystkie oczekujące operacje We/Wy na <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> obiektu i ustawia stan obiektu, tak aby nie można uruchomić dodatkowe operacje We/Wy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po <xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A> została wywołana metoda, możesz nadal dostęp do właściwości i metody, które nie obejmują operacji We/Wy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Kod stanu operacji zamknięcia.</param>
        <param name="statusDescription">Komunikat o stanie operacji zamknięcia.</param>
        <param name="cancellationToken">Obiekt, który anuluje oczekująca operacja.</param>
        <summary>Wysyła komunikat asynchronicznego na kliencie, aby zamknąć połączenia. Jeżeli serwer inicjuje żądania, aby zamknąć połączenie, metoda oczekuje klienta na potwierdzenie żądania przed zwróceniem.</summary>
        <returns>Odwołanie do operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> i <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metody żądania zarówno inicjowanej przez klienta i inicjowanych przez serwer zamknąć <xref:System.Web.WebSockets.AspNetWebSocket> połączenia. Te dwie metody obsługi żądań zainicjowane przez klienta w taki sam sposób: po klient wysyła wiadomość do serwera, aby zamknąć połączenie, serwer wymaga jednej z tych metod i wysyła potwierdzenie do klienta, a następnie metoda zwraca.  
  
 Żądania inicjowanych przez serwer te dwie metody działają inaczej. <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> Metoda wysyła wiadomość do klienta, aby zamknąć połączenie, czeka na odpowiedź, a następnie zwraca. Serwer nie oczekuje wszelkie dodatkowe dane wysyłane przez klienta. Z kolei <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metoda wysyła wiadomość do klienta, aby zamknąć połączenie i zwraca bez oczekiwania na odpowiedź. Po powrocie z metody należy wywołać <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> metody i obsługi dodatkowych danych lub potwierdzenie, że klient wysyła.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt został wcześniej usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt jest w stanie zostało przerwane.  
  
 —lub—  
  
 Operacje wysyłania są niedostępne.  
  
 —lub—  
  
 Operacji odbierania są niedostępne.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseOutputAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Kod stanu operacji zamknięcia.</param>
        <param name="statusDescription">Komunikat o stanie operacji zamknięcia.</param>
        <param name="cancellationToken">Obiekt, który anuluje oczekująca operacja.</param>
        <summary>Wysyła komunikat asynchronicznego na kliencie, aby zamknąć połączenia. Jeżeli serwer inicjuje żądania, aby zamknąć połączenie, metoda zwraca bez oczekiwania na odpowiedź.</summary>
        <returns>Odwołanie do operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> i <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metody żądania zarówno inicjowanej przez klienta i inicjowanych przez serwer zamknąć <xref:System.Web.WebSockets.AspNetWebSocket> połączenia. Te dwie metody obsługi żądań zainicjowane przez klienta w taki sam sposób: po klient wysyła wiadomość do serwera, aby zamknąć połączenie, serwer wymaga jednej z tych metod i wysyła potwierdzenie do klienta, a następnie metoda zwraca.  
  
 Żądania inicjowanych przez serwer te dwie metody działają inaczej. <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> Metoda wysyła wiadomość do klienta, aby zamknąć połączenie, czeka na odpowiedź, a następnie zwraca. Serwer nie oczekuje wszelkie dodatkowe dane wysyłane przez klienta. Z kolei <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metoda wysyła wiadomość do klienta, aby zamknąć połączenie i zwraca bez oczekiwania na odpowiedź. Po powrocie z metody należy wywołać <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> metody i obsługi dodatkowych danych lub potwierdzenie, że klient wysyła.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt jest w stanie zostało przerwane.  
  
 —lub—  
  
 Operacje wysyłania są niedostępne.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatus As Nullable(Of WebSocketCloseStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; CloseStatus { Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod stanu, która wskazuje, dlaczego <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> obiekt został zamknięty.</summary>
        <value>Kod stanu.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseStatusDescription { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera komunikat o stanie wyjaśniający dlaczego <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> obiekt został zamknięty.</summary>
        <value>Komunikat o stanie.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET jest automatycznie wywołuje <xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A> metoda <xref:System.Web.WebSockets.AspNetWebSocket> obiekt, aby zwolnić wszystkie zasoby, które pozostają wykonywane po zakończeniu działania kodu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::WebSockets::WebSocketReceiveResult ^&gt; ^ ReceiveAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica, która zawiera dane komunikatów.</param>
        <param name="cancellationToken">Obiekt, który anuluje oczekująca operacja.</param>
        <summary>Odbiera fragmentu pojedynczy komunikat z klienta zdalnego.</summary>
        <returns>Odwołanie do zadania, odbierania wiadomości.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt został wcześniej usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt jest w stanie zostało przerwane.  
  
 —lub—  
  
 Operacji odbierania są niedostępne.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ SendAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica, która zawiera dane komunikatów.</param>
        <param name="messageType">Typ komunikatu.</param>
        <param name="endOfMessage">
          <see langword="true" /> Aby wskazać, że fragment jest na końcu pełną wiadomości; w przeciwnym razie <see langword="false" />.</param>
        <param name="cancellationToken">Obiekt, który anuluje oczekująca operacja.</param>
        <summary>Wysyła fragmentu pojedynczą wiadomość do klienta dostępu zdalnego.</summary>
        <returns>Odwołanie do zadania wysyłania wiadomości.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt jest usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> Obiekt jest w stanie zostało przerwane.  
  
 —lub—  
  
 Operacje wysyłania są niedostępne.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As WebSocketState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebSockets::WebSocketState State { System::Net::WebSockets::WebSocketState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która wskazuje stan open lub closed <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> obiektu.</summary>
        <value>Bieżący stan.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SubProtocol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SubProtocol { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę protokołu specyficzne dla aplikacji, która zdalnego klienta i serwera można użyć do wymiany danych za pośrednictwem <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> połączenia.</summary>
        <value>Nazwa protokołu.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Obiekt został wcześniej usunięty.</exception>
      </Docs>
    </Member>
  </Members>
</Type>