<Type Name="JapaneseCalendar" FullName="System.Globalization.JapaneseCalendar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1b91c1d020ab1952f24992a7cc78ae6796e0a35" /><Meta Name="ms.sourcegitcommit" Value="6089a30c0522e6f43256523e82e94b2ccedfb55b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/04/2019" /><Meta Name="ms.locfileid" Value="59014590" /></Metadata><TypeSignature Language="C#" Value="public class JapaneseCalendar : System.Globalization.Calendar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit JapaneseCalendar extends System.Globalization.Calendar" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.JapaneseCalendar" />
  <TypeSignature Language="VB.NET" Value="Public Class JapaneseCalendar&#xA;Inherits Calendar" />
  <TypeSignature Language="C++ CLI" Value="public ref class JapaneseCalendar : System::Globalization::Calendar" />
  <TypeSignature Language="F#" Value="type JapaneseCalendar = class&#xA;    inherit Calendar" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Calendars</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Globalization.Calendar</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje Kalendarz japoński.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kalendarz japoński jest także znana jako kalendarz Wareki, działa tak samo jak kalendarz gregoriański, z tą różnicą, że roku i ery różnią się.  
  
> [!NOTE]
>  Aby uzyskać informacje o używaniu <xref:System.Globalization.JapaneseCalendar> klasy, a druga kalendarza klasy na platformie .NET, zobacz [Praca z kalendarzami](~/docs/standard/datetime/working-with-calendars.md).  
  
 Kalendarz japoński rozpoznaje jedną erę dla każdego emperor reign. Dwie najbardziej aktualną ery są era Heisei, począwszy od roku kalendarza gregoriańskiego 1989 r. i era Reiwa, począwszy od roku kalendarza gregoriańskiego 2019 r. Nazwę ery jest zwykle wyświetlany przed rokiem. Na przykład 2001 roku kalendarza gregoriańskiego jest japoński rok kalendarzowy Heisei 13. Należy zauważyć, że pierwszym roku ery nosi nazwę "Gannen." W związku z tym 1989 roku kalendarza gregoriańskiego był japoński rok kalendarzowy Heisei Gannen. Domyślnie formatowanie operacji przy użyciu określonej daty i godziny ciągi formatów, takich jak "D", "F" i "Y" danych wyjściowych Gannen zamiast "1" w ciągu wynikowym. 

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Ta klasa przypisuje numery ery w następujący sposób:  
  
|Wartość GetEra|Nazwę ery|Skrót nazwy ery|Gregoriańskiego|  
|------------------|--------------|----------------------|---------------------|  
|5|令和 (Reiwa)|令和 (R, r)|1 maja 2019 r do przedstawienia|
|4|平成 (Heisei)|平 (godz., h)|8 stycznia 1989 r. do 30 kwietnia 2019 r.|  
|3|昭和 (Showa)|昭 (S, s)|25 grudnia 1926 do 7 stycznia 1989 roku.|  
|2|大正 (Taisho)|大 (T, t)|30 lipca 1912 do 24 grudnia 1926|  
|1|明治 (Meiji)|明 (M, m)|8 września 1868 do dnia 29 lipca 1912|  
  
 Ta klasa obsługuje daty od 8 września w roku Meiji 1 (w kalendarzu gregoriańskim, 8 września 1868). Mimo że Kalendarz japoński został przełączony z kalendarza księżycowego słonecznego kalendarza w roku Meiji 6 (1873 kalendarza gregoriańskiego), to implementacja jest oparta na tylko schematu układu słonecznego kalendarza.  
  
 Przestępnego w kalendarza japońskiego odpowiadają tym samym przestępnego w kalendarzu gregoriańskim. W roku przestępnym w kalendarzu gregoriańskim jest zdefiniowana jako rok gregoriański, który jest podzielny przez cztery, z wyjątkiem sytuacji, gdy jest podzielna przez 100. Jednak lat gregoriański, które są podzielna przez 400 są przestępnego. Typowe roku wygaśnie za 365 dni, a dla roku przestępnego ma 366 dni.  
  
 Kalendarz japoński ma 12 miesięcy z 28 – 31 dni:  
  
|GetMonth — wartości|Miesiąc|Angielski|Dni w latach wspólne|Dni w leap lat|  
|--------------------|-----------|-------------|--------------------------|------------------------|  
|1|1月 (Ichigatsu)|Stycznia|31|31|  
|2|2月 (Nigatsu)|Lutego|28|29|  
|3|3月 (Sangatsu)|Marca|31|31|  
|4|4月 (Shigatsu)|Kwietnia|30|30|  
|5|5月 (Gogatsu)|Może|31|31|  
|6|6月 (Rokugatsu)|Czerwca|30|30|  
|7|7月 (Shichigatsu)|Lipiec|31|31|  
|8|8月 (Hachigatsu)|Sierpień|31|31|  
|9|9月 (Kugatsu)|Września|30|30|  
|10|10月 (Juugatsu)|Październik|31|31|  
|11|11月 (Juuichigatsu)|Listopada|30|30|  
|12|12月 (Juunigatsu)|Grudnia|31|31|  
  
 Nigatsu, który jest odpowiednikiem miesiąc kalendarza gregoriańskiego lutego, ma 29 dni w roku przestępnym do 28 w latach wspólnej.  
  
 Daty 1 stycznia, 2001 r. N.E. w kalendarzu gregoriańskim odpowiada pierwszego dnia Ichigatsu roku Heisei 13 Kalendarz japoński.  
  
 Jeśli <xref:System.Globalization.JapaneseCalendar> jest bieżącym kalendarzem kulturę japoński <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> rozpoznaje skróty ery przed roku. Skrót jest skrótem bez uwzględniania wielkości liter alfabetu łacińskiego pojedynczych znaków lub skrót Kanji pojedynczych znaków. XRef:system.DateTime.Parse%2a?displayProperty=nameWithType > rozpoznaje również "1" lub Gannen (元年) jako pierwszego roku ery.
  
 Każdy <xref:System.Globalization.CultureInfo> obiekt obsługuje zestaw dostępnych kalendarzy. <xref:System.Globalization.CultureInfo.Calendar%2A> Właściwość zwraca kalendarz domyślny dla kultury i <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> właściwość zwraca tablicę zawierającą wszystkie kalendarze obsługiwane przez kulturę. Aby zmienić kalendarz używany przez <xref:System.Globalization.CultureInfo>ustaw <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> nową właściwość <xref:System.Globalization.Calendar>.
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.GregorianCalendar" />
    <altmember cref="P:System.Globalization.CultureInfo.Calendar" />
    <altmember cref="P:System.Globalization.CultureInfo.OptionalCalendars" />
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Praca z kalendarzami</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Calendar-3360a84a">Przykład: Narzędzie zakresu tydzień kalendarza</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JapaneseCalendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JapaneseCalendar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.JapaneseCalendar" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeInitializationException">Nie można zainicjować <see cref="T:System.Globalization.JapaneseCalendar" /> obiektu z powodu brakujących informacji o kulturze.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public override DateTime AddMonths (DateTime time, int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddMonths (time As DateTime, months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddMonths(DateTime time, int months);" />
      <MemberSignature Language="F#" Value="override this.AddMonths : DateTime * int -&gt; DateTime" Usage="japaneseCalendar.AddMonths (time, months)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do której chcesz dodać miesięcy.</param>
        <param name="months">Liczba miesięcy do dodania.</param>
        <summary>Zwraca <see cref="T:System.DateTime" /> czyli określoną liczbę miesięcy od określonego <see cref="T:System.DateTime" />.</summary>
        <returns><see cref="T:System.DateTime" /> , Wynikiem dodawania określoną liczbę miesięcy do określonego <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część dnia wynikowy <xref:System.DateTime> jest wpływ na wynikowy dzień nie jest prawidłowym dniem w wynikowej miesiąca roku wynikowy. Zostanie on zmieniony na ostatni dzień prawidłowe wynikowy miesiąca roku wynikowe. Rok wynikowy <xref:System.DateTime> jest wpływ na wynikowy miesiąca znajduje się poza rok o określonym parametrze <xref:System.DateTime>. Część ery wynikowy <xref:System.DateTime> jest wpływ na wynikowy roku znajduje się poza ery określonego <xref:System.DateTime>. Część pory dnia wynikowy <xref:System.DateTime> pozostaje taka sama jak określony <xref:System.DateTime>.  
  
 Na przykład, jeśli określonym miesiącu jest Juugatsu (października), która ma 31 dni, określony dzień jest 31 dnia danego miesiąca, i `months` 6, wynikowy roku jest jeden więcej niż określony rok, miesiąc wynikowy jest Shigatsu (kwiecień), a wynikowy dnia jest 30 dnia, w którym jest na ostatni dzień Shigatsu (kwiecień).  
  
 Jeśli `months` jest ujemna, wynikowy <xref:System.DateTime> jest starsza niż określona <xref:System.DateTime>.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> zawsze wartość jest równa <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Można zachować <xref:System.DateTime.Kind%2A> właściwość `time` parametrów, wywołując <xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType> metody, jak w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]
 [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość wynikowa <see cref="T:System.DateTime" /> jest spoza obsługiwanego zakresu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="months" /> jest mniejsza niż-120000.  
  
—lub— 
 <paramref name="months" /> jest większe niż 120000.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public override DateTime AddYears (DateTime time, int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddYears (time As DateTime, years As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddYears(DateTime time, int years);" />
      <MemberSignature Language="F#" Value="override this.AddYears : DateTime * int -&gt; DateTime" Usage="japaneseCalendar.AddYears (time, years)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do której chcesz dodać lata.</param>
        <param name="years">Liczba lat do dodania.</param>
        <summary>Zwraca <see cref="T:System.DateTime" /> czyli określoną liczbę lat od określonego <see cref="T:System.DateTime" />.</summary>
        <returns><see cref="T:System.DateTime" /> , Wynikiem dodawania określoną liczbę lat do określonego <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część dnia wynikowy <xref:System.DateTime> jest wpływ na wynikowy dzień nie jest prawidłowym dniem w wynikowej miesiąca roku wynikowy. Zostanie on zmieniony na ostatni dzień prawidłowe wynikowy miesiąca roku wynikowe. Część miesiąca wynikowy <xref:System.DateTime> pozostaje taka sama jak określony <xref:System.DateTime>. Część ery wynikowy <xref:System.DateTime> jest wpływ na wynikowy roku znajduje się poza ery określonego <xref:System.DateTime>. Część pory dnia wynikowy <xref:System.DateTime> pozostaje taka sama jak określony <xref:System.DateTime>.  
  
 Na przykład Nigatsu (luty) ma 28 dni, z wyjątkiem podczas przestępnego, kiedy ma 29 dni. Jeśli w dniu 29 Nigatsu (luty) określonej daty znajduje się w roku przestępnym i wartość `years` wynosi 1, Data wynikowy będzie 28. dnia Nigatsu (luty) w następnym roku.  
  
 Jeśli `years` jest ujemna, wynikowy <xref:System.DateTime> jest starsza niż określona <xref:System.DateTime>.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTime> zawsze wartość jest równa <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Można zachować <xref:System.DateTime.Kind%2A> właściwość `time` parametrów, wywołując <xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType> metody, jak w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]
 [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość wynikowa <see cref="T:System.DateTime" /> jest spoza obsługiwanego zakresu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time" /> znajduje się poza obsługiwanym zakresem od <see cref="T:System.Globalization.JapaneseCalendar" /> typu.  
  
—lub— 
 <paramref name="years" /> jest mniejsza niż-10,000 lub większy niż 10 000.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)" />
        <altmember cref="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="AlgorithmType">
      <MemberSignature Language="C#" Value="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.JapaneseCalendar.AlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AlgorithmType As CalendarAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CalendarAlgorithmType AlgorithmType { System::Globalization::CalendarAlgorithmType get(); };" />
      <MemberSignature Language="F#" Value="member this.AlgorithmType : System.Globalization.CalendarAlgorithmType" Usage="System.Globalization.JapaneseCalendar.AlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący kalendarz jest oparte na słoneczne, oparte na księżycowy lub jako kombinację obu tych.</summary>
        <value>Zawsze zwraca <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto odbicia do utworzenia wystąpienia każdej <xref:System.Globalization.Calendar> typu znalezione w bibliotece klas programu .NET i wyświetla wartość jego <xref:System.Globalization.Calendar.AlgorithmType%2A> właściwości.  
  
 [!code-csharp[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/cs/algorithmtype1.cs#1)]
 [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/vb/algorithmtype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eras">
      <MemberSignature Language="C#" Value="public override int[] Eras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] Eras" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.JapaneseCalendar.Eras" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Eras As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;int&gt; ^ Eras { cli::array &lt;int&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Eras : int[]" Usage="System.Globalization.JapaneseCalendar.Eras" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera listę ery w <see cref="T:System.Globalization.JapaneseCalendar" />.</summary>
        <value>Tablica liczb całkowitych, które reprezentuje ery w <see cref="T:System.Globalization.JapaneseCalendar" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kalendarz japoński rozpoznaje jedną erę dla każdego emperor reign. Dwie najbardziej aktualną ery są era Heisei, począwszy od roku kalendarza gregoriańskiego 1989 r. i era Reiwa, począwszy od roku kalendarza gregoriańskiego 2019 r. Nazwę ery jest zwykle wyświetlany przed rokiem. Na przykład 2001 roku kalendarza gregoriańskiego jest japoński rok kalendarzowy Heisei 13. Należy zauważyć, że pierwszym roku ery nosi nazwę "Gannen." W związku z tym 1989 roku kalendarza gregoriańskiego był japoński rok kalendarzowy Heisei Gannen.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Ta klasa przypisuje numery ery w następujący sposób:  
  
|Wartość GetEra|Nazwę ery|Skrót nazwy ery|Gregoriańskiego|  
|------------------|--------------|----------------------|---------------------|  
|5|令和 (Reiwa)|令和 (R, r)|1 maja 2019 r do przedstawienia|
|4|平成 (Heisei)|平 (godz., h)|8 stycznia 1989 r. Aby zaprezentować|  
|3|昭和 (Showa)|昭 (S, s)|25 grudnia 1926 do 7 stycznia 1989 roku.|  
|2|大正 (Taisho)|大 (T, t)|30 lipca 1912 do 24 grudnia 1926|  
|1|明治 (Meiji)|明 (M, m)|8 września 1868 do dnia 29 lipca 1912|  
  
 Ta klasa obsługuje daty od 8 września w roku Meiji 1 (1 styczeń 1868 kalendarza gregoriańskiego). Mimo że Kalendarz japoński został przełączony z kalendarza księżycowego słonecznego kalendarza w roku Meiji 6 (1873 kalendarza gregoriańskiego), to implementacja jest oparta na tylko schematu układu słonecznego kalendarza.  
  
> [!NOTE]
>  Dodatkowe ery powinny zostać dodane w przyszłości, aplikacje mogą wystąpić więcej niż oczekiwano pięć ery kalendarza japońskiego. Powinien zostać przetestowany aplikacji, aby upewnić się, że nadal działa w takim przypadku; zobacz [obsługi ery kalendarza japońskiego](/windows/desktop/Intl/era-handling-for-the-japanese-calendar).  
  
   
  
## Examples  
 Poniższy przykład wyświetla wartości zawartych w <xref:System.Globalization.JapaneseCalendar.Eras%2A> właściwości.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar.Eras#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.Eras/CPP/yslin_japanesecalendar_eras.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar.Eras#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.Eras/CS/yslin_japanesecalendar_eras.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar.Eras#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.Eras/VB/yslin_japanesecalendar_eras.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfMonth">
      <MemberSignature Language="C#" Value="public override int GetDayOfMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfMonth(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetDayOfMonth : DateTime -&gt; int" Usage="japaneseCalendar.GetDayOfMonth time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca dzień miesiąca w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Liczba całkowita z zakresu od 1 do 31 reprezentująca dzień miesiąca w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Day" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfWeek">
      <MemberSignature Language="C#" Value="public override DayOfWeek GetDayOfWeek (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfWeek (time As DateTime) As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DayOfWeek GetDayOfWeek(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetDayOfWeek : DateTime -&gt; DayOfWeek" Usage="japaneseCalendar.GetDayOfWeek time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca dzień tygodnia w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>A <see cref="T:System.DayOfWeek" /> wartość reprezentującą dzień tygodnia w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DayOfWeek> Wartości są następujące:  
  
|Wartość DayOfWeek|co oznacza|  
|---------------------|---------------------|  
|Niedziela|日曜日 (Nichiyoubi)|  
|Każdy poniedziałek|月曜日 (Getsuyoubi)|  
|Wtorek|火曜日 (Kayoubi)|  
|Środa|水曜日 (Suiyoubi)|  
|Czwartek|木曜日 (Mokuyoubi)|  
|Piątek|金曜日 (Kinyoubi)|  
|Sobota|土曜日 (Doyoubi)|  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.DayOfWeek" />
        <altmember cref="T:System.DayOfWeek" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfYear">
      <MemberSignature Language="C#" Value="public override int GetDayOfYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfYear(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetDayOfYear : DateTime -&gt; int" Usage="japaneseCalendar.GetDayOfYear time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca dzień roku w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Liczba całkowita z zakresu od 1 do 366 reprezentującą dzień roku w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dzień roku jest zdefiniowany jako liczba dni od pierwszego dnia roku. Na przykład <xref:System.Globalization.JapaneseCalendar.GetDayOfYear%2A> dla pierwszy dzień pierwszego miesiąca zwraca 1, a <xref:System.Globalization.JapaneseCalendar.GetDayOfYear%2A> w ciągu ostatniego dnia ostatni miesiąc zwraca całkowita liczba dni w roku i ma taką samą wartość jak zwracany przez <xref:System.Globalization.JapaneseCalendar.GetDaysInYear%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.DayOfYear" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInMonth">
      <MemberSignature Language="C#" Value="public override int GetDaysInMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInMonth (year As Integer, month As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInMonth(int year, int month, int era);" />
      <MemberSignature Language="F#" Value="override this.GetDaysInMonth : int * int * int -&gt; int" Usage="japaneseCalendar.GetDaysInMonth (year, month, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="month">Liczba całkowita z zakresu od 1 do 12 reprezentująca miesiąc.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Zwraca liczbę dni w danym miesiącu określonego roku w określonym ery.</summary>
        <returns>Liczba dni w danym miesiącu określonego roku w określonym ery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład, Metoda ta zwraca 28 lub 29 Nigatsu (lutego, `month` = 2), w zależności od tego, czy `year` jest rokiem przestępnym.  
  
   
  
## Examples  
 Poniższy kod wywoła przykład <xref:System.Globalization.JapaneseCalendar.GetDaysInMonth%2A> w drugim miesiącu we wszystkich pięciu lat w każdej erze.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInMonth/CPP/japanesecalendar_getdaysinmonth.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInMonth/CS/japanesecalendar_getdaysinmonth.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInMonth/VB/japanesecalendar_getdaysinmonth.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="month" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInYear">
      <MemberSignature Language="C#" Value="public override int GetDaysInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInYear(int year, int era);" />
      <MemberSignature Language="F#" Value="override this.GetDaysInYear : int * int -&gt; int" Usage="japaneseCalendar.GetDaysInYear (year, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Zwraca liczbę dni w określonego roku w określonym ery.</summary>
        <returns>Liczba dni w roku określonego w określonym ery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład, Metoda ta zwraca 365 lub 366, w zależności od tego, czy `year` jest rokiem przestępnym.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Globalization.JapaneseCalendar.GetDaysInYear%2A> przez pięć lat w każdej erze.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInYear/CPP/japanesecalendar_getdaysinyear.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInYear/CS/japanesecalendar_getdaysinyear.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetDaysInYear/VB/japanesecalendar_getdaysinyear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public override int GetEra (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetEra(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEra (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetEra(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetEra : DateTime -&gt; int" Usage="japaneseCalendar.GetEra time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca ery w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Liczba całkowita, która reprezentuje ery w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kalendarz japoński rozpoznaje jedną erę dla każdego emperor reign. Dwie najbardziej aktualną ery są era Heisei, począwszy od roku kalendarza gregoriańskiego 1989 r. i era Reiwa, począwszy od roku kalendarza gregoriańskiego 2019 r. Nazwę ery jest zwykle wyświetlany przed rokiem. Na przykład 2001 roku kalendarza gregoriańskiego jest japoński rok kalendarzowy Heisei 13. Należy zauważyć, że pierwszym roku ery nosi nazwę "Gannen." W związku z tym 1989 roku kalendarza gregoriańskiego był japoński rok kalendarzowy Heisei Gannen.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Ta klasa przypisuje numery ery w następujący sposób:  
  
|Wartość GetEra|Nazwę ery|Skrót nazwy ery|Gregoriańskiego|  
|------------------|--------------|----------------------|---------------------|  
|5|令和 (Reiwa)|令和 (R, r)|1 maja 2019 r do przedstawienia|
|4|平成 (Heisei)|平 (godz., h)|8 stycznia 1989 r. do 30 kwietnia 2019 r.|  
|3|昭和 (Showa)|昭 (S, s)|25 grudnia 1926 do 7 stycznia 1989 roku.|  
|2|大正 (Taisho)|大 (T, t)|30 lipca 1912 do 24 grudnia 1926|  
|1|明治 (Meiji)|明 (M, m)|8 września 1868 do dnia 29 lipca 1912|  
  
 Zazwyczaj <xref:System.Globalization.JapaneseCalendar> klasa obsługuje daty z 8 września w roku Meiji 1 (8 września 1868 kalendarza gregoriańskiego), która jest wartością elementu <xref:System.Globalization.JapaneseCalendar.MinSupportedDateTime%2A> właściwości. Jednak <xref:System.Globalization.JapaneseCalendar.GetEra%2A> metoda pomyślnie zwraca ery dat od 1 stycznia za pośrednictwem 7 września Meiji 1 roku (1 stycznia 1868 za pośrednictwem 7 września 1868 w kalendarzu gregoriańskim). Daty wcześniejszej niż 1 stycznia 1868 w kalendarzu gregoriańskim, metoda zgłasza <xref:System.ArgumentOutOfRangeException> wyjątku.  
  
## Examples  
 Poniższy przykład wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTime" /> jest spoza obsługiwanego zakresu.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetLeapMonth">
      <MemberSignature Language="C#" Value="public override int GetLeapMonth (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLeapMonth(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLeapMonth (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLeapMonth(int year, int era);" />
      <MemberSignature Language="F#" Value="override this.GetLeapMonth : int * int -&gt; int" Usage="japaneseCalendar.GetLeapMonth (year, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="era" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">Rok.</param>
        <param name="era">Ery.</param>
        <summary>Oblicza przestępnym miesiąca określonego roku i ery.</summary>
        <returns>Wartość zwracana jest zawsze 0 ponieważ <see cref="T:System.Globalization.JapaneseCalendar" /> typ nie obsługuje pojęcie miesiąca przestępnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W kalendarzu, który obsługuje pojęcie miesiąca przestępnym miesiąc przestępnym może wystąpić po upływie danego miesiąca lub po miesiącu w roku. Na przykład <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> metoda zwraca liczbę z zakresu od 1 do 13, wskazującą miesiąca skojarzone z określoną datą. W przypadku miesiąca przestępnym między ósmej i dziewiątego miesiące roku, <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> metoda zwraca 8 ósmego miesiąca 9 na potrzeby przestępnym ósmego miesiąca i 10 dziewiątego miesiąca.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> lub <paramref name="era" /> znajduje się poza zasięgiem obsługiwanym przez <see cref="T:System.Globalization.JapaneseCalendar" /> typu.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonth">
      <MemberSignature Language="C#" Value="public override int GetMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonth(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetMonth : DateTime -&gt; int" Usage="japaneseCalendar.GetMonth time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca miesiąc w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Liczba całkowita z zakresu od 1 do 12 reprezentująca miesiąc w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Month" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthsInYear">
      <MemberSignature Language="C#" Value="public override int GetMonthsInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonthsInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonthsInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonthsInYear(int year, int era);" />
      <MemberSignature Language="F#" Value="override this.GetMonthsInYear : int * int -&gt; int" Usage="japaneseCalendar.GetMonthsInYear (year, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Zwraca liczbę miesięcy w określonego roku w określonym ery.</summary>
        <returns>Wartość zwracana jest zawsze 12.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Globalization.JapaneseCalendar.GetMonthsInYear%2A> w pierwszych pięciu lat w każdej erze. Ponieważ <xref:System.Globalization.JapaneseCalendar> klasy obsługuje tylko lat 12-miesięcznego, oznacza to, czy istnieje przez 12 miesięcy w każdej ery obsługiwane przez <xref:System.Globalization.JapaneseCalendar> klasy. 
  
 [!code-cpp[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetMonthsInYear/CPP/japanesecalendar_getmonthsinyear.cpp)]
 [!code-csharp[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetMonthsInYear/CS/japanesecalendar_getmonthsinyear.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.GetMonthsInYear/VB/japanesecalendar_getmonthsinyear.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetWeekOfYear">
      <MemberSignature Language="C#" Value="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetWeekOfYear (time As DateTime, rule As CalendarWeekRule, firstDayOfWeek As DayOfWeek) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetWeekOfYear(DateTime time, System::Globalization::CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
      <MemberSignature Language="F#" Value="override this.GetWeekOfYear : DateTime * System.Globalization.CalendarWeekRule * DayOfWeek -&gt; int" Usage="japaneseCalendar.GetWeekOfYear (time, rule, firstDayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rule" Type="System.Globalization.CalendarWeekRule" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="firstDayOfWeek" Type="System.DayOfWeek" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <param name="rule">Jedną z <see cref="T:System.Globalization.CalendarWeekRule" /> wartości, które definiuje tydzień kalendarza.</param>
        <param name="firstDayOfWeek">Jedną z <see cref="T:System.DayOfWeek" /> wartości, które reprezentuje pierwszy dzień tygodnia.</param>
        <summary>Zwraca tydzień roku, która zawiera datę w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Od 1 liczby całkowitej reprezentującej tydzień roku, która zawiera datę w <paramref name="time" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może służyć do określenia liczby tygodni w roku, ustawiając `time` parametr ostatni dzień roku.  
  
 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Właściwości zawiera wartości specyficzne dla kultury, które mogą służyć do `rule` i `firstDayOfWeek` parametrów.  
  
 <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> Właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> zawiera domyślną <xref:System.DayOfWeek> wartość, która reprezentuje pierwszy dzień tygodnia dla określonej kultury, przy użyciu kalendarza, określone w <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>.  
  
 <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> Właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> zawiera domyślną <xref:System.Globalization.CalendarWeekRule> wartość, która definiuje tydzień kalendarza dla określonej kultury, przy użyciu kalendarza, określone w <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>.  
  
 Na przykład w <xref:System.Globalization.GregorianCalendar>, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> 1 stycznia metoda zwraca wartość 1.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład sposobu wynik <xref:System.Globalization.Calendar.GetWeekOfYear%2A> zmienia się zależnie od <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> i <xref:System.Globalization.CalendarWeekRule> wartości używane. Jeśli określona data jest ostatni dzień tego roku, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> zwraca całkowitą liczbę tygodni w danym roku.  
  
 [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/CPP/yslin_calendar_getweekofyear.cpp#1)]
 [!code-csharp[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/CS/yslin_calendar_getweekofyear.cs#1)]
 [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.Calendar.GetWeekOfYear/VB/yslin_calendar_getweekofyear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time" /> lub <paramref name="firstDayOfWeek" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="rule" /> nie jest prawidłowym <see cref="T:System.Globalization.CalendarWeekRule" /> wartość.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetYear">
      <MemberSignature Language="C#" Value="public override int GetYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetYear(DateTime time);" />
      <MemberSignature Language="F#" Value="override this.GetYear : DateTime -&gt; int" Usage="japaneseCalendar.GetYear time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time"><see cref="T:System.DateTime" /> Do odczytu.</param>
        <summary>Zwraca rok w określonym <see cref="T:System.DateTime" />.</summary>
        <returns>Liczba całkowita, która reprezentuje rok w określonym <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla wartości kilka składników, <xref:System.DateTime> pod względem Kalendarz japoński.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CPP/japanesecalendar_addget.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/CS/japanesecalendar_addget.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_AddGet/VB/japanesecalendar_addget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Year" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)" />
        <altmember cref="M:System.Globalization.Calendar.GetHour(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMinute(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetSecond(System.DateTime)" />
        <altmember cref="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapDay">
      <MemberSignature Language="C#" Value="public override bool IsLeapDay (int year, int month, int day, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapDay (year As Integer, month As Integer, day As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapDay(int year, int month, int day, int era);" />
      <MemberSignature Language="F#" Value="override this.IsLeapDay : int * int * int * int -&gt; bool" Usage="japaneseCalendar.IsLeapDay (year, month, day, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="month">Liczba całkowita z zakresu od 1 do 12 reprezentująca miesiąc.</param>
        <param name="day">Liczba całkowita z zakresu od 1 do 31 reprezentującą dzień.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Określa, czy określonej daty w określonym era jest dniem przestępnym.</summary>
        <returns><see langword="true" />, jeśli określony dzień jest dniem przestępnym; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przestępnego w kalendarza japońskiego odpowiadają tym samym przestępnego w kalendarzu gregoriańskim. W roku przestępnym w kalendarzu gregoriańskim jest zdefiniowana jako rok gregoriański, który jest podzielny przez cztery, z wyjątkiem sytuacji, gdy jest podzielna przez 100. Jednak lat gregoriański, które są podzielna przez 400 są przestępnego. Typowe roku wygaśnie za 365 dni, a dla roku przestępnego ma 366 dni.  
  
 Przestępnym dzień to dzień, w którym występuje tylko w roku przestępnym. Na przykład w dniu 29 Nigatsu (luty) jest tylko dniem przestępnym.  
  
## Examples

Poniższy przykład wywołuje <xref:System.Globalization.JapaneseCalendar.IsLeapDay%2A> w ciągu ostatniego dnia miesiąca (luty) przez okres pięciu lat w każdej ery. Bieżącej ery w przykładowych danych wyjściowych jest ery Reiwa. 
  
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapDay/CPP/japanesecalendar_isleapday.cpp)]
 [!code-csharp[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapDay/CS/japanesecalendar_isleapday.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapDay/VB/japanesecalendar_isleapday.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="month" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="day" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapMonth">
      <MemberSignature Language="C#" Value="public override bool IsLeapMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapMonth (year As Integer, month As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapMonth(int year, int month, int era);" />
      <MemberSignature Language="F#" Value="override this.IsLeapMonth : int * int * int -&gt; bool" Usage="japaneseCalendar.IsLeapMonth (year, month, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="month">Liczba całkowita z zakresu od 1 do 12 reprezentująca miesiąc.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Określa, czy określonego miesiąca określonego roku w erze określonego miesiąca przestępnym.</summary>
        <returns>Ta metoda zawsze zwraca <see langword="false" />, chyba że zostaną zastąpione w klasie pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przestępnego w kalendarza japońskiego odpowiadają tym samym przestępnego w kalendarzu gregoriańskim. W roku przestępnym w kalendarzu gregoriańskim jest zdefiniowana jako rok gregoriański, który jest podzielny przez cztery, z wyjątkiem sytuacji, gdy jest podzielna przez 100. Jednak lat gregoriański, które są podzielna przez 400 są przestępnego. Typowe roku wygaśnie za 365 dni, a dla roku przestępnego ma 366 dni.  
  
 Miesiąc przestępnym jest cały miesiąc, który występuje tylko w roku przestępnym. Kalendarz japoński nie ma żadnych miesięcy przestępnym.  
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Globalization.JapaneseCalendar.IsLeapMonth%2A> dla wszystkich miesięcy w pierwszych pięciu lat w bieżącej ery.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapMonth/CPP/japanesecalendar_isleapmonth.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapMonth/CS/japanesecalendar_isleapmonth.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapMonth/VB/japanesecalendar_isleapmonth.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="month" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public override bool IsLeapYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapYear (year As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapYear(int year, int era);" />
      <MemberSignature Language="F#" Value="override this.IsLeapYear : int * int -&gt; bool" Usage="japaneseCalendar.IsLeapYear (year, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Określa, czy określony rok w określonym ery rokiem przestępnym.</summary>
        <returns><see langword="true" />, jeśli określony rok jest rokiem przestępnym; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przestępnego w kalendarza japońskiego odpowiadają tym samym przestępnego w kalendarzu gregoriańskim. W roku przestępnym w kalendarzu gregoriańskim jest zdefiniowana jako rok gregoriański, który jest podzielny przez cztery, z wyjątkiem sytuacji, gdy jest podzielna przez 100. Jednak lat gregoriański, które są podzielna przez 400 są przestępnego. Typowe roku wygaśnie za 365 dni, a dla roku przestępnego ma 366 dni.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Globalization.JapaneseCalendar.IsLeapYear%2A> przez okres pięciu lat w każdej ery. Bieżącej ery w przykładowych danych wyjściowych jest ery Reiwa. 
  
 [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapYear/CPP/japanesecalendar_isleapyear.cpp)]
 [!code-csharp[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapYear/CS/japanesecalendar_isleapyear.cs)]
 [!code-vb[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar.IsLeapYear/VB/japanesecalendar_isleapyear.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MaxSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MaxSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MaxSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MaxSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MaxSupportedDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxSupportedDateTime : DateTime" Usage="System.Globalization.JapaneseCalendar.MaxSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera najnowsze datę i godzinę, obsługiwane przez bieżącą <see cref="T:System.Globalization.JapaneseCalendar" /> obiektu.</summary>
        <value>Najnowsze datę i godzinę, obsługiwane przez <see cref="T:System.Globalization.JapaneseCalendar" /> typ, który jest równoważne z ostatniej chwili 31 grudnia 9999 r. w kalendarzu gregoriańskim.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod pobiera wartość minimalną i maksymalną wartość kalendarza.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/CPP/japanesecalendar_minmax.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/CS/japanesecalendar_minmax.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/VB/japanesecalendar_minmax.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MinSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MinSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MinSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MinSupportedDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.MinSupportedDateTime : DateTime" Usage="System.Globalization.JapaneseCalendar.MinSupportedDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera Najwcześniejsza data i godzina, o których obsługiwane przez bieżącą <see cref="T:System.Globalization.JapaneseCalendar" /> obiektu.</summary>
        <value>Najwcześniejsza data i godzina, o których obsługiwane przez <see cref="T:System.Globalization.JapaneseCalendar" /> typ, który jest odpowiednikiem pierwszej chwili 8 września 1868 r. w kalendarzu gregoriańskim.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najwcześniejsza data obsługiwana przez <xref:System.Globalization.JapaneseCalendar> klasa jest 8 września 1868 r, w pierwszym roku ery Meiji. Zazwyczaj, datę i godzinę operacji korzystających z <xref:System.Globalization.JapaneseCalendar> throw klasy <xref:System.ArgumentOutOfRangeException> wyjątek dla daty przed tą datą. Jednak niektóre elementy członkowskie, takie jak <xref:System.Globalization.JapaneseCalendar.GetEra%2A> metody obsługuje dat od 1 stycznia 1868 za pośrednictwem 7 września w roku Meiji 1.  
  
   
  
## Examples  
 Poniższy przykład pobiera daty najwcześniejszej i najnowszych obsługiwanym przez kalendarz.  
  
 [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/CPP/japanesecalendar_minmax.cpp#1)]
 [!code-csharp[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/CS/japanesecalendar_minmax.cs#1)]
 [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.JapaneseCalendar_MinMax/VB/japanesecalendar_minmax.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToDateTime (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="F#" Value="override this.ToDateTime : int * int * int * int * int * int * int * int -&gt; DateTime" Usage="japaneseCalendar.ToDateTime (year, month, day, hour, minute, second, millisecond, era)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita, która reprezentuje rok.</param>
        <param name="month">Liczba całkowita z zakresu od 1 do 12 reprezentująca miesiąc.</param>
        <param name="day">Liczba całkowita z zakresu od 1 do 31 reprezentującą dzień.</param>
        <param name="hour">Liczba całkowita z zakresu od 0 do 23 reprezentująca godzinę.</param>
        <param name="minute">Liczba całkowita z zakresu od 0 do 59 reprezentująca minutę.</param>
        <param name="second">Liczba całkowita z zakresu od 0 do 59 reprezentującą sekundę.</param>
        <param name="millisecond">Liczba całkowita z zakresu od 0 do 999 reprezentujący milisekund.</param>
        <param name="era">Liczba całkowita, która reprezentuje ery.</param>
        <summary>Zwraca <see cref="T:System.DateTime" /> który jest skonfigurowany do określonej daty i godziny w erze określony.</summary>
        <returns><see cref="T:System.DateTime" /> Który jest skonfigurowany do określonej daty i godziny w bieżącej ery.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.JapaneseCalendar.ToDateTime%2A> Metoda jest przydatna, ponieważ umożliwia on konwertowanie dowolną datę w bieżącym kalendarzu na datę w kalendarzu gregoriańskim. Data gregoriańska później można, na przykład porównaniu dat w kalendarzach lub utworzyć odpowiada dacie w kalendarzu określonej.  

Ponieważ <xref:System.Globalization.JapaneseCalendar> obsługuje wiele er, oparte na reign z imperatora, należy zawsze wywołać tę metodę i jawne określenie ery, aby uniknąć niezamierzonego daty i celem zwykłego kodu. W przykładzie pokazano sposób tworzenia wystąpienia daty, który jest zawsze w bieżącej ery i taki, który należy do określonej ery.

## Examples

Poniższy przykład tworzy dwie daty. Pierwszy jest zawsze pierwszego dnia drugiego roku w bieżącej ery, podczas gdy drugi identyfikuje określonym dniu w erze Taisho. Dane wyjściowe z przykładu został utworzony za pomocą ery Heisei jako bieżącej ery.

[!code-csharp[Specifying the era](~/samples/snippets/csharp/api/system.globalization/japanesecalendar/todatetime/program.cs)]
[!code-vb[Specifying the era](~/samples/snippets/visualbasic/api/system.globalization/japanesecalendar/todatetime/Program.vb)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="month" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="day" /> znajduje się poza zakresem obsługiwanym przez kalendarz.  
  
—lub— 
 <paramref name="hour" /> jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" /> jest mniejsza od zera lub większa niż 59.  
  
—lub— 
 <paramref name="second" /> jest mniejsza od zera lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" /> jest mniejsza od zera lub większa niż 999.  
  
—lub— 
 <paramref name="era" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="F:System.Globalization.Calendar.CurrentEra" />
        <altmember cref="P:System.Globalization.JapaneseCalendar.Eras" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
        <altmember cref="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToFourDigitYear">
      <MemberSignature Language="C#" Value="public override int ToFourDigitYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ToFourDigitYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToFourDigitYear (year As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ToFourDigitYear(int year);" />
      <MemberSignature Language="F#" Value="override this.ToFourDigitYear : int -&gt; int" Usage="japaneseCalendar.ToFourDigitYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Liczba całkowita (zazwyczaj dwie cyfry) reprezentujący roku do przekonwertowania.</param>
        <summary>Konwertuje określony rok z rokiem czterocyfrowym przy użyciu <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> właściwości w celu określenia odpowiedniego wieku.</summary>
        <returns>Liczba całkowita, która zawiera reprezentację czterocyfrowy <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda implementuje <xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=nameWithType>.  
  
 Ponieważ rok Kalendarz japoński jest zazwyczaj mniej niż cztery cyfry, ta implementacja zawsze zwraca wartość `year` parametru.  
  
 <xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A> obsługuje dwucyfrowy rok lub rok w postaci czterech cyfr. Jednak prawidłowy rok ogólnie jest reprezentowany w postaci dwóch cyfr (mniej niż 100). Przekazywanie wartości dwucyfrowy rok powoduje, że metoda można przekonwertować wartości na wartość czterech cyfr, zgodnie z opisem w <xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax%2A> reprezentującą odpowiednie wieku. Jeśli aplikacja dostarcza wartość czterech cyfr lub dostarcza mu zero lub wartość ujemną <xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A> zgłasza wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> znajduje się poza zakresem obsługiwanym przez kalendarz.</exception>
        <altmember cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="TwoDigitYearMax">
      <MemberSignature Language="C#" Value="public override int TwoDigitYearMax { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TwoDigitYearMax" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TwoDigitYearMax As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TwoDigitYearMax { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TwoDigitYearMax : int with get, set" Usage="System.Globalization.JapaneseCalendar.TwoDigitYearMax" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ostatni rok zakresie roku 100, który może być reprezentowany przez rok 2-cyfrowy.</summary>
        <value>Ostatni rok zakresie roku 100, który może być reprezentowany przez rok 2-cyfrowy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość implementuje <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>.  
  
 Ponieważ rok Kalendarz japoński jest zazwyczaj mniej niż cztery cyfry, ta implementacja domyślnie zwraca 99 i nie ma wpływu na wartość zwracaną przez <xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość określona w operacji zestawu jest mniejsza niż 99.  
  
—lub— 
Wartość określona w operacji zestawu jest większa niż 8011 (lub <see langword="MaxSupportedDateTime.Year" />).</exception>
        <exception cref="T:System.InvalidOperationException">W operacji zestawu bieżące wystąpienie jest tylko do odczytu.</exception>
        <altmember cref="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>