<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="74c6c66dff2597d4ecc52423763091a341058522" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69357771" /></Metadata><TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pobiera informacje o znaku Unicode. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123) definiuje wiele kategorii znaków Unicode. Na przykład znak może być skategoryzowany jako Wielka litera, mała litera, cyfra dziesiętna, numer litery, separator akapitu, symbol matematyczny lub symbol waluty. Aplikacja może używać kategorii znaków do zarządzania operacjami opartymi na ciągach, takich jak analizowanie lub wyodrębnianie podciągów z wyrażeniami regularnymi. <xref:System.Globalization.UnicodeCategory> Wyliczenie definiuje możliwe kategorie znaków.  
  
 Użyj klasy, <xref:System.Globalization.CharUnicodeInfo> aby <xref:System.Globalization.UnicodeCategory> uzyskać wartość dla określonego znaku. <xref:System.Globalization.CharUnicodeInfo> Klasa definiuje metody, które zwracają następujące wartości znaków Unicode:  
  
-   Określona Kategoria, do której należy znak lub para dwuskładnikowa. Zwracana wartość jest elementem członkowskim <xref:System.Globalization.UnicodeCategory> wyliczenia.  
  
-   Wartość numeryczna. Stosuje się tylko do znaków numerycznych, w tym ułamków, indeksów dolnych, znaków łacińskich, cyfr rzymskich, liczebników walutowych i cyfr specyficznych dla skryptu.  
  
-   Wartość cyfry. Dotyczy znaków numerycznych, które mogą być połączone z innymi znakami liczbowymi w celu reprezentowania liczby całkowitej w systemie numeracji.  
  
-   Wartość cyfry dziesiętnej. Dotyczy tylko znaków, które reprezentują cyfry dziesiętne w systemie dziesiętnym (podstawowy 10). Cyfra dziesiętna może być jedną z dziesięciu cyfr, od zera do dziewięciu. Te znaki są członkami <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> kategorii.  
  
 Ponadto <xref:System.Globalization.CharUnicodeInfo> Klasa jest używana wewnętrznie przez wiele innych typów .NET Framework i metod, które opierają się na klasyfikacji znaków. Należą do nich następujące elementy:  
  
-   <xref:System.Globalization.StringInfo> Klasa, która współpracuje z elementami tekstowymi, a nie pojedynczymi znakami w ciągu.  
  
-   Przeciążenia <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metody, które określają kategorię, do której należy znak lub para dwuskładnikowa.  
  
-   [Klasy znaków](~/docs/standard/base-types/character-classes-in-regular-expressions.md) rozpoznawane przez <xref:System.Text.RegularExpressions.Regex>, aparat wyrażeń regularnych .NET Framework.  
  
 Korzystając z tej klasy w aplikacjach, należy pamiętać o następujących kwestiach związanych z programowaniem w <xref:System.Char> przypadku korzystania z tego typu. Typ może być trudny do użycia, a ciągi są zwykle preferowane do reprezentowania zawartości lingwistycznej.  
  
-   <xref:System.Char> Obiekt nie zawsze odpowiada pojedynczemu znakowi. <xref:System.Char> Chociaż typ reprezentuje pojedynczą wartość 16-bitową, niektóre znaki (takie jak klastry Grapheme i pary surogatów) składają się z dwóch lub więcej jednostek kodu UTF-16. Aby uzyskać więcej informacji, zobacz "znaki obiektów i znaków Unicode" w <xref:System.String> klasie.  
  
-   Pojęcie "Character" jest również elastyczne. Znak jest często uważany za symbol, ale wiele symboli wymaga wielu punktów kodowych. Na przykład ä może być reprezentowane przez dwa punkty kodu ("a" i U + 0308, które są łączące się z diaerezą) lub przez pojedynczy punkt kodu ("ä" lub U + 00A4). Niektóre języki zawierają wiele liter, znaków i symboli, które wymagają wielu punktów kodowych, co może spowodować pomyłkę w reprezentacji zawartości lingwistycznej. Na przykład istnieje ΰ (U + 03B0, mała grecka litera Ypsilon z dialytika i akcent), ale nie istnieje odpowiednik wielkiej litery. Uppercasing takich wartości po prostu pobiera oryginalną wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage"><para>Rozpoznane znaki i określone kategorie, do których należą, są zdefiniowane przez standard Unicode i mogą ulec zmianie z jednej wersji standardu Unicode na inną. Kategoryzacja znaków w określonej wersji .NET Framework jest oparta na jednej wersji standardu Unicode niezależnie od systemu operacyjnego, w którym jest uruchomiony .NET Framework. W poniższej tabeli wymieniono wersje .NET Framework od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i wersje standardu Unicode używane do klasyfikowania znaków.  
  
 <list type="table"><listheader><term> Wersja programu .NET Framework 
 </term><description> Wersja Unicode Standard 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Standard Unicode w wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Standard Unicode w wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Standard Unicode w wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Standard Unicode w wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Standard Unicode w wersji 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Standard Unicode w wersji 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Standard Unicode w wersji 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  

 Każda wersja standardu Unicode zawiera informacje o zmianach w bazie danych znaków Unicode od poprzedniej wersji. Baza danych znaków Unicode jest używana przez <see cref="T:System.Globalization.CharUnicodeInfo" /> klasę do kategoryzacji znaków.</para></block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość cyfry dziesiętnej numerycznego znaku Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać uzyskana wartość cyfry dziesiętnej.</param>
        <summary>Pobiera wartość cyfry dziesiętnej określonego znaku numerycznego.</summary>
        <returns>Wartość cyfry dziesiętnej określonego znaku numerycznego.  
  
 —lub—  
  
 -1, jeśli określony znak nie jest cyfrą dziesiętną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki reprezentujące cyfry dziesiętne na ich równoważne wartości całkowite. Cyfry dziesiętne są znakami <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> w kategorii, które mogą reprezentować jedną z dziesięciu cyfr w systemie numeracji dziesiętnej (podstawowa 10), od zera do dziewięciu. Zawiera ona znaki takie jak U + 0030 (CYFRa ZERO) przez U + 0039 (CYFRa dziewięć), U + 0660 (cyfry arabskie i INDYJSKIe ZERO) do u + 0669 (cyfry arabskie-INDYJSKIe dziewięciu), U + 07C0 (NKO cyfry ZERO) do u + 1049 CYFRA MYANMARU DZIEWIĘĆ).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><see cref="T:System.String" /> Zawierający znak Unicode, dla którego ma zostać uzyskana wartość cyfry dziesiętnej.</param>
        <param name="index">Indeks znaku Unicode, dla którego ma zostać uzyskana wartość cyfry dziesiętnej.</param>
        <summary>Pobiera wartość cyfry dziesiętnej znaku numerycznego w określonym indeksie określonego ciągu.</summary>
        <returns>Wartość cyfry dziesiętnej znaku numerycznego w określonym indeksie określonego ciągu.  
  
 —lub—  
  
 -1, jeśli znak w określonym indeksie określonego ciągu nie jest cyfrą dziesiętną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki reprezentujące cyfry dziesiętne na ich równoważne wartości całkowite. Cyfry dziesiętne są znakami <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> w kategorii, które mogą reprezentować jedną z dziesięciu cyfr w systemie numeracji dziesiętnej (podstawowa 10), od zera do dziewięciu. Zawiera ona znaki takie jak U + 0030 (CYFRa ZERO) przez U + 0039 (CYFRa dziewięć), U + 0660 (cyfry arabskie i INDYJSKIe ZERO) do u + 0669 (cyfry arabskie-INDYJSKIe dziewięciu), U + 07C0 (NKO cyfry ZERO) do u + 1049 CYFRA MYANMARU DZIEWIĘĆ).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />znajduje się poza zakresem prawidłowych indeksów <paramref name="s" />w.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość cyfrową numerycznego znaku Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać uzyskana wartość liczbowa.</param>
        <summary>Pobiera wartość cyfry określonego znaku numerycznego.</summary>
        <returns>Wartość cyfry określonego znaku numerycznego.  
  
 —lub—  
  
 -1, jeśli określony znak nie jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfra to właściwość, która ma zastosowanie tylko do znaków numerycznych, które mogą być używane jako cyfry. Cyfra jest znakiem numerycznym, który może być połączony z innymi cyframi, aby reprezentować liczbę całkowitą w systemie numeracji.  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><see cref="T:System.String" /> Zawierający znak Unicode, dla którego ma zostać uzyskana wartość cyfry.</param>
        <param name="index">Indeks znaku Unicode, dla którego ma zostać uzyskana wartość liczbowa.</param>
        <summary>Pobiera wartość cyfry znaku numerycznego w określonym indeksie określonego ciągu.</summary>
        <returns>Wartość cyfry znaku numerycznego w określonym indeksie określonego ciągu.  
  
 —lub—  
  
 -1, jeśli znak w określonym indeksie określonego ciągu nie jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfra to właściwość, która ma zastosowanie tylko do znaków numerycznych, które mogą być używane jako cyfry. Cyfra jest znakiem numerycznym, który może być połączony z innymi cyframi, aby reprezentować liczbę całkowitą w systemie numeracji.  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />znajduje się poza zakresem prawidłowych indeksów <paramref name="s" />w.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość liczbową skojarzoną ze znakiem Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać uzyskana wartość liczbowa.</param>
        <summary>Pobiera wartość liczbową skojarzoną z określonym znakiem.</summary>
        <returns>Wartość liczbowa skojarzona z określonym znakiem.  
  
 —lub—  
  
 -1, jeśli określony znak nie jest znakiem numerycznym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwością znaku Unicode, która ma zastosowanie tylko do znaków numerycznych, takich jak ułamki, indeksy dolne, górne, cyfry rzymskie, liczniki walutowe i cyfry zależne od skryptu. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Metoda zakłada, że `ch` odpowiada pojedynczym znakom językowym i sprawdza, czy ten znak może być konwertowany na cyfrę dziesiętną. <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Jednak niektóre liczby w standardzie Unicode są reprezentowane przez dwa <xref:System.Char> obiekty tworzące parę zastępczą. Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. W poniższym przykładzie zastosowano <xref:System.Char.ConvertFromUtf32%2A> metodę w celu utworzenia wystąpienia ciągu reprezentującego numer Morza Egejskiego. Jak wynika z przykładu, <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Metoda zwraca wartość-1, jeśli jest przekazana albo górny Surogat lub niski Surogat tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><see cref="T:System.String" /> Zawierający znak Unicode, dla którego ma zostać uzyskana wartość liczbowa.</param>
        <param name="index">Indeks znaku Unicode, dla którego ma zostać uzyskana wartość liczbowa.</param>
        <summary>Pobiera wartość liczbową skojarzoną ze znakiem w określonym indeksie określonego ciągu.</summary>
        <returns>Wartość liczbowa skojarzona ze znakiem w określonym indeksie określonego ciągu.  
  
 —lub—  
  
 -1, jeśli znak w określonym indeksie określonego ciągu nie jest znakiem numerycznym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwością znaku Unicode, która ma zastosowanie tylko do znaków numerycznych, takich jak ułamki, indeksy dolne, górne, cyfry rzymskie, liczniki walutowe i cyfry zależne od skryptu. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli obiekt w położeniu `index` jest pierwszym znakiem <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> prawidłowej pary zastępczej, Metoda określa, czy para zastępcza tworzy cyfrę numeryczną, a jeśli tak, zwraca jej wartość numeryczną. <xref:System.Char> Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. Poniższy przykład używa <xref:System.Char.ConvertFromUtf32%2A> metody do tworzenia wystąpienia ciągu, który reprezentuje każdy numer Morza Egejskiego. Jako dane wyjściowe z przykładu pokazuje, <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> Metoda zwraca poprawną wartość liczbową, jeśli jest przekazana górny Surogat numeru Morza Egejskiego. Jeśli jednak przeszedł niski Surogat, bierze pod uwagę tylko niski Surogat w izolacji i zwróci wartość-1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />znajduje się poza zakresem prawidłowych indeksów <paramref name="s" />w.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera kategorię Unicode znaku Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać uzyskana kategoria Unicode.</param>
        <summary>Pobiera kategorię Unicode określonego znaku.</summary>
        <returns><see cref="T:System.Globalization.UnicodeCategory" /> Wartość wskazująca kategorię określonego znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znaku jest jedną z jej właściwości. Na przykład znak może być wielką literą, małą literą, cyfrą dziesiętną, numerem litery, interpunkcją łącznika, symbolem matematycznym lub symbolem waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca kategorię znaku Unicode. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Metoda zakłada, że `ch` odpowiada pojedynczym znakom językowym i zwraca jego kategorię. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> Oznacza to, że w przypadku par zastępczych zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> zamiast kategorii, do której należy element zastępczy. Na przykład alfabet Ugaritic zajmuje punkty kodu U + 10380 do U + 1039F. Poniższy przykład używa <xref:System.Char.ConvertFromUtf32%2A> metody do tworzenia wystąpienia ciągu, który reprezentuje Ugaritic literę Alpa (U + 10380), która jest pierwszą literą alfabetu Ugaritic. Ponieważ dane wyjściowe z przykładu są wyświetlane, <xref:System.Char.IsNumber%28System.Char%29> Metoda zwraca `false` , jeśli jest przekazywane górny Surogat lub niski Surogat tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Należy pamiętać <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> , że nie zawsze zwraca taką <xref:System.Globalization.UnicodeCategory> samą wartość jak <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> Metoda, gdy przekazał określony znak jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metoda jest zaprojektowana tak, aby odzwierciedlała bieżącą wersję standardu Unicode. Natomiast, chociaż <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> Metoda zwykle odzwierciedla bieżącą wersję standardu Unicode, może zwrócić kategorię znaku w oparciu o poprzednią wersję standardu lub może zwrócić kategorię, która różni się od bieżącego standardu do zachowanie zgodności z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><see cref="T:System.String" /> Zawierający znak Unicode, dla którego ma zostać uzyskana kategoria Unicode.</param>
        <param name="index">Indeks znaku Unicode, dla którego ma zostać uzyskana kategoria Unicode.</param>
        <summary>Pobiera kategorię Unicode znaku w określonym indeksie określonego ciągu.</summary>
        <returns><see cref="T:System.Globalization.UnicodeCategory" /> Wartość wskazująca kategorię znaku w określonym indeksie określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znaku jest jedną z jej właściwości. Na przykład znak może być wielką literą, małą literą, cyfrą dziesiętną, numerem litery, interpunkcją łącznika, symbolem matematycznym lub symbolem waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca kategorię znaku Unicode. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli obiekt w położeniu `index` jest pierwszym znakiem <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> prawidłowej pary dwuskładnikowej, metoda zwraca kategorię Unicode pary zastępczej zamiast zwracać <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. <xref:System.Char> Na przykład alfabet Ugaritic zajmuje punkty kodu U + 10380 do U + 1039F. Poniższy przykład używa <xref:System.Char.ConvertFromUtf32%2A> metody do tworzenia wystąpienia ciągu, który reprezentuje Ugaritic literę Alpa (U + 10380), która jest pierwszą literą alfabetu Ugaritic. Ponieważ dane wyjściowe z przykładu są wyświetlane, <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> Metoda zwraca <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> , jeśli jest przekazywane górny Surogat tego znaku, co wskazuje na to, że traktuje parę surogatu. Jeśli jednak przeszedł niski Surogat, uwzględnia on tylko dolny Surogat w izolacji i zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Należy pamiętać <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> , że metoda nie zawsze zwraca tę <xref:System.Globalization.UnicodeCategory> samą wartość, <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> co metoda, gdy przekazał określony znak jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metoda jest zaprojektowana tak, aby odzwierciedlała bieżącą wersję standardu Unicode. Natomiast, chociaż <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> Metoda zwykle odzwierciedla bieżącą wersję standardu Unicode, może zwrócić kategorię znaku w oparciu o poprzednią wersję standardu lub może zwrócić kategorię, która różni się od bieżącego standardu do zachowanie zgodności z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdą metodę dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />znajduje się poza zakresem prawidłowych indeksów <paramref name="s" />w.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>
