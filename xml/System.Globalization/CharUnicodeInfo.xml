<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ccce2910a4409725858671f177b4fdfb5609d233" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36486790" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pobiera informacje o znak Unicode. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) definiuje liczbę kategorie znaków Unicode. Na przykład znak może być podzielone na wielką literę, małą literę, dziesiętną wartością cyfrową, numer litera, separator akapitu, symbol matematyczne lub symbol waluty. Aplikacja może używać kategorii znaków dotyczące operacji oparte na ciągach, takich jak analizy lub wyodrębnianie podciągu za pomocą wyrażeń regularnych. <xref:System.Globalization.UnicodeCategory> Wyliczenie definiuje kategorie możliwe znaków.  
  
 Możesz użyć <xref:System.Globalization.CharUnicodeInfo> klasy uzyskanie <xref:System.Globalization.UnicodeCategory> wartości dla określonego znaku. <xref:System.Globalization.CharUnicodeInfo> Klasa definiuje metody, które zwracają następujące wartości znakowych Unicode:  
  
-   Określonej kategorii, do której należy pary znaków lub dwuskładnikowego. Wartość zwracana jest elementem członkowskim <xref:System.Globalization.UnicodeCategory> wyliczenia.  
  
-   Wartość liczbowa. Dotyczy tylko znaków alfanumerycznych, w tym ułamków, indeksy dolne indeksów górnych, łacińskich cyfry, łącznik waluty, numery otoczony i cyfr specyficzne dla skryptu.  
  
-   Wartość cyfr. Stosuje się do cyfry, które można łączyć z innymi znakami liczbowe do reprezentowania liczbą całkowitą w numeracji systemu.  
  
-   Wartość dziesiętną wartością cyfrową. Dotyczy tylko znaki, które reprezentują cyfr dziesiętnych systemu dziesiętnego (o podstawie 10). Cyfra dziesiętna może być jednym z 10 cyfr, od 0 do 9. Następujące znaki są elementami członkowskimi <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> kategorii.  
  
 Ponadto <xref:System.Globalization.CharUnicodeInfo> klasa jest używana wewnętrznie przez wiele innych typów .NET Framework i metod, które opierają się na klasyfikacji znaków. Należą do nich następujące elementy:  
  
-   <xref:System.Globalization.StringInfo> Klasy, która współdziała z elementów tekstowych zamiast pojedynczy znaki w ciągu.  
  
-   Przeciążeń <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodę, która określenia kategorii, do której należy pary znaków lub dwuskładnikowego.  
  
-   [Klasy znaku](~/docs/standard/base-types/character-classes-in-regular-expressions.md) rozpoznał <xref:System.Text.RegularExpressions.Regex>, aparat wyrażeń regularnych programu .NET Framework.  
  
 Korzystając z tej klasy w aplikacjach, Zachowaj na uwadze następujące programowania zagadnienia dotyczące korzystania z <xref:System.Char> typu. Typ może być trudny do wykorzystania i ciągi są zazwyczaj najlepiej reprezentujący językowe zawartości.  
  
-   A <xref:System.Char> obiektu nie zawsze odpowiada pojedynczy znak. Mimo że <xref:System.Char> typu reprezentuje pojedynczą wartość 16-bitowych, niektóre znaki (na przykład klastrami grafemów i znaki dwuskładnikowe) składają się z dwóch lub więcej jednostek kodu UTF-16. Aby uzyskać więcej informacji, zobacz "Char obiektów i znaków Unicode" w <xref:System.String> klasy.  
  
-   Pojęcie "character" również jest elastyczny. Znak jest często traktować jako symbolu, ale wiele symboli wymagają wielu punktów kodu. Na przykład ä może być reprezentowany przez dwa punkty w kodzie ("a" i U + 0308, czyli diaerezą łączenie), lub przez punkt kodu pojedynczego a ("ä" lub U + 00A4). W przypadku niektórych języków może zawierać wiele litery, znaków i symboli wymagających wielu punktów kodu, co może powodować problemy interpretacyjne w przypadku reprezentacji zawartości. Na przykład istnieje ΰ (U + 03B0, grecki mała litera ypsilon akcent i akcentem), ale brak nie litera równoważne. Po prostu uppercasing takiej wartości pobiera oryginalnej wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Rozpoznany znaków i specyficznych kategorii, do których należą są definiowane przez standardu Unicode i można zmienić z jednej wersji Standard Unicode do innego. Klasyfikacja znaków w przypadku konkretnej wersji systemu .NET Framework jest oparta na jednej wersji Unicode Standard, niezależnie od tego, system operacyjny, na którym jest uruchomiony system .NET Framework. The following table lists versions of the .NET Framework since the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] and the versions of the Unicode Standard  used to classify characters.  <list type="table"><listheader><term> .NET Framework version  </term><description> Version of the Unicode Standard  </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  </term><description> [The Unicode Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  </term><description> [The Unicode Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  </term><description> [The Unicode Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  </term><description> [The Unicode Standard, Version 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  </term><description> [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  </term><description> [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  </term><description> [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  </description></item></list>  Each version of the Unicode standard includes information on changes to the Unicode character database since the previous version. Baza danych znaków Unicode jest używany przez <see cref="T:System.Globalization.CharUnicodeInfo" /> klasy do klasyfikacji znaków.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość dziesiętną wartością cyfrową liczbową znaków Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego można uzyskać wartość dziesiętną wartością cyfrową.</param>
        <summary>Pobiera wartość dziesiętną wartością cyfrową określonego znaku numerycznego.</summary>
        <returns>Wartość dziesiętną wartością cyfrową określonego znaku numerycznego.  - lub - -1, jeśli określony znak nie jest dziesiętną wartością cyfrową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki, które reprezentują cyfr dziesiętnych na równoważne wartości całkowite. Cyfr dziesiętnych są znaki w <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> kategorię, która może reprezentować jedną z 10 cyfr dziesiętnych (o podstawie 10) systemu od zera do dziewięciu numerowania. Zawiera znaki, takie jak U + 0030 (ZERO CYFR) za pośrednictwem U + 0039 (CYFRĘ 9), U + 0660 (ZERO CYFRĘ ARABSKI INDYJSKIEGO) za pośrednictwem U + 0669 (ARABSKI INDYJSKIEGO CYFRĘ 9), U + 07 C 0 (ZERO NKO CYFR) za pośrednictwem U + 07C 9 (NKO CYFRĘ 9) i U + 1040 (MYANMARU CYFRA ZERO) za pośrednictwem 1049 (U + MYANMARU CYFRA DZIEWIĘĆ).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość dziesiętną wartością cyfrową.</param>
        <param name="index">Indeks znaków Unicode, dla którego można uzyskać wartość dziesiętną wartością cyfrową.</param>
        <summary>Pobiera wartość dziesiętną wartością cyfrową znaku numerycznego pod określonym indeksem określonego ciągu.</summary>
        <returns>Wartość dziesiętną wartością cyfrową znaku numerycznego pod określonym indeksem określonego ciągu.  - lub - -1, jeśli znak pod określonym indeksem określony ciąg nie jest dziesiętną wartością cyfrową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki, które reprezentują cyfr dziesiętnych na równoważne wartości całkowite. Cyfr dziesiętnych są znaki w <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> kategorię, która może reprezentować jedną z 10 cyfr dziesiętnych (o podstawie 10) systemu od zera do dziewięciu numerowania. Zawiera znaki, takie jak U + 0030 (ZERO CYFR) za pośrednictwem U + 0039 (CYFRĘ 9), U + 0660 (ZERO CYFRĘ ARABSKI INDYJSKIEGO) za pośrednictwem U + 0669 (ARABSKI INDYJSKIEGO CYFRĘ 9), U + 07 C 0 (ZERO NKO CYFR) za pośrednictwem U + 07C 9 (NKO CYFRĘ 9) i U + 1040 (MYANMARU CYFRA ZERO) za pośrednictwem 1049 (U + MYANMARU CYFRA DZIEWIĘĆ).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem indeksów prawidłowy w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość cyfrę liczbową znaków Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego można uzyskać wartość cyfr.</param>
        <summary>Pobiera wartość cyfrę określonego znaku numerycznego.</summary>
        <returns>Wartość cyfrę określonego znaku numerycznego.  - lub - -1, jeśli określony znak nie jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfrę jest właściwością, która dotyczy tylko cyfry, które mogą być używane jako cyfr. Cyfrę jest znaku numerycznego, którą można łączyć z innymi cyfr do reprezentowania liczbą całkowitą w numeracji systemu.  
  
 Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość cyfr.</param>
        <param name="index">Indeks znaków Unicode, dla którego można uzyskać wartość cyfr.</param>
        <summary>Pobiera wartość cyfrę znaku numerycznego pod określonym indeksem określonego ciągu.</summary>
        <returns>Wartość cyfrę znaku numerycznego pod określonym indeksem określonego ciągu.  - lub - -1, jeśli znak pod określonym indeksem określony ciąg nie jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfrę jest właściwością, która dotyczy tylko cyfry, które mogą być używane jako cyfr. Cyfrę jest znaku numerycznego, którą można łączyć z innymi cyfr do reprezentowania liczbą całkowitą w numeracji systemu.  
  
 Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem indeksów prawidłowy w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość liczbową skojarzone z znak Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego można pobrać wartość liczbową.</param>
        <summary>Pobiera wartość liczbową skojarzone z określony znak.</summary>
        <returns>Wartość liczbowa skojarzone z określony znak.  - lub - -1, jeśli określony znak nie jest znaku numerycznego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwość znaków Unicode, która dotyczy tylko znaków alfanumerycznych, które obejmują ułamków, indeksy dolne indeksów górnych, łacińskich cyfry, łącznik waluty, numery otoczony i cyfr specyficzne dla skryptu. Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Metody, przy założeniu, że `ch` odpowiada pojedynczy znak językowe i sprawdza, czy ten znak może być konwertowane na dziesiętną wartością cyfrową. Jednak niektóre numery w standardzie Unicode są reprezentowane przez dwa <xref:System.Char> obiektów, które tworzą para zastępcza. Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody tworzenia wystąpienia ciąg reprezentujący Morza EGEJSKIEGO liczby jeden. Jako dane wyjściowe w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metoda zwraca wartość -1, jeśli został przekazany zastępczym wysokiego poziomu lub dwuskładnikowego tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość liczbową.</param>
        <param name="index">Indeks znaków Unicode, dla którego można pobrać wartość liczbową.</param>
        <summary>Pobiera wartość liczbową skojarzone z znaków w określonym indeksie określonego ciągu.</summary>
        <returns>Wartość liczbowa skojarzone z znaków w określonym indeksie określonego ciągu.  - lub - -1, jeśli znak pod określonym indeksem określony ciąg nie jest znaku numerycznego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwość znaków Unicode, która dotyczy tylko znaków alfanumerycznych, które obejmują ułamków, indeksy dolne indeksów górnych, łacińskich cyfry, łącznik waluty, numery otoczony i cyfr specyficzne dla skryptu. Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli <xref:System.Char> obiektu na pozycji `index` to pierwszy znak para zastępcza prawidłową <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> — Metoda określa, czy para zastępcza formularzy cyfrę, a jeśli tak, zwraca wartość liczbową. Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody tworzenia wystąpienia ciąg reprezentujący każdą liczbę Morza Egejskiego. Jako dane wyjściowe w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> , jeśli został przekazany liczby Morza Egejskiego znakiem zastępczym wysokiego poziomu, metoda zwraca prawidłową wartość liczbową. Jednak jeśli dwuskładnikowego został przekazany, traktuje dwuskładnikowego tylko izolacji i zwraca wartość -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem indeksów prawidłowy w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera kategorii Unicode znaku Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego można pobrać kategorii Unicode.</param>
        <summary>Pobiera kategorię określony znak Unicode.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> wartość wskazującą kategorii określony znak.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znaków jest jednym z jego właściwości. Na przykład znak może być wielką literę, małą literę, dziesiętną wartością cyfrową, numer litera, interpunkcją łącznika, symbol matematyczne lub symbol waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca, Kategoria znaków Unicode. Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> Metody, przy założeniu, że `ch` odnosi się do pojedynczego znaku językowe i zwraca jego kategorii. Oznacza to, że dla Znaki dwuskładnikowe, zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> zamiast Kategoria, do której należy surogatu. Na przykład Ugaritic alfabetu zajmuje punktów kodowych U + 10380 do U + 1039F. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody tworzenia wystąpienia ciąg reprezentujący ALPA UGARITIC litery (U + 10380), która jest pierwszą literę alfabetu Ugaritic. Jako dane wyjściowe w przykładzie pokazano <xref:System.Char.IsNumber%28System.Char%29> metoda zwraca `false` Jeśli przekazaniem zastępczym wysokiego poziomu lub dwuskładnikowego tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Należy pamiętać, że <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> nie zawsze zwraca takie same <xref:System.Globalization.UnicodeCategory> wartość jako <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metody po upływie określonego znaku jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metodę zaprojektowano w celu odzwierciedlenia bieżącej wersji Unicode standard. Z kolei mimo że <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda zazwyczaj odzwierciedla bieżącą wersję Unicode standard, może zwrócić kategorii znaków na podstawie poprzedniej wersji standard lub może zwrócić kategorię, która różni się od bieżącej standardowe, aby zachowania zgodności z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można pobrać kategorii Unicode.</param>
        <param name="index">Indeks znaków Unicode, dla którego można pobrać kategorii Unicode.</param>
        <summary>Pobiera kategorii Unicode znaku w określonym indeksie określonego ciągu.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> wartość wskazującą, Kategoria znaków w określonym indeksie określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znaków jest jednym z jego właściwości. Na przykład znak może być wielką literę, małą literę, dziesiętną wartością cyfrową, numer litera, interpunkcją łącznika, symbol matematyczne lub symbol waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca, Kategoria znaków Unicode. Aby uzyskać więcej informacji dotyczących znaków Unicode, zobacz [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli <xref:System.Char> obiektu na pozycji `index` to pierwszy znak para zastępcza prawidłową <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> metoda zwraca kategorii Unicode para zastępcza zamiast zwracać <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Na przykład Ugaritic alfabetu zajmuje punktów kodowych U + 10380 do U + 1039F. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody tworzenia wystąpienia ciąg reprezentujący ALPA UGARITIC litery (U + 10380), która jest pierwszą literę alfabetu Ugaritic. Jako dane wyjściowe w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> metoda zwraca <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> Jeśli została przekazana zastępczym wysokiego poziomu o to, co oznacza, że uzna para zastępcza. Jednak jeśli dwuskładnikowego został przekazany, traktuje dwuskładnikowego tylko izolacji i zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Należy pamiętać, że <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda nie zawsze zwraca takie same <xref:System.Globalization.UnicodeCategory> wartość jako <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metody po upływie określonego znaku jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metodę zaprojektowano w celu odzwierciedlenia bieżącej wersji Unicode standard. Z kolei mimo że <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda zazwyczaj odzwierciedla bieżącą wersję Unicode standard, może zwrócić kategorii znaków na podstawie poprzedniej wersji standard lub może zwrócić kategorię, która różni się od bieżącej standardowe, aby zachowania zgodności z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracane przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem indeksów prawidłowy w <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>