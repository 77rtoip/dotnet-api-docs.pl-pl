<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="82169adaf0495f8d99e2485f34319ae8fa2a91ca" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51866923" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pobiera informacje o znaku Unicode. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123) definiuje kilka kategorii znaków Unicode. Na przykład znak może należeć do kategorii wielkiej litery, małe litery, dziesiętną wartością cyfrową, się literą, cyfrą, separator akapitu, symbolem matematycznym lub symbol waluty. Aplikacja może używać kategorii znaków, które pozwalają zarządzać sposobem operacje oparte na ciągach, takich jak analiza kodu lub Trwa wyodrębnianie podciągu z wyrażeniami regularnymi. <xref:System.Globalization.UnicodeCategory> Wyliczenie definiuje kategorii możliwe znaków.  
  
 Możesz użyć <xref:System.Globalization.CharUnicodeInfo> klasy w celu uzyskania <xref:System.Globalization.UnicodeCategory> wartość dla określonego znaku. <xref:System.Globalization.CharUnicodeInfo> Klasa definiuje metody, które zwracają następujące wartości znakowych Unicode:  
  
-   Określonej kategorii, do której należy dany znak lub zastępcze parę. Wartość zwracana jest elementem członkowskim <xref:System.Globalization.UnicodeCategory> wyliczenia.  
  
-   Wartość liczbowa. Dotyczy tylko znaki numeryczne, m.in. ułamki indeksy dolne, indeksów górnych, rzymskie, łącznik waluty, numerów otoczony i cyfr specyficzne dla skryptu.  
  
-   Wartość cyfrę. Dotyczy znaki numeryczne, które można łączyć z innymi znakami liczbowych do reprezentowania liczby całkowitej w systemu numeracji.  
  
-   Wartość dziesiętną wartością cyfrową. Dotyczy tylko znaki, które reprezentują cyfry systemu dziesiętnego (podstawa 10). Cyfra dziesiętna może być jednym z dziesięciu cyfr od 0 do 9. Następujące znaki są elementami członkowskimi <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> kategorii.  
  
 Ponadto <xref:System.Globalization.CharUnicodeInfo> klasa jest używana wewnętrznie przez wiele innych typów programu .NET Framework i metod, które zależą od klasyfikacji znaków. Należą do nich następujące elementy:  
  
-   <xref:System.Globalization.StringInfo> Klasy, która współdziała z elementów tekstowych zamiast pojedynczych znaków w ciągu.  
  
-   Przeciążenia <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metody, która określenia kategorii, do której należy dany znak lub zastępcze parę.  
  
-   [Klasy znaku](~/docs/standard/base-types/character-classes-in-regular-expressions.md) rozpoznawane przez <xref:System.Text.RegularExpressions.Regex>, aparat wyrażeń regularnych programu .NET Framework.  
  
 Korzystając z tej klasy w swoich aplikacjach, Zachowaj na uwadze następujące programowania zagadnienia dotyczące korzystania z <xref:System.Char> typu. Typ może być trudny do wykorzystania i ciągi są zazwyczaj preferowane w porównaniu do reprezentowania językowej zawartości.  
  
-   Element <xref:System.Char> obiektu nie zawsze odpowiada pojedynczy znak. Mimo że <xref:System.Char> typu reprezentuje pojedynczą wartość 16-bitowych, niektóre znaki (takie jak klastrami grafemów i znaki dwuskładnikowe) składają się z dwóch lub więcej jednostek kodu UTF-16. Aby uzyskać więcej informacji, zobacz "Char obiektów i znaków Unicode" w <xref:System.String> klasy.  
  
-   Pojęcie "character", również jest elastyczny. Znak jest często traktować jako symbol, ale wiele symbole wymagają wielu punktów kodu. Na przykład ä może być reprezentowany przez dwa punkty w kodzie ("a" oraz U + 0308, czyli diaerezą łączenie), lub przez punkt kodu jednego a ("ä" lub U + 00A4). Niektóre języki mają wiele litery, znaki i symbole, które wymagają wielu punktach kodu, co może powodować pomyłek w językowej reprezentacji zawartości. Na przykład istnieje ΰ (U + 03B0, grecki, mała litera ypsilon akcent i akcentem), ale ma nie równoważne wielkiej litery. Po prostu uppercasing taka wartość pobiera oryginalną wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Rozpoznane znaki określonych kategorii, do których należą są definiowane przez Unicode standard i można zmienić z jednej wersji standardu Unicode na inny. Klasyfikacja znaków w określonej wersji programu .NET Framework jest oparty na jednej wersji standardu Unicode, niezależnie od zasadniczego systemu operacyjnego, na którym uruchomiony jest .NET Framework. W poniższej tabeli wymieniono wersje programu .NET Framework, ponieważ [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i wersji standardu Unicode służy do klasyfikowania znaków.  
  
 <list type="table"><listheader><term> Wersja programu .NET Framework 
 </term><description> Wersja Unicode Standard 
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Standard Unicode wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Standard Unicode wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Standard Unicode wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Standard Unicode wersji 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Standard Unicode wersji wersji 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Standard Unicode wersji wersji 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Standard Unicode wersji 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 Każda wersja programu w standardzie Unicode zawiera informacje na temat zmian w bazie danych znaków Unicode od poprzedniej wersji. Baza danych znaków Unicode jest używany przez <see cref="T:System.Globalization.CharUnicodeInfo" /> klasy do klasyfikacji znaków.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość dziesiętną wartością cyfrową liczbową znaków Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać pobrana wartość dziesiętną wartością cyfrową.</param>
        <summary>Pobiera wartość dziesiętną wartością cyfrową określonego znaku numerycznego.</summary>
        <returns>Wartość dziesiętną wartością cyfrową określonego znaku numerycznego.  
  
—lub— 
-1, jeśli określony znak jest cyfrą dziesiętną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki, które reprezentują cyfr dziesiętnych równoważna wartości całkowitych. Cyfry są znaki w <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> kategorii, który może reprezentować jedną z 10 cyfr w zapisie dziesiętnym (o podstawie 10) systemu od zera za pośrednictwem dziewięciu numerowania. Zawiera znaki, takie jak U + 0030 (CYFRA ZERO) U + 0039 (CYFR 9), U + 0660 (ARABSKI INDYJSKIEGO CYFRA ZERO) za pośrednictwem U + 0669 (ARABSKI INDYJSKIEGO CYFR 9), U + 07 C 0 (NKO CYFRA ZERO) do U + 07C 9 (NKO CYFR 9) i U + 1040 (MYANMAR CYFRA ZERO) za pośrednictwem U + 1049) MYANMAR CYFR 9).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość dziesiętną wartością cyfrową.</param>
        <param name="index">Indeks znaków Unicode, dla którego ma zostać pobrana wartość dziesiętną wartością cyfrową.</param>
        <summary>Pobiera wartość dziesiętną wartością cyfrową znak numeryczny pod określonym indeksem określonego ciągu.</summary>
        <returns>Wartość dziesiętną wartością cyfrową cyfrę pod określonym indeksem określonego ciągu.  
  
—lub— 
-1, jeśli znak pod określonym indeksem określony ciąg nie jest dziesiętną wartością cyfrową.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje znaki, które reprezentują cyfr dziesiętnych równoważna wartości całkowitych. Cyfry są znaki w <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> kategorii, który może reprezentować jedną z 10 cyfr w zapisie dziesiętnym (o podstawie 10) systemu od zera za pośrednictwem dziewięciu numerowania. Zawiera znaki, takie jak U + 0030 (CYFRA ZERO) U + 0039 (CYFR 9), U + 0660 (ARABSKI INDYJSKIEGO CYFRA ZERO) za pośrednictwem U + 0669 (ARABSKI INDYJSKIEGO CYFR 9), U + 07 C 0 (NKO CYFRA ZERO) do U + 07C 9 (NKO CYFR 9) i U + 1040 (MYANMAR CYFRA ZERO) za pośrednictwem U + 1049) MYANMAR CYFR 9).  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem prawidłowych indeksów w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość cyfrę liczbową znaków Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego ma zostać pobrana wartość cyfr.</param>
        <summary>Pobiera wartość cyfr określonej cyfrę.</summary>
        <returns>Wartość cyfr określonej cyfrę.  
  
—lub— 
-1, jeśli określony znak jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfra jest właściwością, która dotyczy tylko znaki numeryczne, które mogą służyć jako cyfry. Cyfra jest znak numeryczny, który może być łączone z innymi cyfr do reprezentowania liczby całkowitej w systemu numeracji.  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość cyfrę.</param>
        <param name="index">Indeks znaków Unicode, dla którego ma zostać pobrana wartość cyfr.</param>
        <summary>Pobiera wartość cyfrę znak numeryczny pod określonym indeksem określonego ciągu.</summary>
        <returns>Wartość cyfrę cyfrę pod określonym indeksem określonego ciągu.  
  
—lub— 
-1, jeśli znak pod określonym indeksem określony ciąg nie jest cyfrą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość cyfra jest właściwością, która dotyczy tylko znaki numeryczne, które mogą służyć jako cyfry. Cyfra jest znak numeryczny, który może być łączone z innymi cyfr do reprezentowania liczby całkowitej w systemu numeracji.  
  
 Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem prawidłowych indeksów w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość liczbową skojarzoną z znak Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego należy pobrać wartość liczbową.</param>
        <summary>Pobiera wartość liczbową skojarzoną z określonego znaku.</summary>
        <returns>Wartość liczbową skojarzoną z określonego znaku.  
  
—lub— 
-1, jeśli określony znak jest znakiem liczbowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwością znaków Unicode, która dotyczy tylko znaki numeryczne, zawierające ułamki, indeksy dolne, indeksów górnych, cyfry rzymskie, łącznik waluty, numerów otoczony oraz cyfr specyficzne dla skryptu. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Metoda zakłada, że `ch` odnosi się do pojedynczego znaku językowej i sprawdza, czy ten znak może być konwertowane na cyfrę dziesiętną. Jednak niektóre numery w standardzie Unicode są reprezentowane przez dwa <xref:System.Char> obiekty, które tworzą pary zastępczej. Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metodę, aby utworzyć wystąpienie ciąg reprezentujący Morza EGEJSKIEGO jeden numer. Jak wynika z w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metoda zwraca wartość -1, jeśli zostanie przekazana, znakiem zastępczym wysokiego poziomu lub znak zastępczy niskiego poziomu tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego można uzyskać wartość liczbową.</param>
        <param name="index">Indeks znaków Unicode, dla którego należy pobrać wartość liczbową.</param>
        <summary>Pobiera wartość liczbową skojarzoną ze znakiem w określonym indeksie określonego ciągu.</summary>
        <returns>Wartość liczbową skojarzoną ze znakiem w określonym indeksie określonego ciągu.  
  
—lub— 
-1, jeśli znak pod określonym indeksem określony ciąg nie jest znakiem liczbowym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość liczbowa jest właściwością znaków Unicode, która dotyczy tylko znaki numeryczne, zawierające ułamki, indeksy dolne, indeksów górnych, cyfry rzymskie, łącznik waluty, numerów otoczony oraz cyfr specyficzne dla skryptu. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli <xref:System.Char> obiektu w położeniu `index` jest pierwszym znakiem para zastępcza prawidłowe <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> Metoda określa, czy para zastępcza formularzy zawierać cyfrę i jeśli tak jest, zwraca wartość liczbową. Na przykład system numeracji Morza Egejskiego składa się z kodów znaku U+10107 do U+10133. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody do utworzenia wystąpienia ciąg reprezentujący każdą liczbę Morza Egejskiego. Jak wynika z w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> metoda zwraca prawidłową wartość liczbową, jeśli został przekazany znakiem zastępczym wysokiego poziomu liczbą Morza Egejskiego. Jednakże, jeśli został przekazany znak zastępczy niskiego poziomu, uwzględnia tylko znak zastępczy niskiego poziomu w izolacji i zwraca wartość -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem prawidłowych indeksów w <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera kategorię Unicode znak Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode, dla którego należy pobrać kategorii Unicode.</param>
        <summary>Pobiera kategorię Unicode określonego znaku.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> wartość wskazującą, kategoria określonego znaku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znak jest jednym z jego właściwości. Na przykład znak może być wielką literą, małą literą, dziesiętną wartością cyfrową, literą, cyfrą, interpunkcją łącznika, symbolem matematycznym lub symbol waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca kategorii znaków Unicode. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> Metoda zakłada, że `ch` odnosi się do pojedynczego znaku językowej i zwraca jego kategorii. Oznacza to, że dla par zastępczych, zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> zamiast kategorii, do której należy surogatu. Na przykład Ugaritic alfabetu zajmuje kodów znaku U + 10380 do U + 1039F. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody do utworzenia wystąpienia ciąg reprezentujący ALPA UGARITIC litery (U + 10380), który jest pierwszą literę alfabetu Ugaritic. Jak wynika z w przykładzie pokazano <xref:System.Char.IsNumber%28System.Char%29> metoda zwraca `false` Jeśli jest przekazywana znakiem zastępczym wysokiego poziomu lub znak zastępczy niskiego poziomu tego znaku.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Należy pamiętać, że <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> nie zawsze może zwracać taki sam <xref:System.Globalization.UnicodeCategory> wartość jako <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda przy przekazywaniu danego znaku jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metodę zaprojektowano w celu odzwierciedlenia bieżącej wersji standardu Unicode. W odróżnieniu od nich mimo że <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda zazwyczaj odzwierciedla bieżącą wersję Unicode standard, może zwrócić kategorii znaków na podstawie poprzednich wersji standard lub może zwrócić kategorię, która różni się od bieżącego planu standard do Zachowaj zgodność z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.String" /> Zawierających znak Unicode, dla którego należy pobrać kategorii Unicode.</param>
        <param name="index">Indeks znaków Unicode, dla którego należy pobrać kategorii Unicode.</param>
        <summary>Pobiera kategorię Unicode znak pod określonym indeksem określonego ciągu.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> wartość wskazującą kategorii znak pod określonym indeksem określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaki Unicode są podzielone na kategorie. Kategoria znak jest jednym z jego właściwości. Na przykład znak może być wielką literą, małą literą, dziesiętną wartością cyfrową, literą, cyfrą, interpunkcją łącznika, symbolem matematycznym lub symbol waluty. <xref:System.Globalization.UnicodeCategory> Klasa zwraca kategorii znaków Unicode. Aby uzyskać więcej informacji na temat znaków Unicode, zobacz [standardu Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
 Jeśli <xref:System.Char> obiektu w położeniu `index` jest pierwszym znakiem para zastępcza prawidłowe <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> metoda zwraca kategorię Unicode para zastępcza zamiast zwracać <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Na przykład Ugaritic alfabetu zajmuje kodów znaku U + 10380 do U + 1039F. W poniższym przykładzie użyto <xref:System.Char.ConvertFromUtf32%2A> metody do utworzenia wystąpienia ciąg reprezentujący ALPA UGARITIC litery (U + 10380), który jest pierwszą literę alfabetu Ugaritic. Jak wynika z w przykładzie pokazano <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> metoda zwraca <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> Jeśli znakiem zastępczym wysokiego poziomu o tym, co oznacza, że uzna Para dwuskładnikowa jest przekazywana. Jednakże, jeśli został przekazany znak zastępczy niskiego poziomu, uwzględnia tylko znak zastępczy niskiego poziomu w izolacji i zwraca <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Należy pamiętać, że <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metody nie zawsze zwracają takie same <xref:System.Globalization.UnicodeCategory> wartość jako <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda przy przekazywaniu danego znaku jako parametr. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Metodę zaprojektowano w celu odzwierciedlenia bieżącej wersji standardu Unicode. W odróżnieniu od nich mimo że <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metoda zazwyczaj odzwierciedla bieżącą wersję Unicode standard, może zwrócić kategorii znaków na podstawie poprzednich wersji standard lub może zwrócić kategorię, która różni się od bieżącego planu standard do Zachowaj zgodność z poprzednimi wersjami.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wartości zwracanych przez każdej metody dla różnych typów znaków.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> znajduje się poza zakresem prawidłowych indeksów w <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>