<Type Name="TextElementEnumerator" FullName="System.Globalization.TextElementEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c61f841aef610520777790eef62ffb3efefa5df1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37759444" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextElementEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextElementEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextElementEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextElementEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type TextElementEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wylicza elementy tekstowe ciągu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework definiuje element tekstowy jako jednostka tekst, który jest wyświetlany jako pojedynczy znak, czyli grafemów. Element tekstowy może być dowolny z następujących czynności:  
  
-   Podstawowego znak jest reprezentowany jako pojedynczy <xref:System.Char> wartość. Na przykład LATIN CAPITAL LETTER (U + 0041) i ŁACIŃSKI małej litery AE (U + 00E6) są podstawowych znaków.  
  
-   Łączenie znak sekwencji, który składa się z podstawowego znak i łączenia znaków. Na przykład przykład LATIN CAPITAL LETTER (U + 0041), a następnie ŁĄCZĄC kreską górną (U + 0304) jest łączenie sekwencji znaków.  
  
-   Zastępczych pary, który [standardu Unicode](http://go.microsoft.com/fwlink/?linkid=37123) definiuje reprezentację zakodowanych znaków pojedynczy znak abstrakcyjny, który składa się z sekwencji dwie jednostki kodu: znakiem zastępczym wysokiego poziomu, a znak zastępczy niskiego poziomu. Pary zastępcze są używane do reprezentowania znaków poza podstawowe płaszczyzny wielojęzyczny Unicode jako zakodowany UTF-16 znaków. Na przykład SAUIL litery cen (U + 10343) jest reprezentowany w UTF-16, kodowania oraz znakiem zastępczym wysokiego poziomu którego wartością jest 0xD800 dwuskładnikowego, którego wartością jest 0xDF43. Para zastępcza może reprezentować podstawowego znak lub łączenia.  
  
 <xref:System.Globalization.TextElementEnumerator> Klasy umożliwia pracę z elementami tekstowymi w ciągu, a nie z jednym <xref:System.Char> obiektów.  
  
 Można utworzyć wystąpienia <xref:System.Globalization.TextElementEnumerator> obiekt, który reprezentuje określonego ciągu, przekazując ciąg do <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> metody. To zwraca moduł wyliczający, który jest umieszczony przed pierwszym elementem tekst w ciągu. Wywoływanie <xref:System.Globalization.TextElementEnumerator.Reset%2A> metoda przełącza moduł wyliczający do tej pozycji. Ponieważ jest to nieprawidłowy stan, należy wywołać <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> do wyprzedzeniem modułu wyliczającego do pierwszego elementu tekst w ciągu przed odczytaniem wartości właściwości <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwości, aby powrócić do bieżącego elementu tekstu.  
  
 Podczas pracy z <xref:System.Globalization.TextElementEnumerator> obiektu, użytkownik jest odpowiedzialny pozycjonowanie modułu wyliczającego. <xref:System.Globalization.TextElementEnumerator.Current%2A> Właściwość zwraca ten sam element tekstowy, dopóki nie zostanie wywołana <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> lub <xref:System.Globalization.TextElementEnumerator.Reset%2A>. Moduł wyliczający jest w nieprawidłowym stanie, jeśli jest umieszczony przed pierwszym elementem tekstu lub po ostatnim elemencie tekst w ciągu. Gdy moduł wyliczający jest w nieprawidłowym stanie, próby pobrania wartości <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwość zgłasza wyjątek. Można określić, czy moduł wyliczający jest w nieprawidłowym stanie, testując czy wartość zwracana przez <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> właściwość `false`.  
  
 <xref:System.Globalization.TextElementEnumerator> Obiekt reprezentuje migawkę bieżącego stanu zmiennej ciągu lub literału ciągu w tej chwili, <xref:System.Globalization.TextElementEnumerator> jest tworzone wystąpienie obiektu. Należy pamiętać o następujących kwestiach:  
  
-   Moduły wyliczające elementu tekstu należy używać tylko do odczytu danych w ciągu. Nie mogą modyfikować podstawowego ciągu.  
  
-   Moduł wyliczający nie ma wyłącznego dostępu do ciągu, który reprezentuje. Zmienna string można zmodyfikować po utworzeniu modułu wyliczającego.  
  
-   A <xref:System.Globalization.TextElementEnumerator> obiektu wylicza występuje w ciągu w chwili elementów tekstowych, <xref:System.Globalization.TextElementEnumerator> wystąpienia obiektu. Nie odzwierciedla żadnych kolejnych zmian do zmiennej ciągu, jeśli zmienna zostanie zmodyfikowany później.  
  
-   Ponieważ <xref:System.Globalization.TextElementEnumerator> klasy nie zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>, dwa <xref:System.Globalization.TextElementEnumerator> obiektami, które reprezentują tego samego ciągu będą uznawane za nierówne.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Globalization.TextElementEnumerator> klasy wyliczyć elementy tekstowe ciągu.  
  
 [!code-cpp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CPP/tee_summary.cpp#1)]
 [!code-csharp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CS/tee_summary.cs#1)]
 [!code-vb[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/VB/tee_summary.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.StringInfo" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Globalization.TextElementEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący element tekst w ciągu.</summary>
        <value>Obiekt zawierający bieżącego elementu tekst w ciągu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.Globalization.TextElementEnumerator.Reset%2A> jest wywoływana, <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> musi zostać wywołana w celu wyprzedzeniem modułu wyliczającego do pierwszego elementu tekst w ciągu przed odczytaniem wartości właściwości <xref:System.Globalization.TextElementEnumerator.Current%2A>. W przeciwnym razie <xref:System.Globalization.TextElementEnumerator.Current%2A> jest niezdefiniowana.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> Ponadto zgłasza wyjątek, jeśli ostatnie wywołanie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zwrócił `false`, co oznacza koniec ciągu.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> nie powoduje przeniesienia pozycji modułu wyliczającego i kolejnych wywołań <xref:System.Globalization.TextElementEnumerator.Current%2A> zwracać ten sam obiekt, do momentu <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> lub <xref:System.Globalization.TextElementEnumerator.Reset%2A> jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekst ciągu znaków lub po ostatnim elemencie tekstu.</exception>
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="ElementIndex">
      <MemberSignature Language="C#" Value="public int ElementIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementIndex" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementIndex : int" Usage="System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera indeks elementu tekst, który moduł wyliczający jest obecnie ustawiony nad.</summary>
        <value>Indeks elementu tekstu, który moduł wyliczający jest obecnie ustawiony nad.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekst ciągu znaków lub po ostatnim elemencie tekstu.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElement">
      <MemberSignature Language="C#" Value="public string GetTextElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextElement () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextElement();" />
      <MemberSignature Language="F#" Value="member this.GetTextElement : unit -&gt; string" Usage="textElementEnumerator.GetTextElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera bieżący element tekst w ciągu.</summary>
        <returns>Nowy ciąg zawierający bieżącego elementu tekst w ciągu odczytywany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca ten sam element tekstowy jako <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekst ciągu znaków lub po ostatnim elemencie tekstu.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="textElementEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa modułu wyliczającego do następnego elementu tekst w ciągu.</summary>
        <returns>
          <see langword="true" /> Jeśli moduł wyliczający został pomyślnie zaawansowane do następnego elementu tekstu; <see langword="false" /> Jeśli moduł wyliczający został przekazany na końcu ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.Globalization.TextElementEnumerator.Reset%2A> jest wywoływana, moduł wyliczający jest umieszczony przed pierwszym elementem tekstu w ciąg, a pierwsze wywołanie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> moduł wyliczający jest przemieszczane nad pierwszy element tekst w ciągu.  
  
 Jeśli ciąg zostanie zmodyfikowany po utworzeniu tego modułu wyliczającego, <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zgłasza wyjątek.  
  
 Po końcu ciągu przekazany, kolejne wywołania <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zwracają `false` aż <xref:System.Globalization.TextElementEnumerator.Reset%2A> jest wywoływana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="textElementEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia modułu wyliczającego początkową, czyli przed pierwszym elementem tekst w ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.TextElementEnumerator.Reset%2A> Metoda przenosi modułu wyliczającego do początku ciągu i przed pierwszym elementem tekstu. Po wywołaniu <xref:System.Globalization.TextElementEnumerator.Reset%2A>, należy wywołać <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> do wyprzedzeniem modułu wyliczającego do pierwszego elementu tekst w ciągu przed wywołaniem <xref:System.Globalization.TextElementEnumerator.Current%2A> ma zostać odczytana wartość pierwszego elementu tekstu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>