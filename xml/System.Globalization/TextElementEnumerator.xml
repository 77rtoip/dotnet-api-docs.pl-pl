<Type Name="TextElementEnumerator" FullName="System.Globalization.TextElementEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0838f7ad92cf5191b15275b5370a9120bc2435d3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69245679" /></Metadata><TypeSignature Language="C#" Value="public class TextElementEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextElementEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextElementEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextElementEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type TextElementEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wylicza elementy tekstowe ciągu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework definiuje element tekstowy jako jednostkę tekstu wyświetlaną jako pojedynczy znak, czyli Grapheme. Element tekstowy może być dowolną z następujących:  
  
-   Znak podstawowy, który jest reprezentowany jako pojedyncza <xref:System.Char> wartość. Na przykład Wielka litera A (U + 0041) i mała litera AE (U + 00E6) są znakami podstawowymi.  
  
-   Sekwencja znaków łącząca, która składa się z znaku podstawowego i jednego lub więcej łączących się znaków. Na przykład na przykład Wielka litera A (U + 0041), po której następuje połączenie MACRON (U + 0304), jest to połączenie sekwencji znaków.  
  
-   Pary dwuskładnikowe, które [standard Unicode](https://go.microsoft.com/fwlink/?linkid=37123) definiuje jako reprezentację kodowanego znaku dla pojedynczego znaku abstrakcyjnego, który składa się z sekwencji dwóch jednostek kodu: dużego surogatu i niskiego surogatu. Pary dwuskładnikowe służą do reprezentowania znaków poza podstawową warstwą wielojęzyczną Unicode jako znaki zakodowane w formacie UTF-16. Na przykład, polecenie GOTHIC LETTER SAUIL (U + 10343) jest reprezentowane w kodowaniu UTF-16 jako duży Surogat, którego wartość to 0xD800 i dolny Surogat, którego wartość to 0xDF43. Para dwuskładnikowa może reprezentować znak podstawowy lub łączący znak.  
  
 Klasa pozwala korzystać z elementów tekstowych w ciągu, a nie z pojedynczymi <xref:System.Char> obiektami. <xref:System.Globalization.TextElementEnumerator>  
  
 Tworzysz wystąpienie <xref:System.Globalization.TextElementEnumerator> obiektu, który reprezentuje określony ciąg przez przekazanie ciągu <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> do metody. Zwraca moduł wyliczający, który jest umieszczony przed pierwszym elementem tekstu w ciągu. <xref:System.Globalization.TextElementEnumerator.Reset%2A> Wywołanie metody powoduje również przywrócenie modułu wyliczającego z powrotem do tej pozycji. Ponieważ reprezentuje to nieprawidłowy stan, należy wywołać <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> , aby przefiltrować moduł wyliczający do pierwszego elementu tekstowego ciągu przed przeczytaniem wartości <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwości w celu zwrócenia bieżącego elementu tekstowego.  
  
 Podczas pracy z <xref:System.Globalization.TextElementEnumerator> obiektem użytkownik jest odpowiedzialny za pozycjonowanie modułu wyliczającego. Właściwość zwraca ten sam element tekstowy, dopóki nie zostanie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> wywołana lub <xref:System.Globalization.TextElementEnumerator.Reset%2A>. <xref:System.Globalization.TextElementEnumerator.Current%2A> Moduł wyliczający jest w nieprawidłowym stanie, jeśli jest umieszczony przed pierwszym elementem tekstowym lub po ostatnim elemencie tekstu w ciągu. Gdy moduł wyliczający jest w nieprawidłowym stanie, próba pobrania wartości <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwości zgłasza wyjątek. Można określić, czy moduł wyliczający jest w nieprawidłowym stanie, sprawdzając, czy wartość <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zwracana właściwości jest. `false`  
  
 Obiekt reprezentuje migawkę bieżącego stanu zmiennej ciągu lub literału ciągu w momencie <xref:System.Globalization.TextElementEnumerator> wystąpienia obiektu. <xref:System.Globalization.TextElementEnumerator> Należy pamiętać o następujących kwestiach:  
  
-   Moduł wyliczający elementy tekstowe może być używany tylko do odczytu danych w ciągu. Nie mogą modyfikować ciągu bazowego.  
  
-   Moduł wyliczający nie ma wyłącznego dostępu do ciągu, który reprezentuje. Zmienna ciągu może być modyfikowana po utworzeniu modułu wyliczającego.  
  
-   Obiekt wylicza elementy tekstowe występujące w ciągu w momencie <xref:System.Globalization.TextElementEnumerator> wystąpienia obiektu. <xref:System.Globalization.TextElementEnumerator> Nie odzwierciedla żadnych kolejnych zmian w zmiennej ciągu, jeśli ta zmienna zostanie później zmodyfikowana.  
  
-   Ponieważ Klasa nie przesłania <xref:System.Object.Equals%2A?displayProperty=nameWithType>, dwa <xref:System.Globalization.TextElementEnumerator> obiekty, które reprezentują ten sam ciąg, będą traktowane jako nierówne. <xref:System.Globalization.TextElementEnumerator>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Globalization.TextElementEnumerator> klasy do wyliczania elementów tekstu ciągu.  
  
 [!code-cpp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CPP/tee_summary.cpp#1)]
 [!code-csharp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CS/tee_summary.cs#1)]
 [!code-vb[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/VB/tee_summary.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.StringInfo" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Globalization.TextElementEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący element tekstowy z ciągu.</summary>
        <value>Obiekt zawierający bieżący element tekstowy w ciągu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.Globalization.TextElementEnumerator.Reset%2A> wywołaniu, należy <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> wywołać, aby przetworzyć moduł wyliczający do pierwszego elementu tekstowego ciągu <xref:System.Globalization.TextElementEnumerator.Current%2A>przed odczytem wartości. W przeciwnym razie jest niezdefiniowany. <xref:System.Globalization.TextElementEnumerator.Current%2A>  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A>zwraca również wyjątek, jeśli ostatnie wywołanie <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zwrócone `false`, które wskazuje koniec ciągu.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A>nie przenosi pozycji modułu wyliczającego i kolejne wywołania do <xref:System.Globalization.TextElementEnumerator.Current%2A> zwrócenia tego samego obiektu <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> do momentu wywołania lub <xref:System.Globalization.TextElementEnumerator.Reset%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekstu ciągu lub po ostatnim elemencie Text.</exception>
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="ElementIndex">
      <MemberSignature Language="C#" Value="public int ElementIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementIndex" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementIndex : int" Usage="System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera indeks elementu tekstowego, nad którym jest aktualnie umieszczony moduł wyliczający.</summary>
        <value>Indeks elementu tekstowego, nad którym jest obecnie umieszczony moduł wyliczający.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekstu ciągu lub po ostatnim elemencie Text.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElement">
      <MemberSignature Language="C#" Value="public string GetTextElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextElement () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextElement();" />
      <MemberSignature Language="F#" Value="member this.GetTextElement : unit -&gt; string" Usage="textElementEnumerator.GetTextElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera bieżący element tekstowy z ciągu.</summary>
        <returns>Nowy ciąg zawierający bieżący element tekstowy w odczytywanym ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca ten sam element tekstowy co <xref:System.Globalization.TextElementEnumerator.Current%2A> właściwość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem tekstu ciągu lub po ostatnim elemencie Text.</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="textElementEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesuwa moduł wyliczający do następnego elementu tekstowego ciągu.</summary>
        <returns><see langword="true" />Jeśli moduł wyliczający został pomyślnie zaawansowany do następnego elementu tekstowego; <see langword="false" /> Jeśli moduł wyliczający przeszedł koniec ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.Globalization.TextElementEnumerator.Reset%2A> wywołaniu, moduł wyliczający jest umieszczony przed pierwszym elementem tekstu ciągu, a pierwsze <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> wywołanie przenosi moduł wyliczający na pierwszy element tekstowy ciągu.  
  
 Jeśli ciąg jest modyfikowany po utworzeniu tego modułu wyliczającego, <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zgłasza wyjątek.  
  
 Po przekazaniu końca ciągu kolejne wywołania do <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> zwrócenia `false` do momentu <xref:System.Globalization.TextElementEnumerator.Reset%2A> wywołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="textElementEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia początkową pozycję modułu wyliczającego, która jest wcześniejsza niż pierwszy element tekstowy w ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.TextElementEnumerator.Reset%2A> Metoda przenosi moduł wyliczający na początek ciągu przed pierwszym elementem tekstowym. Po wywołaniu <xref:System.Globalization.TextElementEnumerator.Reset%2A>, należy wywołać <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> , aby przeliczyć moduł wyliczający do pierwszego elementu tekstowego ciągu przed wywołaniem <xref:System.Globalization.TextElementEnumerator.Current%2A> do odczytu wartości pierwszego elementu tekstowego.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>
