<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a42de7a60ea69dbfbe903a0a445bc3a7856a8f41" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37656510" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementuje zestaw metod porównania ciągów zależne od kultury.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konwencje dotyczące porównywanie i sortowanie danych różnią się w kulturze kultury. Na przykład kolejność sortowania może być na podstawie fonetyka lub wizualnej reprezentacji znaków. W językach wschodnioazjatyckich znaki są posortowane według obrysu i istotnych z ideogramami. Sortowanie zależy również od języków kolejności i kultur na użytek alfabetu. Na przykład w języku duńskim ma znak "Ć", która sortuje po "Z" alfabetu. Ponadto porównania mogą być uwzględniana wielkość liter lub bez uwzględniania wielkości liter, a także mogą się różnić od kultury reguł stosowania wielkości liter. <xref:System.Globalization.CompareInfo> Klasa jest odpowiedzialny za utrzymanie tych ciągach wrażliwych na kulturę porównywania danych i wykonywanie operacji na ciągach wrażliwych na kulturę.  
  
 Zazwyczaj nie trzeba utworzyć wystąpienia <xref:System.Globalization.CompareInfo> obiektu bezpośrednio, ponieważ jeden służy niejawnie przez wszystkich operacji porównywania ciągów innych niż numer, tym wywołania <xref:System.String.Compare%2A?displayProperty=nameWithType> metody. Jednakże jeśli chcesz pobrać <xref:System.Globalization.CompareInfo> obiektu, możesz to zrobić w jednym z następujących sposobów:  
  
-   Poprzez pobranie wartości <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> właściwości dla określonej kultury.  
  
-   Przez wywołanie statycznego <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> metodę o nazwie kultury. Pozwala to na dostęp z późnym wiązaniem do <xref:System.Globalization.CompareInfo> obiektu.  
  
## <a name="ignored-search-values"></a>Ignorowane wartości wyszukiwania  
 Zestawy znaków zawierają znaki do pominięcia. Są to znaki nieuwzględniane podczas porównywania pod względem językowym lub z uwzględnieniem ustawień kulturowych. Porównanie metod, takich jak <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> nie należy traktować takich znaków podczas ich wykonać porównanie zależne od kultury. Znaki do pominięcia obejmują:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. Metody porównania wrażliwość na ustawienia kulturowe zawsze zawiera pusty ciąg na początku ciąg wyszukiwany w (indeks zero).  
  
-   Nieprawidłowy znak lub ciąg składający się z znaków z punktami kodu, które nie są uwzględniane w ramach operacji ze względu na porównanie opcji, w szczególności <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> opcje tworzenia wyszukiwań, w którym symbole i łączenie brak odstępów znaki zostaną zignorowane.  
  
-   Ciąg z punktami kodu, które nie mają językowej znaczenia. Na przykład nietrwały (U + 00AD) zawsze jest ignorowany w porównania ciągów zależne od kultury.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, niezależnie od ustawień kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy używać metod porównania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo> obiekt ma wpływ na porównywania ciągów.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje dwa ciągi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <summary>Porównuje dwa ciągi.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description><paramref name="string1" /> jest mniejsza niż <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description><paramref name="string1" /> jest większa niż <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie porównanie jest wykonywane przy użyciu <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych części <xref:System.Globalization.CompareInfo> obiektów:  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu międzynarodowy  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu tradycyjny  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 W poniższym przykładzie pokazano wywołanie <xref:System.Globalization.CompareInfo.Compare%2A> metody.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas porównywania pod względem językowym lub zależne od kultury. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> Metody nie należy wziąć pod uwagę takie znaki, gdy wykonuje porównanie zależne od kultury. Na przykład porównanie zależne od kultury "zwierzę" z "ani nieprawidłowo" (przy użyciu łącznika nietrwałego lub 00AD U +) wskazuje, czy dwa ciągi są równoważne, co ilustruje poniższy przykład.  [! code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  Aby rozpoznać znaki do pominięcia w porównania ciągów, należy wywołać <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metody i dostarczyć wartość albo <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="options">Wartość, która definiuje sposób <c>ciąg1</c> i <c>ciąg2</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje dwa ciągi przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description><paramref name="string1" /> jest mniejsza niż <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description><paramref name="string1" /> jest większa niż <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych <xref:System.Globalization.CompareOptions> ustawienia.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 W poniższym przykładzie pokazano wywołanie <xref:System.Globalization.CompareInfo.Compare%2A> metody.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas porównywania pod względem językowym lub zależne od kultury. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> Metody nie należy wziąć pod uwagę takie znaki, gdy wykonuje porównanie zależne od kultury. Aby rozpoznaje znaki do pominięcia w porównanie, należy podać wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku w <c>ciąg1</c> od którego należy rozpocząć porównanie.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku w <c>ciąg2</c> od którego należy rozpocząć porównanie.</param>
        <summary>Porównuje sekcję koniec ciągu z zakończenia części innego ciągu.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description> określonej części <paramref name="string1" /> jest mniejsza niż określony części <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description> określonej części <paramref name="string1" /> jest większa niż określona sekcja z <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych części <xref:System.Globalization.CompareInfo> obiektów:  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu międzynarodowy  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu tradycyjny  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> lub <paramref name="offset2" /> jest mniejsza niż zero.  - lub - <paramref name="offset1" /> jest większa niż lub równa liczbie znaków w <paramref name="string1" />.  - lub - <paramref name="offset2" /> jest większa niż lub równa liczbie znaków w <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> Metody nie traktuje te znaki, gdy wykonuje porównanie pod względem językowym lub zależne od kultury. Aby rozpoznać znaki do pominięcia w porównanie, należy wywołać <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metody i podaj wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku w <c>ciąg1</c> od którego należy rozpocząć porównanie.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku w <c>ciąg2</c> od którego należy rozpocząć porównanie.</param>
        <param name="options">Wartość, która definiuje sposób <c>ciąg1</c> i <c>ciąg2</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje sekcji koniec ciągu za pomocą sekcji zakończenia inny ciąg przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description> określonej części <paramref name="string1" /> jest mniejsza niż określony części <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description> określonej części <paramref name="string1" /> jest większa niż określona sekcja z <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 W poniższym przykładzie porównano części dwa ciągi przy użyciu różnych <xref:System.Globalization.CompareOptions> ustawienia.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> lub <paramref name="offset2" /> jest mniejsza niż zero.  - lub - <paramref name="offset1" /> jest większa niż lub równa liczbie znaków w <paramref name="string1" />.  - lub - <paramref name="offset2" /> jest większa niż lub równa liczbie znaków w <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas porównywania pod względem językowym lub zależne od kultury. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> Metody nie należy wziąć pod uwagę takie znaki podczas przeprowadzania porównanie zależne od kultury. Aby rozpoznaje znaki do pominięcia w porównanie, należy podać wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku w <c>ciąg1</c> od którego należy rozpocząć porównanie.</param>
        <param name="length1">Liczba kolejnych znaków w <c>ciąg1</c> do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku w <c>ciąg2</c> od którego należy rozpocząć porównanie.</param>
        <param name="length2">Liczba kolejnych znaków w <c>ciąg2</c> do porównania.</param>
        <summary>Porównuje to sekcja jednego ciągu z części innego ciągu.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description> określonej części <paramref name="string1" /> jest mniejsza niż określony części <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description> określonej części <paramref name="string1" /> jest większa niż określona sekcja z <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy używać metod porównania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych części <xref:System.Globalization.CompareInfo> obiektów:  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu międzynarodowy  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu tradycyjny  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> lub <paramref name="length1" /> lub <paramref name="offset2" /> lub <paramref name="length2" /> jest mniejsza niż zero.  - lub - <paramref name="offset1" /> jest większa niż lub równa liczbie znaków w <paramref name="string1" />.  - lub - <paramref name="offset2" /> jest większa niż lub równa liczbie znaków w <paramref name="string2" />.  - lub - <paramref name="length1" /> jest większa niż liczba znaków z <paramref name="offset1" /> na końcu <paramref name="string1" />.  - lub - <paramref name="length2" /> jest większa niż liczba znaków z <paramref name="offset2" /> na końcu <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> Metody nie traktuje te znaki, gdy wykonuje porównanie pod względem językowym lub zależne od kultury. Aby rozpoznać znaki do pominięcia w porównanie, należy wywołać <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metody i podaj wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku w <c>ciąg1</c> od którego należy rozpocząć porównanie.</param>
        <param name="length1">Liczba kolejnych znaków w <c>ciąg1</c> do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku w <c>ciąg2</c> od którego należy rozpocząć porównanie.</param>
        <param name="length2">Liczba kolejnych znaków w <c>ciąg2</c> do porównania.</param>
        <param name="options">Wartość, która definiuje sposób <c>ciąg1</c> i <c>ciąg2</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje to sekcja jednego ciągu z części innego ciągu przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>32-bitowych całkowita wskazująca relację między dwa atrybuty porównania.  
  
 <list type="table"><listheader><term> Wartość </term><description> warunek </description></listheader><item><term> zero </term><description> dwa ciągi są równe.  </description></item><item><term> mniejsza niż zero </term><description> określonej części <paramref name="string1" /> jest mniejsza niż określony części <paramref name="string2" />.  </description></item><item><term> większa od zera </term><description> określonej części <paramref name="string1" /> jest większa niż określona sekcja z <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> porównania zabezpieczeń.  
  
   
  
## Examples  
 W poniższym przykładzie porównano części dwa ciągi przy użyciu różnych <xref:System.Globalization.CompareOptions> ustawienia.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> lub <paramref name="length1" /> lub <paramref name="offset2" /> lub <paramref name="length2" /> jest mniejsza niż zero.  - lub - <paramref name="offset1" /> jest większa niż lub równa liczbie znaków w <paramref name="string1" />.  - lub - <paramref name="offset2" /> jest większa niż lub równa liczbie znaków w <paramref name="string2" />.  - lub - <paramref name="length1" /> jest większa niż liczba znaków z <paramref name="offset1" /> na końcu <paramref name="string1" />.  - lub - <paramref name="length2" /> jest większa niż liczba znaków z <paramref name="offset2" /> na końcu <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metody nie traktuje te znaki, gdy wykonuje porównanie zależne od kultury. Aby rozpoznaje znaki do pominięcia w porównanie, należy podać wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym <see cref="T:System.Globalization.CompareInfo" />.</param>
        <summary>Określa, czy określony obiekt jest taki sam, do bieżącego <see cref="T:System.Globalization.CompareInfo" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli określony obiekt jest taki sam, do bieżącego <see cref="T:System.Globalization.CompareInfo" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dwa <xref:System.Globalization.CompareInfo> obiekty są sobie równe jeśli ich <xref:System.Globalization.CompareInfo.LCID%2A> i <xref:System.Globalization.CompareInfo.Name%2A> właściwości są takie same.  
  
 Ta metoda zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest zgodne, bez względu na ustawienia kultury systemu operacyjnego.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Globalization.CompareInfo" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Liczba całkowita reprezentująca identyfikator kultury.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Globalization.CompareInfo" /> obiektu, który jest skojarzony z kulturą o podanym identyfikatorze.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą z określonym identyfikatorem i przy użyciu metody porównania ciągu w bieżącym <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych części <xref:System.Globalization.CompareInfo> obiektów:  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu międzynarodowy  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu tradycyjny  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg reprezentujący nazwę kultury.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Globalization.CompareInfo" /> obiektu, który jest skojarzony z kulturą o określonej nazwie.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą z określonym identyfikatorem i przy użyciu metody porównania ciągu w bieżącym <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład porównuje dwa ciągi przy użyciu różnych części <xref:System.Globalization.CompareInfo> obiektów:  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu międzynarodowy  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z kulturą hiszpański (Hiszpania) przy użyciu tradycyjny  
  
-   <xref:System.Globalization.CompareInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest nieprawidłową nazwę kultury.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">Liczba całkowita reprezentująca identyfikator kultury.</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> Zawierający metody porównania ciągu do użycia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Globalization.CompareInfo" /> obiektu, która jest skojarzona z określonej kultury i który korzysta z metody porównania ciągu w określonym <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą z określonym identyfikatorem i przy użyciu metody porównania ciągu w bieżącym <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zachowanie tej metody jest nieprzewidywalne. Zaleca się dla aplikacji do korzystania z wersji tej metody, która nie przyjmuje dane wejściowe zestawu.  
  
 `assembly` Parametr musi być taki sam jak <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> jest nieprawidłowego typu.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg reprezentujący nazwę kultury.</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> Zawierający metody porównania ciągu do użycia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Globalization.CompareInfo" /> obiektu, która jest skojarzona z określonej kultury i który korzysta z metody porównania ciągu w określonym <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą z określonym identyfikatorem i przy użyciu metody porównania ciągu w bieżącym <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zachowanie tej metody jest nieprzewidywalne. Zaleca się, że używasz wersji tej metody, która nie przyjmuje dane wejściowe zestawu.  
  
 `assembly` Parametr musi być taki sam jak <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> jest <see langword="null" />.  - lub - <paramref name="assembly" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest nieprawidłową nazwę kultury.  - lub - <paramref name="assembly" /> jest nieprawidłowego typu.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość skrótu dla tego <see cref="T:System.Globalization.CompareInfo" /> wystąpienia lub dla określonego ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcji wyznaczania wartości skrótu dla bieżącego <see cref="T:System.Globalization.CompareInfo" /> do tworzenia skrótów algorytmów i struktur danych, takich jak Tabela skrótów.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Ta metoda generuje tę samą wartość skrótu dla dwóch obiektów, które są takie same, zgodnie z opisem w <xref:System.Globalization.CompareInfo.Equals%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg, którego wartość skrótu jest zwracana.</param>
        <param name="options">Wartość, która określa, jak ciągi są porównywane.</param>
        <summary>Pobiera wartość skrótu dla ciągu znaków na podstawie określonej porównanie opcji.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie <xref:System.Globalization.CompareInfo.GetHashCode%2A> jest zależna od implementacji, które mogą ulec zmianie z jednej wersji środowiska uruchomieniowego języka wspólnego do innego lub z jednej platformy .NET Framework do innego.  
  
> [!IMPORTANT]
>  Jeśli dwa obiekty parametry są równe, <xref:System.Globalization.CompareInfo.GetHashCode%2A> metoda zwraca identycznych wartości. Jednakże nie istnieje wartość Kod skrótu unikatowy dla każdej wartości unikatowego ciągu. Różne ciągi może zwrócić tę samą wartość skrótu.  
>   
>  Sam kod skrótu nie musi być stała. Kody skrótów dla identyczne ciągi mogą się różnić w różnych wersjach programu .NET Framework i na platformach (na przykład 32-bitowych i 64-bitowych) dla jednej wersji programu .NET Framework. W niektórych przypadkach może nawet różnią się one domeny aplikacji.  
>   
>  Jako wynik wyznaczania wartości skrótu, który nigdy nie powinny być używane kody spoza domeny aplikacji, w którym zostały utworzone, nigdy nie powinny być używane jako pola klucza w kolekcji, a nigdy nie powinny zostać utrwalone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.SortKey" /> obiekt ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg znaków, dla którego <see cref="T:System.Globalization.SortKey" /> zostanie pobrany.</param>
        <summary>Pobiera klucz sortowania dla określonego ciągu.</summary>
        <returns>
          <see cref="T:System.Globalization.SortKey" /> Obiekt, który zawiera klucz sortowania dla określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy znak w ciągu znajduje się kilka kategorii wagi sortowania, włącznie z alfabetycznym, sprawy, skrypt i znaków diakrytycznych. Klucz sortowania jest repozytorium te wagi dla określonego ciągu. Na przykład klucz sortowania może zawierać ciąg alfabetyczne wagi, następuje ciąg, w przypadku wagi i tak dalej. <xref:System.Globalization.CompareInfo.GetSortKey%2A> Metoda jest równoważna do metody interfejsu API Windows `LCMapString` z flagą LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg znaków, dla którego <see cref="T:System.Globalization.SortKey" /> zostanie pobrany.</param>
        <param name="options">Bitowa kombinacja co najmniej jeden z następujących wartości wyliczenia, które określają, jak jest obliczana klucz sortowania: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Pobiera <see cref="T:System.Globalization.SortKey" /> obiektu dla określonego ciągu przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>
          <see cref="T:System.Globalization.SortKey" /> Obiekt, który zawiera klucz sortowania dla określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy znak w ciągu znajduje się kilka kategorii wagi sortowania, włącznie z alfabetycznym, sprawy, skrypt i znaków diakrytycznych. Klucz sortowania jest repozytorium te wagi dla określonego ciągu. Na przykład klucz sortowania może zawierać ciąg alfabetyczne wagi, następuje ciąg, w przypadku wagi i tak dalej. <xref:System.Globalization.CompareInfo.GetSortKey%2A> Metoda jest równoważna do metody interfejsu API Windows `LCMapString` z flagą LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczony od zera indeks pierwszego wystąpienia wartości w ramach ciągu lub jego części.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ciągu całego źródła.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />; w przeciwnym razie wartość -1. Zwraca wartość 0 (zero), jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ta wyszukuje ciąg źródłowy od początku ciągu znaków na końcu ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli `value` reprezentuje złożony znaku Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być uważany za równoważny dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko jeśli ich punkty kodowe Unicode są takie same, należy wywołać przeciążenie, ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> wartość. W odróżnieniu od <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, który wykonuje porównanie zależne od kultury, przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> metodę, która Wyszukaj znak wykonać porównanie porządkowe i przeciążenia, które wyszukania ciągu wykonać porównanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy używać metod porównania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metoda zawsze zwraca 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca 0 (zero), aby wskazać, czy został znaleziony dopasowanie na początku ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ciągu całego źródła.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />; w przeciwnym razie wartość -1. Zwraca wartość 0 (zero), jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany do przodu zaczynając od początku ciągu, a kończąc na końcu ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy użyć jednego z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metoda zawsze zwraca 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metoda jest używana do znajdowania trzy podciągów (nietrwały (U + 00AD), nietrwały, a następnie "n" i nietrwały, a następnie "m") w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W każdym przypadku, ponieważ nietrwały jest znakiem do pominięcia, wynik jest taki sam, jakby łącznika nietrwałego nie znalazły się w <paramref name="value" />. Aby wyszukać tylko łącznika nietrwałego, metoda zwraca wartość 0 (zero), aby wskazać, że Znaleziono dopasowanie na początku ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje, jak powinny być porównywane ciągi. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ciągu całego źródła przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1. Zwraca wartość 0 (zero), jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany do przodu zaczynając od początku ciągu, a kończąc na końcu ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy używać metod porównania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metoda zawsze zwraca 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metoda jest używana do wyszukiwania nietrwały (U + 00AD) w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca 0 (zero), aby wskazać, czy został znaleziony dopasowanie na początku ciągu. Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozszerza od określonego indeksu do końca ciągu.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od <paramref name="startIndex" /> na końcu <paramref name="source" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończącego się na końcu ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość. Przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) po "n" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca 1, aby wskazać, że Znaleziono dopasowanie w położeniu "n".  [! code-csharp [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ciągu całego źródła przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1. Zwraca wartość 0 (zero), jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany do przodu zaczynając od początku ciągu, a kończąc na końcu ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metoda zawsze zwraca 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania trzy podciągów (nietrwały (U + 00AD), nietrwały, a następnie "n" i nietrwały, a następnie "m") w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. Ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca tę samą wartość, która zwróci, jeśli łącznika nietrwałego nie zostały uwzględnione w wyszukiwanym ciągu. Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozszerza od określonego indeksu do końca ciągu.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od <paramref name="startIndex" /> na końcu <paramref name="source" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończącego się na końcu ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metoda jest używana, aby znaleźć położenie nietrwały (U + 00AD), a po nim "m" w dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca indeks "m" w ciągu. Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim "m", metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks "m".  [! code-csharp [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozszerza od określonego indeksu do końca ciągu przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od <paramref name="startIndex" /> na końcu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończącego się na końcu ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, pozycja znaku, w którym najpierw rozpoczęcia wyszukiwania. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) po "n" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca 1, aby wskazać, że Znaleziono dopasowanie w położeniu "n". Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozpoczyna się od określonego indeksu i zawiera określoną liczbę elementów.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozpoczynająca się w <paramref name="startIndex" /> i zawiera liczbę elementów określonych przez <paramref name="count" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończące się wierszem `startIndex`  +  `count` - 1.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość. Przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, w którym najpierw rozpoczęcia wyszukiwania. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) po "n" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca 1, aby wskazać, że Znaleziono dopasowanie w położeniu "n".  [! code-csharp [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozszerza od określonego indeksu do końca ciągu przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od <paramref name="startIndex" /> na końcu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończącego się na końcu ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana, aby znaleźć położenie nietrwały (U + 00AD), a po nim "m" począwszy od trzeciego pozycja znaku w dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”. Metoda zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozpoczyna się od określonego indeksu i zawiera określoną liczbę elementów.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozpoczynająca się w <paramref name="startIndex" /> i zawiera liczbę elementów określonych przez <paramref name="count" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończące się wierszem `startIndex`  +  `count` - 1.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metoda jest używana do znajdowania położenie nietrwały (U + 00AD) następuje od innych za pomocą szóstego pozycje znaku w dwa ciągi "m". Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim "m", metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks "m".  [! code-csharp [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozpoczyna się od określonego indeksu i zawiera określoną liczbę elementów przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozpoczynająca się w <paramref name="startIndex" /> i zawiera liczbę elementów określonych przez <paramref name="count" />, za pomocą opcji porównania określony; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończące się wierszem `startIndex`  +  `count` - 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.IndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, w którym najpierw rozpoczęcia wyszukiwania. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) po "n" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca 1, aby wskazać, że Znaleziono dopasowanie w położeniu "n". Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks pierwszego wystąpienia w ramach sekcji ciąg źródłowy, który rozpoczyna się od określonego indeksu i zawiera określoną liczbę elementów przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozpoczynająca się w <paramref name="startIndex" /> i zawiera liczbę elementów określonych przez <paramref name="count" />, za pomocą opcji porównania określony; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy zostanie przeszukany, zaczynając od przodu `startIndex` i kończące się wierszem `startIndex`  +  `count` - 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania położenie nietrwały (U + 00AD) następuje od innych za pomocą szóstego pozycje znaku w dwa ciągi "m". Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Gdy wykonuje porównanie porządkowe, jednak znajduje podciąg tylko w pierwszym ciągu. Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim "m", metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks "m", gdy wykonuje porównanie zależne od kultury. Metoda zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [! kodu vb [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy ciąg zaczyna się od określonego prefiksu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do przeszukania.</param>
        <param name="prefix">Ciąg do porównania z początku <c>źródła</c>.</param>
        <summary>Określa, czy ciąg określonej źródłowej rozpoczyna się od określonego prefiksu.</summary>
        <returns>
          <see langword="true" /> Jeśli długość <paramref name="prefix" /> jest mniejsza niż długość <paramref name="source" /> i <paramref name="source" /> rozpoczyna się od <paramref name="prefix" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy ciąg rozpoczyna się i kończy się podciągiem pusty (""); w związku z tym jeśli `prefix` to ciąg pusty, ta metoda zwraca `true`.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa, czy ciąg jest prefiks lub sufiks innego ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="prefix" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do przeszukania.</param>
        <param name="prefix">Ciąg do porównania z początku <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>prefiks</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Określa, czy ciąg określonej źródłowej rozpoczyna się od określonego prefiksu przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli długość <paramref name="prefix" /> jest mniejsza niż długość <paramref name="source" /> i <paramref name="source" /> rozpoczyna się od <paramref name="prefix" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy ciąg rozpoczyna się i kończy się podciągiem pusty (""); w związku z tym jeśli `prefix` to ciąg pusty, ta metoda zwraca `true`.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa, czy ciąg jest prefiks lub sufiks inny ciąg przy użyciu <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="prefix" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określony znak Unicode lub ciąg jest sortowanie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode.</param>
        <summary>Wskazuje, czy określony znak Unicode można sortować.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="ch" /> parametr jest sortowanie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ch` Parametr jest sortowanie, jeśli znak Unicode, która jest zdefiniowana w wewnętrznego <xref:System.Globalization.CompareInfo> klasy tabeli sortowania i jest nie prywatnego użytku lub niesparowane wysokiej lub niskiej znaku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg zero lub więcej znaków Unicode.</param>
        <summary>Wskazuje, czy określony ciąg Unicode można sortować.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="str" /> parametr nie jest ciąg pusty ("") i wszystkie znaki Unicode w <paramref name="str" /> sortowanie; jest w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla każdego znaku Unicode `str` parametru jest reprezentowana przez jedną lub więcej UTF-16 zakodowane <xref:System.Char> obiektów. `str` Parametr jest sortowanie, jeśli każdy znak Unicode jest zdefiniowany w wewnętrznego <xref:System.Globalization.CompareInfo> klasy tabeli sortowania i jest nie prywatnego użytku lub niesparowane wysokiej lub niskiej znaku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy ciąg kończy się przy użyciu określonego sufiksu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do przeszukania.</param>
        <param name="suffix">Ciąg do porównania z końcem <c>źródła</c>.</param>
        <summary>Określa, czy ciąg określone źródło kończy się przy użyciu określonego sufiksu.</summary>
        <returns>
          <see langword="true" /> Jeśli długość <paramref name="suffix" /> jest mniejsza niż długość <paramref name="source" /> i <paramref name="source" /> kończy się <paramref name="suffix" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy ciąg rozpoczyna się i kończy się podciągiem pusty (""); w związku z tym jeśli `suffix` to ciąg pusty, ta metoda zwraca `true`.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa, czy ciąg jest prefiks lub sufiks innego ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="suffix" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do przeszukania.</param>
        <param name="suffix">Ciąg do porównania z końcem <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>sufiks</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" /> używane przez siebie lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Określa, czy ciąg określone źródło kończy się sufiksem określony przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli długość <paramref name="suffix" /> jest mniejsza niż długość <paramref name="source" /> i <paramref name="source" /> kończy się <paramref name="suffix" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy ciąg rozpoczyna się i kończy się podciągiem pusty (""); w związku z tym jeśli `suffix` to ciąg pusty, ta metoda zwraca `true`.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa, czy ciąg jest prefiks lub sufiks inny ciąg przy użyciu <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="suffix" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca liczony od zera indeks ostatniego wystąpienia wartości w ramach ciągu lub jego części.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ciągu całego źródła.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany wstecz od końca ciągu, a kończąc na początku ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metoda zawsze zwraca ostatni indeks w <paramref name="source" /> do wskazania, że dopasowanie znajduje się na końcu <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca ostatni indeks w ciągu, aby wskazać, że Znaleziono dopasowanie na końcu ciągu.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ciągu całego źródła.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany wstecz od końca ciągu, a kończąc na początku ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metoda zawsze zwraca <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, który reprezentuje ostatniej pozycji indeksu w <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metoda jest używana do znajdowania trzy podciągów (nietrwały (U + 00AD), nietrwały, a następnie "n" i nietrwały, a następnie "m") w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W każdym przypadku, ponieważ nietrwały jest znakiem do pominięcia, wynik jest taki sam, jakby łącznika nietrwałego nie znalazły się w <paramref name="value" />. Aby wyszukać tylko łącznika nietrwałego, metoda zwraca 6 i 5. Te wartości odpowiadają indeks ostatniego znaku w dwóch ciągów.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ciągu całego źródła przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany wstecz od końca ciągu, a kończąc na początku ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metoda zawsze zwraca ostatniej pozycji znaku w <paramref name="source" /> do wskazania, że dopasowanie znajduje się na końcu <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metoda jest używana do wyszukiwania nietrwały (U + 00AD) w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca ostatni indeks w ciągu źródłowego. Z kolei wyszukiwanie porządkowe pomyślnie znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który rozciąga się od początku ciągu zgodnie z określonym indeksem.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od początku <paramref name="source" /> do <paramref name="startIndex" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończącego się na początku ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) poprzedzającym final "m" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca indeks "m", która jest wartością elementu <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ciągu całego źródła przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono poziomu <paramref name="source" />, przy użyciu opcje porównywania określonej; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest przeszukiwany wstecz od końca ciągu, a kończąc na początku ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciągu wewnątrz ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, który reprezentuje ostatniej pozycji indeksu w <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania trzy podciągów (nietrwały (U + 00AD), nietrwały, a następnie "n" i nietrwały, a następnie "m") w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. Ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca tę samą wartość, która zwróci, jeśli łącznika nietrwałego nie zostały uwzględnione w wyszukiwanym ciągu. Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który rozciąga się od początku ciągu zgodnie z określonym indeksem.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od początku <paramref name="source" /> do <paramref name="startIndex" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończącego się na początku ciągu.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metoda jest używana do wyszukiwania podciągu, który zawiera nietrwały (U + 00AD) i które poprzedza lub końcowe "m" w ciągu. Ponieważ łącznika nietrwałego w wyszukiwanym ciągu są ignorowane, podczas wywoływania metody do znalezienia podciągu, który składa się z łącznika nietrwałego i "m" zwraca pozycję "m" w ciągu, dlatego wywołanie go do wyszukiwania podciągu, który składa się z łącznika nietrwałego, i zwraca "n"  pozycja "n". Jeśli ciąg wyszukiwania zawiera tylko łącznika nietrwałego, Metoda ta zwraca indeks "m", który reprezentuje wartość <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który rozciąga się od początku ciągu zgodnie z określonym indeksem przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od początku <paramref name="source" /> do <paramref name="startIndex" />, za pomocą opcji porównania określony; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończącego się na początku ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) poprzedzającym final "m" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca indeks "m". Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który zawiera określoną liczbę elementów i kończy się pod określonym indeksem.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> zawierającą liczbę elementów określonych przez <paramref name="count" /> i który kończy się <paramref name="startIndex" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończące się wierszem `startIndex`  -  `count` + 1.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) poprzedzającym final "m" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ nietrwały jest znakiem do pominięcia, metoda zwraca indeks "m", która jest wartością elementu <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który rozciąga się od początku ciągu zgodnie z określonym indeksem przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> rozciąga się od początku <paramref name="source" /> do <paramref name="startIndex" />, za pomocą opcji porównania określony; w przeciwnym razie, wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończącego się na początku ciągu.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu. Należy pamiętać, że <xref:System.Globalization.CompareInfo.IndexOf%2A> i <xref:System.Globalization.CompareInfo.LastIndexOf%2A> wyszukiwanie w różne części ciągu, a nawet o takiej samej `startIndex` parametru.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania położenie nietrwały (U + 00AD), a po nim "m", począwszy od końcowe "m", która znajduje się w dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”. Metoda zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który zawiera określoną liczbę elementów i kończy się pod określonym indeksem.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> zawierającą liczbę elementów określonych przez <paramref name="count" /> i który kończy się <paramref name="startIndex" />; w przeciwnym razie wartość -1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończące się wierszem `startIndex`  -  `count` + 1.  
  
 To przeciążenie wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby przeprowadzić wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyj <xref:System.Globalization.CompareOptions.Ordinal> wartość.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metoda jest używana do znajdowania położenie nietrwały (U + 00AD), a po nim "m" w trzech znaków, które poprzedzają final "m" dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim "m", metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks "m".  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który zawiera określoną liczbę elementów i kończy się w określonym indeksie przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> zawierającą liczbę elementów określonych przez <paramref name="count" /> i który kończy się <paramref name="startIndex" />, za pomocą opcji porównania określony; w przeciwnym razie — 1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończące się wierszem `startIndex`  -  `count` + 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Jeśli znak jest znak złożony reprezentujący wartość Unicode, takie jak ligatury "Ć" (U + 00 C 6), jego może być traktowane jako równoważne dowolne wystąpienie, z jego składników w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości w standardzie Unicode są takie same. Przeciążenia <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> wyszukiwania dla znaku wykonać wyszukiwanie porządkowe, natomiast te, które wyszukania ciągu wykonać wyszukiwanie zależne od kultury.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W wyszukiwaniu wrażliwość na ustawienia kulturowe Jeśli <paramref name="value" /> jest znakiem do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. W tym przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania nietrwały (U + 00AD) poprzedzającym final "m" w dwóch ciągów. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ nietrwały jest znakiem do pominięcia, wyszukiwanie zależne od kultury zwraca indeks "m", która jest wartością elementu <paramref name="startIndex" />. Pomyślnie wyszukiwanie porządkowe, jednak znajduje łącznika nietrwałego w jeden ciąg i zgłasza, że jest nieobecny z drugiego ciągu.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania w ramach <c>źródła</c>.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <c>źródła</c> i <c>wartość</c> powinny być porównywane. <c>opcje</c> jest wartością wyliczenia <see cref="F:System.Globalization.CompareOptions.Ordinal" />, lub bitową kombinację co najmniej jeden z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje w podanym podciągiem i zwraca liczony od zera indeks ostatniego wystąpienia w ramach sekcji ciąg źródłowy, który zawiera określoną liczbę elementów i kończy się w określonym indeksie przy użyciu określonego <see cref="T:System.Globalization.CompareOptions" /> wartość.</summary>
        <returns>Liczony od zera indeks ostatniego wystąpienia <paramref name="value" />, jeśli znaleziono, w sekcji <paramref name="source" /> zawierającą liczbę elementów określonych przez <paramref name="count" /> i który kończy się <paramref name="startIndex" />, za pomocą opcji porównania określony; w przeciwnym razie — 1. Zwraca <paramref name="startIndex" /> Jeśli <paramref name="value" /> jest znak do pominięcia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg źródłowy jest wyszukiwanych ze starszymi wersjami zaczynając od `startIndex` i kończące się wierszem `startIndex`  -  `count` + 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.  
  
 Jeśli `options` nie obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia wykonuje wyszukiwanie zależne od kultury. Wartość Unicode, reprezentujący znak złożony, takich jak ligatury "Ć" (U + 00 C 6), może być uważany za równoważny dowolne wystąpienie, części znaku w odpowiedniej kolejności, takie jak "AE" (U + 0041, U + 0045), w zależności od kultury. Jeśli `options` obejmuje <xref:System.Globalization.CompareOptions.Ordinal> wartość tego przeciążenia przeprowadza wyszukiwanie porządkowe (niewrażliwość na ustawienia kulturowe), gdzie są porównywane wartości Unicode.  
  
> [!NOTE]
>  Jeśli to możliwe, należy wywołać parametry metody porównania, które mają parametr typu <xref:System.Globalization.CompareOptions> Określ typ porównania z oczekiwaniami. Zgodnie z ogólną zasadą, użyj opcji lingwistyczne (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlane w interfejsie użytkownika i określ <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> lub <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> porównania zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład określa indeksy wystąpień pierwszy i ostatni znak lub podciąg wewnątrz część ciągu.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> jest <see langword="null" />.  - lub - <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> znajduje się poza zakresem prawidłowych indeksów dla <paramref name="source" />.  - lub - <paramref name="count" /> jest mniejsza niż zero.  - lub - <paramref name="startIndex" /> i <paramref name="count" /> nie określają prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage">
          <para>Zestawy znaków obejmują znaki do pominięcia, które są znaki, które nie są uwzględniane podczas przeprowadzania pod względem językowym lub zależne od kultury sortowania. W polu wyszukiwania wrażliwość na ustawienia kulturowe (to znaczy, jeśli <paramref name="options" /> nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny wyszukiwaniu po usunięciu tego znaku. Jeśli <paramref name="value" /> składa się tylko z co najmniej jeden znak do pominięcia <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda zawsze zwraca <paramref name="startIndex" />, czyli pozycja znaku, od której rozpoczyna się wyszukiwanie.  W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metoda jest używana do znajdowania położenie nietrwały (U + 00AD), a po nim "m" we wszystkich, ale przed końcowym znakiem "m" pozycji pierwszego znaku w dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Gdy wykonuje porównanie porządkowe, jednak znajduje podciąg tylko w pierwszym ciągu. Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim "m", metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks "m", gdy wykonuje porównanie zależne od kultury. Metoda zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.  [! code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator kultury poprawnie sformułowany dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>Identyfikator kultury poprawnie sformułowany dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Globalization.CompareInfo.LCID%2A> właściwości.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury, używane do sortowania operacje to <see cref="T:System.Globalization.CompareInfo" /> obiektu.</summary>
        <value>Nazwa kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CompareInfo.Name%2A> i <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> właściwości mogą mieć różne wartości. Na przykład <xref:System.Globalization.CompareInfo.LCID%2A> właściwości wartość szesnastkową 0x10407 identyfikuje kultury sortowania, która sortuje nazwy, jak wyglądają w Niemczech książki telefonicznej. <xref:System.Globalization.CompareInfo.Name%2A> Właściwość ma wartość "de-de_phoneb", natomiast <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> właściwości skojarzonego kultury niemiecki (Niemcy) ma wartość "de-DE".  
  
   
  
## Examples  
 Poniższy przykład porównuje trzy ciągi przy użyciu kultury fr-FR, a ja-JP. <xref:System.Globalization.CultureInfo.Name%2A> Właściwość jest używana do wyświetlania nazwy poszczególnych kultur.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne.</param>
        <summary>Uruchamiany, gdy wykonać deserializacji wykresu cały obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest jawną implementacją członków, które mogą być używane tylko wtedy, gdy bieżący <xref:System.Globalization.CompareInfo> obiekt jest rzutowany <xref:System.Runtime.Serialization.IDeserializationCallback> interfejsu. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący bieżącą <see cref="T:System.Globalization.CompareInfo" /> obiektu.</summary>
        <returns>Ciąg reprezentujący bieżącą <see cref="T:System.Globalization.CompareInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType> metody. Zwraca ciąg, który składa się z nazwy klasy i wartość wystąpienia <xref:System.Globalization.CompareInfo.Name%2A> właściwości rozdzielonych łącznikiem.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Rozpoczęcie od .NET Framework 4, przeczytania artykułu <see cref="M:System.Globalization.CompareInfo.ToString" /> metoda zwraca nazwę klasy, a następnie spację, łącznik, spację i wartość <see cref="P:System.Globalization.CompareInfo.Name" /> właściwości. Na przykład w przypadku <see cref="T:System.Globalization.CompareInfo" /> obiekt, który reprezentuje kultury en US <see cref="M:System.Globalization.CompareInfo.ToString" /> metoda zwróci wartość "CompareInfo - en US". W poprzednich wersjach programu .NET Framework, zwraca nazwę klasy, następuje spacja, łącznik, spację i wartość <see cref="P:System.Globalization.CompareInfo.LCID" /> właściwości. Na przykład w przypadku <see cref="T:System.Globalization.CompareInfo" /> obiekt, który reprezentuje kultury en US <see cref="M:System.Globalization.CompareInfo.ToString" /> metoda zwróci wartość "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o wersji standardu Unicode, używane do porównywania i sortowania ciągów.</summary>
        <value>Obiekt, który zawiera informacje o wersji standardu Unicode, używane do porównywania i sortowania ciągów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wagi pojedynczych znaków i w związku z tym sposób, w którym porównywać i uporządkowanych ciągi określonej zależy od wersji specyfikacji Unicode, który implementuje określonej wersji programu .NET Framework. W [!INCLUDE[net_v45](~/includes/net-v45-md.md)], to również zależy od systemu operacyjnego hosta, jak pokazano w poniższej tabeli. Należy zauważyć, że ta lista obsługiwanych wersji standardu Unicode dotyczy znaków porównywanie i sortowanie. nie ma zastosowania do klasyfikacji znaków Unicode w według kategorii.  
  
|Wersja programu .NET Framework|System operacyjny|Wersja Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Wszystkie systemy operacyjne|Standard Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] i nowsze wersje|[!INCLUDE[win7](~/includes/win7-md.md)]|Standard Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] i nowsze wersje|[!INCLUDE[win8](~/includes/win8-md.md)] i nowszych wersjach systemu operacyjnego Windows|Unicode 6.3|  
  
 <xref:System.Globalization.SortVersion> Obiektu zwróconego przez <xref:System.Globalization.CompareInfo.Version%2A> właściwości nie zidentyfikować dokładny wersji standardu Unicode użyty do porównania ciągów. Jest przydatne tylko wtedy, gdy porównanie dwóch <xref:System.Globalization.SortVersion> obiektów, aby ustalić, czy używają tej samej wersji standardu Unicode i kultury do porównywania ciągów. Aby uzyskać więcej informacji i obejrzeć przykład, zobacz <xref:System.Globalization.SortVersion> odwołania do stron.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>