<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b25ec1a1a97770e2bab17db24264f5a82ce4661" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68397290" /></Metadata><TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementuje zestaw metod dla porównywania ciągów z uwzględnieniem kultury.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Konwencje do porównywania i sortowania danych różnią się od kultury do kultury. Na przykład porządek sortowania może opierać się na fonetycznych lub w wizualnej reprezentacji znaków. W językach wschodnioazjatyckich znaki są sortowane według obrysu i pierwiastka z ideogramy. Sortowanie zależy również od języków zamówienia i kultur używanych dla alfabetu. Na przykład język duński ma znak "Æ", który jest sortowany po "Z" alfabetu. Ponadto porównania mogą być rozróżniane wielkości liter lub wielkości liter, a zasady dotyczące wielkości liter mogą również różnić się w zależności od kultury. <xref:System.Globalization.CompareInfo> Klasa jest odpowiedzialna za utrzymywanie danych porównania ciągów z uwzględnieniem kultury i wykonywanie operacji na ciągach z uwzględnieniem kultury.

 Zazwyczaj nie trzeba tworzyć wystąpienia <xref:System.Globalization.CompareInfo> obiektu bezpośrednio, ponieważ jeden z nich jest używany niejawnie przez wszystkie operacje porównywania ciągów inne niż porządkowe, w tym wywołania <xref:System.String.Compare%2A?displayProperty=nameWithType> metody. Jeśli jednak chcesz pobrać <xref:System.Globalization.CompareInfo> obiekt, możesz to zrobić w jeden z następujących sposobów:

-   Pobierając wartość <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> właściwości dla określonej kultury.

-   Przez wywołanie metody statycznej <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> z nazwą kultury. Pozwala to na późny dostęp do <xref:System.Globalization.CompareInfo> obiektu.

## <a name="ignored-search-values"></a>Zignorowane wartości wyszukiwania
 Zestawy znaków zawierają znaki do pominięcia. Są to znaki nieuwzględniane podczas porównywania pod względem językowym lub z uwzględnieniem ustawień kulturowych. Metody porównania, takie <xref:System.Globalization.CompareInfo.IndexOf%2A> jak <xref:System.Globalization.CompareInfo.LastIndexOf%2A> i nie uwzględniają takich znaków podczas wykonywania porównania z uwzględnieniem kultury. Do ignorowania znaków należą:

-   <xref:System.String.Empty?displayProperty=nameWithType>. Metody porównania uwzględniające kulturę zawsze znajdą pusty ciąg na początku (indeks zero) wyszukiwanego ciągu.

-   Znak lub ciąg składający się z znaków z punktami kodu, które nie są uwzględniane w operacji ze względu na opcje porównania, <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> w <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> szczególności opcje i generują wyszukiwania, w których symbole i nie są łączone do łączenia znaki są ignorowane.

-   Ciąg z punktami kodu, który nie ma znaczenia językowego. Na przykład łącznik miękki (U + 00AD) jest zawsze ignorowany w porównaniu do porównania ciągów z uwzględnieniem kultury.

## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne, niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy użyć metod porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład pokazuje, <xref:System.Globalization.CompareInfo> jak obiekt skojarzony <xref:System.Globalization.CultureInfo> z obiektem ma wpływ na Porównywanie ciągów.

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921">Sortowanie tabel wagi dla systemów operacyjnych Windows</related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt">Domyślna tabela elementów sortowania Unicode dla systemów Linux i macOS</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje dwa ciągi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <summary>Porównuje dwa ciągi.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description><paramref name="string1" />jest mniejsze niż <paramref name="string2" />.

 </description></item><item><term> Większe niż zero

 </term><description><paramref name="string1" />jest większa niż <paramref name="string2" />.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Domyślnie porównanie jest wykonywane przy użyciu <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareInfo> obiektów:

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą Hiszpańska (Hiszpania) z sortowaniem międzynarodowym

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą hiszpańskią (Hiszpania) z tradycyjnym sortowaniem

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z<xref:System.Globalization.CultureInfo.InvariantCulture%2A>

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 Poniższy przykład demonstruje wywołanie <xref:System.Globalization.CompareInfo.Compare%2A> metody.

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki do pominięcia. Są to znaki nieuwzględniane podczas porównywania pod względem językowym lub z uwzględnieniem ustawień kulturowych. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> Metoda nie uwzględnia takich znaków, gdy wykonuje porównanie z uwzględnieniem kultury. Na przykład porównanie wrażliwe na kulturę "zwierzę" z "lub" niezłośliwe "(przy użyciu łącznika miękkiego lub U + 00AD) wskazuje, że dwa ciągi są równoważne, jak pokazano w poniższym przykładzie.

[!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]

Aby rozpoznać ignorowanie znaków w porównaniu ciągów, wywołaj <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metodę i podaj wartość albo <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="string1" /> i <paramref name="string2" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />,, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje dwa ciągi przy użyciu <see cref="T:System.Globalization.CompareOptions" /> określonej wartości.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description><paramref name="string1" />jest mniejsze niż <paramref name="string2" />.

 </description></item><item><term> Większe niż zero

 </term><description><paramref name="string1" />jest większa niż <paramref name="string2" />.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje dwa ciągi przy użyciu <xref:System.Globalization.CompareOptions> różnych ustawień.

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]

 Poniższy przykład demonstruje wywołanie <xref:System.Globalization.CompareInfo.Compare%2A> metody.

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki do pominięcia. Są to znaki nieuwzględniane podczas porównywania pod względem językowym lub z uwzględnieniem ustawień kulturowych. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> Metoda nie uwzględnia takich znaków, gdy wykonuje porównanie z uwzględnieniem kultury. Aby rozpoznać ignorowanych znaków w porównaniu, podaj wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku, w <paramref name="string1" /> którym należy rozpocząć porównywanie.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku, w <paramref name="string2" /> którym należy rozpocząć porównywanie.</param>
        <summary>Porównuje sekcję końcową ciągu z sekcją końcową innego ciągu.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description> Określona sekcja <paramref name="string1" /> jest mniejsza niż określona <paramref name="string2" />sekcja.

 </description></item><item><term> Większe niż zero

 </term><description> Określona sekcja <paramref name="string1" /> jest większa niż określona <paramref name="string2" />sekcja.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareInfo> obiektów:

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą Hiszpańska (Hiszpania) z sortowaniem międzynarodowym

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą hiszpańskią (Hiszpania) z tradycyjnym sortowaniem

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z<xref:System.Globalization.CultureInfo.InvariantCulture%2A>

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />lub <paramref name="offset2" /> jest mniejsza od zera.

—lub—

 <paramref name="offset1" />jest większa lub równa liczbie znaków w <paramref name="string1" />.

—lub—

 <paramref name="offset2" />jest większa lub równa liczbie znaków w <paramref name="string2" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> Metoda nie uwzględnia tych znaków, gdy wykonuje to porównanie lingwistyczne lub kulturowe. Aby rozpoznać ignorowane znaki w porównaniu, wywołaj <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodę i podaj <see cref="F:System.Globalization.CompareOptions.Ordinal" /> wartość lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku, w <paramref name="string1" /> którym należy rozpocząć porównywanie.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku, w <paramref name="string2" /> którym należy rozpocząć porównywanie.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="string1" /> i <paramref name="string2" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />,, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje sekcję końcową ciągu z sekcją końcową innego ciągu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description> Określona sekcja <paramref name="string1" /> jest mniejsza niż określona <paramref name="string2" />sekcja.

 </description></item><item><term> Większe niż zero

 </term><description> Określona sekcja <paramref name="string1" /> jest większa niż określona <paramref name="string2" />sekcja.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareOptions> ustawień.

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />lub <paramref name="offset2" /> jest mniejsza od zera.

—lub—

 <paramref name="offset1" />jest większa lub równa liczbie znaków w <paramref name="string1" />.

—lub—

 <paramref name="offset2" />jest większa lub równa liczbie znaków w <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki do pominięcia. Są to znaki nieuwzględniane podczas porównywania pod względem językowym lub z uwzględnieniem ustawień kulturowych. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> Metoda nie uwzględnia takich znaków podczas przeprowadzania porównania z uwzględnieniem kultury. Aby rozpoznać ignorowanych znaków w porównaniu, podaj wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku, w <paramref name="string1" /> którym należy rozpocząć porównywanie.</param>
        <param name="length1">Liczba kolejnych znaków w <paramref name="string1" /> do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku, w <paramref name="string2" /> którym należy rozpocząć porównywanie.</param>
        <param name="length2">Liczba kolejnych znaków w <paramref name="string2" /> do porównania.</param>
        <summary>Porównuje sekcję jednego ciągu z sekcją innego ciągu.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description> Określona sekcja <paramref name="string1" /> jest mniejsza niż określona <paramref name="string2" />sekcja.

 </description></item><item><term> Większe niż zero

 </term><description> Określona sekcja <paramref name="string1" /> jest większa niż określona <paramref name="string2" />sekcja.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy użyć metod porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareInfo> obiektów:

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą Hiszpańska (Hiszpania) z sortowaniem międzynarodowym

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą hiszpańskią (Hiszpania) z tradycyjnym sortowaniem

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z<xref:System.Globalization.CultureInfo.InvariantCulture%2A>

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />lub lub <paramref name="length1" />jestmniejszaodzera .<paramref name="length2" /> <paramref name="offset2" />

—lub—

 <paramref name="offset1" />jest większa lub równa liczbie znaków w <paramref name="string1" />.

—lub—

 <paramref name="offset2" />jest większa lub równa liczbie znaków w <paramref name="string2" />.

—lub—

 <paramref name="length1" />jest większa niż liczba znaków od <paramref name="offset1" /> do <paramref name="string1" />końca.

—lub—

 <paramref name="length2" />jest większa niż liczba znaków od <paramref name="offset2" /> do <paramref name="string2" />końca.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> Metoda nie uwzględnia tych znaków, gdy wykonuje to porównanie lingwistyczne lub kulturowe. Aby rozpoznać ignorowane znaki w porównaniu, wywołaj <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodę i podaj <see cref="F:System.Globalization.CompareOptions.Ordinal" /> wartość lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Pierwszy ciąg do porównania.</param>
        <param name="offset1">Liczony od zera indeks znaku, w <paramref name="string1" /> którym należy rozpocząć porównywanie.</param>
        <param name="length1">Liczba kolejnych znaków w <paramref name="string1" /> do porównania.</param>
        <param name="string2">Drugi ciąg do porównania.</param>
        <param name="offset2">Liczony od zera indeks znaku, w <paramref name="string2" /> którym należy rozpocząć porównywanie.</param>
        <param name="length2">Liczba kolejnych znaków w <paramref name="string2" /> do porównania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="string1" /> i <paramref name="string2" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />,, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Porównuje sekcję jednego ciągu z sekcją innego ciągu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazująca, że relacja leksykalna między dwoma comparands.

 <list type="table"><listheader><term> Wartość

 </term><description> Warunek

 </description></listheader><item><term> zero

 </term><description> Dwa ciągi są równe.

 </description></item><item><term> Mniejsze od zera

 </term><description> Określona sekcja <paramref name="string1" /> jest mniejsza niż określona <paramref name="string2" />sekcja.

 </description></item><item><term> Większe niż zero

 </term><description> Określona sekcja <paramref name="string1" /> jest większa niż określona <paramref name="string2" />sekcja.

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareOptions> ustawień.

 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1" />lub lub <paramref name="length1" />jestmniejszaodzera .<paramref name="length2" /> <paramref name="offset2" />

—lub—

 <paramref name="offset1" />jest większa lub równa liczbie znaków w <paramref name="string1" />.

—lub—

 <paramref name="offset2" />jest większa lub równa liczbie znaków w <paramref name="string2" />.

—lub—

 <paramref name="length1" />jest większa niż liczba znaków od <paramref name="offset1" /> do <paramref name="string1" />końca.

—lub—

 <paramref name="length2" />jest większa niż liczba znaków od <paramref name="offset2" /> do <paramref name="string2" />końca.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków obejmują znaki do pominięcia. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda nie uwzględnia tych znaków, gdy wykonuje porównanie z uwzględnieniem kultury. Aby rozpoznać ignorowanych znaków w porównaniu, podaj wartość <see cref="F:System.Globalization.CompareOptions.Ordinal" /> lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> dla <paramref name="options" /> parametru.</para></block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać porównany <see cref="T:System.Globalization.CompareInfo" />z bieżącym.</param>
        <summary>Określa, czy określony obiekt jest równy bieżącemu <see cref="T:System.Globalization.CompareInfo" /> obiektowi.</summary>
        <returns><see langword="true" />Jeśli określony obiekt jest równy bieżącemu <see cref="T:System.Globalization.CompareInfo" />; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Dwa <xref:System.Globalization.CompareInfo> obiekty są równe, jeśli <xref:System.Globalization.CompareInfo.LCID%2A> ich <xref:System.Globalization.CompareInfo.Name%2A> właściwości i są równe.

 Ta metoda przesłania <xref:System.Object.Equals%2A?displayProperty=nameWithType>.

 Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości, aby upewnić się, że zachowanie jest spójne niezależnie od ustawień kultury systemu operacyjnego.

 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Liczba całkowita reprezentująca identyfikator kultury.</param>
        <summary>Inicjuje nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt, który jest skojarzony z kulturą o określonym identyfikatorze.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą o określonym identyfikatorze i korzystający z metod porównywania ciągów w <see cref="T:System.Reflection.Assembly" />bieżącym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareInfo> obiektów:

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą Hiszpańska (Hiszpania) z sortowaniem międzynarodowym

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą hiszpańskią (Hiszpania) z tradycyjnym sortowaniem

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z<xref:System.Globalization.CultureInfo.InvariantCulture%2A>

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg reprezentujący nazwę kultury.</param>
        <summary>Inicjuje nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt, który jest skojarzony z kulturą o określonej nazwie.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą o określonym identyfikatorze i korzystający z metod porównywania ciągów w <see cref="T:System.Reflection.Assembly" />bieżącym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 Poniższy przykład porównuje fragmenty dwóch ciągów przy użyciu różnych <xref:System.Globalization.CompareInfo> obiektów:

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą Hiszpańska (Hiszpania) z sortowaniem międzynarodowym

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z kulturą hiszpańskią (Hiszpania) z tradycyjnym sortowaniem

-   <xref:System.Globalization.CompareInfo>obiekt skojarzony z<xref:System.Globalization.CultureInfo.InvariantCulture%2A>

 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" />jest nieprawidłową nazwą kultury.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Liczba całkowita reprezentująca identyfikator kultury.</param>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" /> Zawiera metody porównywania ciągów do użycia.</param>
        <summary>Inicjuje nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt, który jest skojarzony z określoną kulturą i korzysta z metod porównywania ciągów określonych <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą o określonym identyfikatorze i korzystający z metod porównywania ciągów w <see cref="T:System.Reflection.Assembly" />bieżącym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  Zachowanie tej metody jest nieprzewidywalne. Zalecane jest, aby aplikacja korzystała z wersji tej metody, która nie pobiera danych wejściowych zestawu.

 Parametr musi być tego samego typu co <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>. `assembly`

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" />jest nieprawidłowym typem.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg reprezentujący nazwę kultury.</param>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" /> Zawiera metody porównywania ciągów do użycia.</param>
        <summary>Inicjuje nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt, który jest skojarzony z określoną kulturą i korzysta z metod porównywania ciągów określonych <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>Nowy <see cref="T:System.Globalization.CompareInfo" /> obiekt skojarzony z kulturą o określonym identyfikatorze i korzystający z metod porównywania ciągów w <see cref="T:System.Reflection.Assembly" />bieżącym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  Zachowanie tej metody jest nieprzewidywalne. Zalecamy użycie wersji tej metody, która nie pobiera danych wejściowych zestawu.

 Parametr musi być tego samego typu co <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>. `assembly`

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />jest <see langword="null" />.

—lub—

 <paramref name="assembly" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" />jest nieprawidłową nazwą kultury.

—lub—

 <paramref name="assembly" />jest nieprawidłowym typem.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kod skrótu dla tego <see cref="T:System.Globalization.CompareInfo" /> wystąpienia lub dla określonego ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla bieżącego <see cref="T:System.Globalization.CompareInfo" /> algorytmu skrótu i struktur danych, takich jak tabela skrótów.</summary>
        <returns>Kod skrótu dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ta metoda przesłania <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.

 Ta metoda generuje ten sam kod skrótu dla dwóch obiektów, które są równe zgodnie <xref:System.Globalization.CompareInfo.Equals%2A> z metodą.

 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (ReadOnlySpan&lt;char&gt; source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (source As ReadOnlySpan(Of Char), options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(ReadOnlySpan&lt;char&gt; source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : ReadOnlySpan&lt;char&gt; * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="source">Zakres znaków, dla którego ma zostać zwrócony kod skrótu.</param>
        <param name="options">Wartość określająca sposób porównywania ciągów.</param>
        <summary>Pobiera kod skrótu dla zakresu znaków na podstawie określonych opcji porównania.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Zachowanie tego przeciążenia jest zależne od implementacji, która może ulec zmianie z jednej wersji środowiska uruchomieniowego języka wspólnego na inną lub z jednej implementacji platformy .NET na inną.

> [!IMPORTANT]
>  Jeśli dwa zakresy znaków są równe, to Przeciążenie zwraca identyczne wartości. Nie istnieje jednak unikatowa wartość kodu skrótu dla każdej wartości unikatowego zakresu znaków. Różne zakresy znaków mogą zwracać ten sam kod skrótu.
>
>  Sam kod skrótu nie jest gwarantowany jako stabilny. Kody skrótów dla identycznych zakresów znaków mogą się różnić w różnych wersjach implementacji platformy .NET i na różnych platformach (takich jak 32-bitowe i 64-bitowe) dla jednej wersji platformy .NET.
>
>  W związku z tym kody skrótów nigdy nie powinny być używane poza domeną aplikacji, w której zostały utworzone, nigdy nie powinny być używane jako pola kluczy w kolekcji i nigdy nie powinny być utrwalane.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg, którego kod skrótu ma zostać zwrócony.</param>
        <param name="options">Wartość określająca sposób porównywania ciągów.</param>
        <summary>Pobiera kod skrótu dla ciągu na podstawie określonych opcji porównania.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Zachowanie <xref:System.Globalization.CompareInfo.GetHashCode%2A> jest zależne od jego implementacji, które może ulec zmianie z jednej wersji środowiska uruchomieniowego języka wspólnego na inny lub z jednej .NET Framework platformy na inną.

> [!IMPORTANT]
>  Jeśli dwa obiekty String są równe, <xref:System.Globalization.CompareInfo.GetHashCode%2A> Metoda zwraca identyczne wartości. Nie istnieje jednak unikatowa wartość kodu skrótu dla każdej unikatowej wartości ciągu. Różne ciągi mogą zwracać ten sam kod skrótu.
>
>  Sam kod skrótu nie jest gwarantowany jako stabilny. Kody skrótów dla identycznych ciągów mogą się różnić między wersjami .NET Framework i między platformami (takimi jak 32-bitowe i 64-bitowe) dla jednej wersji .NET Framework. W niektórych przypadkach mogą one nawet różnić się w zależności od domeny aplikacji.
>
>  W związku z tym kody skrótów nigdy nie powinny być używane poza domeną aplikacji, w której zostały utworzone, nigdy nie powinny być używane jako pola kluczy w kolekcji i nigdy nie powinny być utrwalane.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Globalization.SortKey" /> Pobiera obiekt dla ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg, dla którego <see cref="T:System.Globalization.SortKey" /> uzyskany jest obiekt.</param>
        <summary>Pobiera klucz sortowania dla określonego ciągu.</summary>
        <returns><see cref="T:System.Globalization.SortKey" /> Obiekt, który zawiera klucz sortowania dla określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy znak w ciągu otrzymuje kilka kategorii wag sortowania, w tym skryptu, alfabetycznego, wielkości liter i znaków diakrytycznych. Klucz sortowania to repozytorium tych wag dla określonego ciągu. Na przykład klucz sortowania może zawierać ciąg odważników alfabetycznych, po którym następuje ciąg wag wielkości liter itd. Metoda jest równoważna z metodą `LCMapString` interfejsu API systemu Windows z flagą LCMAP_SORTKEY. <xref:System.Globalization.CompareInfo.GetSortKey%2A>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg, dla którego <see cref="T:System.Globalization.SortKey" /> uzyskany jest obiekt.</param>
        <param name="options">Bitowa kombinacja co najmniej jednej z następujących wartości wyliczenia, która definiuje sposób obliczania klucza sortowania: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />,, i <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Pobiera obiekt dla określonego ciągu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości. <see cref="T:System.Globalization.SortKey" /></summary>
        <returns><see cref="T:System.Globalization.SortKey" /> Obiekt, który zawiera klucz sortowania dla określonego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy znak w ciągu otrzymuje kilka kategorii wag sortowania, w tym skryptu, alfabetycznego, wielkości liter i znaków diakrytycznych. Klucz sortowania to repozytorium tych wag dla określonego ciągu. Na przykład klucz sortowania może zawierać ciąg odważników alfabetycznych, po którym następuje ciąg wag wielkości liter itd. Metoda jest równoważna z metodą `LCMapString` interfejsu API systemu Windows z flagą LCMAP_SORTKEY. <xref:System.Globalization.CompareInfo.GetSortKey%2A>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca indeks (liczony od zera) pierwszego wystąpienia wartości w ciągu lub wewnątrz jego części.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w całym ciągu źródłowym.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />; w przeciwnym razie,-1. Zwraca wartość 0 (zero) <paramref name="value" /> , jeśli jest znakiem ignorowanym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ta metoda przeszukuje ciąg źródłowy od początku ciągu do końca ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli `value` reprezentuje złożony znak Unicode, taki jak ligatury "Æ" (u + 00C6), może być uważany za odpowiednik dowolnego wystąpienia jego składników w poprawnej sekwencji, takiej jak "AE" (u + 0041, u + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy ich punkty kodu Unicode są takie same, należy wywołać Przeciążenie, które ma parametr typu <xref:System.Globalization.CompareOptions> i użyć <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> wartościami. W przeciwieństwie <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>do, które wykonuje porównanie <xref:System.String.IndexOf%2A?displayProperty=nameWithType> z uwzględnieniem kultury, przeciążenia metody, która wyszukuje znak, wykonują porównanie porządkowe i przeciążenia, które wyszukują ciąg, przenoszące porównanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy użyć metod porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> Metoda zawsze zwraca wartość 0 (zero), aby wskazać, że dopasowanie znajduje się na <paramref name="source" />początku. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> Metoda jest używana do znajdowania łącznika miękkiego (U + 00AD) w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który może zostać zignorowany, metoda zwraca 0 (zero), aby wskazać, że znalazł dopasowanie na początku ciągu.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para></block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w całym ciągu źródłowym.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />; w przeciwnym razie,-1. Zwraca wartość 0 (zero) <paramref name="value" /> , jeśli jest znakiem ignorowanym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu, zaczynając od początku ciągu i kończąc na końcu ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy użyć jednego z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> , które można zignorować, Metoda zawsze zwraca wartość 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> Metoda jest używana w celu znalezienia trzech podciągów (łącznika miękkiego (U + 00AD), łącznika miękkiego, a następnie znaku "n" i łącznika miękkiego, po którym następuje znak "m") w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W każdym przypadku, ponieważ łącznik miękki jest znakiem, który można zignorować, wynik jest taki sam jak wtedy, gdy łącznik miękki nie został uwzględniony <paramref name="value" />w. Podczas wyszukiwania tylko łącznika miękkiego Metoda zwraca wartość 0 (zero), aby wskazać, że znaleziono dopasowanie na początku ciągu.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="options">Wartość określająca sposób porównywania ciągów. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w całym ciągu źródłowym przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca wartość 0 (zero) <paramref name="value" /> , jeśli jest znakiem ignorowanym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu, zaczynając od początku ciągu i kończąc na końcu ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy użyć metod porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca wartość 0 (zero), aby wskazać, że dopasowanie znajduje się na <paramref name="source" />początku. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Metoda jest używana do wyszukiwania łącznika miękkiego (U + 00AD) w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie wrażliwe na kulturę zwraca 0 (zero), aby wskazać, że znaleziono dopasowanie na początku ciągu. Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[! code-CSharp[System. globalizacja. CompareInfo. IndexOf # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! code — VB[System. globalizacja. CompareInfo. IndexOf # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od określonego indeksu do końca ciągu.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która rozciąga się <paramref name="source" />od <paramref name="startIndex" /> do końca; w przeciwnym razie,-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` , rozpoczynając od i kończąc na końcu ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same, należy wywołać jedno z przeciążeń, które mają parametr <xref:System.Globalization.CompareOptions> typu i użyć <xref:System.Globalization.CompareOptions.Ordinal> wartościami. <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD) po "n" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który może zostać zignorowany, metoda zwraca wartość 1, aby wskazać, że znaleziono dopasowanie na pozycji "n".

[!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w całym ciągu źródłowym przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca wartość 0 (zero) <paramref name="value" /> , jeśli jest znakiem ignorowanym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu, zaczynając od początku ciągu i kończąc na końcu ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> , które można zignorować, Metoda zawsze zwraca wartość 0 (zero), aby wskazać, że dopasowanie znajduje się na początku <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> Metoda jest używana w celu znalezienia trzech podciągów (łącznika miękkiego (U + 00AD), łącznika miękkiego, a następnie znaku "n" i łącznika miękkiego, po którym następuje znak "m") w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. Ponieważ łącznik niewygładzony jest znakiem, którego nie można zignorować, wyszukiwanie z uwzględnieniem kultury zwraca tę samą wartość, którą zwróci, jeśli łącznik niemiękki nie został uwzględniony w ciągu wyszukiwania. Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od określonego indeksu do końca ciągu.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która rozciąga się <paramref name="source" />od <paramref name="startIndex" /> do końca; w przeciwnym razie,-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` , rozpoczynając od i kończąc na końcu ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m" w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który można zignorować, metoda zwraca indeks "m" w ciągu. Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od określonego indeksu do końca ciągu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która rozciąga się <paramref name="source" />od <paramref name="startIndex" /> do końca, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` , rozpoczynając od i kończąc na końcu ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, położenie znaku, od którego pierwsze rozpoczęło wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania łącznika miękkiego (U + 00AD) po "n" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie zależne od kultury zwraca wartość 1, aby wskazać, że znaleziono dopasowanie na pozycji "n". Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który zaczyna się od określonego indeksu i zawiera określoną liczbę elementów.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znaleziono, w <paramref name="source" /> sekcji, która zaczyna się <paramref name="startIndex" /> od i zawiera liczbę elementów określonych przez <paramref name="count" />; w przeciwnym razie,-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` i kończy się `startIndex` na  +  `count` -1.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same, należy wywołać jedno z przeciążeń, które mają parametr <xref:System.Globalization.CompareOptions> typu i użyć <xref:System.Globalization.CompareOptions.Ordinal> wartościami. <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, od której pierwsze rozpoczęto wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD) po "n" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który może zostać zignorowany, metoda zwraca wartość 1, aby wskazać, że znaleziono dopasowanie na pozycji "n".

[!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od określonego indeksu do końca ciągu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która rozciąga się <paramref name="source" />od <paramref name="startIndex" /> do końca, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` , rozpoczynając od i kończąc na końcu ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m" zaczynający się od trzeciego położenia znaku w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”. Metoda ta zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który zaczyna się od określonego indeksu i zawiera określoną liczbę elementów.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znaleziono, w <paramref name="source" /> sekcji, która zaczyna się <paramref name="startIndex" /> od i zawiera liczbę elementów określonych przez <paramref name="count" />; w przeciwnym razie,-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` i kończy się `startIndex` na  +  `count` -1.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m" zaczynający się od trzeciego do szóstego znaku w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który zaczyna się od określonego indeksu i zawiera określoną liczbę elementów przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która zaczyna się <paramref name="startIndex" /> od i zawiera liczbę elementów określonych przez <paramref name="count" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` i kończy się `startIndex` na  +  `count` -1.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.IndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, od której pierwsze rozpoczęto wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania łącznika miękkiego (U + 00AD) po "n" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie zależne od kultury zwraca wartość 1, aby wskazać, że znaleziono dopasowanie na pozycji "n". Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) pierwszego wystąpienia w sekcji ciągu źródłowego, który zaczyna się od określonego indeksu i zawiera określoną liczbę elementów przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) pierwszego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która zaczyna się <paramref name="startIndex" /> od i zawiera liczbę elementów określonych przez <paramref name="count" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do przodu `startIndex` i kończy się `startIndex` na  +  `count` -1.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m" zaczynający się od trzeciego do szóstego znaku w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Gdy wykonuje to porównanie porządkowe, znajduje podciąg tylko w pierwszym ciągu. Należy zauważyć, że w przypadku pierwszego ciągu, który zawiera Łącznik miękki, po którym następuje "m", metoda nie zwróci indeksu łącznika miękkiego, ale zamiast tego zwraca indeks "m", gdy wykonuje porównanie z uwzględnieniem kultury. Metoda ta zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.

[!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy ciąg rozpoczyna się od określonego prefiksu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="prefix">Ciąg, który ma zostać porównany z <paramref name="source" />początkiem.</param>
        <summary>Określa, czy określony ciąg źródłowy rozpoczyna się od określonego prefiksu.</summary>
        <returns><see langword="true" />Jeśli <paramref name="prefix" /> długość jest mniejsza lub równa <paramref name="source" /> <paramref name="source" /> długości i zaczyna <paramref name="prefix" />się od; w przeciwnym razie, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy ciąg rozpoczyna się i kończą ciągiem pustym (""); w związku z `prefix` tym, jeśli jest pustym ciągiem, `true`Metoda ta zwraca wartość.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa, czy ciąg jest prefiksem, czy sufiksem innego ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="prefix" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="prefix">Ciąg, który ma zostać porównany z <paramref name="source" />początkiem.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="prefix" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Określa, czy określony ciąg źródłowy rozpoczyna się od określonego prefiksu przy użyciu <see cref="T:System.Globalization.CompareOptions" /> określonej wartości.</summary>
        <returns><see langword="true" />Jeśli <paramref name="prefix" /> długość jest mniejsza lub równa <paramref name="source" /> <paramref name="source" /> długości i zaczyna <paramref name="prefix" />się od; w przeciwnym razie, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy ciąg rozpoczyna się i kończą ciągiem pustym (""); w związku z `prefix` tym, jeśli jest pustym ciągiem, `true`Metoda ta zwraca wartość.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa, czy ciąg jest prefiksem, czy sufiksem innego ciągu przy <xref:System.Globalization.CompareOptions>użyciu.

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="prefix" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy określony znak Unicode lub ciąg ma być sortowany.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ch">Znak Unicode.</param>
        <summary>Wskazuje, czy określony znak Unicode jest do sortowania.</summary>
        <returns><see langword="true" />Jeśli parametr jest sortowany; <see langword="false" />w przeciwnym razie. <paramref name="ch" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Parametr jest sortowany, jeśli jest znakiem Unicode, który jest zdefiniowany w tabeli <xref:System.Globalization.CompareInfo> sortowania klasy wewnętrznej i nie jest prywatnym lub niesparowanym znakiem dwuskładnikowym. `ch`

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg składający się z zero lub więcej znaków Unicode.</param>
        <summary>Wskazuje, czy określony ciąg Unicode jest do sortowania.</summary>
        <returns><see langword="true" />Jeśli parametr nie jest pustym ciągiem ("") i wszystkie znaki Unicode w programie są <paramref name="str" /> do sortowania; <paramref name="str" /> w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy znak Unicode w `str` parametrze jest reprezentowany przez jeden lub więcej obiektów zakodowanych <xref:System.Char> w formacie UTF-16. Parametr jest sortowany, jeśli każdy znak Unicode jest zdefiniowany w wewnętrznej <xref:System.Globalization.CompareInfo> tabeli sortowania klasy i nie jest prywatnym lub niesparowanym znakiem dwuskładnikowym. `str`

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="str" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy ciąg ma kończyć się określonym sufiksem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="suffix">Ciąg do porównania z końcem <paramref name="source" />.</param>
        <summary>Określa, czy określony ciąg źródłowy ma kończyć się określonym sufiksem.</summary>
        <returns><see langword="true" />Jeśli <paramref name="suffix" /> długość jest mniejsza niż lub równa <paramref name="source" /> długości i <paramref name="source" /> zostanie zakończona <paramref name="suffix" />; w przeciwnym razie, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy ciąg rozpoczyna się i kończą ciągiem pustym (""); w związku z `suffix` tym, jeśli jest pustym ciągiem, `true`Metoda ta zwraca wartość.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa, czy ciąg jest prefiksem, czy sufiksem innego ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="suffix" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="suffix">Ciąg do porównania z końcem <paramref name="source" />.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="suffix" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" /> wyliczenia używaną samodzielnie lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Określa, czy określony ciąg źródłowy ma kończyć się określonym sufiksem przy użyciu <see cref="T:System.Globalization.CompareOptions" /> określonej wartości.</summary>
        <returns><see langword="true" />Jeśli <paramref name="suffix" /> długość jest mniejsza niż lub równa <paramref name="source" /> długości i <paramref name="source" /> zostanie zakończona <paramref name="suffix" />; w przeciwnym razie, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Każdy ciąg rozpoczyna się i kończą ciągiem pustym (""); w związku z `suffix` tym, jeśli jest pustym ciągiem, `true`Metoda ta zwraca wartość.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa, czy ciąg jest prefiksem, czy sufiksem innego ciągu przy <xref:System.Globalization.CompareOptions>użyciu.

 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="suffix" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca indeks (liczony od zera) ostatniego wystąpienia wartości w ciągu lub wewnątrz jego części.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w całym ciągu źródłowym.</summary>
        <returns>Indeks (liczony od zera) ostatniego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />; w przeciwnym razie,-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz, zaczynając od końca ciągu i kończąc na początku ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same, należy wywołać jedno z przeciążeń, które mają parametr <xref:System.Globalization.CompareOptions> typu i użyć <xref:System.Globalization.CompareOptions.Ordinal> wartościami. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> Metoda zawsze zwraca ostatnią pozycję indeksu w <paramref name="source" /> , aby wskazać, że dopasowanie zostanie <paramref name="source" />znalezione na końcu. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> Metoda jest używana do znajdowania łącznika miękkiego (U + 00AD) w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który można zignorować, metoda zwraca ostatnią pozycję indeksu w ciągu, aby wskazać, że znaleziono dopasowanie na końcu ciągu.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w całym ciągu źródłowym.</summary>
        <returns>Indeks (liczony od zera) ostatniego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />; w przeciwnym razie,-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz, zaczynając od końca ciągu i kończąc na początku ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków, które <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> można zignorować, Metoda zawsze zwraca <paramref name="source" />wartość.<see cref="P:System.String.Length" /> -1, który reprezentuje ostatnią pozycję indeksu w <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> Metoda jest używana w celu znalezienia trzech podciągów (łącznika miękkiego (U + 00AD), łącznika miękkiego, a następnie znaku "n" i łącznika miękkiego, po którym następuje znak "m") w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W każdym przypadku, ponieważ łącznik miękki jest znakiem, który można zignorować, wynik jest taki sam jak wtedy, gdy łącznik miękki nie został uwzględniony <paramref name="value" />w. Podczas wyszukiwania tylko łącznika miękkiego Metoda zwraca wartość 6 i 5. Te wartości odpowiadają indeksowi ostatniego znaku w dwóch ciągach.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w całym ciągu źródłowym przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera) ostatniego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz, zaczynając od końca ciągu i kończąc na początku ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca ostatnią pozycję znaku w <paramref name="source" /> , aby wskazać, że dopasowanie zostanie <paramref name="source" />znalezione na końcu. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> Metoda jest używana do wyszukiwania łącznika miękkiego (U + 00AD) w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie z uwzględnieniem kultury zwraca ostatnią pozycję indeksu w ciągu źródłowym. W przeciwieństwie, wyszukiwanie porządkowe pomyślnie odnajdzie łącznik miękki w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od początku ciągu do określonego indeksu.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) ostatniego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która <paramref name="source" /> rozciąga się od początku do <paramref name="startIndex" />; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do tyłu `startIndex` i kończąc na początku ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same, należy wywołać jedno z przeciążeń, które mają parametr <xref:System.Globalization.CompareOptions> typu i użyć <xref:System.Globalization.CompareOptions.Ordinal> wartościami. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD), który poprzedza końcowy "m" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który można zignorować, metoda zwraca pozycję indeksu "m", która jest wartością <paramref name="startIndex" />.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w całym ciągu źródłowym przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera) ostatniego wystąpienia <paramref name="value" />, jeśli znajduje się w <paramref name="source" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz, zaczynając od końca ciągu i kończąc na początku ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków, które <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> można zignorować, Metoda zawsze zwraca <paramref name="source" />wartość.<see cref="P:System.String.Length" /> -1, który reprezentuje ostatnią pozycję indeksu w <paramref name="source" />. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> Metoda jest używana w celu znalezienia trzech podciągów (łącznika miękkiego (U + 00AD), łącznika miękkiego, a następnie znaku "n" i łącznika miękkiego, po którym następuje znak "m") w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. Ponieważ łącznik niewygładzony jest znakiem, którego nie można zignorować, wyszukiwanie z uwzględnieniem kultury zwraca tę samą wartość, którą zwróci, jeśli łącznik niemiękki nie został uwzględniony w ciągu wyszukiwania. Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od początku ciągu do określonego indeksu.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) ostatniego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która <paramref name="source" /> rozciąga się od początku do <paramref name="startIndex" />; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do tyłu `startIndex` i kończąc na początku ciągu.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> Metoda jest używana do znajdowania podciągu, który zawiera Łącznik miękki (U + 00AD), który poprzedza lub zawiera końcową literę "m" w ciągu. Ponieważ łącznik niewygładzony w ciągu wyszukiwania jest ignorowany, wywołanie metody w celu znalezienia podciągu składającego się z łącznika miękkiego i "m" zwraca pozycję "m" w ciągu, podczas gdy wywołuje go w celu znalezienia podciągu, który składa się z łącznika miękkiego i "n" zwraca  pozycja "n". Gdy ciąg wyszukiwania zawiera tylko łącznik miękki, metoda zwraca indeks "m", który reprezentuje wartość <paramref name="startIndex" />.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od początku ciągu do określonego indeksu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) ostatniego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która <paramref name="source" /> rozciąga się od początku do <paramref name="startIndex" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do tyłu `startIndex` i kończąc na początku ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD), który poprzedza końcowy "m" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie zależne od kultury zwraca pozycję indeksu "m". Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który zawiera określoną liczbę elementów i kończą się określonym indeksem.</summary>
        <returns>Indeks (liczony od <paramref name="value" />zera) ostatniego wystąpienia, jeśli został znaleziony, w <paramref name="source" /> sekcji zawierającej liczbę elementów określonych przez <paramref name="count" /> i kończących się na <paramref name="startIndex" />; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz od `startIndex` i kończąc od `startIndex`  -  `count` + 1.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same, należy wywołać jedno z przeciążeń, które mają parametr <xref:System.Globalization.CompareOptions> typu i użyć <xref:System.Globalization.CompareOptions.Ordinal> wartościami. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD), który poprzedza końcowy "m" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, który można zignorować, metoda zwraca pozycję indeksu "m", która jest wartością <paramref name="startIndex" />.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który rozciąga się od początku ciągu do określonego indeksu przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od zera <paramref name="value" />) ostatniego wystąpienia, jeśli znajduje się w <paramref name="source" /> sekcji, która <paramref name="source" /> rozciąga się od początku do <paramref name="startIndex" />, przy użyciu określonych opcji porównania; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany do tyłu `startIndex` i kończąc na początku ciągu.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu. Należy zauważyć <xref:System.Globalization.CompareInfo.IndexOf%2A> , <xref:System.Globalization.CompareInfo.LastIndexOf%2A> że i wyszukuje różne fragmenty ciągu, nawet z tym samym `startIndex` parametrem.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m", począwszy od końcowego "m" w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”. Metoda ta zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który zawiera określoną liczbę elementów i kończą się określonym indeksem.</summary>
        <returns>Indeks (liczony od <paramref name="value" />zera) ostatniego wystąpienia, jeśli został znaleziony, w <paramref name="source" /> sekcji zawierającej liczbę elementów określonych przez <paramref name="count" /> i kończących się na <paramref name="startIndex" />; w przeciwnym razie-1. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz od `startIndex` i kończąc od `startIndex`  -  `count` + 1.

 To Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. Aby wykonać wyszukiwanie porządkowe (bez uwzględniania kultury), w którym porównywane są wartości Unicode, należy wywołać jedno z przeciążeń, które ma parametr typu <xref:System.Globalization.CompareOptions> i <xref:System.Globalization.CompareOptions.Ordinal> użyć wartości.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli zawiera znak, który można zignorować, wynik jest równoznaczny z usunięciem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje znak "m" w trzech znakach poprzedzających końcowy "m" dwóch ciągów. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Należy pamiętać, że w przypadku pierwszego ciągu, który zawiera łącznik nietrwały, a po nim „m”, metoda nie zwraca indeksu łącznika nietrwałego, ale zamiast tego zwraca indeks „m”.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Znak, który ma zostać <paramref name="source" />zlokalizowany w elemencie.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony znak i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który zawiera określoną liczbę elementów i kończąc na określonym indeksie przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od <paramref name="value" />zera) ostatniego wystąpienia, jeśli został znaleziony, w <paramref name="source" /> sekcji zawierającej liczbę elementów określonych przez <paramref name="count" /> i kończących się na <paramref name="startIndex" />, przy użyciu określonych opcji porównania; w przeciwnym razie- jedno. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz od `startIndex` i kończąc od `startIndex`  -  `count` + 1.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Jeśli znak jest wartością Unicode reprezentującą znaki złożone, takie jak ligatury "Æ" (U + 00C6), może być uważane za równoważne każdemu wystąpieniu jego składników w poprawnej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury). Znak jest uważany za równoważny innemu znakowi tylko wtedy, gdy wartości Unicode są takie same. <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> Przeciążenia tego wyszukiwania znaku wykonują wyszukiwanie porządkowe, natomiast te, które wyszukują ciąg, wykonują wyszukiwanie z uwzględnieniem kultury.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury, <paramref name="value" /> jeśli jest znakiem, który jest ignorowany, wynik jest równoważny do wyszukiwania po usunięciu tego znaku. W takim przypadku <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda zawsze zwraca wartość <paramref name="startIndex" />, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie. W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znalezienia łącznika miękkiego (U + 00AD), który poprzedza końcowy "m" w dwóch ciągach. Tylko jeden z ciągów zawiera łącznik nietrwały. W obu przypadkach, ponieważ łącznik miękki jest znakiem, którego nie można zignorować, wyszukiwanie uwzględniające kulturę zwraca pozycję indeksu "m", która jest wartością parametru <paramref name="startIndex" />. Wyszukiwanie porządkowe, jednak pomyślnie znajduje łącznik niewygładzony w jednym ciągu i zgłasza, że nie jest on poza drugim ciągiem.

[!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Ciąg do wyszukania.</param>
        <param name="value">Ciąg do zlokalizowania <paramref name="source" />.</param>
        <param name="startIndex">Wartość początkowa indeksu zaczynającego się od zera dla wyszukiwania wstecznego.</param>
        <param name="count">Liczba elementów w sekcji do wyszukania.</param>
        <param name="options">Wartość, która definiuje sposób <paramref name="source" /> i <paramref name="value" /> należy porównać. <paramref name="options" />jest wartością <see cref="F:System.Globalization.CompareOptions.Ordinal" />wyliczenia lub bitową kombinacją co najmniej jednej z następujących wartości: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" /> <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, i <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Wyszukuje określony podciąg i zwraca indeks (liczony od zera) ostatniego wystąpienia w sekcji ciągu źródłowego, który zawiera określoną liczbę elementów i kończąc na określonym indeksie przy użyciu określonej <see cref="T:System.Globalization.CompareOptions" /> wartości.</summary>
        <returns>Indeks (liczony od <paramref name="value" />zera) ostatniego wystąpienia, jeśli został znaleziony, w <paramref name="source" /> sekcji zawierającej liczbę elementów określonych przez <paramref name="count" /> i kończących się na <paramref name="startIndex" />, przy użyciu określonych opcji porównania; w przeciwnym razie- jedno. Zwraca <paramref name="startIndex" /> wartość <paramref name="value" /> , jeśli jest znakiem, który jest ignorowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ciąg źródłowy jest przeszukiwany wstecz od `startIndex` i kończąc od `startIndex`  -  `count` + 1.

 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Wartość jest nieprawidłowa dla tej metody.

 Jeśli `options` nie<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartości, to Przeciążenie wykonuje wyszukiwanie z uwzględnieniem kultury. Wartość Unicode reprezentująca znak, taki jak ligatury "Æ" (U + 00C6), może być uważana za odpowiednik dowolnego wystąpienia składników znaku w prawidłowej sekwencji, takiej jak "AE" (U + 0041, U + 0045), w zależności od kultury. `options` Jeśli<xref:System.Globalization.CompareOptions.Ordinal> zawiera wartość, to Przeciążenie wykonuje wyszukiwanie porządkowe (bez uwzględniania kultury), gdzie porównywane są wartości Unicode.

> [!NOTE]
>  Jeśli to możliwe, należy wywołać metody porównywania ciągów, które mają parametr typu <xref:System.Globalization.CompareOptions> , aby określić oczekiwany rodzaj porównania. Ogólną zasadą jest użycie opcji językowych (przy użyciu bieżącej kultury) do porównywania ciągów wyświetlanych w interfejsie użytkownika <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> i <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> określania lub do porównania zabezpieczeń.



## Examples
 Poniższy przykład określa indeksy pierwszego i ostatniego wystąpienia znaku lub podciągu w części ciągu.

 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />jest <see langword="null" />.

—lub—

 <paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" />znajduje się poza zakresem prawidłowych indeksów <paramref name="source" />dla.

—lub—

 <paramref name="count" />jest mniejsza od zera.

—lub—

 <paramref name="startIndex" />i <paramref name="count" /> nie określaj prawidłowej sekcji w <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="options" />zawiera nieprawidłową <see cref="T:System.Globalization.CompareOptions" /> wartość.</exception>
        <block subset="none" type="usage"><para>Zestawy znaków zawierają znaki, które nie są brane pod uwagę podczas wykonywania sortowania w języku lub wrażliwym na kulturę. W przypadku wyszukiwania z uwzględnieniem kultury ( <paramref name="options" /> Jeśli nie <see cref="F:System.Globalization.CompareOptions.Ordinal" /> jest lub <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), jeśli <paramref name="value" /> zawiera znak do pominięcia, wynik jest równoważny z wyszukiwaniem tego znaku. Jeśli <paramref name="value" /> zawiera tylko jeden lub więcej znaków <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> , które można zignorować, Metoda zawsze zwraca <paramref name="startIndex" />wartość, która jest pozycją znaku, w której rozpoczyna się wyszukiwanie.

W poniższym przykładzie <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Metoda jest używana do znajdowania pozycji łącznika miękkiego (U + 00AD), po którym następuje "m" we wszystkich oprócz pierwszej pozycji znaku przed ostatnim "m" w dwóch ciągach. Tylko jeden z ciągów zawiera wymagany podciąg. W obu przypadkach, ponieważ łącznik nietrwały jest znakiem do pominięcia, metoda ta zwraca indeks „m” w ciągu podczas przeprowadzania porównania z uwzględnieniem ustawień kulturowych Gdy wykonuje to porównanie porządkowe, znajduje podciąg tylko w pierwszym ciągu. Należy zauważyć, że w przypadku pierwszego ciągu, który zawiera Łącznik miękki, po którym następuje "m", metoda nie zwróci indeksu łącznika miękkiego, ale zamiast tego zwraca indeks "m", gdy wykonuje porównanie z uwzględnieniem kultury. Metoda ta zwraca indeks łącznika nietrwałego w pierwszym ciągu tylko wtedy, gdy wykonuje porównanie porządkowe.

[!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para></block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera poprawnie sformułowany identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>Poprawnie sformułowany identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CompareInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 Poniższy przykład demonstruje <xref:System.Globalization.CompareInfo.LCID%2A> właściwość.

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury używanej do sortowania operacji przez ten <see cref="T:System.Globalization.CompareInfo" /> obiekt.</summary>
        <value>Nazwa kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Właściwości <xref:System.Globalization.CompareInfo.Name%2A> i<xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> mogą mieć różne wartości. Na przykład <xref:System.Globalization.CompareInfo.LCID%2A> wartość właściwości szesnastkowy 0x10407 identyfikuje alternatywną kulturę sortowania, która sortuje nazwy, ponieważ mogą one pojawić się w niemieckiej książce telefonicznej. Właściwość ma wartość "de-de_phoneb", <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> natomiast Właściwość powiązanej kultury niemieckiej (Niemcy) ma wartość "de-de". <xref:System.Globalization.CompareInfo.Name%2A>



## Examples
 Poniższy przykład porównuje trzy ciągi przy użyciu kultur fr-FR i ja-JP. <xref:System.Globalization.CultureInfo.Name%2A> Właściwość służy do wyświetlania nazwy każdej kultury.

 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne.</param>
        <summary>Uruchamiany, gdy zostanie odszeregowany cały wykres obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ten element członkowski jest jawną implementacją składowej interfejsu, która może być używana <xref:System.Globalization.CompareInfo> tylko wtedy, gdy bieżący <xref:System.Runtime.Serialization.IDeserializationCallback> obiekt jest rzutowany do interfejsu. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> metodę.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg, który reprezentuje bieżący <see cref="T:System.Globalization.CompareInfo" /> obiekt.</summary>
        <returns>Ciąg, który reprezentuje bieżący <see cref="T:System.Globalization.CompareInfo" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Ta metoda przesłania <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodę. Zwraca ciąg, który składa się z nazwy klasy i wartości właściwości wystąpienia <xref:System.Globalization.CompareInfo.Name%2A> , oddzielone łącznikiem.

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Gwiazdki z .NET Framework 4, <see cref="M:System.Globalization.CompareInfo.ToString" /> Metoda zwraca nazwę klasy, po której następuje spacja, łącznik, spację i wartość <see cref="P:System.Globalization.CompareInfo.Name" /> właściwości. Na przykład dla <see cref="T:System.Globalization.CompareInfo" /> obiektu, który reprezentuje kulturę en-us <see cref="M:System.Globalization.CompareInfo.ToString" /> , metoda zwraca wartość "CompareInfo-en-us". W poprzednich wersjach .NET Framework zwraca nazwę klasy, po której następuje spacja, łącznik, spacja i wartość <see cref="P:System.Globalization.CompareInfo.LCID" /> właściwości. Na przykład dla <see cref="T:System.Globalization.CompareInfo" /> obiektu, który reprezentuje kulturę en-us <see cref="M:System.Globalization.CompareInfo.ToString" /> , metoda zwraca wartość "CompareInfo-1033".</para></block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o wersji Unicode używanej do porównywania i sortowania ciągów.</summary>
        <value>Obiekt, który zawiera informacje o wersji Unicode używanej do porównywania i sortowania ciągów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Waga pojedynczych znaków i w związku z tym sposób, w jaki określone ciągi są porównywane lub uporządkowane, zależy od wersji specyfikacji Unicode, która jest implementowana przez określoną wersję .NET Framework. W programie [!INCLUDE[net_v45](~/includes/net-v45-md.md)]jest to również zależne od systemu operacyjnego hosta, jak pokazano w poniższej tabeli. Należy zauważyć, że ta lista obsługiwanych wersji Unicode ma zastosowanie do porównywania znaków i sortowania. nie dotyczy klasyfikacji znaków Unicode według kategorii.

|Wersja programu .NET Framework|System operacyjny|Wersja Unicode|
|----------------------------|----------------------|---------------------|
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Wszystkie systemy operacyjne|Unicode 5,0|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]i nowsze wersje|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5,0|
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]i nowsze wersje|[!INCLUDE[win8](~/includes/win8-md.md)]i nowsze wersje systemu operacyjnego Windows|Unicode 6,3|

 <xref:System.Globalization.SortVersion> Obiekt zwrócony<xref:System.Globalization.CompareInfo.Version%2A> przez właściwość nie identyfikuje dokładnej wersji Unicode używanej do porównywania ciągów. Jest to przydatne tylko w przypadku porównywania dwóch <xref:System.Globalization.SortVersion> obiektów, aby określić, czy używają tej samej wersji Unicode i kultury do porównywania ciągów. Aby uzyskać więcej informacji i zapoznać się z przykładem, zobacz <xref:System.Globalization.SortVersion> stronę referencyjną.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>