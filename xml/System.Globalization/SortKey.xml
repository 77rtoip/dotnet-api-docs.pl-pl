<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb630f84358d94203c1d383010b58eaae5badf1f" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52374285" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Przedstawia wynik mapowania ciąg do jego klucza sortowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultury porównanie dwóch ciągów jest zależna od każdego znaku w ciągach znaków, masz kilka kategorii wagi sortowania, w tym skrypcie alfabetyczne, wielkości liter i znaków diakrytycznych. Klucz sortowania służy jako repozytorium te wagi dla określonego ciągu.  
  
 <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> Metoda zwraca wystąpienie <xref:System.Globalization.SortKey> klasę, która odzwierciedla wrażliwość na ustawienia kulturowe mapowanie znaków określonego ciągu. Wartość <xref:System.Globalization.SortKey> obiekt jest danych klucza, który jest zwracany przez <xref:System.Globalization.SortKey.KeyData%2A> właściwości. Te dane kluczy składa się z serii bajtów, które zakodować ciąg, reguły sortowania specyficzne dla kultury i opcje porównywania określonych przez użytkownika. Porównanie przy użyciu kluczy sortowania składa się z porównanie bitowe odpowiadające im dane klucza w każdy klucz sortowania.  Na przykład, jeśli klucz sortowania jest utworzyć przez wywołanie metody <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> metody z wartością <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>, operacja porównania ciągu, który używa klucza sortowania jest rozróżniana wielkość liter.  
  
 Po utworzeniu klucz sortowania dla ciągu, porównać klucze sortowania, przez wywołanie statycznego <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> metody. Ta metoda wykonuje prostą porównania bajt po bajcie, dlatego jest znacznie szybsze niż <xref:System.String.Compare%2A?displayProperty=nameWithType> lub <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> metody.  

> [!NOTE]
> Możesz pobrać [tabele wagi sortowania](https://www.microsoft.com/en-us/download/details.aspx?id=10921), zbiór plików tekstowych, które zawierają informacje o wagi znaku w operacjach sortowania i porównywania dla systemów operacyjnych Windows, [domyślne Unicode Tabela elementów sortowania](https://www.unicode.org/Public/UCA/latest/allkeys.txt), tabeli wagi sortowania dla systemów Linux i macOS.

## <a name="performance-considerations"></a>Zagadnienia dotyczące wydajności  
 Podczas przeprowadzania porównania ciągów, <xref:System.Globalization.SortKey.Compare%2A> i <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> metody dają te same wyniki, ale ich celem są różne scenariusze.  
  
 Na wysokim poziomie <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> metoda generuje klucz sortowania dla każdego ciągu, przeprowadza porównanie, a następnie odrzuca klucz sortowania i zwraca wynik porównania. Jednak <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> metoda faktycznie nie generuje klucz sortowania całego, aby wykonać porównanie. Zamiast tego z nich metoda generuje dane klucza dla każdego elementu tekstu (oznacza to, podstawowego znak, para zastępcza lub łącząc sekwencja znaków) w każdym ciągu. Metoda następnie porównuje dane klucza dla odpowiednich elementów tekstu. Operacja kończy się zaraz po ostatecznym wynikiem porównania jest określana. Informacje o kluczu sortowania jest kolumną obliczaną, ale nie <xref:System.Globalization.SortKey> obiekt zostanie utworzony. Ta strategia jest ekonomiczna pod względem wydajności, jeśli oba ciągi są porównywane raz, ale staje się kosztowna, jeśli ten sam ciągi są porównywane wiele razy.  
  
 <xref:System.Globalization.SortKey.Compare%2A> Metoda wymaga Generowanie <xref:System.Globalization.SortKey> obiekt dla każdego ciągu przed przystąpieniem do wykonywania porównania. Ta strategia jest kosztowna pod względem wydajności dla pierwszego porównania ze względu na czas i poświęcił do wygenerowania pamięci <xref:System.Globalization.SortKey> obiektów. Jednak staje się to ekonomiczne, jeśli tych samych kluczy sortowania są porównywane wiele razy.  
  
 Na przykład załóżmy, że piszesz aplikację, która wyszukuje tabelę bazy danych dla wiersza, w którym kolumnę indeksu na podstawie ciągu pasuje do ciągu wyszukiwania. Tabela zawiera tysiące wierszy i porównanie ciągu wyszukiwania do indeksu w każdym wierszu zająć dużo czasu. W związku z tym jeśli aplikacja przechowuje wiersza i kolumny indeksu, także generuje i przechowuje klucz sortowania dla indeksu w kolumnie dedykowanych do zwiększania wydajności wyszukiwania. Gdy aplikacja wyszukuje wiersz docelowy, porównuje klucz sortowania dla ciągu wyszukiwania, aby klucz sortowania dla indeksu ciągu zamiast porównania ciągu wyszukiwania do indeksu ciągu.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> Metoda zwraca <xref:System.Globalization.SortKey> obiekt o wartości na podstawie określonego ciągu i <xref:System.Globalization.CompareOptions> wartość i kultury skojarzonej z bazowego <xref:System.Globalization.CompareInfo> obiektu. Jeśli decyzja dot. zabezpieczeń zależy od porównywania ciągów lub zmiana wielkości liter, należy użyć <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metoda niezmiennej kultury, aby upewnić się, że operacji jest spójne, bez względu na ustawienia kultury systemu operacyjnego.  
  
 Aby uzyskać klucz sortowania, wykonaj następujące czynności:  
  
1.  Pobieranie niezmiennej kultury z <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> właściwości.  
  
2.  Pobieranie <xref:System.Globalization.CompareInfo> obiektu dla niezmiennej kultury z <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> właściwości.  
  
3.  Wywołaj <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metody.  
  
 Praca z wartością <xref:System.Globalization.SortKey> obiekt jest odpowiednik wzywania Windows `LCMapString` metoda wartością LCMAP_SORTKEY określony. Jednak w przypadku <xref:System.Globalization.SortKey> obiektu klucze sortowania dla angielskie znaki poprzedzać klucze sortowania znaków w języku koreańskim.  
  
 <xref:System.Globalization.SortKey> obiekty mogą być serializowane, ale tylko wtedy, dzięki czemu można obejmujące wiele <xref:System.AppDomain> obiektów. Jeśli aplikacja wykonuje serializację <xref:System.Globalization.SortKey> obiektu, aplikacja musi ponownie wygenerować klucze sortowania, gdy dostępna jest nowa wersja programu .NET Framework.  
  
 Aby uzyskać więcej informacji na temat klucze sortowania, znajduje się Unicode techniczne standardowa #10, "Algorytmu sortowania Unicode" na [witryny sieci Web konsorcjum Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład porównuje ciąg "llama" przy użyciu "en US" i "es-ES" kultury i kultury tradycyjny "en US" i "es-ES".  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 Poniższy przykład pokazuje, jak można użyć <xref:System.Globalization.SortKey> klasy w celu zwiększenia wydajności w aplikacji, która korzysta z szerokim zakresie sortowania i wyszukiwania dużą tablicę. Ten przykład tworzy nieuporządkowaną tablicę nazw, w tym przypadku mającej 13 elementów. Następnie zapisuje klucz sortowania nazw w równoległych tablicy, która przekazuje do <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> metody. Wynik jest posortowaną tablicę. Przykład następnie przeszukuje tablica trzy ciągi. Dla każdego ciągu wyszukiwania wywoływanych przez nią <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metodę, aby pobrać ciąg klucz sortowania, a następnie wywołania <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> metodę, która pobierze indeks tego klucza sortowania w tablicy klucze sortowania. Ponieważ tablice klucza nazwy i sortowania równolegle, zwrócone indeksu jest również indeksu o nazwie w elemencie `names` tablicy.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">Pierwszy klucz sortowania do porównania.</param>
        <param name="sortkey2">Drugi klucz sortowania do porównania.</param>
        <summary>Porównuje dwa klucze sortowania.</summary>
        <returns>Liczba całkowita wskazująca relację między <paramref name="sortkey1" /> i <paramref name="sortkey2" />.  
  
 <list type="table"><listheader><term> Wartość 
 </term><description> Warunek 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="sortkey1" /> jest mniejsza niż <paramref name="sortkey2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="sortkey1" /> jest równa <paramref name="sortkey2" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="sortkey1" /> jest większa niż <paramref name="sortkey2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.SortKey.Compare%2A> Metoda porównuje <xref:System.Globalization.SortKey.KeyData%2A> właściwości `sortkey1` i `sortkey2` parametrów. Metoda daje ten sam wynik jako <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Globalization.SortKey.Compare%2A> metody i porównanie klucze sortowania, zobacz <xref:System.Globalization.SortKey> temat poświęcony klasie.  
  
   
  
## Examples  
 Poniższy przykład kodu porównuje dwa ciągi przy użyciu <xref:System.Globalization.SortKey.Compare%2A> metody i odpowiednik <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> lub <paramref name="sortkey2" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym <see cref="T:System.Globalization.SortKey" /> obiektu.</param>
        <summary>Określa, czy określony obiekt jest taki sam, do bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="value" /> parametr jest równy bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dwa <xref:System.Globalization.SortKey> obiekty są traktowane jako równe, jeżeli ich <xref:System.Globalization.SortKey.KeyData%2A> właściwości są takie same.  
  
 Ta metoda zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyniki <xref:System.Globalization.SortKey.Equals%2A> w porównaniu z różnymi <xref:System.Globalization.SortKey> obiektów.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcji wyznaczania wartości skrótu dla bieżącego <see cref="T:System.Globalization.SortKey" /> obiekt, który nadaje się do mieszania algorytmów i struktur danych, takich jak Tabela skrótów.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda generuje tę samą wartość skrótu dla dwóch obiektów, które są takie same, zgodnie z opisem w <xref:System.Globalization.SortKey.Equals%2A> metody.  
  
 Ta metoda zastępuje <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tablicę bajtów, reprezentujący bieżącą <see cref="T:System.Globalization.SortKey" /> obiektu.</summary>
        <value>Tablica bajtów, reprezentujący bieżącą <see cref="T:System.Globalization.SortKey" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat użycia danych zwróconych przez <xref:System.Globalization.SortKey.KeyData%2A> właściwość porównywanie ciągów, zobacz <xref:System.Globalization.SortKey> temat poświęcony klasie.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla, oryginalnym ciągu i ciągu równoważnego oraz danych klucza dla kluczy sortowania, jak i klucz sortowania bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera oryginalny ciąg używany do tworzenia bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</summary>
        <value>Oryginalny ciąg używany do tworzenia bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla, oryginalnym ciągu i ciągu równoważnego oraz danych klucza dla kluczy sortowania, jak i klucz sortowania bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący bieżącą <see cref="T:System.Globalization.SortKey" /> obiektu.</summary>
        <returns>Ciąg reprezentujący bieżącą <see cref="T:System.Globalization.SortKey" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest łączenie ciągów "Klucz sortowania -", identyfikator kultury i porównaj opcje bieżącego <xref:System.Globalization.SortKey> obiektu, a wartość <xref:System.Globalization.SortKey.OriginalString%2A> właściwości.  
  
 Ta metoda zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład kodu Wyświetla oryginalny ciąg, ciągi uzyskane przez <xref:System.Globalization.SortKey.ToString%2A> metoda klucze sortowania wielkość liter i bez uwzględniania wielkości liter i danych klucza dla kluczy sortowania wielkość liter i bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>