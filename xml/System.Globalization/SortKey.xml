<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="794f66876f66d7f8eb1279ed074318e7dd3a2c62" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69357323" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wynik mapowania ciągu do jego klucza sortowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porównanie wrażliwe na kulturę dwóch ciągów zależy od każdego znaku w ciągach z kilkoma kategoriami sortowania, w tym skryptu, litery, wielkości liter i znaków diakrytycznych. Klucz sortowania służy jako repozytorium tych wag dla określonego ciągu.  
  
 Metoda zwraca wystąpienie <xref:System.Globalization.SortKey> klasy odzwierciedlające zależne od kultury mapowanie znaków w określonym ciągu. <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> Wartość <xref:System.Globalization.SortKey> obiektu to jego kluczowe dane, które są zwracane <xref:System.Globalization.SortKey.KeyData%2A> przez właściwość. Te kluczowe dane składają się z serii bajtów, które kodują ciągi, reguły sortowania specyficzne dla kultury i opcje porównania określone przez użytkownika. Porównanie przy użyciu kluczy sortowania składa się z bitowego porównania odpowiednich danych klucza w każdym kluczu sortowania.  Na przykład jeśli utworzysz klucz sortowania przez wywołanie <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> metody z <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>wartością, operacja porównywania ciągów, która używa klucza sortowania, nie uwzględnia wielkości liter.  
  
 Po utworzeniu klucza sortowania dla ciągu należy porównać klucze sortowania przez wywołanie metody statycznej <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> . Ta metoda wykonuje proste porównanie bajtów po bajcie, więc jest znacznie szybsze niż w przypadku <xref:System.String.Compare%2A?displayProperty=nameWithType> metody lub. <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType>  

> [!NOTE]
> Można pobrać [tabele wagi sortowania](https://www.microsoft.com/download/details.aspx?id=10921), zestaw plików tekstowych, które zawierają informacje o wagach znaków używanych w operacjach sortowania i porównywania dla systemów operacyjnych Windows, [domyślną tabelę elementów sortowania Unicode](https://www.unicode.org/Public/UCA/latest/allkeys.txt), sortowanie tabela wag dla systemów Linux i macOS.

## <a name="performance-considerations"></a>Zagadnienia dotyczące wydajności  
 Podczas porównywania <xref:System.Globalization.SortKey.Compare%2A> ciągów metody i <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> dają te same wyniki, ale są one ukierunkowane na różne scenariusze.  
  
 Na wysokim poziomie <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> Metoda generuje klucz sortowania dla każdego ciągu, wykonuje porównanie, a następnie odrzuca klucz sortowania i zwraca wynik porównania. <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> Jednak Metoda faktycznie nie generuje całego klucza sortowania do przeprowadzenia porównania. Zamiast tego Metoda generuje dane klucza dla każdego elementu tekstowego (to jest, znak podstawowy, para zastępcza lub łącząc sekwencję znaków) w każdym ciągu. Następnie metoda porównuje kluczowe dane dla odpowiadających im elementów tekstowych. Operacja kończy się zaraz po ustaleniu ostatecznego wyniku porównania. Obliczane są informacje o kluczu sortowania, <xref:System.Globalization.SortKey> ale nie jest tworzony żaden obiekt. Ta strategia jest ekonomiczna w zakresie wydajności, jeśli oba ciągi są porównywane jednokrotnie, ale staną się kosztowne, jeśli te same ciągi są porównywane wiele razy.  
  
 Metoda wymaga wygenerowania <xref:System.Globalization.SortKey> obiektu dla każdego ciągu przed przeprowadzeniem porównania. <xref:System.Globalization.SortKey.Compare%2A> Ta strategia jest kosztowna pod względem wydajności podczas pierwszego porównania ze względu na czas i ilość pamięci zainwestowaną w <xref:System.Globalization.SortKey> celu wygenerowania obiektów. Jest jednak ekonomiczny, jeśli te same klucze sortowania są porównywane wiele razy.  
  
 Załóżmy na przykład, że napiszesz aplikację, która przeszukuje tabelę bazy danych dla wiersza, w którym kolumna indeksu oparta na ciągach pasuje do określonego ciągu wyszukiwania. Tabela zawiera tysiące wierszy i porównanie ciągu wyszukiwania do indeksu w każdym wierszu zajmuje dużo czasu. W związku z tym, gdy aplikacja przechowuje wiersz i jego kolumnę indeksu, generuje i przechowuje klucz sortowania dla indeksu w kolumnie przeznaczonej do poprawiania wydajności wyszukiwania. Gdy aplikacja wyszukuje wiersz docelowy, porównuje klucz sortowania ciągu wyszukiwania z kluczem sortowania dla ciągu indeksu, zamiast porównywać ciąg wyszukiwania z ciągiem indeksu.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 Metoda zwraca obiekt z wartością na podstawie określonego ciągu i <xref:System.Globalization.CompareOptions> wartości oraz kulturę skojarzoną z obiektem źródłowym <xref:System.Globalization.CompareInfo>. <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> <xref:System.Globalization.SortKey> Jeśli decyzja dotycząca zabezpieczeń zależy od porównania ciągów lub zmiany wielkości liter, należy użyć <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metody niezmiennej kultury, aby upewnić się, że zachowanie operacji jest spójne, niezależnie od ustawień kultury systemu operacyjnego.  
  
 Aby uzyskać klucz sortowania, wykonaj następujące kroki:  
  
1.  Pobierz niezmienną kulturę z <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> właściwości.  
  
2.  Pobierz obiekt dla niezmiennej kultury <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> z właściwości. <xref:System.Globalization.CompareInfo>  
  
3.  Wywołaj <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metody.  
  
 Praca z wartością <xref:System.Globalization.SortKey> obiektu jest równoważna wywołaniu metody systemu Windows `LCMapString` z określoną wartością LCMAP_SORTKEY. Jednak dla <xref:System.Globalization.SortKey> obiektu klucze sortowania dla znaków w języku angielskim poprzedzają klucze sortowania dla znaków koreańskich.  
  
 <xref:System.Globalization.SortKey>obiekty mogą być serializowane, ale tylko wtedy, gdy mogą <xref:System.AppDomain> one zawierać wiele obiektów. Jeśli aplikacja serializować <xref:System.Globalization.SortKey> obiekt, aplikacja musi ponownie wygenerować wszystkie klucze sortowania, gdy istnieje nowa wersja .NET Framework.  
  
 Aby uzyskać więcej informacji na temat kluczy sortowania, zobacz Standard Unicode Technical #10, "algorytmu sortowania Unicode" w [witrynie internetowej konsorcjum Unicode](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Poniższy przykład porównuje ciąg "Llama" przy użyciu kultur "en-US" i "es-ES" oraz kultur "pl-US" i "es-ES" tradycyjnych kultury.  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 Poniższy przykład pokazuje, <xref:System.Globalization.SortKey> jak można użyć klasy w celu zwiększenia wydajności w aplikacji, która opiera się na sortowaniu i przeszukiwaniu dużej tablicy. Przykład tworzy tablicę nieuporządkowaną nazw, która w tym przypadku zawiera 13 elementów. Następnie przechowuje klucz sortowania każdej nazwy w tablicy równoległej, który przechodzi do <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> metody. Wynikiem jest posortowana tablica. Przykład następnie przeszukuje tablicę pod kątem trzech ciągów. Dla każdego ciągu wyszukiwania wywołuje <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metodę w celu pobrania klucza sortowania ciągu, a następnie <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> wywołuje metodę, aby pobrać indeks tego klucza sortowania w tablicy kluczy sortowania. Ponieważ tablice Name i Sort Key są równoległe, zwracany indeks jest również indeksem nazwy w `names` tablicy.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">Pierwszy klucz sortowania do porównania.</param>
        <param name="sortkey2">Drugi klucz sortowania do porównania.</param>
        <summary>Porównuje dwa klucze sortowania.</summary>
        <returns>Liczba całkowita ze znakiem, która wskazuje <paramref name="sortkey1" /> relację między i <paramref name="sortkey2" />.  
  
 <list type="table"><listheader><term> Wartość 
 </term><description> Warunek 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="sortkey1" />jest mniejsze niż <paramref name="sortkey2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="sortkey1" />jest równe <paramref name="sortkey2" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="sortkey1" />jest większa niż <paramref name="sortkey2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda porównuje właściwości parametrów `sortkey1` i `sortkey2` . <xref:System.Globalization.SortKey.KeyData%2A> <xref:System.Globalization.SortKey.Compare%2A> Metoda daje takie same wyniki jak <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> Metoda.  
  
 Aby uzyskać więcej informacji o <xref:System.Globalization.SortKey.Compare%2A> metodzie i porównaniu z kluczami sortowania, <xref:System.Globalization.SortKey> Zobacz temat Klasa.  
  
   
  
## Examples  
 Poniższy przykład kodu porównuje dwa ciągi przy użyciu <xref:System.Globalization.SortKey.Compare%2A> metody i równoważnej <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" />lub <paramref name="sortkey2" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym <see cref="T:System.Globalization.SortKey" /> obiektem.</param>
        <summary>Określa, czy określony obiekt jest równy bieżącemu <see cref="T:System.Globalization.SortKey" /> obiektowi.</summary>
        <returns><see langword="true" />Jeśli parametr jest równy bieżącemu <see cref="T:System.Globalization.SortKey" /> obiektowi; w przeciwnym razie <see langword="false" />,. <paramref name="value" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dwa <xref:System.Globalization.SortKey> obiekty są uważane za równe <xref:System.Globalization.SortKey.KeyData%2A> , jeśli ich właściwości są równe.  
  
 Ta metoda przesłania <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wyniki <xref:System.Globalization.SortKey.Equals%2A> w porównaniu z różnymi <xref:System.Globalization.SortKey> obiektami.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu, który jest odpowiedni dla algorytmów wyznaczania wartości skrótu i struktur danych, takich jak tabela skrótów.</summary>
        <returns>Kod skrótu dla bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda generuje ten sam kod skrótu dla dwóch obiektów, które są równe zgodnie <xref:System.Globalization.SortKey.Equals%2A> z metodą.  
  
 Ta metoda przesłania <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tablicę bajtową reprezentującą <see cref="T:System.Globalization.SortKey" /> bieżący obiekt.</summary>
        <value>Tablica bajtów reprezentująca bieżący <see cref="T:System.Globalization.SortKey" /> obiekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji o korzystaniu z danych zwracanych przez <xref:System.Globalization.SortKey.KeyData%2A> właściwość w porównaniu ciągów, <xref:System.Globalization.SortKey> Zobacz temat Klasa.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla oryginalny ciąg oraz odpowiedni ciąg i dane klucza dla klucza sortowania z uwzględnieniem wielkości liter i klucz sortowania bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera oryginalny ciąg używany do tworzenia bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</summary>
        <value>Oryginalny ciąg używany do tworzenia bieżącego <see cref="T:System.Globalization.SortKey" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla oryginalny ciąg oraz odpowiedni ciąg i dane klucza dla klucza sortowania z uwzględnieniem wielkości liter i klucz sortowania bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg, który reprezentuje bieżący <see cref="T:System.Globalization.SortKey" /> obiekt.</summary>
        <returns>Ciąg, który reprezentuje bieżący <see cref="T:System.Globalization.SortKey" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest połączeniem ciągu "SortKey-", identyfikatora kultury i opcji porównania bieżącego <xref:System.Globalization.SortKey> obiektu oraz wartości <xref:System.Globalization.SortKey.OriginalString%2A> właściwości.  
  
 Ta metoda przesłania <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla oryginalny ciąg, ciągi, które są <xref:System.Globalization.SortKey.ToString%2A> generowane przez metodę dla uwzględniania wielkości liter i kluczy sortowania bez uwzględniania wielkości liter oraz dane kluczowe dla kluczy sortowania bez uwzględniania wielkości liter.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>
