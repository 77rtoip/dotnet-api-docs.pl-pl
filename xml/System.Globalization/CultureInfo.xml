<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="def27fc8960e34162ed6faf152d89b8f64a9e167" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174408" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje o określonej kulturze (o nazwie * ustawień regionalnych * dla rozwoju kodu niezarządzanego). Informacje obejmują nazwy kultury, system pisma, używany kalendarz, kolejność sortowania ciągów i formatowania daty i liczby.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> Klasa udostępnia informacje specyficzne dla kultury, takie jak języka, odmianą języka, kraj/region, kalendarza i konwencje związane z określonej kultury. Ta klasa udostępnia także dostęp do wystąpień specyficzne dla kultury <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, i <xref:System.Globalization.TextInfo> obiektów. Obiekty te zawierają informacje wymagane dla operacji specyficzne dla kultury, takich jak wielkość liter, formatowania daty i liczby i porównywanie ciągów. <xref:System.Globalization.CultureInfo> Klasa jest używana bezpośrednio lub pośrednio przez klasy, które formatowania, analizy lub manipulować danymi specyficzne dla kultury, takie jak <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>typy liczbowe.  
  
 W tej sekcji:  
  
 [Nazwy kultury i identyfikatory](#CultureNames)   
 [Niezmiennej neutralne i określonej kultury](#Invariant)   
 [Niestandardowe kultury](#Custom)   
 [Dynamiczne kultury danych](#Dynamic)   
 [Bieżąca kultura i bieżącej kultury interfejsu użytkownika](#Current)   
 [Pobieranie wszystkich języków](#GetAll)   
 [Kultura i wątków](#Threads)   
 [Domeny kultury i aplikacji](#AppDomain)   
 [Kultura i oparty na zadaniach operacji asynchronicznych](#Async)   
 [Serializacja obiektu CultureInfo](#Serialization)   
 [Zastępuje Panelu sterowania](#CPanel)   
 [Alternatywne sortowania](#AlternateSort)   
 [Aplikacje kultury i systemu Windows](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Nazwy kultury i identyfikatory  
 <xref:System.Globalization.CultureInfo> Klasy Określa unikatową nazwę dla każdego kultury, oparte na RFC 4646. Nazwa jest kombinacją kod kultury małe dwuliterowych ISO 639 skojarzone z językiem i normy ISO 3166 dwuliterowych przeszczepiania wielkie litery kod kraju lub regionu. Ponadto dla aplikacji, które odnoszą się do [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] lub nowszym i działają w systemie Windows 10 lub nowszego, nazwy kultury, które odpowiadają nieprawidłowy język BCP 47 tagi są obsługiwane.  
  
> [!NOTE]
>  Gdy nazwa kultury jest przekazywany do konstruktora klasy lub metody takie jak <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> lub <xref:System.Globalization.CultureInfo>, jego case nie jest znacząca.  
  
 Format nazwy kultury oparte na RFC 4646 *languagecode2*>-*kraju/regioncode2*, gdzie *languagecode2* jest kod języka dwuliterowych i *kraju/regioncode2* przeszczepiania dwuliterowych kodu. Przykładami ja-JP japoński (Japonia) i en US angielski (Stany Zjednoczone). W przypadkach, gdy nie są dostępne dwa znakowy kod języka trzyliterowy kod pochodną ISO 639-2 jest używany.  
  
 Należy pamiętać, że niektóre nazwy kultury również określić skrypt ISO 15924. Na przykład cyrylicy skryptu określa Cyrl i Latn określa alfabetu łacińskiego skryptu. Nazwa kultury, który zawiera skrypt korzysta ze wzorca *languagecode2*-*scripttag*-*kraju/regioncode2*. Przykładem tego typu nazwa kultury jest uż Cyrl uż dla Uzbecki (cyrylica, Uzbekistan). W systemach operacyjnych Windows przed systemu Windows Vista, nazwa kultury, który zawiera skrypt korzysta ze wzorca *languagecode2*-*kraju/regioncode2* - * scripttag*, na przykład uż uż Cyrl dla Uzbecki (cyrylica, Uzbekistan).  
  
 Określa kulturę neutralną jest określona przez kod języka małe dwuliterowych. Na przykład fr określa kulturę neutralną francuski, a de określa kulturę neutralną na język niemiecki.  
  
> [!NOTE]
>  Istnieją dwie nazwy kultury, które są sprzeczne tej reguły. Chiński (uproszczony), o nazwie zh-Hans i chiński (tradycyjny), o nazwie zh-Hant były neutralne kultury. Nazwy kultury reprezentują standardowy bieżącego i powinna być używana, chyba że masz powód przy użyciu starszej nazwy zh-CHS i zh-CHT.  
  
 Identyfikator kultury jest standardowy międzynarodowy skrót liczbowy i zawiera składniki niezbędne do jednoznacznej identyfikacji jednego z zainstalowanych kultur. Aplikację można użyć kultury wstępnie zdefiniowane identyfikatory lub zdefiniuj niestandardowych identyfikatorów.  
  
 Niektóre wstępnie zdefiniowane nazwy kultury i identyfikatory są używane przez to i inne klasy w <xref:System.Globalization?displayProperty=nameWithType> przestrzeni nazw. Kultura szczegółowe informacje są wyświetlane w [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go.  
  
 Należy pamiętać, że nazwy kultury i identyfikatory reprezentują tylko podzestaw kultury, które znajdują się na danym komputerze. Wersje systemu Windows lub dodatków service pack można zmienić dostępne kultur. Aplikacje, Dodaj niestandardowe kultury przy użyciu <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy. Użytkownicy dodawać własne niestandardowe kultury przy użyciu narzędzia Konstruktor ustawień regionalnych firmy Microsoft. Konstruktor ustawień regionalnych firmy Microsoft są zapisywane w kodzie zarządzanym przy użyciu `CultureAndRegionInfoBuilder` klasy.  
  
 Kilka różnych nazw są ściśle związane z kulturą, szczególnie nazw skojarzonych z następujących elementów członkowskich klasy:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Niezmiennej neutralne i określonej kultury  
 Kultury zazwyczaj są podzielone na trzy zestawy: kultury invariant neutralne kultury i określone kultury.  
  
 Niezmienna kultura jest niezależne od kultury. Aplikacja określa kulturą niezmienną nazwę przy użyciu pustego ciągu ("") lub przez jego identyfikator. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Określa wystąpienie Niezmienna kultura. Jest on skojarzony z języka angielskiego, ale nie z dowolnym kraju/regionu. Jest on używany w praktycznie każdej metody w `Globalization` przestrzeni nazw, która wymaga kultury.  
  
 Określa kulturę neutralną jest kultura, która jest skojarzona z językiem, lecz nie kraju/regionu. Określoną kulturę jest kultura, która jest skojarzona z język i kraj/region. Na przykład fr jest nazwą neutralne kultury francuskim i fr-FR jest nazwą określoną kulturę francuski (Francja). Należy pamiętać, że chiński (uproszczony) i chiński (tradycyjny) są również uznawane za neutralne kultury.  
  
 Utworzenie wystąpienia <xref:System.Globalization.CompareInfo> klasy dla kultury neutralnej nie jest zalecane, ponieważ zawiera on danych jest określana. Aby wyświetlić i sortowanie danych, określ język i region. Ponadto <xref:System.Globalization.CompareInfo.Name%2A> właściwość <xref:System.Globalization.CompareInfo> obiektu utworzonego dla kultury neutralnej zwraca tylko kraju i nie ma obszaru.  
  
 Zdefiniowanych kultur ma hierarchię w którym element nadrzędny określoną kulturę to kultura neutralna i nadrzędny kultury neutralnej jest niezmienna kultura. <xref:System.Globalization.CultureInfo.Parent%2A> Właściwość zawiera kultury neutralnej skojarzone z określoną kulturę. Należy zdefiniować niestandardowe kultury <xref:System.Globalization.CultureInfo.Parent%2A> właściwości zgodnie z tego wzorca.  
  
 Jeśli zasobów dla określonej kultury nie są dostępne w systemie operacyjnym, zasobów dla kultury neutralnej skojarzone są używane. Jeśli zasoby dla kultury neutralnej nie są dostępne, są używane zasoby osadzone w zestawie głównym. Aby uzyskać więcej informacji na proces rezerwowy zasobów, zobacz [pakowanie i wdrażanie zasobów](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 Lista ustawień regionalnych w interfejsie API systemu Windows jest nieco inne niż lista kultur obsługiwane przez program .NET Framework. Jeśli wymagane jest współdziałanie z systemem Windows, na przykład za pomocą mechanizmu p/invoke aplikacji należy użyć określoną kulturę, która jest zdefiniowana dla systemu operacyjnego. Korzystanie z określoną kulturę zapewnia spójność z równoważną ustawienia regionalne systemu Windows, który jest identyfikowany przy użyciu identyfikatora ustawień regionalnych, która jest taka sama jak <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 A <xref:System.Globalization.DateTimeFormatInfo> lub <xref:System.Globalization.NumberFormatInfo> mogą być tworzone tylko w przypadku Niezmienna kultura lub dla określonej kultury, a nie dla kultury neutralnej.  
  
 Jeśli <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> jest <xref:System.Globalization.TaiwanCalendar> , ale <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> nie ustawiono zh-TW, następnie <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, i <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> Zwróć ciąg pusty ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Niestandardowe kultury  
 Oprócz wstępnie zdefiniowanych kultur obsługiwane przez system operacyjny i .NET Framework .NET Framework obsługuje trzy rodzaje kultury niestandardowej:  
  
-   Nowe kultury, które uzupełniają kultur dostępne w systemie Windows lub programu .NET Framework. Na przykład aplikacja może zainstalować <xref:System.Globalization.CultureInfo> obiektu czy kultury reprezentuje fj FJ (lub Fijan (Fidżi)) w systemie.  
  
-   Zastąpienie kultury, którego właściwości są inne niż właściwości standardowe kultur obsługiwane przez system Windows i .NET Framework.  
  
-   Zastępuje standardowe kultur z użytkownikiem. Użytkownik może użyć **Region i język** aplikacji w **Panelu sterowania** dostosować wartości właściwości istniejącej kultury.  
  
> [!NOTE]
>  Można użyć <xref:System.Globalization.CultureAndRegionInfoBuilder> klasę, aby zdefiniować, zapisywania i zarejestrować niestandardowe kultury, które uzupełniają lub zastąpić istniejące kultur. <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> Metoda tworzy plik ustawień regionalnych danych Markup Language (LDML), który może służyć do instalowania kulturą niestandardową na docelowych systemach. Dla krok po kroku dotyczące przy użyciu <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy, aby utworzyć nową lub zastąpienie kultury, zobacz <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy tematu.  
  
 Program .NET Framework obsługuje niestandardowe kultury, należy rozważyć następujące podczas pracy z danymi specyficzne dla kultury:  
  
-   Niestandardowe kultury może mieć wartości przekraczające zakresy wstępnie zdefiniowanych kultur. Na przykład niektóre kultur mają nazwy miesięcy zbyt długi, Data nieoczekiwany lub formaty czasu lub inne dane rzadko.  
  
-   Podczas wyświetlania danych specyficzne dla kultury interfejsu użytkownika, należy przestrzegać dostosowań użytkownika. na przykład użytkownik może być 24-godzinnym lub format daty RRRRMMDD.  
  
-   Należy pamiętać, że niestandardowe kultury zastąpić wartości domyślne. W związku z tym nie należy traktować danych kultury się stabilne. W przyszłości może zmienić nazwy kraju, numeru i daty formaty i wymowy bez akcentów. Jeśli chcesz uszeregować danych zależne od kultury, na przykład ciągi daty i godziny do przekazania do Data i godzina funkcje analizy, należy użyć Niezmienna kultura lub określony.  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A> Zawiera wartość właściwości niestandardowej kultur zainstalowanego w systemie <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> flagę i kultur niestandardowe są przypisane <xref:System.Globalization.CultureInfo.LCID%2A> wartość właściwości `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 lub 4096). Należy pamiętać, że począwszy od systemu Windows 10, ta wartość jest przypisany do kultury zdefiniowana w systemie, które nie mają pełnych danych kultury.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dynamiczne kultury danych  
 Z wyjątkiem Niezmienna kultura kultury dane są dynamiczne. Dotyczy to nawet w przypadku wstępnie zdefiniowanych kultur. Na przykład krajach lub regionach przyjmuje nowe waluty, zmień ich pisowni słowa lub zmienić ich Preferowany kalendarz, i zmień definicje kultury to śledzenie.  Niestandardowe kultury mogą ulec zmianie bez uprzedzenia i wszelkie określoną kulturę może zostać zastąpiona przez kultury zastąpienie niestandardowe. Ponadto zgodnie z opisem poniżej, użytkownik można zastąpić preferencje kultury. Aplikacje powinny zawsze uzyskać kultury danych w czasie wykonywania.  
  
> [!CAUTION]
>  Podczas zapisywania danych, aplikacji należy używać Niezmienna kultura, format binarny lub określony format niezależny od kultury. Dane zapisane zgodnie z bieżącymi wartościami skojarzone z określonej kultury, innego niż Niezmienna kultura może nie będzie można odczytać lub mogą ulec zmianie w znaczenie w przypadku zmiany tego kultury.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>Bieżąca kultura i bieżącej kultury interfejsu użytkownika  
 Każdy wątek w aplikacji .NET Framework ma bieżącej kultury i bieżącej kultury interfejsu użytkownika. Bieżąca kultura określa Konwencji formatowania daty, godziny, liczb i walut, porządek sortowania tekstu, konwencje wielkość liter i sposoby, w którym są porównywane ciągi. Bieżąca kultura interfejsu użytkownika jest używane do pobierania zasobów określonej kultury w czasie wykonywania.  
  
> [!NOTE]
>  Informacje dotyczące sposobu bieżących i bieżącej kultury interfejsu użytkownika jest określany na podstawie dla każdego wątku, sekcji [kultury i wątki](#Threads) sekcji. Aby uzyskać informacje jak bieżące i bieżącej kultury interfejsu użytkownika jest określana w wątkach wykonywania w nowej domenie aplikacji, a na wątków, które przekraczać granice domeny aplikacji, zobacz [kultury i domen aplikacji](#AppDomain) sekcji. Uzyskać informacji o jak bieżące i bieżący jest określana w wątkach wykonywanie operacji asynchronicznych opartego na zadaniach, zobacz [kultury i oparty na zadaniach asynchronicznej operacji](#Async) sekcji.  
  
 Aby uzyskać szczegółowe informacje o bieżącej kultury, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości tematu. Aby uzyskać szczegółowe informacje o bieżącej kultury interfejsu użytkownika, zobacz <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości tematu.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Trwa pobieranie bieżących i bieżącej kultury interfejsu użytkownika  
 Możesz uzyskać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje bieżącej kultury na dwa sposoby:  
  
-   Pobierając zaletą <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości.  
  
-   Pobierając zaletą [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) właściwości.  
  
 Poniższy przykład pobiera obie wartości właściwości, porównuje je, aby pokazać, że są one takie same i wyświetla nazwę bieżącej kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Możesz uzyskać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje bieżącej kultury interfejsu użytkownika w jeden z dwóch sposobów:  
  
-   Pobierając zaletą <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
-   Pobierając zaletą [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) właściwości.  
  
 Poniższy przykład pobiera obie wartości właściwości, porównuje je, aby pokazać, że są one takie same i wyświetla nazwę bieżącej kultury interfejsu użytkownika.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Ustawianie bieżącego i bieżącej kultury interfejsu użytkownika  
 Aby zmienić kultury i kultury wątku interfejsu użytkownika, wykonaj następujące czynności:  
  
1.  Utwórz wystąpienie <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tej kultury, wywołując <xref:System.Globalization.CultureInfo> klasy konstruktora i przekazanie jej nazwę kultury. <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Tworzy konstruktora <xref:System.Globalization.CultureInfo> zastępuje obiekt, który odzwierciedla użytkownika, jeśli nowy kultury jest taka sama jak bieżąca kultura systemu Windows.   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor służy do określenia czy nowo skonkretyzowanym <xref:System.Globalization.CultureInfo> obiektu odzwierciedla przesłonięcia użytkownika, jeśli nowy kultury jest taka sama jak bieżąca kultura systemu Windows.  
  
2.  Przypisz <xref:System.Globalization.CultureInfo> do obiektu <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> lub <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Ponadto w przypadku aplikacji w wersji 4.6 lub nowszej programu .NET Framework pulpitu, można także przypisać <xref:System.Globalization.CultureInfo> do obiektu <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> lub <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
 Poniższy przykład pobiera bieżącej kultury. Jeśli jest inny niż kultury francuski (Francja), zmiany bieżącej kultury na język francuski (Francja). W przeciwnym razie zmiany bieżącej kultury na język francuski (Luksemburg).  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 Poniższy przykład pobiera bieżącej kultury. Jeśli wszystko inne kultury Słoweński (Słowenia) zmieni się on w bieżącej kultury Słoweński (Słowenia). W przeciwnym razie bieżącej kultury zmienia się Chorwacki (Chorwacja).  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Pobieranie wszystkich języków  
 Możesz pobrać tablicy określonych kategorii kultury lub kultury dostępne na komputerze lokalnym przez wywołanie metody <xref:System.Globalization.CultureInfo.GetCultures%2A> metody. Na przykład można pobrać niestandardowe kultury, określone kultury lub kultury neutralnej samodzielnie lub w połączeniu.  
  
 Poniższym przykładzie wywołuje <xref:System.Globalization.CultureInfo.GetCultures%2A> metody dwa razy, pierwsza z <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> element członkowski wyliczenia, aby pobrać wszystkie niestandardowe kultury, a następnie z <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> element członkowski wyliczenia można pobrać wszystkie zastąpienia kultur.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Kultura i wątków  
 Po uruchomieniu nowego wątku aplikacji jego bieżącej kultury i bieżącej kultury interfejsu użytkownika są definiowane przez bieżącego ustawienia kulturowego systemu, a nie przez bieżącej kultury wątku. Poniższy przykład przedstawia różnicy. Ustawia bieżącej kultury i bieżącej kultury interfejsu użytkownika wątku aplikacji do kultury francuski (Francja) (fr-FR). Jeśli bieżącej kultury jest już fr-FR, przykładzie ustawia ją na kultury angielski (Stany Zjednoczone) (en US). On wyświetla trzech liczb losowych wartości waluty, a następnie tworzy nowego wątku, który z kolei trzech liczb losowych więcej będzie wyświetlany jako wartości waluty. Jednak jako dane wyjściowe w przykładzie pokazano, waluty, wyświetlane przez nowego wątku nie odzwierciedlają Konwencji formatowania kultury francuski (Francja), w odróżnieniu od dane wyjściowe z wątku głównego aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 W wersjach programu .NET Framework, przed [!INCLUDE[net_v45](~/includes/net-v45-md.md)], najbardziej typowy sposób, aby upewnić się, że wątku głównego aplikacji udostępnia tego samego kultury z innych wątków roboczych jest przekazanie nazwę kultury całej aplikacji lub <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultura całej aplikacji <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegowanie. W poniższym przykładzie użyto tej metody, aby upewnić się, że wartości waluty, wyświetlane przez dwa wątki odzwierciedlają Konwencji formatowania tego samego kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Można ustawić kultury i kultury interfejsu użytkownika w wątku puli wątków w podobny sposób przez wywołanie metody <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> metody.  
  
 Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], w domenie aplikacji można ustawić kultury i kultury interfejsu użytkownika wszystkie wątki więcej bezpośrednio przez przypisanie <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tego kultura <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości. W poniższym przykładzie użyto tych właściwości, aby upewnić się, że wszystkie wątki w domyślnej domeny aplikacji współużytkują tego samego kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Mimo że <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości są statyczne elementy członkowskie, definiują domyślną kulturę i domyślną kulturę interfejsu użytkownika tylko dla określonej domeny aplikacji są aktualne w momencie wartości tych właściwości są ustawione. Aby uzyskać więcej informacji, zobacz następną sekcję, [kultury i domen aplikacji](#AppDomain).  
  
 Po przypisaniu wartości <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, kultury i kultury interfejsu użytkownika wątków w domenie aplikacji również zmienić, jeśli ich nie masz jawnie przypisanej kultury. Jednak te wątków uwzględnić nowe ustawienia kultury, tylko wtedy, gdy są one wykonywane w bieżącej domenie aplikacji. Jeśli wykonanie tych wątków w innej domenie aplikacji, ich kultury staje się domyślną kulturę zdefiniowane dla tej domeny aplikacji. W związku z tym zaleca się zawsze wartość kultury wątku głównego aplikacji i nie zależą od <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby go zmienić.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Domeny kultury i aplikacji  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> są statycznej właściwości, które jawnie zdefiniuj domyślną kulturę używaną tylko dla domeny aplikacji, która jest aktualny, gdy wartość właściwości jest ustawić lub pobrać. Poniższy przykład ustawienie kultury domyślnej i domyślną kulturę interfejsu użytkownika w domenie domyślnej aplikacji francuski (Francja), a następnie używa <xref:System.AppDomainSetup> klasy i <xref:System.AppDomainInitializer> pełnomocnika, aby ustawić domyślną kulturę i kultury interfejsu użytkownika w nowej domenie aplikacji do Rosyjski (Rosji). Pojedynczy wątek następnie wykonuje dwie metody w każdej domenie aplikacji. Należy pamiętać, że kultura wątku i kultury interfejsu użytkownika nie są jawnie ustawiona; pochodzą z domyślną kulturę i kultury interfejsu użytkownika domeny aplikacji, w którym jest wykonywany wątku. Należy zauważyć, że <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości zwracają wartość domyślna <xref:System.Globalization.CultureInfo> wartości domeny aplikacji, która jest aktualny, gdy wywołanie metody.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Aby uzyskać więcej informacji na temat kultur i domen aplikacji zobacz sekcję "Domen i wątki aplikacji" w temacie.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Kultura i oparty na zadaniach operacji asynchronicznych  
 [Opartego na zadaniach wzorca asynchronicznego programowania](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) używa <xref:System.Threading.Tasks.Task> i <xref:System.Threading.Tasks.Task%601> obiektów asynchronicznie wykonać delegatów w wątku puli wątków. Określonego wątku, na którym jest uruchomiony konkretne zadanie nie jest znany wcześniej, ale jest określane tylko w czasie wykonywania.  
  
 W przypadku aplikacji, które odnoszą się do [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszych wersji, kultury jest częścią kontekstu operację asynchroniczną. Innymi słowy, począwszy od aplikacji przeznaczonych [!INCLUDE[net_v46](~/includes/net-v46-md.md)], operacje asynchroniczne domyślnie dziedziczą wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości wątku, w którym będą uruchamiane. Jeśli bieżącej kultury lub bieżącej kultury interfejsu użytkownika różni się od kultury systemu, bieżącej kultury przecina granice wątku i staje się bieżącej kultury wątku puli wątków, który wykonuje operację asynchroniczną.  
  
 W poniższym przykładzie przedstawiono prosty ilustracji. Używa <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atrybut do docelowego [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. W przykładzie zdefiniowano <xref:System.Func%601> delegować, `formatDelegate`, zwracająca liczby sformatowane jako wartości waluty. Przykład umożliwia zmianę bieżącego ustawienia kulturowego systemu na każdym francuski (Francja) lub, jeśli francuski (Francja) jest już bieżącej kultury, angielski (Stany Zjednoczone). Go następnie:  
  
-   Wywołuje delegata bezpośrednio, dzięki czemu synchronicznie uruchamia się w wątku głównego aplikacji.  
  
-   Tworzy zadanie, które asynchronicznie wykonuje delegata w wątku puli wątków.  
  
-   Tworzy zadanie, które synchronicznie wykonuje delegata w wątku głównego aplikacji przez wywołanie metody <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> metody.  
  
 Jak pokazano w przykładzie dane wyjściowe, zmiany bieżącej kultury na francuski (Francja), bieżącej kultury wątku, w którym zadania są wywoływane asynchronicznie staje się bieżącej kultury dla tej operacji asynchronicznej.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Dla aplikacji, które odnoszą się do wersji programu .NET Framework, przed [!INCLUDE[net_v46](~/includes/net-v46-md.md)], lub dla aplikacji, które nie są kierowane do konkretnej wersji programu .NET Framework, kultury wątku nie jest częścią kontekstu zadania. Zamiast tego Jeśli nie jest jawnie zdefiniowany, kultura nowe wątki domyślnie jest kulturą systemu. Poniższy przykład, który jest taki sam jak poprzedni przykład, z wyjątkiem tego, że nie będzie <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atrybutu, przedstawiono to. Ponieważ kultury systemu systemu, na którym przykładzie wykonywane jest angielski (Stany Zjednoczone), kultura zadania, które wykonuje asynchronicznie w wątku puli wątków jest en US, a nie np.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Dla aplikacji, które odnoszą się do wersji programu .NET Framework z [!INCLUDE[net_v45](~/includes/net-v45-md.md)] i później, ale przed [!INCLUDE[net_v46](~/includes/net-v46-md.md)], można użyć <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby upewnić się, że kultura wątku jest używana w asynchronicznej zadań związanych z zarządzaniem Wykonaj w wątku puli wątków. Poniższy przykład jest taki sam jak poprzedni przykład, z wyjątkiem tego, że używa <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość, aby zapewnić tym wątku puli wątków ma tego samego kultury jako wątku głównego aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> są dla aplikacji właściwości domeny; oznacza to, określają domyślną kulturę dla wszystkich wątków nie zostało przypisane kultury w określonej domenie aplikacji. Niemniej jednak w przypadku aplikacji, które odnoszą się do [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub później, kultura wątku pozostanie część kontekstu zadanie asynchroniczne, nawet jeśli zadanie przecina granice domeny aplikacji.  
  
 W poniższym przykładzie pokazano, że kultury wątku wywołującym pozostaje bieżącej kultury opartego na zadaniach operację asynchroniczną, nawet jeśli metodę, która wykonuje zadanie przecina granice domeny aplikacji. Definiuje klasę, `DataRetriever`, z jedną metodę `GetFormattedNumber`, który zwraca liczbę losową zmiennoprzecinkowe podwójnej precyzji z zakresu od 1 do 1000 sformatowane jako wartość walutową. Pierwszym zadaniem jest wykonywany po prostu tworzy `DataRetriever` wystąpienia i wywołania jego `GetFormattedNumber` metody. Drugie zadanie raporty bieżącej domeny aplikacji, tworzy nową domenę aplikacji, tworzy `DataRetriever` wystąpienie w nowej domenie aplikacji i wywołania jego `GetFormattedNumber` metody. Jak pokazano na dane wyjściowe z przykładu, bieżącej kultury pozostaje taka sama w wątku wywołującym pierwszego zadania i drugie zadanie zarówno podczas wykonywania w domenie głównej aplikacji i drugiej domeny aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>Serializacja obiektu CultureInfo  
 Gdy <xref:System.Globalization.CultureInfo> serializowany jest obiekt, wszystkie, które są przechowywane są <xref:System.Globalization.CultureInfo.Name%2A> i <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Jest pomyślnie zdeserializowany tylko w środowisku, w którym który <xref:System.Globalization.CultureInfo.Name%2A> ma takie samo znaczenie. Poniższe trzy przykłady pokazują, dlaczego nie jest to zawsze sytuacji:  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość właściwości jest <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, a jeśli tej kultury została wprowadzona w systemie Windows Vista lub nowszej wersji systemu operacyjnego Windows, nie jest możliwe zdeserializować w systemie Windows XP. Podobnie jeśli kultura została wprowadzona w systemie Windows XP Service Pack 2, nie jest możliwe zdeserializować dla systemu Windows XP, na którym nie zainstalowano kultury.  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość jest <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>i komputera, na którym jest zdeserializowany nie ma tego użytkownika kultura niestandardowa zainstalowany, nie jest możliwe zdeserializować go.  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość jest <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>i komputera, na którym jest zdeserializowany nie ma tej kultury zastąpienia, cofnąć wykonuje serializację do tej samej nazwie, ale nie wszystkie te same parametry. Na przykład jeśli en US jest kulturą zamiany na komputerze A, ale nie na komputerze B i <xref:System.Globalization.CultureInfo> obiektów odwołujących się do tej kultury jest serializowany na komputerze A deserializowany na komputerze B, a następnie żaden niestandardowe właściwości kultura nie jest przesyłane. Kultura cofnąć serializuje pomyślnie, ale inne znaczenie.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Zastępuje Panelu sterowania  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Ogólnie rzecz biorąc aplikacje należy uznawać te zastąpienia użytkownika.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Alternatywne sortowania  
 Niektóre kultur obsługuje więcej niż jeden kolejności sortowania. Na przykład:  
  
-   Kultura hiszpański (Hiszpania) ma dwa sortowania: domyślny porządek sortowania międzynarodowych i kolejność sortowania tradycyjnych. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultury es-ES, kolejność sortowania międzynarodowe jest używany. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultury es-ES-tradnl order tradycyjnych sortowania jest używany.  
  
-   Kultura zh-CN (chiński (uproszczony, ChRL)) obsługuje dwa sortowania: za pomocą wymowy (ustawienie domyślne) i Liczba naciśnięć. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultury zh-CN, używany jest domyślny porządek sortowania. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiekt przy użyciu lokalnego identyfikatora 0x00020804, ciągi są sortowane według liczby stroke.  
  
 W poniższej tabeli wymieniono kultur obsługujące alternatywny sortowania i identyfikatory dla domyślny i alternatywny sortowania.  
  
|Nazwa kultury|Kultury|Domyślna nazwa sortowania i identyfikator|Alternatywnej nazwy rodzaju i identyfikator|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Hiszpański (Hiszpania)|Międzynarodowe: 0x00000C0A|Tradycyjny: 0x0000040A|  
|zh-TW|Chiński (Tajwan)|Liczba naciśnięć: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chiński (ChRL)|Wymowa: 0x00000804|Stroke Count: 0x00020804|  
|zh-HK|Chiński (Hongkong SAR)|Liczba naciśnięć: 0x00000c04|Liczba naciśnięć: 0x00020c04|  
|zh-SG|Chiński (Singapur)|Wymowa: 0x00001004|Liczba naciśnięć: 0x00021004|  
|zh-MO|Chiński (Makau SAR)|Wymowa: 0x00001404|Liczba naciśnięć: 0x00021404|  
|ja-JP|Japoński (Japonia)|Domyślne: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Koreański (Korea)|Domyślne: 0x00000412|Koreański Xwansung - Unicode: 0x00010412|  
|de-DE|Niemiecki (Niemcy)|Słownik: 0x00000407|Sortowanie książki telefonicznej DIN: 0x00010407|  
|hu-HU|Węgierski (Węgierskiej)|Domyślne: 0x0000040e|Sortowanie techniczne: 0x0001040e|  
|ka-GE|Gruziński (Georgia)|Tradycyjny: 0x00000437|Nowoczesny: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Bieżąca kultura i aplikacji platformy uniwersalnej systemu Windows  
 W aplikacjach systemu Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> są właściwości odczytu / zapisu, tak jak w aplikacjach .NET Framework i .NET Core. Jednak aplikacje platformy uniwersalnej systemu Windows rozpoznaje pojedynczego kultury. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapy właściwości do pierwszej wartości w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.  

W aplikacjach .NET Framework i .NET Core, bieżącej kultury jest ustawienie dla każdego wątku i <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> odzwierciedlają właściwości culture i kultury interfejsu użytkownika bieżącego wątku. W aplikacjach platformy uniwersalnej systemu Windows, mapuje bieżącej kultury [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji, która jest ustawienie globalne. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> lub <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> kultury nie można ustawić na podstawie dla każdego wątku; kultura całą aplikację zmiany właściwości.
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Globalization.CultureInfo> obiektu dla hiszpański (Hiszpania) o sortowanie międzynarodowe, a druga <xref:System.Globalization.CultureInfo> obiektu z tradycyjnego sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> identyfikator, <see cref="P:System.Globalization.CultureInfo.LCID" /> właściwości istniejącego <see cref="T:System.Globalization.CultureInfo" /> obiektu lub identyfikator kultury tylko do systemu Windows.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy oparte na kultury określonej przez identyfikator kultury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultura wstępnie zdefiniowane identyfikatory są wymienione w [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go.  
  
 W większości przypadków `culture` parametru jest mapowany na odpowiedni identyfikator ustawień regionalnych National obsługi Language (NLS). Wartość `culture` parametru staje się wartością <xref:System.Globalization.CultureInfo.LCID%2A> właściwości nowej <xref:System.Globalization.CultureInfo>.  
  
 Zaleca się, że wywołanie konstruktora Nazwa ustawień regionalnych <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, ponieważ nazwy ustawienia regionalne są preferowane LCID. Niestandardowych ustawień regionalnych wymagana jest nazwa ustawień regionalnych.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Jeśli identyfikator określonej kultury jest zgodny z identyfikatorem kultury bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> używającą te zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócony przez wystąpienia <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo> (na przykład, jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) wyników metod i wartości właściwości jest nieokreślona.  
  
 Jeśli identyfikator określonej kultury jest niezgodny z identyfikatorem bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> które są używane wartości domyślne dla określonej kultury.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Ma zawsze wartość właściwości `true`.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącej kultury systemu Windows i użytkownik zmienił kalendarz z Hijri do kalendarza gregoriańskiego.  
  
-   Z `CultureInfo("0x0401")` (kultury nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (co jest ustawieniem użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("0x041E")` (kultury th-ty percentyl nazwy), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starsze wersje systemu Windows nie. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby waluty, użyj ustawienia domyślnego na .NET Framework, należy użyć aplikacji <xref:System.Globalization.CultureInfo> przeładowania konstruktora, który akceptuje `useUserOverride` parametru i wartości `false`.  
  
> [!NOTE]
>  Dla zapewnienia zgodności, kultury, tworzony przy użyciu `culture` ma parametr 0x0004 lub 0x7c04 <xref:System.Globalization.CultureInfo.Name%2A> właściwość zh-CHS lub zh-CHT odpowiednio. Zamiast tego należy preferować do skonstruowania kultury przy użyciu bieżącej nazwy kultury standardowe zh-Hans lub zh-Hant, chyba że masz powód przy użyciu starszej nazwy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> nie jest prawidłową kulturą identyfikatorem. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest identyfikatorem prawidłową kulturą. Począwszy od [! Generuje ten konstruktor include[net_v40_long](~/includes/NET-V40-Long-MD.MD)] <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , metoda wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwa <see cref="P:System.Globalization.CultureInfo.Name" /> istniejącego <see cref="T:System.Globalization.CultureInfo" />, lub nazwa kultury tylko do systemu Windows. <c>Nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy oparte na określony przez nazwę kultury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Listę nazw wstępnie zdefiniowanych kultury, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, konstruktora tworzy wystąpienie Niezmienna kultura, co jest równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Jeśli identyfikator kultury skojarzony z `name` zgodny identyfikator kultury bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> obiekt, który używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo>zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 Jeśli identyfikator kultury skojarzony z `name` nie odpowiada identyfikator kultury bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> obiekt, który używa domyślnych wartości dla określonej kultury.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Ma zawsze wartość właściwości `true`.  
  
 Załóżmy na przykład, że arabski (Arabia Saudyjska) jest bieżącej kultury systemu Windows i użytkownik zmienił kalendarz z Hijri do kalendarza gregoriańskiego.  
  
-   Z `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (co jest ustawieniem użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> Właściwości nowej <xref:System.Globalization.CultureInfo> jest ustawiona na identyfikator kultury skojarzone z określoną nazwą.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starsze wersje systemu Windows nie należy tego robić. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby waluty, użyj ustawienia domyślnego na .NET Framework, należy użyć aplikacji <xref:System.Globalization.CultureInfo> przeładowania konstruktora, który akceptuje `useUserOverride` parametru i wartości `false`.  
  
   
  
## Examples  
 Poniższy przykład pobiera bieżącej kultury. Jeśli jest inny niż kultury francuski (Francja), wywołuje metodę <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor do tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury francuski (Francja) i ułatwia bieżącej kultury wątku. W przeciwnym razie tworzy <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury francuski (Luksemburg) i ułatwia bieżącej kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest prawidłową nazwą kultury. Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów wywołujących sekcji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest prawidłową nazwą kultury. Począwszy od [! Generuje ten konstruktor include[net_v40_long](~/includes/NET-V40-Long-MD.MD)] <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , a jeśli <paramref name="name" /> nie jest nazwą dodatkowych lub zastąpienie kultury, metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątek.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> identyfikator, <see cref="P:System.Globalization.CultureInfo.LCID" /> właściwości istniejącego <see cref="T:System.Globalization.CultureInfo" /> obiektu lub identyfikator kultury tylko do systemu Windows.</param>
        <param name="useUserOverride">Wartość logiczna, która określa, czy mają być używane ustawienia kultury wybrane przez użytkownika (<see langword="true" />) lub ustawienie kultury domyślnej (<see langword="false" />).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy oparte na kultury określonej przez identyfikator kultury i wartość logiczna, która określa, czy użyj ustawienia kultury wybrane przez użytkownika z systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultura wstępnie zdefiniowane identyfikatory są wymienione w [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go.  
  
 W większości przypadków `culture` parametru jest mapowany na odpowiedni identyfikator ustawień regionalnych National obsługi Language (NLS). Wartość `culture` parametru staje się wartością <xref:System.Globalization.CultureInfo.LCID%2A> właściwości nowej <xref:System.Globalization.CultureInfo>.  
  
 Zaleca się, że wywołanie konstruktora Nazwa ustawień regionalnych <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, ponieważ nazwy ustawienia regionalne są preferowane LCID. Niestandardowych ustawień regionalnych wymagana jest nazwa ustawień regionalnych.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Aplikacje powinny zwykle nie nie zezwalaj na zastąpienia użytkownika. Należy pamiętać, że brak zezwolenia zastąpienia sam gwarantuje stabilności danych; Zobacz wpis w blogu [kultury danych nie należy uznany za stabilną (z wyjątkiem niezmiennej)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwość jest ustawiona na `true` i identyfikator określonej kultury jest zgodny z identyfikatorem bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> używającą te zastąpienia, w tym ustawienia użytkownika dla właściwości z <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 W przeciwnym razie ten konstruktor tworzy <xref:System.Globalization.CultureInfo> które są używane wartości domyślne dla określonej kultury.  
  
 Wartość `useUserOverride` parametru staje się wartością <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwości.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącej kultury systemu Windows i użytkownik zmienił kalendarz z Hijri do kalendarza gregoriańskiego.  
  
-   Z `CultureInfo("0x0401", true)` (kultury nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (co jest ustawieniem użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("0x0401", false)` (kultury nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.HijriCalendar> (który jest domyślnym kalendarzem dla ar-SA) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `false`.  
  
-   Z `CultureInfo("0x041E", true)` (kultury th-ty percentyl nazwy), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("0x041E", false)` (kultury th-ty percentyl nazwy), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `false`.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starsze wersje systemu Windows nie. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby waluty, użyj ustawienia domyślnego na .NET Framework, należy ustawić aplikacji `useUserOverride` parametr `false`.  
  
> [!NOTE]
>  Dla zapewnienia zgodności, kultury, tworzony przy użyciu `culture` ma parametr 0x0004 lub 0x7c04 <xref:System.Globalization.CultureInfo.Name%2A> właściwość zh-CHS lub zh-CHT odpowiednio. Zamiast tego należy preferować do skonstruowania kultury przy użyciu bieżącej nazwy kultury standardowe zh-Hans lub zh-Hant, chyba że masz powód przy użyciu starszej nazwy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> nie jest prawidłową kulturą identyfikatorem. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest identyfikatorem prawidłową kulturą. Począwszy od [! Generuje ten konstruktor include[net_v40_long](~/includes/NET-V40-Long-MD.MD)] <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , metoda wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwa <see cref="P:System.Globalization.CultureInfo.Name" /> istniejącego <see cref="T:System.Globalization.CultureInfo" />, lub nazwa kultury tylko do systemu Windows. <c>Nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <param name="useUserOverride">Wartość logiczna, która określa, czy mają być używane ustawienia kultury wybrane przez użytkownika (<see langword="true" />) lub ustawienie kultury domyślnej (<see langword="false" />).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy oparte na kultury określony przez nazwę i wartość logiczna, która określa, czy użyj ustawienia kultury wybrane przez użytkownika z systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Listę nazw wstępnie zdefiniowanych kultury, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, konstruktora tworzy wystąpienie Niezmienna kultura, co jest równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 Użytkownik może wybrać do zastępowania niektórych wartości skojarzone z bieżącej kultury systemu Windows za pośrednictwem części Opcje regionalne i językowe w Panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Aplikacje powinny zwykle nie nie zezwalaj na zastąpienia użytkownika. Należy pamiętać, że brak zezwolenia zastąpienia sam gwarantuje stabilności danych; Zobacz wpis w blogu [kultury danych nie należy uznany za stabilną (z wyjątkiem niezmiennej)](http://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwość jest ustawiona na `true` i identyfikator kultury skojarzony z określona nazwa kultury jest zgodny z identyfikatorem kultury bieżącej kultury systemu Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> używającą te zastąpienia w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 W przeciwnym razie ten konstruktor tworzy <xref:System.Globalization.CultureInfo> które są używane wartości domyślne dla określonej kultury.  
  
 Wartość `useUserOverride` parametru staje się wartością <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwości.  
  
 Załóżmy na przykład, że arabski (Arabia Saudyjska) jest bieżącej kultury systemu Windows i użytkownik zmienił kalendarz z Hijri do kalendarza gregoriańskiego.  
  
-   Z `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (co jest ustawieniem użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.HijriCalendar> (który jest domyślnym kalendarzem dla ar-SA) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `false`.  
  
-   Z `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `true`.  
  
-   Z `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarza domyślnego dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ma ustawioną wartość `false`.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> Właściwości nowej <xref:System.Globalization.CultureInfo> jest ustawiona na identyfikator kultury skojarzone z określoną nazwą.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starsze wersje systemu Windows nie należy tego robić. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby waluty, użyj ustawienia domyślnego na .NET Framework, należy ustawić aplikacji `useUserOverride` parametr `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest prawidłową nazwą kultury. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest prawidłową nazwą kultury. Począwszy od [! Generuje ten konstruktor include[net_v40_long](~/includes/NET-V40-Long-MD.MD)] <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , a jeśli <paramref name="name" /> nie jest nazwą dodatkowych lub zastąpienie kultury, metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątek.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kalendarz domyślny kultury.</summary>
        <value>A <see cref="T:System.Globalization.Calendar" /> reprezentujący kalendarz domyślny kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 W związku z tym jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true`, wartość tej właściwości może różnić się od kalendarz domyślny kultury.  
  
 Aplikacja zmiany kalendarza używanego przez bieżących <xref:System.Globalization.CultureInfo> przez ustawienie <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, który jest wystąpieniem <xref:System.Globalization.DateTimeFormatInfo> klasy. Nowy kalendarz musi mieć jedną z kalendarzy na liście <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> zawiera również inne właściwości, które Dostosowywanie formatowania daty i godziny skojarzone z tym <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odświeżanie pamięci podręcznej informacje związane z kulturą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje, takie jak domyślne wzorce culture i format jest buforowana przy pierwszym uruchomieniu żądanie. Czy zmienić informacji czasie trwania <xref:System.AppDomain>, na przykład gdy użytkownik modyfikuje części Opcje regionalne i językowe w Panelu sterowania. Jednak <xref:System.Globalization.CultureInfo> klasy nie automatycznie wykrywa zmiany w ustawieniach systemu.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Metody spowoduje wyczyszczenie pamięci podręcznej <xref:System.Globalization.CultureInfo> obiekty utworzone przez <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> i odświeża informacje w <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, i <xref:System.Globalization.RegionInfo.CurrentRegion%2A> właściwości, w oparciu o bieżące ustawienia systemu.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> — Metoda nie powoduje odświeżenia informacji w <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> właściwości dla istniejących wątków. Wątki w przyszłości będzie jednak wszelkie nowe <xref:System.Globalization.CultureInfo> wartości właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Kopię bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klon jest zapisywalny nawet wtedy, gdy oryginalne <xref:System.Globalization.CultureInfo> jest tylko do odczytu. W związku z tym można zmodyfikować właściwości klonu.  
  
 Kopia pobieżna obiektu jest kopię tylko obiekt. Jeśli obiekt zawiera odwołania do innych obiektów, kopię pobieżną nie tworzy kopie określono obiektów. Odnosi się do oryginalnych obiektów zamiast tego. Z kolei głęboką kopię obiektu tworzy kopię obiektu i kopie wszystkich bezpośrednio lub pośrednio odwołuje się ten obiekt.  
  
 <xref:System.Globalization.CultureInfo.Clone%2A> Metoda tworzy rozszerzone kopię pobieżną. Obiekty zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, i <xref:System.Globalization.CultureInfo.Calendar%2A> właściwości są również kopiowane. W rezultacie sklonowany <xref:System.Globalization.CultureInfo> obiektu można zmodyfikować jej właściwości skopiowane bez wpływu na oryginalnym <xref:System.Globalization.CultureInfo> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klonów <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpień skojarzonych z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CompareInfo" /> definiuje sposób porównywania ciągów dla kultury.</summary>
        <value>
          <see cref="T:System.Globalization.CompareInfo" /> Definiuje sposób porównywania ciągów dla kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A> Zwraca <xref:System.Globalization.CompareInfo> obiekt, który zawiera informacje specyficzne dla kultury w operacjach porównania zależne od kultury sortowania i ciąg.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) o sortowanie międzynarodowe, a druga <xref:System.Globalization.CultureInfo> z tradycyjnego sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwę lub nazwę istniejącej <see cref="T:System.Globalization.CultureInfo" /> obiektu. <c>Nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <summary>Tworzy <see cref="T:System.Globalization.CultureInfo" /> reprezentujący określoną kulturę, która jest skojarzona z określoną nazwą.</summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje: niezmiennej kultury, jeśli <paramref name="name" /> to ciąg pusty ("").  - lub - określoną kulturę, skojarzone z <paramref name="name" />, jeśli <paramref name="name" /> to kultura neutralna.  - lub - kultury określonej przez <paramref name="name" />, jeśli <paramref name="name" /> jest już określoną kulturę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Metoda opakowuje wywołanie <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> konstruktora.  
  
> [!NOTE]
>  Listę nazw wstępnie zdefiniowanych kultury, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47.  
  
 Kultury są podzielone na trzy zestawy: Niezmienna kultura, neutralne kultury i określone kultury. Aby uzyskać więcej informacji, zobacz opis <xref:System.Globalization.CultureInfo> klasy.  
  
 Jeśli identyfikator kultury określoną kulturę zwracane przez tę metodę jest zgodny z identyfikatorem kultury bieżącej kultury systemu Windows, ta metoda tworzy <xref:System.Globalization.CultureInfo> zastępuje obiekt, który używa kultury systemu Windows. Zastąpienia obejmują ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Można utworzyć wystąpienia <xref:System.Globalization.CultureInfo> obiektów, że przy domyślne ustawienia kultury, a nie zastępuje użytkownika, wywołaj <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora o wartości `false` dla `useUserOverride` argumentu.  
  
 Mimo że <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> termin "Konkretnego" obejmuje nazwę metody, należy pamiętać, że kultury danych można zmienić między wersjami, lub z powodu niestandardowe kultury lub z powodu przesłonięcia użytkownika. Użyj Niezmienna kultura lub binary lub stałego formularzy do zapisywania danych.  
  
   
  
## Examples  
 Poniższy przykład pobiera tablicę <xref:System.Globalization.CultureInfo> obiektów, które reprezentują neutralne kultury z <xref:System.Globalization.CultureInfo.GetCultures%2A> — metoda i sortuje tablicy. Po jego iteracje elementów w tablicy, przekazuje nazwę każdego kultury neutralnej do <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> — metoda i wyświetla nazwę określoną kulturę zwracany przez metodę.  
  
> [!NOTE]
>  W przykładzie użyto nazwy kultury zh-CHS i zh-CHT. Jednak aplikacje, które target Windows Vista i później należy używać zh-Hans zamiast zh-CHS i zh-Hant zamiast zh-CHT. zh-Hans i zh-Hant reprezentują standardowy bieżącego i powinien być używany, chyba że masz powód przy użyciu starszej nazwy.  
>   
>  Należy pamiętać, że wyniki przykładu może różnić się w instalacji tajwańskiej systemu Windows, gdy dane wejściowe, chiński (tradycyjny) kultury neutralnej (zh, zh-CHT lub zh-Hant), którą będzie zwracać zh-TW.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest prawidłową nazwą kultury.  - lub - kultury określonej przez <paramref name="name" /> nie ma skojarzonych z nim określoną kulturę.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> ma wartość null.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest prawidłową nazwą kultury. Począwszy od [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)], ta metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typy kultury, które odnoszą się do bieżącego <see cref="T:System.Globalization.CultureInfo" /> obiektu.</summary>
        <value>Bitowe połączenie co najmniej jednego <see cref="T:System.Globalization.CultureTypes" /> wartości. Nie ma żadnej wartości domyślnej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje <xref:System.Globalization.CultureTypes> wyliczenie i <xref:System.Globalization.CultureInfo.CultureTypes%2A> właściwości.  
  
 [!code-cpp[system.globalization.cultureTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cpp/ct.cpp#1)]
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje kulturę używaną przez bieżący wątek.</summary>
        <value>Obiekt, który reprezentuje kulturę używaną przez bieżący wątek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> Obiekt, który jest zwracany przez tę właściwość i powiązane obiekty określić domyślnego formatu daty, godziny, liczb, wartości waluty, sortowanie kolejność tekstu, wielkość liter konwencje i porównywania ciągów.  
  
 Bieżąca kultura jest właściwością wykonywania wątku, który jest zwracany przez statycznych <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> właściwości. Wartość <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwość odpowiada wartości <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> właściwości. Pobieranie wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości jest odpowiednikiem pobierania <xref:System.Globalization.CultureInfo> obiektu zwróconego przez `Thread.CurrentThread.CurrentCulture` właściwości. Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ustawiając wartość <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> bieżącej kultury wątku również zmiany właściwości.  
  
> [!NOTE]
>  .NET Framework 4.5.2 i wcześniejszych wersjach <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość jest tylko do odczytu.  oznacza to, że można pobrać wartości właściwości, ale nie można go ustawić. Aby zmienić bieżącej kultury, należy przypisać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowe kultura `Thread.CurrentThread.CurrentCulture` właściwości. Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości odczytu / zapisu; można jednocześnie ustawić i pobrać wartość właściwości. Jeśli ustawisz wartość właściwości <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowe kultury, wartość `Thread.CurrentThread.CurrentCulture` również zmiany właściwości.  
  
 W tej sekcji:  
  
 [Jak jest określana kultury wątku](#ThreadCulture)   
 [Pobieranie bieżącej kultury](#Getting)   
 [Jawne ustawienie właściwości CurrentCulture](#ExplicitSetting)   
 [Bieżąca kultura i zastąpień użytkownika](#Overrides)   
 [Kultura i aplikacji systemu Windows](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Ustalanie kultury wątku  
 Po uruchomieniu wątku jego kultury jest wstępnie określane w następujący sposób:  
  
-   Pobierając kultura, która jest określona przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w domenie aplikacji, w którym wątek jest wykonywany, gdy wartość właściwości jest `null`.  
  
-   Jeśli wątek jest wątku puli wątków, który wykonuje operację asynchroniczną z opartego na zadaniach i że aplikacja jest przeznaczona [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszej wersji programu .NET Framework, jego kultury jest określany przez kultury wątku.  W poniższym przykładzie zmiany bieżącej kultury portugalski (Brazylia) i uruchamia zadania sześć, z których każdy zawiera jego identyfikator wątku, Identyfikatora zadania i jego bieżącej kultury. Każdego zadania (i wątki) odziedziczył kultury wątku.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Aby uzyskać więcej informacji, zobacz sekcję "Kultury i oparty na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.  
  
-   Wywołując systemu Windows `GetUserDefaultLocaleName` funkcji.  
  
 Należy pamiętać, że jeśli wartość określoną kulturę, która różni się od zainstalowany system kultury lub kultury preferowanego użytkownika, a aplikacja rozpoczyna się wiele wątków, bieżącej kultury tych wątków będzie kultura, która jest zwracana w wyniku `GetUserDefaultLocaleName` działać, dopóki nie zostanie przypisany do kultury <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w domenie aplikacji, w którym jest wykonywany wątku.  
  
 Aby uzyskać więcej informacji na temat jak kultury wątku jest określana, zobacz sekcję "Kultury i wątków" w <xref:System.Globalization.CultureInfo> strony odwołania.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Pobieranie bieżącej kultury  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Właściwości to ustawienie dla każdego wątku; oznacza to, że każdy wątek może mieć własną kultury. Pobierz kultura bieżącego wątku pobierając zaletą <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości, jak w poniższym przykładzie przedstawiono.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Można również pobrać wartość kultury bieżącej wątku z <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> właściwości.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Jawne ustawianie właściwości CurrentCulture  
 Rozpoczęcie od przeczytania artykułu [!INCLUDE[net_v46](~/includes/net-v46-md.md)], aby zmienić kultura, która jest używana przez istniejące wątek należy ustawić <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości do nowego kultury. Jeśli zmienisz jawnie kultury wątku w ten sposób, aby zmienić są utrwalane, jeśli wątek przecina granice domeny aplikacji. Poniższy przykład umożliwia zmianę bieżącej kultury wątku holenderski (Holandia). Ponadto, gdy bieżący wątek przecina granice domeny aplikacji, jego bieżącej kultury pozostaje zmienione.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Zmiana kultura przy użyciu <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwość wymaga <xref:System.Security.Permissions.SecurityPermission> uprawnienie o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> zestawu wartości. Manipulowanie wątków jest niebezpieczne z powodu stanu zabezpieczeń skojarzone z wątków. W związku z tym to uprawnienie należy podać tylko do zaufanego kodu, a następnie tylko niezbędne. Nie można zmienić kultury wątku w kodzie częściowo zaufanym.  
  
 Począwszy od [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], można jawnie zmienić bieżącej kultury wątku określoną kulturę (np. francuski (Kanada)) lub kultury neutralnej (na przykład francuski). Gdy <xref:System.Globalization.CultureInfo> obiekt reprezentuje kultury neutralnej wartości <xref:System.Globalization.CultureInfo> właściwości, takie jak <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, i <xref:System.Globalization.CultureInfo.TextInfo%2A> odzwierciedlają określoną kulturę, z którym skojarzony jest Określa kulturę neutralną. Na przykład dominującą kultury dla angielskiej wersji językowej kultury neutralnej jest angielski (Stany Zjednoczone); dominującą kultury niemieckim kultury jest niemiecki (Niemcy). Poniższy przykład przedstawia różnice formatowania podczas bieżącej kultury ma ustawioną wartość określoną kulturę, francuski (Kanada) i kultury neutralnej, francuski.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Można również użyć <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości wraz z <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> właściwości można ustawić <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości aplikacji ASP.NET do użytkownika preferowana przez kultury, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>Bieżąca kultura i napisanie użytkownika  
 Systemu Windows umożliwia użytkownikom zastąpić wartości właściwości standardowych <xref:System.Globalization.CultureInfo> obiektu i powiązane obiekty przy użyciu **Opcje regionalne i językowe** w Panelu sterowania. <xref:System.Globalization.CultureInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość odzwierciedla przesłonięcia te użytkownika w następujących przypadkach:  
  
-   Jeśli bieżącej kultury wątku jest ustawiane niejawnie przez system Windows `GetUserDefaultLocaleName` funkcji.  
  
-   Jeśli wynika z bieżącej kultury wątku <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość odpowiada bieżącego ustawienia kulturowego systemu Windows.  
  
-   Jeśli bieżącej kultury wątku jest jawnie ustawiony na kulturę zwrócony przez <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> — metoda i że kultura odnosi się do bieżącego ustawienia kulturowego systemu Windows.  
  
-   Jeśli bieżącej kultury wątku jest jawnie ustawiony na kulturę utworzone przez <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor i że kultura odnosi się do bieżącego ustawienia kulturowego systemu Windows.  
  
 W niektórych przypadkach, szczególnie w przypadku aplikacji serwerowych, ustawienie bieżącej kultury <xref:System.Globalization.CultureInfo> obiektu odzwierciedlający zastąpienia użytkownika może być niepożądane. Zamiast tego możesz ustawić dla bieżącej kultury wątku <xref:System.Globalization.CultureInfo> zastępuje obiekt użytkownika nie są widoczne w następujący sposób:  
  
-   Wywołując <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora o wartości `false` dla `useUserOverride` argumentu.  
  
-   Wywołując <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> metody, która zwraca buforowane, tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Bieżąca kultura i aplikacji platformy uniwersalnej systemu Windows  
 W aplikacjach systemu Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości odczytu / zapisu, tak jak w aplikacjach .NET Framework i .NET Core; można go użyć do pobrania i ustawianie bieżącej kultury. Jednak aplikacje platformy uniwersalnej systemu Windows nie rozróżnia od bieżącej kultury bieżącej kultury interfejsu użytkownika. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapy właściwości do pierwszej wartości w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.  

W aplikacjach .NET Framework i .NET Core, bieżącej kultury jest ustawienie dla każdego wątku i <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość odzwierciedla kultura bieżącego wątku. W aplikacjach platformy uniwersalnej systemu Windows, mapuje bieżącej kultury [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) właściwość, która jest ustawienie globalne. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> kultury nie można ustawić na podstawie dla każdego wątku; kultura całą aplikację zmiany właściwości.
  
## Examples  
 W poniższym przykładzie pokazano, jak zmienić <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> bieżącego wątku.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać ustawienie bieżącej kultury. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje bieżącej kultury interfejsu użytkownika używane przez Menedżera zasobów do wyszukiwania zasobów określonej kultury w czasie wykonywania.</summary>
        <value>Kultura używana przez Menedżera zasobów do wyszukiwania zasobów określonej kultury w czasie wykonywania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżąca kultura interfejsu użytkownika jest właściwością dla każdego wątku. Oznacza to, że każdy wątek ma własną bieżącej kultury interfejsu użytkownika. Ta właściwość jest odpowiednikiem pobierania lub, począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ustawienie <xref:System.Globalization.CultureInfo> przypisany do obiektu `System.Threading.Thread.CurrentThread.CurrentUICulture` właściwości. Po uruchomieniu wątku jego kultury interfejsu użytkownika jest wstępnie określane w następujący sposób:  
  
-   Pobierając kultura, która jest określona przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w domenie aplikacji, w którym wątek jest wykonywany, gdy wartość właściwości jest `null`.  
  
-   Jeśli wątek jest wątku puli wątków, który wykonuje operację asynchroniczną z opartego na zadaniach i że aplikacja jest przeznaczona [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszej wersji programu .NET Framework, jego kultury interfejsu użytkownika zależy od kultury interfejsu użytkownika wątku.  W poniższym przykładzie zmiany bieżącej kultury interfejsu użytkownika portugalski (Brazylia) i uruchamia zadania sześć, z których każdy zawiera jego identyfikator wątku, Identyfikatora zadania i jego bieżącej kultury interfejsu użytkownika. Każdego zadania (i wątki) odziedziczył kultury interfejsu użytkownika wątku.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Aby uzyskać więcej informacji, zobacz sekcję "Kultury i oparty na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.  
  
-   Wywołując systemu Windows `GetUserDefaultUILanguage` funkcji.  
  
> [!NOTE]
>  W [!INCLUDE[Compact](~/includes/compact-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość jest tylko do odczytu. Bieżąca kultura interfejsu użytkownika zależy od ustawień regionalnych systemu i nie można zmienić programowo.  
  
 Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], aby zmienić kultura interfejsu użytkownika przez wątek, należy ustawić <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości do nowego kultury. Jeśli zmienisz jawnie kultury interfejsu użytkownika dla wątku w ten sposób, aby zmienić są utrwalane, jeśli wątek przecina granice domeny aplikacji.  
  
> [!NOTE]
>  .NET Framework 4.5.2 i wcześniejszych wersjach <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość jest tylko do odczytu.  oznacza to, że można pobrać wartości właściwości, ale nie można go ustawić. Aby zmienić bieżącej kultury interfejsu użytkownika, należy przypisać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowe kultura interfejsu użytkownika `Thread.CurrentThread.CurrentUICulture` właściwości. Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości odczytu / zapisu; można jednocześnie ustawić i pobrać wartość właściwości. Jeśli ustawisz wartość właściwości <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowe kultury, wartość `Thread.CurrentThread.CurrentCulture` również zmiany właściwości.  
  
 W tej sekcji:  
  
 [Pobieranie bieżącej kultury interfejsu użytkownika](#Getting)   
 [Jawne ustawienie bieżącej kultury interfejsu użytkownika](#Explicit)   
 [Domyślnie ustawienie bieżącej kultury interfejsu użytkownika](#Implicit)   
 [Zagadnienia dotyczące zabezpieczeń](#Security)   
 [Bieżące aplikacje kultury interfejsu użytkownika i systemu Windows](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Pobieranie bieżącej kultury interfejsu użytkownika  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Właściwości to ustawienie dla każdego wątku; oznacza to, że każdy wątek może mieć własną kultury interfejsu użytkownika. Pobierz kultury interfejsu użytkownika bieżącego wątku pobierając zaletą <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości, jak w poniższym przykładzie przedstawiono.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Można również pobrać wartość kultury interfejsu użytkownika bieżącego wątku z <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Jawne ustawianie bieżącej kultury interfejsu użytkownika  
 Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], bieżącej kultury interfejsu użytkownika można zmienić, przypisując <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowe kultura <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Bieżąca kultura interfejsu użytkownika można ustawić określoną kulturę (np. en US lub de-DE) lub kultury neutralnej (na przykład en lub de). Poniższy przykład ustawia bieżącej kultury interfejsu użytkownika, fr-FR lub francuski (Francja).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 W aplikacji wielowątkowych można jawnie ustawić kultury interfejsu użytkownika w którymkolwiek wątku, przypisując <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tej kultury wątku <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Jeśli wątek kultury, którego chcesz ustawić bieżącego wątku, można przypisać nowe kultura <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Gdy kultury interfejsu użytkownika wątku jest ustawiony w sposób jawny, wątek zachowuje tego samego kultury, nawet jeśli przecina granice domeny aplikacji i wykonuje kod w innej domenie aplikacji.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Niejawne ustawianie bieżącej kultury interfejsu użytkownika  
 Gdy wątek, łącznie z wątku głównego aplikacji pierwszy domyślnie zostanie utworzona, jego bieżącej kultury interfejsu użytkownika jest ustawiony w następujący sposób:  
  
-   Przy użyciu kultury zdefiniowane przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości dla bieżącej domeny aplikacji, jeśli wartość właściwości jest `null`.  
  
-   Za pomocą systemu domyślną kulturę. W systemach, które używają systemu operacyjnego Windows, środowisko uruchomieniowe języka wspólnego wymaga systemu Windows `GetUserDefaultUILanguage` funkcji, aby ustawić bieżącej kultury interfejsu użytkownika. `GetUserDefaultUILanguage` zwraca domyślną kulturę interfejsu użytkownika ustawione przez użytkownika. Jeśli użytkownik nie ma ustawionej domyślny język interfejsu użytkownika, zwraca kultury pierwotnie zainstalowany w systemie.  
  
 Jeśli wątek przecina granic aplikacji i wykonuje kod w innej domenie aplikacji, jego kultury jest określana w taki sam sposób jak w przypadku nowo utworzonego wątku.  
  
 Należy pamiętać, że jeśli ustawić określoną kulturę interfejsu użytkownika, który różni się od kultury interfejsu użytkownika zainstalowany system lub aplikacja zostanie uruchomiony wiele wątków i preferowaną kultury interfejsu użytkownika dla danego użytkownika, bieżącej kultury interfejsu użytkownika w tych wątków będzie kultury zwrócony przez `GetUserDefaultUILanguage`działać, dopóki nie zostanie przypisany do kultury <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w domenie aplikacji, w którym jest wykonywany wątku.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
 Kultura bieżącego wątku zmiana wymaga <xref:System.Security.Permissions.SecurityPermission> uprawnienie o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> zestawu wartości.  
  
> [!CAUTION]
>  Manipulowanie wątków jest niebezpieczne z powodu stanu zabezpieczeń skojarzone z wątków. W związku z tym to uprawnienie należy podać tylko do zaufanego kodu, a następnie tylko niezbędne. Nie można zmienić kultury wątku w kodzie częściowo zaufanym.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>Bieżąca kultura interfejsu użytkownika i aplikacji platformy uniwersalnej systemu Windows  
 
W aplikacjach systemu Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości odczytu / zapisu, tak jak w aplikacjach .NET Framework i .NET Core; można go użyć do pobrania i ustawianie bieżącej kultury. Jednak aplikacje platformy uniwersalnej systemu Windows nie rozróżnia od bieżącej kultury bieżącej kultury interfejsu użytkownika. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mapy właściwości do pierwszej wartości w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.

W aplikacjach .NET Framework i .NET Core, bieżącej kultury interfejsu użytkownika jest ustawienie dla każdego wątku i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość odzwierciedla kultury interfejsu użytkownika bieżącego wątku. W aplikacjach platformy uniwersalnej systemu Windows, mapuje bieżącej kultury [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) właściwość, która jest ustawienie globalne. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> kultury nie można ustawić na podstawie dla każdego wątku; kultura całą aplikację zmiany właściwości.    
  
## Examples  
 W poniższym przykładzie pokazano, jak zmienić <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> bieżącego wątku.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Właściwość jest ustawiona na nazwę kultury, której nie można użyć do zlokalizowania pliku zasobu. W nazwach plików zasobów mogą zawierać tylko litery, cyfry, łączniki i znaki podkreślenia.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać ustawienie bieżącej kultury interfejsu użytkownika. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiuje kulturalnie odpowiedni format wyświetlania daty i godziny.</summary>
        <value>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiuje kulturalnie odpowiedni format wyświetlania daty i godziny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 Wartość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwość nie jest obliczane, dopóki aplikacja uzyskuje dostęp do właściwości. Jeśli użytkownik może zmienić bieżącej kultury do nowego kultury, podczas gdy aplikacja jest uruchomiona i aplikacja uzyskuje dostęp do <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> lub <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości, aplikacja pobiera wartości domyślne dla nowych kultury zamiast zastąpienia oryginalny kultury. Aby zachować zastąpień dla oryginalnego bieżącej kultury, powinien uzyskiwać dostęp do aplikacji <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości przed zmianą bieżącej kultury.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klonów <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpień skojarzonych z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> Właściwości lub dowolnym <see cref="T:System.Globalization.DateTimeFormatInfo" /> ustawić właściwości oraz <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</exception>
        <block subset="none" type="usage">
          <para>Jeśli <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> jest <see cref="T:System.Globalization.TaiwanCalendar" /> , ale <see cref="P:System.Threading.Thread.CurrentCulture" /> nie jest ustawiony na angielski, chiński (Tajwan) o nazwie zh-TW, następnie <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, i <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> Zwróć ciąg pusty ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kulturę domyślną na potrzeby wątków w bieżącej domenie aplikacji.</summary>
        <value>Domyślną kulturę wątków w bieżącej domenie aplikacji lub <see langword="null" /> w przypadku bieżącego ustawienia kulturowego systemu kultury wątku domyślne w domenie aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i poprzednich wersjach, domyślnie kultura wszystkie wątki ustawienie kultury systemu Windows. W przypadku aplikacji, których bieżącej kultury różni się od domyślną kulturę systemu to zachowanie jest często niepożądane. W [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości włącza aplikację zdefiniować domyślną kulturę wszystkie wątki w domenie aplikacji.  
  
> [!IMPORTANT]
>  Jeśli nie ma jawnie ustawiona kultury wszelkie istniejące wątków wykonywania w domenie aplikacji, ustawianie <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> również zmiany kultura wątki te właściwości. Jednak jeśli te wątków wykonane w innej domenie aplikacji, ich kultury jest definiowana za pomocą <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w tej domenie aplikacji lub, jeśli nie zdefiniowanej wartości domyślnej jest, przez domyślną kulturę systemu. W związku z tym zaleca się zawsze jawnie ustawiona kultura z wątku głównego aplikacji i nie zależą od <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości, aby zdefiniować kultury wątku głównego aplikacji.  
  
 Jeśli nie jest ono określone jawnie, wartość <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość jest `null`, i kultury wątków w domenie aplikacji, które nie zostały przypisane jawne kultury jest definiowana za pomocą domyślną kulturę systemu Windows.  
  
 Aby uzyskać więcej informacji na temat kultury, wątki i domen aplikacji, zobacz "kultury i wątków" i "Kultura i domen aplikacji" sekcje w <xref:System.Globalization.CultureInfo> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład przedstawia domyślne zachowanie programu .NET Framework podczas definiowania bieżącej kultury nowego wątku. Podczas uruchamiania w przykładzie bieżącej kultury i bieżącej kultury interfejsu użytkownika na język francuski (Francja) we wszystkich systemach, z wyjątkiem tych, na których domyślną kulturę systemu jest już francuski (Francja). Jeśli domyślną kulturę systemu jest już francuski (Francja), kod ustawia bieżącej kultury i bieżącej kultury interfejsu użytkownika na język angielski (Stany Zjednoczone). Następnie wywołuje `DisplayRandomNumbers` procedury, która generuje trzech liczb losowych i wyświetla je jako wartości waluty. Następnie tworzy nowego wątku, który wykonuje również `DisplayRandomNumbers` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Jak pokazano na dane wyjściowe z przykładu, po uruchomieniu przykład na komputerze, na których kultury systemu jest angielski (Stany Zjednoczone), wątku głównego wyświetla jego wartości waluty przy użyciu konwencji formatowania kultury francuski (Francja). Jednak ponieważ kultury wątku roboczego pochodzi od bieżącego ustawienia kulturowego systemu Windows, a nie aplikacji bieżącej kultury, wątku roboczego wyświetla jego wartości waluty przy użyciu konwencji formatowania kultury angielski (Stany Zjednoczone).  
  
 W poniższym przykładzie użyto <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości do zdefiniowania bieżącej kultury i bieżącej kultury interfejsu użytkownika dla nowego wątku aplikacji. Podczas uruchamiania w przykładzie bieżącej kultury i bieżącej kultury interfejsu użytkownika na język francuski (Francja) we wszystkich systemach, z wyjątkiem tych, na których domyślną kulturę systemu jest już francuski (Francja). Jeśli domyślną kulturę systemu jest już francuski (Francja), ustawia bieżącej kultury i bieżącej kultury interfejsu użytkownika na język angielski (Stany Zjednoczone). Następnie wywołuje `DisplayRandomNumbers` procedury, która generuje trzech liczb losowych i wyświetla je jako wartości waluty. Następnie tworzy nowego wątku, który wykonuje również `DisplayRandomNumbers` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Jak pokazano na dane wyjściowe z przykładu, po uruchomieniu przykład na komputerze, na których kultury systemu jest angielski (Stany Zjednoczone), wątku głównego wątku roboczego jest wyświetlany zarówno i ich wartości waluty przy użyciu konwencji formatowania kultury francuski (Francja).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślną kulturę interfejsu użytkownika dla wątków w bieżącej domenie aplikacji.</summary>
        <value>Domyślna kultura interfejsu użytkownika dla wątków w bieżącej domenie aplikacji lub <see langword="null" /> Jeśli bieżący system kultury interfejsu użytkownika jest wątku domyślna kultura interfejsu użytkownika w domenie aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i poprzednich wersjach, domyślnie kultury interfejsu użytkownika wszystkie wątki ustawienie kultury systemu Windows. W przypadku aplikacji, których bieżącej kultury interfejsu użytkownika różni się od domyślną kulturę systemu to zachowanie jest często niepożądane. W [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości pozwala zdefiniować domyślna kultura interfejsu użytkownika wszystkie wątki w domenie aplikacji.  
  
> [!IMPORTANT]
>  Jeśli nie ma jawnie ustawiona kultury interfejsu użytkownika wszelkie istniejące wątków wykonywania w domenie aplikacji, ustawianie <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> również zmiany kultura wątki te właściwości. Jednak jeśli te wątków wykonane w innej domenie aplikacji, ich kultury jest definiowana za pomocą <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w tej domenie aplikacji lub, jeśli nie zdefiniowanej wartości domyślnej jest, przez domyślną kulturę systemu. W związku z tym zaleca się zawsze jawnie ustaw kultura z wątku głównego aplikacji i nie należy polegać na <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby zdefiniować kultury wątku głównego aplikacji.  
  
 Jeśli nie jest ono określone jawnie, wartość <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwość jest `null`, i bieżącej kultury wszystkie wątki w domenie aplikacji, które nie zostały przypisane jawne kultury jest definiowana za pomocą domyślną kulturę systemu Windows.  
  
 Aby uzyskać więcej informacji na temat kultury, wątki i domen aplikacji, zobacz "kultury i wątków" i "Kultura i domen aplikacji" sekcje w <xref:System.Globalization.CultureInfo> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład przedstawia domyślne zachowanie programu .NET Framework podczas definiowania bieżącej kultury nowego wątku. Używa zasobów w języku angielskim i rosyjski. Poniższy plik tekstowy o nazwie GreetingStrings.txt zawiera zasoby w języku angielskim:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Jest skompilowany w pliku .resources binarny o nazwie GreetingStrings.resources przy użyciu [Generator pliku zasobów](~/docs/framework/tools/resgen-exe-resource-file-generator.md) przy użyciu następującego polecenia.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Poniższy plik tekstowy o nazwie GreetingStrings.ru RU.txt zawiera zasoby języka rosyjskiego:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Jest skompilowany w pliku .resources binarny o nazwie GreetingStrings.ru RU.resources przy użyciu [Generator pliku zasobów](~/docs/framework/tools/resgen-exe-resource-file-generator.md) przy użyciu następującego polecenia.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Kod aplikacji, które są wyświetlane poniżej, znajduje się w pliku o nazwie Example1.vb lub Example1.cs. Jest on skompilowany, plik wykonywalny przy użyciu następującego polecenia dla kompilatora języka Visual Basic:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Dla kompilatora C# to polecenie jest podobne:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Spowoduje to utworzenie zestawu, który obejmuje przykładowy kod wykonywalny wraz z zasobów dla jego kultury rezerwowej. Można również użyć [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) do utworzenia pliku zasobów dla kultury rosyjski (Rosji) przy użyciu następującego polecenia:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Podczas uruchamiania w przykładzie bieżącej kultury i bieżącej kultury interfejsu użytkownika do rosyjski (Rosji) we wszystkich systemach, z wyjątkiem tych, na których domyślną kulturę systemu jest już rosyjski (Rosji). Jeśli domyślną kulturę systemu jest już rosyjski (Rosji), ustawia kod bieżącej kultury i Interfejsie bieżącej kultury na język angielski (Stany Zjednoczone). Następnie wywołuje `ShowGreeting` rutynowych Wyświetla prostego ciągu jest ona wywoływana po raz pierwszy i nieco inny ciąg dla wywołania metody kolejne. Następnie tworzy nowego wątku, który wykonuje również `ShowGreeting` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Jak pokazano na dane wyjściowe z przykładu, po uruchomieniu przykład na komputerze, na których kultury systemu jest angielski (Stany Zjednoczone), wątku głównego wyświetla jego początkowej ciągu rosyjski. Jednak ponieważ kultury wątku roboczego pochodzi od bieżącego ustawienia kulturowego systemu Windows, a nie aplikacji bieżącej kultury, wątku roboczego wyświetla jego ciągu w języku angielskim.  
  
 W poniższym przykładzie użyto <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości do zdefiniowania bieżącej kultury i bieżącej kultury interfejsu użytkownika dla nowego wątku aplikacji.  
  
 W przykładzie użyto tych samych plików zasobów, co w poprzednim przykładzie. Polecenia, aby skompilować i do osadzania języka rosyjskiego zlokalizowanych zasobów w zestawie satelickim, również są identyczne, z wyjątkiem tego, że zmiany nazwy pliku wykonywalnego zestawu.  
  
 Podczas uruchamiania w przykładzie bieżącej kultury i bieżącej kultury interfejsu użytkownika do rosyjski (Rosji) we wszystkich systemach, z wyjątkiem tych, na których domyślną kulturę systemu jest już rosyjski (Rosji). Jeśli domyślną kulturę systemu jest już rosyjski (Rosji), ustawia bieżącej kultury i bieżącej kultury interfejsu użytkownika na język angielski (Stany Zjednoczone). Następnie wywołuje `ShowGreeting` rutynowych Wyświetla prostego ciągu jest ona wywoływana po raz pierwszy i nieco inny ciąg dla wywołania metody kolejne. Następnie tworzy nowego wątku, który wykonuje również `ShowGreeting` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Jak pokazano na dane wyjściowe z przykładu, po uruchomieniu przykład na komputerze, na których kultury systemu jest angielski (Stany Zjednoczone), zarówno z wątku głównego i wątku roboczego ich ciągów wyświetlania języka rosyjskiego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">W ramach operacji set <see cref="P:System.Globalization.CultureInfo.Name" /> wartość właściwości jest nieprawidłowa.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury zlokalizowanych pełna.</summary>
        <value>Nazwę pełne kultury zlokalizowanego w formacie * languagefull * [* kraju / regionfull *], gdzie * languagefull * jest pełna nazwa języka i * kraju / regionfull * jest pełną nazwę kraju/regionu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje zlokalizowana nazwa <xref:System.Globalization.CultureInfo> obiektu.  
  
 Nazwy kultury może się różnić z powodu skryptów lub Konwencji formatowania. Należy użyć nazwy zwracane do wyświetlenia, a nie próbował go przeanalizować.  
  
 Jeśli istnieje kultura niestandardowa jest tworzony za pomocą klasy <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy, <xref:System.Globalization.CultureInfo.DisplayName%2A> właściwości jest ustawiana na wartość <xref:System.Globalization.CultureInfo.NativeName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie przedstawiono odpowiednio kultur zh-CHS i zh-CHT z identyfikatorami kultury 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury w formacie * languagefull * [* kraju / regionfull *] w języku angielskim.</summary>
        <value>Nazwa kultury w formacie * languagefull * [* kraju / regionfull *] w języku angielskim, gdzie * languagefull * jest pełna nazwa języka i * kraju / regionfull * jest pełną nazwę kraju/regionu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład <xref:System.Globalization.CultureInfo.EnglishName%2A> dla określonej kultury nazwy pl pl to "Angielski (Stany Zjednoczone)".  
  
 Wartość tej właściwości jest taka sama, niezależnie od wersji językowej architektury .NET Framework.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Określa, czy określony obiekt jest tej samej kultury jako bieżący <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> jest tym samym kulturą jako bieżący <see cref="T:System.Globalization.CultureInfo" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Dwa <xref:System.Globalization.CultureInfo> obiekty są traktowane jako równe, jeśli ich <xref:System.Globalization.CultureInfo.Name%2A> i <xref:System.Globalization.CultureInfo.CompareInfo%2A> właściwości są takie same.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nie nadaje się domyślną kulturę interfejsu graficznego użytkownika pobiera odpowiednie dla aplikacji konsoli kultura interfejsu użytkownika alternatywnych.</summary>
        <returns>Kultura alternatywne, używany do odczytu i wyświetlanie tekstu w konsoli.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Języków, takich jak arabskiego, hebrajskiego Urdu i Syryjski są oparte na tekstu dwukierunkowego. Aplikacje systemu Windows, które ma graficzny interfejs użytkownika, obsługa języków dwukierunkowych. Jednak aplikacje konsoli, które wykorzystują tekst interfejs użytkownika konsoli systemu operacyjnego, nie są dostępne aktualizacje dwukierunkowego. W związku z tym jeśli przetłumaczyć na język arabski lub hebrajski aplikacji konsoli, będą wyświetlane w aplikacji można odczytać tekstu na ekranie konsoli.  
  
 Kultura interfejsu użytkownika określa zasoby, aplikacja musi obsługiwać użytkowników w danych wejściowych i wyjściowych i domyślnie jest taka sama jak kultury systemu operacyjnego. Na przykład <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwość zwraca kulturę Arabic Arabic systemu operacyjnego. Użyj <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> metoda pobierania kultury nadające się do interfejsu użytkownika aplikacji konsoli. Po aplikacja pobiera kultura interfejsu użytkownika rezerwowej, jego należy przypisać kultura, do bieżącej kultury interfejsu użytkownika bieżącego wątku. Aby uzyskać więcej informacji, zobacz sekcję "Jawne ustawienie bieżącej kultury interfejsu użytkownika" <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości.  
  
 Poniżej przedstawiono wstępnie zdefiniowanych kultury, których nazwa kultury interfejsu inny użytkownik powrotu z nazwy kultury wstępnie zdefiniowane.  
  
|Wstępnie zdefiniowane kultury|Nazwa kultury|Nazwa kultury interfejsu użytkownika rezerwowej|  
|------------------------|------------------|------------------------------------------|  
|Amharyjski|am|EN US|  
|Amharyjski (Etiopia)|AM-ET|EN US|  
|(neutralny język arabski)|ar|EN US|  
|Arabski (U.A.E.)|ar-AE|EN US|  
|Arabski (Bahrajn)|ar BH|EN US|  
|Arabski (Algieria)|ar-DZ|fr-FR|  
|Arabski (Egipt)|ar np|EN US|  
|Arabski (Irak)|ar-IQ|EN US|  
|Arabski (Jordania)|ar-JO|EN US|  
|Arabski (Kuwejt)|ar-KW|EN US|  
|Arabski (Liban)|ar-LB|EN US|  
|Arabski (Libia)|Zastosuj AR|EN US|  
|Arabski (Maroko)|ar-MA|fr-FR|  
|Arabski (Oman)|ar OM|EN US|  
|Arabski (Katar)|ar-QA|EN US|  
|Arabski (Arabia Saudyjska)|ar-SA|EN US|  
|Arabski (Syria)|ar-SY|EN US|  
|Arabski (Tunezja)|ar TN|fr-FR|  
|Arabski (Jemen)|ar-YE|EN US|  
|Assamese|as|EN US|  
|Assamski (Indie)|as-IN|EN US|  
|Bengali|bn|EN US|  
|Bengalski (Bangladesz)|bn-BD|EN US|  
|Bengalski (Indie)|bn-IN|EN US|  
|Tibetan|bo|EN US|  
|Tybetański (Chiny)|bo-CN|EN US|  
|Malediwski|dv|EN US|  
|Malediwski (Indie)|cyfrowe MV|EN US|  
|Perski|FA|EN US|  
|Perski (Iran)|fa-IR|EN US|  
|Gujarati|gu|EN US|  
|Gudżarati (Indie)|gu IN|EN US|  
|Hebrajski|ADAM|EN US|  
|Hebrajski (Izrael)|HE-IL|EN US|  
|Hindi|hi|EN US|  
|Hindi (India)|w|EN US|  
|Yi|ii|EN US|  
|Yi (PRC)|ii-CN|EN US|  
|Inukitut Syllabics|Puszki IU|EN US|  
|Syllabics Inukitut (Kanada)|iu-Cans-CA|EN US|  
|Kmerski|km|EN US|  
|Kmerski (Kambodża)|km-KH|EN US|  
|Kannada|kn|EN US|  
|Kannada (Indie)|kn-IN|EN US|  
|Konkani|kok|EN US|  
|Konkani (Indie)|kok-IN|EN US|  
|Lao|Lo|EN US|  
|Laotańska (Laotańska P.D.R.)|Lo LA|EN US|  
|Malayalam|ml|EN US|  
|Malajalam (Indie)|ml-IN|EN US|  
|Mohawk|MOH|EN US|  
|Mohawk (Kanada)|moh-CA|EN US|  
|Marathi|mr|EN US|  
|Marathi (Indie)|mr-IN|EN US|  
|Nepalski|ne|EN US|  
|Nepalski (Nepal)|ne-NP|EN US|  
|Norweski|Brak|nb-NO|  
|Orija|lub|EN US|  
|Orija (Indie)|lub w|EN US|  
|Punjabi|pa|EN US|  
|Pendżabski (Indie)|w dostawcy|EN US|  
|Dari|PRS|EN US|  
|Dari (Afganistanu)|prs-AF|EN US|  
|Paszto|PS|EN US|  
|Paszto (Afganistanu)|ps-AF|EN US|  
|Sanskrit|sa|EN US|  
|Sanskryt (Indie)|SA w|EN US|  
|Sinhala|si|EN US|  
|Syngaleski (Sri Lanka)|ro LK|EN US|  
|Syryjski|SYR|EN US|  
|Syryjski (Syria)|syr-SY|EN US|  
|Tamilski|ta|EN US|  
|Tamilski (Indie)|Ta w|EN US|  
|Telugu|te|EN US|  
|Telugu (Indie)|te IN|EN US|  
|Tajski|TH|EN US|  
|Tajski (Tajlandia)|TH-ty percentyl|EN US|  
|Uighur|g|EN US|  
|Uighur (Chiny)|ug-CN|EN US|  
|Urdu|Twoje|EN US|  
|Urdu (Pakistan)|swój klucz prywatny|EN US|  
|Wietnamski|vi|EN US|  
|Wietnamski (Wietnam)|vi-VN|EN US|  
  
 Aplikacja może używać <xref:System.Globalization.CultureAndRegionInfoBuilder> do tworzenia zastąpienia dla kultury i że kultura może mieć rezerwowej kultury konsoli wybrane.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia kultura interfejsu użytkownika rezerwowej, które są skojarzone z obiektem kultury.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Identyfikator ustawień regionalnych (LCID).</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury za pomocą identyfikatora określonej kultury.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zalecane jest użycie ciągu przeciążenie tej metody (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), ponieważ nazwy ustawień regionalnych powinna być używana zamiast LCID. Niestandardowe ustawienia regionalne wymagana jest nazwa ustawień regionalnych.  
  
 Jeśli `culture` identyfikator ustawień regionalnych bieżącej kultury, zwracana jest <xref:System.Globalization.CultureInfo> obiektu nie odzwierciedla żadnych zastąpień użytkownika.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> Określa kulturę, która nie jest obsługiwana. Zobacz uwagi do wywołującego sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest identyfikatorem prawidłową kulturą. Począwszy od [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)], ta metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , metoda wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kultury. <c>Nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury przy użyciu nazwy określonej kultury.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Listę nazw wstępnie zdefiniowanych kultury, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Metoda pobiera buforowany, tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu. Oferuje lepszą wydajność w porównaniu do odpowiedniego wywołania <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora.  
  
 Jeśli `name` nazwę bieżącej kultury, zwracana jest <xref:System.Globalization.CultureInfo> obiektu nie odzwierciedla żadnych zastąpień użytkownika. Dzięki temu ta metoda odpowiedni dla aplikacji serwera lub narzędzi, które nie mają rzeczywistego konta użytkownika w systemie i które musi załadować wiele kultur wydajnie.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda zwraca Niezmienna kultura. Jest to równoważne pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> Określa kulturę, która nie jest obsługiwana. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest prawidłową nazwą kultury. Począwszy od [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)], ta metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , a jeśli <paramref name="name" /> nie jest nazwą dodatkowych lub zastąpienie kultury, metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kultury. <c>Nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <param name="altName">Nazwa kultury, który dostarcza <see cref="T:System.Globalization.TextInfo" /> i <see cref="T:System.Globalization.CompareInfo" /> obiekty używane do zainicjowania <c>nazwa</c>. <c>Alternatywna nazwa</c> nie jest rozróżniana wielkość liter.</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury. Parametry określają kultura, która jest inicjowany z <see cref="T:System.Globalization.TextInfo" /> i <see cref="T:System.Globalization.CompareInfo" /> obiekty określone przez inną kulturę.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Listę nazw wstępnie zdefiniowanych kultury, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Go. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Metoda uzyskuje buforowany, tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu. Oferuje lepszą wydajność w porównaniu do odpowiedniego wywołania <xref:System.Globalization.CultureInfo.%23ctor%2A> konstruktora. Metoda jest używany do tworzenia kultury podobne do tych określonych przez `name` parametru, ale z inną sortowania i wielkość liter reguły.  
  
 Jeśli `name` lub `altName` to nazwa bieżącej kultury zwracanych obiektów nie odzwierciedlają zastąpienia użytkownika. Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda zwraca Niezmienna kultura. Jest to równoważne pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości. Jeśli `altName` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda korzysta z system pisma i porównanie reguły określone przez Niezmienna kultura.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> lub <paramref name="altName" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> lub <paramref name="altName" /> określa kulturę, która nie jest obsługiwana. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> lub <paramref name="altName" /> nie jest prawidłową nazwą kultury. Począwszy od [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)], ta metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , a jeśli <paramref name="name" /> nie jest nazwą dodatkowych lub zastąpienie kultury, metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątek. Począwszy od aplikacji uruchamianych w obszarze [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)] lub później w systemie Windows 7 lub nowszy, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury , a jeśli <paramref name="name" /> nie jest nazwą dodatkowych lub zastąpienie kultury, metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątek.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa języka zgodnie ze standardu RFC 4646.</param>
        <summary>Przestarzałe. Pobiera tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiekt o właściwości językowe, które są identyfikowane za pomocą określonego tagu języka RFC 4646.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda i <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> właściwości są przestarzałe. Zamiast korzystać z tych elementów, należy używać nowej aplikacji <xref:System.Globalization.CultureInfo> obiektu i wywołania <xref:System.Globalization.CultureInfo.Name%2A> właściwości. Nazwy i grupa robocza IETF tagi są identyczne.  
  
 Standard RFC 4646, który jest przechowywany przez Internet Engineering Task Force (IETF) definiuje IETF znacznik języka, który zapewnia jednolity sposób identyfikacji języka. Format znacznika języka IETF jest taka sama jak nazwa kultury zwrócony przez <xref:System.Globalization.CultureInfo.Name%2A> właściwości, ale nie identyfikuje jednoznacznie kultury. Innych kultur udostępnianie tego samego tagu języka IETF tych kultur mają identyczne parametry językowe. Właściwości językowe kultury są zawarte w <xref:System.Globalization.TextInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo> obiektu.  
  
 Znacznik języka IETF składa się z identyfikatora języka obowiązkowe, identyfikator skryptu opcjonalne i identyfikator region opcjonalny.  
  
 Aplikacji należy używać kultury pobrane do kontrolowania zadania specyficzne dla języka, takie jak zarządzanie pisowni i gramatyki. Aplikacje nie powinny używać kultury pobrane do kontrolowania zadania specyficzne dla kultury, takie jak sortowania tekstu lub formatowania godziny i daty.  
  
 Aby uzyskać więcej informacji, zobacz RFC 4646, "Tagi dla języków identyfikowania" i najnowszej projekt standardowe, projekt phillips-langtags-05.txt, w [ http://go.microsoft.com/fwlink/?LinkId=100231 ](http://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie odpowiada obsługiwaną kulturą.</exception>
        <block subset="none" type="usage">
          <para>[! INCLUDE[net_v35_long](~/includes/NET-v35-Long-MD.MD)] i wcześniejszych wersjach <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie odpowiada nazwa obsługiwaną kulturą. Począwszy od [! INCLUDE[net_v40_long](~/includes/NET-V40-Long-MD.MD)], ta metoda zgłasza <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">Bitowe połączenie wartości wyliczenia, które filtrować kultur do pobrania.</param>
        <summary>Pobiera listę obsługiwanych kultur filtrowane według określonego <see cref="T:System.Globalization.CultureTypes" /> parametru.</summary>
        <returns>Tablica zawierająca kultur określony przez <paramref name="types" /> parametru. Tablica kultur jest posortowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A> Najczęściej wywoływana jest metoda o `types` parametru ustaw następujące wartości:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, które zwraca wszystkie określone kultury.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, które zwraca wszystkie neutralne kultury i Niezmienna kultura.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, które zwraca wszystkie kultury neutralnej i określonych, kultur zainstalowane w systemie Windows i niestandardowe kultury utworzone przez użytkownika.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, które zwraca wszystkie niestandardowe kultury, takich jak zarejestrowany przez <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy. W wersjach systemu Windows przed systemem Windows 10 <xref:System.Globalization.CultureTypes.UserCustomCulture> wartość ma zastosowanie do wszystkich zdefiniowanych przez użytkownika niestandardowych kultur. Począwszy od systemu Windows 10, dotyczy ona kultury systemu, które nie mają pełnych danych kultury i unikatowy identyfikator lokalne, które nie mają wskazywany przez <xref:System.Globalization.CultureInfo.LCID%2A> wartości właściwości. W związku z tym kodu podobne do poniższych zwraca różne wyniki, podczas uruchamiania w systemie Windows 10 i we wcześniejszej wersji systemu Windows.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie przedstawiono odpowiednio kultur zh-CHS i zh-CHT z identyfikatorami kultury 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="types" /> Określa nieprawidłową kombinację <see cref="T:System.Globalization.CultureTypes" /> wartości.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">
          <see cref="T:System.Type" /> Dla którego można pobrać obiektu formatowania. Ta metoda obsługuje tylko <see cref="T:System.Globalization.NumberFormatInfo" /> i <see cref="T:System.Globalization.DateTimeFormatInfo" /> typów.</param>
        <summary>Pobiera obiekt, który definiuje sposób formatowania określonego typu.</summary>
        <returns>Wartość <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> właściwość, która jest <see cref="T:System.Globalization.NumberFormatInfo" /> zawierający domyślne informacje format numeru dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, jeśli <paramref name="formatType" /> jest <see cref="T:System.Type" /> obiekt do <see cref="T:System.Globalization.NumberFormatInfo" /> klasy.  - lub - wartość <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> właściwość, która jest <see cref="T:System.Globalization.DateTimeFormatInfo" /> zawierający domyślne Data i godzina format informacje dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, jeśli <paramref name="formatType" /> jest <see cref="T:System.Type" /> obiekt do <see cref="T:System.Globalization.DateTimeFormatInfo" /> klasy.  - lub - null, jeśli <paramref name="formatType" /> jest inny obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementuje <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` udostępnia formatujące specyficzne dla kultury używane w połączeniu z metody Format w podstawowe typy danych. `DateTimeFormatInfo` Określa sposób formatowania wartości daty i godziny dla określonej kultury.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pełni rolę funkcji skrótu dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, odpowiednie do tworzenia skrótów struktury algorytmów i danych, takich jak tablicy skrótów.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Ta metoda generuje ten sam kod skrótu dla dwóch obiektów, które są takie same, zgodnie z <xref:System.Globalization.CultureInfo.Equals%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Przestarzałe. Pobiera identyfikator standard RFC 4646 języka.</summary>
        <value>Ciąg, który jest identyfikacja standard RFC 4646 języka.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta właściwość i <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> metody są przestarzałe. Zamiast tego należy używać <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> właściwości. Nazwy i grupa robocza IETF tagi są identyczne.  
  
 Standard RFC 4646, który jest przechowywany przez Internet Engineering Task Force (IETF) definiuje IETF znacznik języka, który zapewnia jednolity sposób identyfikacji języka. Format znacznika języka IETF jest podobne do nazwy kultury zwrócony przez <xref:System.Globalization.CultureInfo.Name%2A> właściwości, ale nie identyfikuje jednoznacznie kultury. Oznacza to innych kultur udostępnianie tego samego tagu języka IETF tych kultur mają identyczne parametry językowe. Właściwości językowe kultury są zawarte w <xref:System.Globalization.TextInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo> obiektu.  
  
 Znacznik języka IETF składa się z identyfikatora języka obowiązkowe, identyfikator skryptu opcjonalne i identyfikator region opcjonalny.  
  
 Aby uzyskać więcej informacji, zobacz [RFC 5646 "tagi dla języków zidentyfikowanie](http://go.microsoft.com/fwlink/?LinkId=230876). Aby uzyskać listę tagi podrzędne, zobacz [przez organizację IANA języka tag podrzędny rejestru](http://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> reprezentujący kultury zainstalowane w systemie operacyjnym.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> Reprezentujący kultury zainstalowane w systemie operacyjnym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W zlokalizowanym systemie operacyjnym, takich jak japońska wersja systemu Windows ta właściwość zwraca kulturę systemu operacyjnego. Ta właściwość jest odpowiednikiem `GetSystemDefaultUILanguage` w interfejsie API systemu Windows.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> obiekt, który jest niezależny od kultury (niezmiennej).</summary>
        <value>Obiekt, który jest niezależny od kultury (niezmiennego).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niezmienna kultura jest niezależne od kultury; jest on skojarzony z języka angielskiego, ale nie z dowolnym kraju/regionu. Określ Niezmienna kultura według nazw, używając pustego ciągu ("") w wywołaniu <xref:System.Globalization.CultureInfo> metody wystąpienia. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> pobiera również wystąpienia Niezmienna kultura. Można w praktycznie każdej metodzie w <xref:System.Globalization> przestrzeni nazw, która wymaga kultury. Obiekty zwrócone przez właściwości, takie jak <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, i <xref:System.Globalization.CultureInfo.NumberFormat%2A> również uwzględnić porównania ciągów i formatowanie konwencje Niezmienna kultura.  
  
 W odróżnieniu od danych zależne od kultury, co może ulec zmianie przez dostosowanie użytkownika lub aktualizacje oprogramowania .NET Framework lub systemu operacyjnego, danych Niezmienna kultura jest stabilna, wraz z upływem czasu i między zainstalowanych kultur i nie można dostosowywać przez użytkowników. Dzięki temu Niezmienna kultura szczególnie przydatne w operacjach wymagających wyniki niezależne od kultury, takie jak formatowanie i analizowania operacje, które będą się powtarzać sformatowane danych, lub sortowanie i operacje, które wymagają, że dane wyświetlane w kolejności ustalonej kolejności niezależnie od kultury.  
  
## <a name="string-operations"></a>Operacje na ciągach  
 Niezmienna kultura służącego do operacje na ciągach zależne od kultury nie dotyczy przez konwencje bieżącej kultury wątku, które są zgodne przez kultur. Na przykład może być posortowane dane są wyświetlane w ustalonej kolejności lub standardowy zestaw konwencje wielkości liter na ciągi niezależnie od bieżącej kultury wątku. Aby to zrobić, należy przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> obiektu do metody, która ma <xref:System.Globalization.CultureInfo> parametrów, takich jak <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> i <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Utrwalanie danych  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Właściwości może służyć do utrwalenia danych w formacie niezależne od kultury. Zapewnia to znanego formatu nie ulega zmianie, który może służyć do serializowania i deserializowania danych między kultur. Po deserializacji jest dane, może być sformatowany odpowiednio oparte na Konwencji kultury bieżącego użytkownika.  
  
 Na przykład, jeśli chcesz zachować danych daty i godziny w postaci ciągu można przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> do obiektu <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metodę w celu utworzenia ciąg i może przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> do obiektu <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metoda przekonwertować ciągu na wartość daty i godziny. Ta metoda zapewnia, że data podstawowej i nie należy zmieniać wartości czasu, gdy danych jest odczytywanych lub zapisywanych przez użytkowników z innych kultur.  
  
 W poniższym przykładzie użyto Niezmienna kultura, aby utrwalić <xref:System.DateTime> wartość jako ciąg. Następnie analizowania ciągu i wyświetla jego wartość przy użyciu konwencji formatowania francuski (Francja) i kultur niemiecki (Niemcy).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Decyzje dotyczące bezpieczeństwa  
 W przypadku wprowadzania decyzji zabezpieczeń (na przykład czy zezwolić na dostęp do zasobu systemu) na podstawie wyniku porównania ciągów lub przypadków zmiany, nie należy używać Niezmienna kultura. Zamiast tego należy wykonać porządkowej porównania z uwzględnieniem wielkości liter lub bez uwzględniania wielkości liter, wywołując metodę, która obejmuje <xref:System.StringComparison> parametru i dostarczenie albo <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> lub <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> jako argument. Kod, który wykonuje operacje na ciągach zależne od kultury może spowodować luk w zabezpieczeniach, jeśli zostanie zmieniona bieżącej kultury lub kultury na komputerze, na którym działa kod, który różni się od kultury, który służy do testowania kodu. Z kolei porównanie liczby porządkowej zależy od wyłącznie na wartość binarną w porównaniu znaków.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżące <see cref="T:System.Globalization.CultureInfo" /> reprezentuje kultury neutralnej.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> reprezentuje kultury neutralnej; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Określa kulturę neutralną jest kultura, która jest skojarzona z językiem, ale nie w kraju lub regionie. Różni się od określoną kulturę, która jest kultura, która jest skojarzona z zarówno język i kraj lub region. Na przykład fr jest nazwą kultury neutralnej francuskim, fr-FR jest nazwa dla kultury francuskim w Francja.  
  
 Jeśli ta właściwość zwraca `false`, kultury jest określoną kulturą lub Niezmienna kultura.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, które kultur przy użyciu języka chińskiego są neutralne kultury.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżące <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Globalization.CultureInfo> jest tylko do odczytu, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> wystąpienia są również tylko do odczytu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, że <xref:System.Globalization.CultureInfo.IsReadOnly%2A> pomaga również w ochronie <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpień skojarzonych z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator ustawień regionalnych aktywne.</summary>
        <value>Liczbą podpisem 32-bitowego, która określa identyfikator ustawień regionalnych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator ustawień regionalnych wcześniej wywołano układu klawiatury. Identyfikator ustawień regionalnych jest pojęciem szerszym niż układu klawiatury, ponieważ może również oznaczać konwertera mowy na tekst, wejściowych Method Editor (IME) lub inne formy wprowadzania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>Identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków identyfikator kultury jest mapowany na odpowiedni identyfikator ustawień regionalnych NLS.  
  
 W wersjach systemu Windows starszych niż Windows 10, identyfikator ustawień regionalnych `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 lub 4096) jest przypisany do kultury niestandardowej utworzone przez użytkownika. Począwszy od systemu Windows 10, jest przypisany do żadnych kultury nie ma unikatowy identyfikator, który nie ma pełnych danych dostarczane przez system. W rezultacie, kod, który iteruje po kultur i pobiera z <xref:System.Globalization.CultureInfo.LCID%2A> wartość `LOCALE_CUSTOM_UNSPECIFIED` zwraca większych podzbiór <xref:System.Globalization.CultureInfo> obiekty, jeśli działa w systemie Windows 10.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) o porządek sortowania międzynarodowe, a druga <xref:System.Globalization.CultureInfo> z tradycyjnego sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury w formacie * languagecode2 *-* kraju / regioncode2 *.</summary>
        <value>Nazwa kultury w formacie * languagecode2 *-* kraju / regioncode2 *. * languagecode2 * to małe kod dwuliterowych pochodną ISO 639-1. * kraj / regioncode2 * jest pochodną normy ISO 3166 i zazwyczaj składa się z dwóch wielkie litery, lub znacznik języka BCP 47.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lista nazwy kultury wstępnie zdefiniowane identyfikatory który <xref:System.Globalization.CultureInfo.Name%2A> właściwości może zwracać, zobacz [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) w Developer Center globalne Przejdź. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy znacznik języka BCP 47. Należy pamiętać, że nazwy kultury mogą ulec zmianie i czy też mogą odzwierciedlają nazwy kultury niestandardowej.  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> Właściwości następuje Standardy nazewnictwa w <xref:System.Globalization.CultureInfo> klasy tematu. Zwraca Krótka forma nazwy kultury, który wyklucza wskazania alternatywnego sortowania. Na przykład można utworzyć wystąpienia <xref:System.Globalization.CultureInfo> obiektu przy użyciu ciągu "de-DE_phoneb" do alternatywnego sortowania, uwzględnienia <xref:System.Globalization.CultureInfo.Name%2A> właściwość zwraca "de-DE".  
  
 Aby uzyskać pełną nazwę kultury, należy użyć <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, lub <xref:System.Globalization.CultureInfo.NativeName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury, składające się z języka, kraju/regionu i opcjonalne skryptu, który kultury jest ustawiony na wyświetlanie.</summary>
        <value>Nazwa kultury. składające się z pełną nazwę języka, pełną nazwę kraju/regionu i opcjonalnie skryptu. Format opisanej w opisie <see cref="T:System.Globalization.CultureInfo" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej właściwości jest taka sama, niezależnie od wersji językowej architektury .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.NumberFormatInfo" /> definiuje kulturalnie odpowiedni format wyświetlania liczb, waluty i procent.</summary>
        <value>A <see cref="T:System.Globalization.NumberFormatInfo" /> definiuje kulturalnie odpowiedni format wyświetlania liczb, waluty i procent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 Wartości <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości nie są obliczane, dopóki użytkownik uzyskuje dostęp do właściwości. Jeśli użytkownik korzysta z Panelu sterowania można zmienić na nowe kultury bieżącej kultury, podczas gdy aplikacja jest uruchomiona, a następnie uzyskuje dostęp do <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> lub <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości, aplikacja pobiera wartości domyślne dla nowych kultury. nie zastąpienia dla oryginalnego kultury. Aby zachować zastąpień dla oryginalnego bieżącej kultury, powinien uzyskiwać dostęp do aplikacji <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości przed zmianą bieżącej kultury.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klonów <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpień skojarzonych z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> Właściwości lub dowolnym <see cref="T:System.Globalization.NumberFormatInfo" /> ustawić właściwości oraz <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera listę kalendarzy, które mogą być używane przez kultury.</summary>
        <value>Tablica typu <see cref="T:System.Globalization.Calendar" /> reprezentujący kalendarzy, które mogą być używane przez kultury reprezentowany przez bieżący <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja zmiany kalendarza używanego przez bieżących <xref:System.Globalization.CultureInfo> przez ustawienie <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, który jest wystąpieniem <xref:System.Globalization.DateTimeFormatInfo> klasy. Nowy kalendarz musi mieć jedną z kalendarzy na liście <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> zawiera również inne właściwości, które Dostosowywanie formatowania daty i godziny skojarzone z tym <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób określania <xref:System.Globalization.GregorianCalendar> wersje obsługiwane przez kultury.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> reprezentujący Kultura nadrzędna bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> Reprezentujący Kultura nadrzędna bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultury ma hierarchię w którym kultury neutralnej ma element nadrzędny określoną kulturę, nadrzędny kultury neutralnej jest <xref:System.Globalization.CultureInfo.InvariantCulture%2A>i element nadrzędny <xref:System.Globalization.CultureInfo.InvariantCulture%2A> jest kulturą niezmienną samej siebie. Kultura nadrzędna obejmuje tylko zestaw informacje, które są wspólne dla jego elementów podrzędnych.  
  
 Jeśli zasobów dla określonej kultury nie są dostępne w systemie, używane są zasoby dla kultury neutralnej. Jeśli zasoby dla kultury neutralnej nie są dostępne, są używane zasoby osadzone w zestawie głównym. Aby uzyskać więcej informacji na proces rezerwowy zasobów, zobacz [pakowanie i wdrażanie zasobów](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 Poniższy przykład kodu określa Kultura nadrzędna każdej określonej kultury przy użyciu języka chińskiego.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">
          <see cref="T:System.Globalization.CultureInfo" /> Obiekt do zakodowania.</param>
        <summary>Zwraca tylko do odczytu otokę określonego <see cref="T:System.Globalization.CultureInfo" /> obiektu.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> otokę <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszelkie modyfikacje uniemożliwia tej otoki `ci`, lub obiekty zwrócone przez `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, że <xref:System.Globalization.CultureInfo.ReadOnly%2A> metody pomaga w ochronie <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpień skojarzonych z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> ma wartość null.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.TextInfo" /> definiuje system pisma skojarzone z kulturą.</summary>
        <value>
          <see cref="T:System.Globalization.TextInfo" /> Definiuje system pisma skojarzone z kulturą.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A> Właściwość zawiera informacje specyficzne dla kultury, wielkości liter dla ciągów. Aby przeprowadzić niezależnych od kultury wielkości liter, należy użyć aplikacji <xref:System.Globalization.CultureInfo.TextInfo%2A> właściwość <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) o porządek sortowania międzynarodowe, a druga <xref:System.Globalization.CultureInfo> z tradycyjnego sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ISO 639 2 trzyliterowy kod języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>ISO 639 2 trzyliterowy kod języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład skrót trzyliterowy dla języka angielskiego jest "eng".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub trwałych danych to zwykle lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko języka może spowodować utratę kontekstu i danych.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera trzyliterowy kod języka, zgodnie z definicją w interfejsie API systemu Windows.</summary>
        <value>Trzyliterowy kod języka zgodnie z definicją w interfejsie API systemu Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca taką samą wartość jak metoda interfejsu API systemu Windows `GetLocaleInfo` o wartości LOCALE_SABBREVLANGNAME. Na przykład trzyliterowy kod w języku angielskim (Stany Zjednoczone) zgodnie z definicją w interfejsie API systemu Windows jest "enu".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub trwałych danych to zwykle lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko języka może spowodować utratę kontekstu i danych.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg zawierający nazwę bieżącego <see cref="T:System.Globalization.CultureInfo" /> w formacie * languagecode2 *-* kraju / regioncode2 *.</summary>
        <returns>Ciąg zawierający nazwę bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Zwraca wersję znormalizowaną nazwę kultury, który jest przekazywany do <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> lub <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora lub <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> lub <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> metody. Go normalizuje przez konwersji znaków w ciągu wynik *languagecode2* małe litery i konwertowania znaków *kraju/regioncode2* na wielkie litery w razie potrzeby.  
  
 Nazwy kultury wstępnie zdefiniowane są wymienione w [dokumentacja interfejsu API National obsługi Language (NLS)](http://go.microsoft.com/fwlink/?LinkId=200048) stronę w Centrum deweloperów Przejdź globalnego.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod ISO 639 1 dwuliterowych dla bieżącego języka <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>Kod ISO 639 1 dwuliterowych dla bieżącego języka <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Skrót dwuliterowych dla języka angielskiego jest na przykład "en". <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Wartości właściwości dla Niezmienna kultura jest "iv".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub trwałych danych to zwykle lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko języka może spowodować utratę kontekstu i danych.  
  
 Jeśli ISO 639-1 nie definiuje dwie znakowy kod języka dla określonej kultury <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> właściwość zwraca ciąg składający się z co najmniej trzech liter. Aby uzyskać więcej informacji zobacz przykład.  
  
   
  
## Examples  
 Poniższy przykład zawiera kultur których <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> właściwości składa się z dwóch znakowy kod języka.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżące <see cref="T:System.Globalization.CultureInfo" /> obiekt używa ustawienia kultury wybrane przez użytkownika.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> korzysta z ustawień kultury wybrane przez użytkownika; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określonej kultury odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpienia, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość i właściwości <xref:System.Globalization.NumberFormatInfo> zwrócone przez wystąpienie <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzone z <xref:System.Globalization.CultureInfo>, na przykład jeśli wybranego kalendarza nie jest jednym z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metody i wartości właściwości jest nieokreślona.  
  
 Ta właściwość jest ustawiona, gdy <xref:System.Globalization.CultureInfo> jest tworzony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>