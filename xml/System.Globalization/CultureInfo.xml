<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="44d75ac185ab750c4fddd317bd34b3b682646b81" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52222025" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje dotyczące określonej kultury (o nazwie *ustawień regionalnych* opracowywania kodu niezarządzanego). Informacje obejmują nazwy kultury, system pisma, kalendarz używany, kolejność sortowania ciągi znaków i formatowania dat i liczb.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> Klasa udostępnia informacje specyficzne dla kultury, takie jak język, podjęzyk, kraj/region, kalendarza i konwencje związane z określonej kultury. Ta klasa udostępnia także dostęp do wystąpienia specyficzne dla kultury <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, i <xref:System.Globalization.TextInfo> obiektów. Te obiekty zawierają informacje wymagane do operacji specyficzne dla kultury, takich jak wielkość liter, formatowania dat i liczb i porównywania ciągów. <xref:System.Globalization.CultureInfo> Klasa jest używana bezpośrednio lub pośrednio przez klasy, które formatowania, przeanalizować lub manipulowania danymi specyficzne dla kultury, takie jak <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>typy liczbowe.  
  
 W tej sekcji:  
  
 [Nazwy i identyfikatory kultury](#CultureNames)   
 [Niezmienne, neutralne i nacechowane](#Invariant)   
 [Kultury niestandardowe](#Custom)   
 [Dynamiczne dane kultury](#Dynamic)   
 [Bieżąca kultura i bieżącej kultury interfejsu użytkownika](#Current)   
 [Pobieranie wszystkich kultur](#GetAll)   
 [Kultura i wątki](#Threads)   
 [Kultura i aplikacji domen](#AppDomain)   
 [Kultura i opartego na zadaniach operacji asynchronicznych](#Async)   
 [Serializacja obiektów CultureInfo](#Serialization)   
 [Zastępowanie Panelu sterowania](#CPanel)   
 [Naprzemienny porządek sortowania](#AlternateSort)   
 [Aplikacje kultury i Windows](#Windows)  
  
<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Nazwy i identyfikatory kultury  
 <xref:System.Globalization.CultureInfo> Klasa określa unikatową nazwę dla każdej kultury, oparte na RFC 4646. Nazwa jest kombinacją ISO 639 kultury małe dwuliterowych kod skojarzony z języka i ISO 3166 przeszczepiania wielkie dwuliterowych kod skojarzony z kraju lub regionu. Ponadto dla aplikacji, których platformą docelową [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] lub nowszej i działają w systemie Windows 10 lub nowszym, nazwy kultury, które odpowiadają obowiązujący język BCP 47 tagi są obsługiwane.  
  
> [!NOTE]
>  Gdy nazwa kultury jest przekazywana do konstruktora klasy lub metody takie jak <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> lub <xref:System.Globalization.CultureInfo>, sprawy, nie ma znaczenia.  
  
 Format nazwy kultury, oparte na RFC 4646 *languagecode2*>-*kraju/regioncode2*, gdzie *languagecode2* jest kod języka dwuliterowych i *kraju/regioncode2* znajduje się kod przeszczepiania dwuliterowych. Przykłady obejmują ja-JP japoński (Japonia) i en US dla języka angielskiego (Stany Zjednoczone). W przypadkach, gdy kod języka dwuliterowych nie jest dostępna trzyliterowy kod pochodzi od ISO 639-2 jest używany.  
  
 Należy pamiętać, że niektóre nazwy kultury również określić skrypt ISO 15924. Na przykład Cyrl Określa skrypt cyrylica i Latn Określa skrypt alfabetu łacińskiego. Nazwa kultury, który zawiera skrypt używa wzorca *languagecode2*-*scripttag*-*kraju/regioncode2*. Przykładem tego typu nazwa kultury jest uz-Cyrl-UZ dla Uzbecki (cyrylica, Uzbekistan). W systemach operacyjnych Windows przed Windows Vista, nazwa kultury, który zawiera skrypt używa wzorca *languagecode2*-*kraju/regioncode2* -  *scripttag*, na przykład uz UZ Cyrl dla Uzbecki (cyrylica, Uzbekistan).  
  
 Kultury neutralnej jest określony za pomocą kodu dwuliterowych języka małe litery. Na przykład fr określa kultury neutralnej, francuski i de określa kultury neutralnej dla języka niemieckiego.  
  
> [!NOTE]
>  Istnieją dwie nazwy kultury, które są sprzeczne tej reguły. Kultur, chiński (uproszczony), o nazwie zh-Hans i chiński (tradycyjny), o nazwie zh-Hant są kultury neutralnej. Nazwy kultury stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw zh-CHS i zh-CHT.  
  
 Identyfikator kultury jest standardowy międzynarodowy skrót liczbowy i zawiera składniki niezbędne do jednoznacznej identyfikacji jednego z zainstalowanych kultur. Aplikację można użyć wstępnie zdefiniowanych kultur lub zdefiniować niestandardowe identyfikatorów.  
  
 Niektóre wstępnie zdefiniowanych nazw kultur i identyfikatory są używane przez to i inne klasy w <xref:System.Globalization?displayProperty=nameWithType> przestrzeni nazw. Kultura szczegółowe informacje są wyświetlane w [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global.  
  
 Należy pamiętać, że nazwy i identyfikatory kultury reprezentują tylko podzbiór kultur, w których znajdują się na danym komputerze. Wersje Windows lub dodatków service pack można zmienić dostępnych kultur. Aplikacje dodają kultury niestandardowe przy użyciu <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy. Użytkownicy dodać własne niestandardowe kultury przy użyciu narzędzia Microsoft Builder ustawień regionalnych. Microsoft Builder ustawień regionalnych są zapisywane w kodzie zarządzanym przy użyciu `CultureAndRegionInfoBuilder` klasy.  
  
 Kilka różnych nazw są ściśle związane z kulturą, głównie nazwy, które są skojarzone z następujących elementów członkowskich klasy:  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Niezmienne, neutralne i nacechowane  
 Kultur zwykle są podzielone na trzy: kultury niezmiennej kultury neutralnej i określonych kultur.  
  
 Niezmienna kultura jest uwzględniana kultura. Aplikacja określa kulturę niezmienną według nazwy przy użyciu pustego ciągu ("") lub przez jego identyfikator. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Definiuje wystąpienie niezmiennej kultury. Jest on skojarzony z języka angielskiego, ale nie z jakiegokolwiek kraju/regionu. Jest on używany w prawie każdej metody w `Globalization` przestrzeni nazw, która wymaga kultury.  
  
 Kultury neutralnej jest kultury, który jest skojarzony z językiem, ale nie z kraju/regionu. Określonej kultury jest kultury, który jest skojarzony z języka i kraju/regionu. Na przykład fr jest nazwą neutralnej dla kultury francuski i fr-FR nazywa się określonej kultury francuski (Francja). Należy pamiętać, że chiński (uproszczony) i chiński (tradycyjny) są także traktowane jako kultury neutralnej.  
  
 Utworzenie wystąpienia <xref:System.Globalization.CompareInfo> klasy dla kultury neutralnej nie jest zalecane, ponieważ dowolne dane w nim zawarte. Aby wyświetlić i sortowania danych, określ język i region. Ponadto <xref:System.Globalization.CompareInfo.Name%2A> właściwość <xref:System.Globalization.CompareInfo> obiekt utworzony dla kultury neutralnej zwraca tylko kraju i nie obejmuje regionu.  
  
 Zdefiniowanych kultur ma hierarchii, w którym nadrzędnej określonej kultury to kultura neutralna, a element nadrzędny kultury neutralnej jest niezmiennej kultury. <xref:System.Globalization.CultureInfo.Parent%2A> Właściwość zawiera kultury neutralnej skojarzone z określoną kulturę. Należy zdefiniować niestandardowych kultur <xref:System.Globalization.CultureInfo.Parent%2A> właściwości zgodnie z tego wzorca.  
  
 Jeśli zasoby dla określonej kultury nie są dostępne w systemie operacyjnym, używane są zasoby dla kultury neutralnej skojarzone. Jeśli zasobów dla kultury neutralnej nie są dostępne, używane są zasoby osadzone w głównym zestawie. Aby uzyskać więcej informacji na temat procesu bazowego zasobu, zobacz [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 Listę ustawień regionalnych w interfejsie API Windows różni się nieco od listy kultur obsługiwane przez program .NET Framework. Jeśli wymagane jest współdziałanie z Windows, na przykład za pośrednictwem mechanizmu p/invoke aplikacji należy użyć określonej kultury, która jest zdefiniowana dla systemu operacyjnego. Użyj określonej kultury zapewnia spójność równoważne Windows ustawień regionalnych, który jest identyfikowany za pomocą identyfikator ustawień regionalnych, który jest taki sam jak <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 A <xref:System.Globalization.DateTimeFormatInfo> lub <xref:System.Globalization.NumberFormatInfo> mogą być tworzone tylko dla niezmiennej kultury lub dla określonych kultur, a nie dla kultury neutralnej.  
  
 Jeśli <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> jest <xref:System.Globalization.TaiwanCalendar> ale <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> nie ustawiono nazwy zh-TW następnie <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, i <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> zwraca pusty ciąg ("").  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Kultury niestandardowe  
 Oprócz wstępnie zdefiniowanych kultur, obsługiwane przez system operacyjny Windows i programu .NET Framework program .NET Framework obsługuje trzy typy niestandardowych kultur:  
  
-   Nowe kultur, które uzupełniają dostępnych kultur w Windows lub .NET Framework. Na przykład, można zainstalować aplikacji <xref:System.Globalization.CultureInfo> obiektu, kulturze reprezentuje fj FJ (lub Fijan (Fidżi)) w systemie.  
  
-   Zamienne, którego właściwości różnią się od właściwości standardowych kultur obsługiwane przez Windows i program .NET Framework.  
  
-   Zastępuje standardowych kultur z użytkownikiem. Użytkownik może użyć **Region i język** w **Panelu sterowania** dostosować wartości właściwości istniejącej kultury.  
  
> [!NOTE]
>  Możesz użyć <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy, aby zdefiniować, Zapisz i zarejestrować niestandardowych kultur, które uzupełniają lub zastąpić istniejące kultur. <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> Metoda tworzy plik ustawień regionalnych danych Markup Language (LDML), który może służyć do zainstalowania na docelowych systemach, kultury niestandardowej. Krok po kroku dotyczące przy użyciu <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy, aby utworzyć nową lub zastąpienie kultury, zobacz <xref:System.Globalization.CultureAndRegionInfoBuilder> temat poświęcony klasie.  
  
 Ponieważ program .NET Framework obsługuje kultury niestandardowe, należy rozważyć następujące podczas pracy z danymi specyficzne dla kultury:  
  
-   Kultury niestandardowe może mieć wartości, które wykraczają poza zakresy wstępnie zdefiniowanych kultur. Na przykład niektórych kultur mają, nazwy miesięcy nietypowo długi, nieoczekiwany daty lub formatów czasu lub innych danych.  
  
-   Gdy dane specyficzne dla kultury jest wyświetlana w interfejsie użytkownika, należy przestrzegać dostosowań użytkownika. na przykład użytkownik może chcieć zegar 24-godzinny lub daty w formacie RRRRMMDD.  
  
-   Należy pamiętać, że niestandardowych kultur przesłonić wartości domyślne. W związku z tym nie należy traktować danych kultury się stabilne. Nazwy kraju, formaty liczb i dat. i błędy pisowni mogą ulec zmianie w przyszłości. Chcąc do serializowania danych wrażliwych na kulturę, takich jak ciągów daty i godziny, który zostanie przekazany do daty i godziny funkcje analizy, należy używać niezmiennej kultury lub określony.  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A> Zawiera wartość właściwości niestandardowych kultur zainstalowanego w systemie <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> flagę i niestandardowych kultur są przypisywane <xref:System.Globalization.CultureInfo.LCID%2A> wartość właściwości `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 lub 4096). Należy pamiętać, że, począwszy od systemu Windows 10, ta wartość jest przypisany do kultur zdefiniowaną przez system, które nie mają pełnych danych kultury.  
  
<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Dynamiczne dane kultury  
 Z wyjątkiem kulturę niezmienną kulturę danych jest dynamiczny. Ta zasada obowiązuje nawet w przypadku wstępnie zdefiniowanych kultur. Na przykład krajów lub regionów przyjęcie nowych walutach, zmienianie ich pisowni słowa lub zmienić ich Preferowany kalendarz i definicje kultury Zmień to śledzenie.  Kultury niestandardowe mogą ulec zmianie bez powiadomienia, a żadnej określonej kultury mogą zostać zastąpione przez kulturę zastąpienie niestandardowe. Ponadto zgodnie z opisem poniżej, użytkownik może zastąpią one preferencje kultury. Aplikacje powinny zawsze uzyskać dane kultury w czasie wykonywania.  
  
> [!CAUTION]
>  Podczas zapisywania danych, aplikacja powinna używać niezmiennej kultury, format binarny lub określonego formatu niezależnych od kultury. Dane zapisane zgodnie z bieżących wartości, które są skojarzone z daną kulturę, innym niż niezmiennej kultury może być rozszerzana lub mogą ulec zmianie w znaczeniu w przypadku zmiany tej kultury.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>Bieżąca kultura i bieżącej kultury interfejsu użytkownika  
 Każdy wątek w aplikacji .NET Framework zawiera bieżącą kulturę i bieżącej kultury interfejsu użytkownika. Bieżąca kultura określa konwencje formatowania daty, godziny, numery i wartości waluty, kolejność sortowania tekstu, konwencje obudowy i sposoby, w którym ciągi są porównywane. Bieżąca kultura interfejsu użytkownika jest używany do pobierania zasobów dla kultury w czasie wykonywania.  
  
> [!NOTE]
>  Aby uzyskać informacji na temat sposobu bieżące i bieżącej kultury interfejsu użytkownika jest określana na podstawie na wątek, zobacz [kultura i wątki](#Threads) sekcji. Aby uzyskać informacje jak bieżące i bieżącej kultury interfejsu użytkownika jest określana w wątkach wykonywania w nowej domenie aplikacji, a w wątkach, które przecinają granice domen aplikacji, zobacz [kultury i domen aplikacji](#AppDomain) sekcji. Aby uzyskać informacji na temat jak bieżące i bieżący jest określana w wątkach, wykonywanie operacji asynchronicznych opartego na zadaniach, zobacz [kultury i opartego na zadaniach asynchronicznej operacji](#Async) sekcji.  
  
 Aby uzyskać bardziej szczegółowe informacje dotyczące bieżącej kultury, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości tematu. Aby uzyskać bardziej szczegółowe informacje dotyczące bieżącej kultury interfejsu użytkownika, zobacz <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości tematu.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Trwa pobieranie bieżących i bieżącej kultury interfejsu użytkownika  
 Możesz uzyskać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje bieżącą kulturę na dwa sposoby:  
  
-   Poprzez pobranie wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości.  
  
-   Poprzez pobranie wartości [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) właściwości.  
  
 Poniższy przykład pobiera obie wartości właściwości, porównuje je, aby pokazać, że są równe i wyświetla nazwę bieżącej kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Możesz uzyskać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje bieżącą kulturę interfejsu użytkownika w jednym z dwóch sposobów:  
  
-   Poprzez pobranie wartości <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
-   Poprzez pobranie wartości [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) właściwości.  
  
 Poniższy przykład pobiera obie wartości właściwości, porównuje je, aby pokazać, że są równe i wyświetla nazwę bieżącej kultury interfejsu użytkownika.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Ustawienie bieżące i bieżącej kultury interfejsu użytkownika  
 Aby zmienić kultury i kultury wątku interfejsu użytkownika, wykonaj następujące czynności:  
  
1.  Utwórz wystąpienie <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tę kulturę, wywołując <xref:System.Globalization.CultureInfo> klasy konstruktora i przekazanie do niej nazwę kultury. <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor tworzy <xref:System.Globalization.CultureInfo> zastępuje obiekt, który odzwierciedla użytkownika, jeśli nową kulturą jest taka sama, co bieżąca kultura Windows.   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> Konstruktor pozwala na określenie czy nowo utworzona <xref:System.Globalization.CultureInfo> obiektu odzwierciedla przesłonięcia użytkownika, jeśli nową kulturą jest taka sama, co bieżąca kultura Windows.  
  
2.  Przypisz <xref:System.Globalization.CultureInfo> obiekt <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> lub <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Ponadto w przypadku aplikacji w wersji 4.6 lub nowszy klasycznej platformy .NET Framework, można także przypisać <xref:System.Globalization.CultureInfo> obiekt <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> lub <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
 Poniższy przykład pobiera bieżącej kultury. Jeśli jest coś innego niż kultury francuski (Francja), zmienia bieżącą kultury na francuską (Francja). W przeciwnym razie zmienia bieżącą kultury na francuską (Luksemburg).  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 Poniższy przykład pobiera bieżącej kultury. Jeśli wszystko inne jest kultura Słoweński (Słowenia) bieżąca kultura jest zmieniana na Słoweński (Słowenia). W przeciwnym razie jego bieżąca kultura jest zmieniana na Chorwacką (Chorwacja).  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Pobieranie wszystkich kultur  
 Możesz pobrać tablicy określonych kategorii kultur lub kultur dostępne na komputerze lokalnym, wywołując <xref:System.Globalization.CultureInfo.GetCultures%2A> metody. Na przykład możesz pobrać niestandardowych kultur, określonych kultur lub kultury neutralnej autonomicznie lub w połączeniu.  
  
 Poniższy przykład wywołuje <xref:System.Globalization.CultureInfo.GetCultures%2A> metodę dwa razy, pierwszy z <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> element członkowski wyliczenia do pobrania wszystkich niestandardowych kultur, a następnie za pomocą <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> Członkowskiego wyliczenia, aby pobrać wszystkie zamienne.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Kultura i wątki  
 Po uruchomieniu nowego wątku aplikacji, jego bieżąca kultura i bieżącej kultury interfejsu użytkownika są definiowane przez Bieżąca kultura systemu, a nie przez bieżącą kulturę wątku. Poniższy przykład ilustruje tę różnicę. Ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika wątku aplikacji kultury francuski (Francja) (fr-FR). Jeśli bieżąca kultura jest już fr-FR, w przykładzie ustawiono kultury angielski (Stany Zjednoczone) (en US). Jego Wyświetla trzech liczb losowych jako wartości waluty, a następnie tworzy nowy wątek, który z kolei zawiera trzy więcej losowych liczb jako wartości waluty. Jednak jako dane wyjściowe w przykładzie pokazano, wartości waluty, wyświetlane przez nowy wątek nie odzwierciedlają konwencje formatowania kultury francuski (Francja), w przeciwieństwie do dane wyjściowe z wątku głównego aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 W wersjach programu .NET Framework przed [!INCLUDE[net_v45](~/includes/net-v45-md.md)], najbardziej popularny sposób, aby upewnić się, że wątku głównego aplikacji współużytkuje tę samą kulturę z innych wątków roboczych służy do przekazywania nazwa kultury całej aplikacji lub <xref:System.Globalization.CultureInfo> obiekt reprezentuje kulturę całej aplikacji, aby <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> delegować. W poniższym przykładzie użyto tej metody, aby upewnić się, że wyświetlane przez dwa wątki wartości waluty odzwierciedlają konwencje formatowania tę samą kulturę.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Można ustawić kultury i kultury UI, wątku z puli wątków w podobny sposób, wywołując <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> metody.  
  
 Począwszy od [!INCLUDE[net_v45](~/includes/net-v45-md.md)], można ustawić kultury i kultury UI, wszystkich wątków w domenie aplikacji bardziej bezpośrednio, przypisując <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tę kulturę do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości. W poniższym przykładzie użyto tych właściwości, aby upewnić się, że wszystkie wątki w domyślnej domeny aplikacji współużytkują tę samą kulturę.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Mimo że <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości są statyczne elementy członkowskie, określają domyślnej kultury i kultury UI domyślne, tylko w przypadku domeny aplikacji, która jest aktualne w momencie wartości tych właściwości są ustawione. Aby uzyskać więcej informacji, zobacz następną sekcję, [kultury i domen aplikacji](#AppDomain).  
  
 Podczas przypisywania wartości do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, kultury i kultury UI wątków w domenie aplikacji również zmienić, jeśli ich nie mają jawnie przypisanej kultury. Jednak te wątki uwzględnić nowe ustawienia kultury, tylko wtedy, gdy są wykonywane w bieżącej domenie aplikacji. Jeśli te wątki są wykonywane w innej domenie aplikacji, jego kultury staje się domyślną kulturę używaną zdefiniowane dla tej domeny aplikacji. W rezultacie firma Microsoft zaleca zawsze ustawienie kultury wątku głównego aplikacji i nie zależą od <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby ją zmienić.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Kultura i aplikacji domen  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> są statycznej właściwości, które jawnie definiują domyślnej kultury tylko dla domeny aplikacji, który jest aktualny, gdy wartość właściwości jest ustawić lub pobrać. Poniższy przykład ustawia domyślną kulturę i domyślna kultura interfejsu użytkownika w domyślnej domeny aplikacji na francuską (Francja), a następnie używa <xref:System.AppDomainSetup> klasy i <xref:System.AppDomainInitializer> delegata można ustawić w nowej domenie aplikacji do domyślnej kultury i kultury UI Rosyjski (Rosja). Pojedynczy wątek wykonuje następnie dwie metody w każdej domenie aplikacji. Należy pamiętać, że kultury i kultury UI dla wątku nie są jawnie ustawione; są one uzyskiwane z domyślnej kultury i kultury domeny aplikacji, w którym wykonywany jest wątek interfejsu użytkownika. Należy zauważyć, że <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości zwracają wartość domyślna <xref:System.Globalization.CultureInfo> wartości domenie aplikacji, która jest aktualny, gdy dochodzi do wywołania metody.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Aby uzyskać więcej informacji na temat kultur i domen aplikacji zobacz sekcję "Domen i wątki aplikacji" w temacie.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Kultura i opartego na zadaniach operacji asynchronicznych  
 [Opartego na zadaniach wzorca asynchronicznego programowania](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) używa <xref:System.Threading.Tasks.Task> i <xref:System.Threading.Tasks.Task%601> obiektów, aby asynchronicznie wykonuje delegatów w wątku z puli wątków. Określonym wątku, na którym działa danego zadania nie jest znana z wyprzedzeniem, ale jest określana tylko w czasie wykonywania.  
  
 W przypadku aplikacji, których platformą docelową [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszej wersji, kultury jest częścią kontekstu operacją asynchroniczną. Innymi słowy, począwszy od aplikacji przeznaczonych [!INCLUDE[net_v46](~/includes/net-v46-md.md)], operacje asynchroniczne domyślnie dziedziczy wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości wątków, z którego będą uruchamiane. Jeśli bieżąca kultura lub bieżącej kultury interfejsu użytkownika różni się od kultura systemu, bieżącej kultury przekracza granice wątku i staje się bieżącą kulturę wątku puli wątków, które wykonuje operację asynchroniczną.  
  
 W poniższym przykładzie przedstawiono prosty ilustracji. Używa ona <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atrybutu do elementu docelowego [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. W przykładzie zdefiniowano <xref:System.Func%601> delegować, `formatDelegate`, zwracającego niektóre numery sformatowane jako wartości waluty. W przykładzie zmieniono bieżącą kulturą systemu albo francuski (Francja) lub, jeśli francuski (Francja) jest już bieżącej kultury angielski (Stany Zjednoczone). Go następnie:  
  
-   Wywołuje delegata bezpośrednio, aby była uruchamiana synchronicznie w wątku głównego aplikacji.  
  
-   Tworzy zadanie, które wykonuje delegata asynchronicznie na wątku z puli wątków.  
  
-   Tworzy zadanie, które jest wykonywana delegata synchronicznie w wątku głównym aplikacji, wywołując <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> metody.  
  
 Dane wyjściowe z przykładu pokazują, po zmianie bieżącą kulturę na francuską (Francja), bieżącą kulturą wątku, w którym zadania są wywoływane asynchronicznie staje się bieżącą kulturę dla tej operacji asynchronicznej.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 W przypadku aplikacji przeznaczonych dla wersji programu .NET Framework w wersjach wcześniejszych niż [!INCLUDE[net_v46](~/includes/net-v46-md.md)], lub dla aplikacji, nie przeznaczonych do konkretnej wersji programu .NET Framework, kultura wątek wywołujący nie jest częścią kontekstu zadania. Zamiast tego chyba że wyraźnie jest zdefiniowana, kultura nowych wątków, domyślnie jest kultury systemu. Poniższy przykład jest identyczny z poprzednim, z tą różnicą, że brakuje <xref:System.Runtime.Versioning.TargetFrameworkAttribute> atrybutu, przedstawia to. Ponieważ kultura systemu, systemu, w którym wykonywany jest przykład angielski (Stany Zjednoczone), kultury, zadania, który jest wykonywany asynchronicznie w wątku z puli wątków jest en US, a nie np.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 W przypadku aplikacji przeznaczonych dla wersji programu .NET Framework z [!INCLUDE[net_v45](~/includes/net-v45-md.md)] i później, ale przed [!INCLUDE[net_v46](~/includes/net-v46-md.md)], możesz użyć <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby upewnić się, że kultury wątku wywołującego jest używany w asynchroniczne zadania, wykonania na wątków z puli wątków. Poniższy przykład jest identyczny z poprzednim, z tą różnicą, że używa <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości upewnij się, że wątek puli wątków mają tę samą kulturę, co wątku głównego aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> są poszczególnych aplikacji właściwości domeny; oznacza to, określają domyślną kulturę używaną dla wszystkie wątki nie są jawnie przypisane kultury w określonej domenie aplikacji. Jednak w przypadku aplikacji, których platformą docelową [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub później, kultury wątku wywołującego pozostaje część kontekstu asynchroniczne zadanie, nawet wtedy, gdy zadanie przekracza granice domeny aplikacji.  
  
 Poniższy przykład pokazuje, że kultury wątku wywołującego pozostanie bieżącej kultury opartego na zadaniach operację asynchroniczną nawet wtedy, gdy metoda, który wykonuje zadania przekracza granice domen aplikacji. Definiuje klasę, `DataRetriever`, z jedną metodą `GetFormattedNumber`, która zwraca losową liczbę zmiennoprzecinkową podwójnej precyzji od 1 do 1000 sformatowane jako wartość waluty. Pierwsze zadanie zostanie uruchomione, który po prostu tworzy `DataRetriever` wystąpienie i wywołania jego `GetFormattedNumber` metody. Drugie zadanie podrzędne zgłasza jego bieżącej domeny aplikacji, tworzy nową domenę aplikacji, tworzy `DataRetriever` wystąpienia w nowej domeny aplikacji i wywołania jego `GetFormattedNumber` metody. Dane wyjściowe z przykładu pokazują, bieżącej kultury pozostała taka sama w wątku wywołującego, pierwsze zadanie, a drugie zadanie zarówno podczas wykonywania w domenie głównej aplikacji i drugiej domenie aplikacji.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>   
## <a name="cultureinfo-object-serialization"></a>Serializacja obiektów CultureInfo  
 Gdy <xref:System.Globalization.CultureInfo> serializowany jest obiekt, wszystkie opcje, które rzeczywiście jest przechowywana jest <xref:System.Globalization.CultureInfo.Name%2A> i <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Jest pomyślnie zdeserializowany tylko w środowisku, w którym, <xref:System.Globalization.CultureInfo.Name%2A> ma takie samo znaczenie. W poniższych przykładach trzy pokazano, dlaczego to nie jest zawsze tak:  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość właściwości jest <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>, i jeśli tę kulturę została wprowadzona w Windows Vista lub nowszej wersji systemu operacyjnego Windows, nie jest możliwe deserializować Windows XP. Podobnie jeśli kulturę została wprowadzona w dodatku Service Pack 2 dla Windows XP, go nie jest możliwe deserializować dla systemu Windows XP, na którym nie zainstalowano kultury.  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>i komputer, na którym jest zdeserializowany, nie ma tego użytkownika kultury niestandardowej zainstalowane, nie jest możliwe deserializować go.  
  
-   Jeśli <xref:System.Globalization.CultureInfo.CultureTypes%2A> wartość <xref:System.Globalization.CultureTypes?displayProperty=nameWithType>i komputera, na którym jest zdeserializowany, nie ma tej kultury zastąpienia, jego deserializuje z tej samej nazwie, ale nie wszystkie te same właściwości. Na przykład jeśli en US kultury zastępczy na komputerze A, ale nie na komputerze B i <xref:System.Globalization.CultureInfo> obiektu odwołujące się do tej kultury jest serializowana na komputerze A, a deserializowany na komputerze B, a następnie żaden z niestandardowych właściwości kultury przekazywane. Kultura deserializuje pomyślnie, ale inne znaczenie.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Zastępowanie Panelu sterowania  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Ogólnie rzecz biorąc aplikacje powinny przestrzegać te zastąpienia użytkownika.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Naprzemienny porządek sortowania  
 Niektórych kultur obsługuje więcej niż jedno ustawienie kolejności sortowania. Na przykład:  
  
-   Kultura hiszpański (Hiszpania) ma dwa kolejność sortowania: kolejność międzynarodowy domyślne oraz kolejność sortowanie tradycyjne. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultury es-ES, kolejność sortowania międzynarodowych jest używany. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultury es-ES-tradnl kolejność sortowanie tradycyjne jest używany.  
  
-   Kultur zh-CN (chiński (uproszczony, Chińska Republika LUDOWA)) obsługuje dwa kolejność sortowania: Wymowa (ustawienie domyślne) i liczba kresek. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu o nazwie kultur zh-CN, używany jest domyślny porządek sortowania. Podczas tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu za pomocą lokalnego identyfikator 0x00020804, ciągi są sortowane według liczby obrysu.  
  
 W poniższej tabeli wymieniono kultur, w których obsługa naprzemienny porządek sortowania i identyfikatory domyślne i naprzemienny porządek sortowania.  
  
|Nazwa kultury|Kultury|Domyślna nazwa sortowania i identyfikator|Nazwa sortowania i identyfikator|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Hiszpański (Hiszpania)|Międzynarodowy: 0x00000C0A|Tradycyjny: 0x0000040A|  
|zh-TW|Chiński (Tajwan)|Liczba kresek: 0x00000404|Bopomofo: 0x00030404|  
|zh-CN|Chiński (Chińska Republika LUDOWA)|Wymowa: 0x00000804|Stroke Count: 0x00020804|  
|zh-HK|Chiński (Hongkong SAR)|Liczba kresek: 0x00000c04|Liczba kresek: 0x00020c04|  
|zh-SG|Chiński (Singapur)|Wymowa: 0x00001004|Liczba kresek: 0x00021004|  
|zh-MO|Chiński (Makau SAR)|Wymowa: 0x00001404|Liczba kresek: 0x00021404|  
|ja-JP|Japoński (Japonia)|Domyślne: 0x00000411|Unicode: 0x00010411|  
|ko-KR|Koreański (Korea)|Domyślne: 0x00000412|Koreańska Xwansung - Unicode: 0x00010412|  
|de-DE.|Niemiecki (Niemcy)|Słownik: 0x00000407|Sortuj książki telefonicznej DIN: 0x00010407|  
|hu-HU|Węgierski (Węgry)|Domyślne: 0x0000040e|Sortuj techniczne: 0x0001040e|  
|ka-GE|Gruziński (Gruzja)|Tradycyjny: 0x00000437|Nowoczesny: 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Bieżąca kultura i aplikacje platformy uniwersalnej systemu Windows  
 W aplikacjach Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> są właściwości odczytu / zapisu, tak jak w aplikacjach .NET Framework i .NET Core. Jednak aplikacje platformy uniwersalnej systemu Windows rozpoznaje pojedynczej kultury. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości mapy, aby pierwsza wartość w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.  

W aplikacjach .NET Framework i .NET Core, bieżącą kulturą jest ustawienie na wątek, a <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości odzwierciedlają kultury i kultury bieżącego wątku interfejsu użytkownika. W aplikacjach platformy UWP bieżącej kultury mapuje [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji, która jest ustawieniem globalnym. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> lub <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> zmienia właściwość kulturę całej aplikacji; kultury nie można ustawić na podstawie na wątek.
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć <xref:System.Globalization.CultureInfo> obiektu dla hiszpański (Hiszpania) przy użyciu międzynarodowego sortowania, a drugi <xref:System.Globalization.CultureInfo> obiektu z tradycyjnych sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
    <related type="Article" href="/globalization/index">Przejdź do Centrum deweloperów Global</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> identyfikator <see cref="P:System.Globalization.CultureInfo.LCID" /> właściwości istniejącego <see cref="T:System.Globalization.CultureInfo" /> obiektu lub identyfikator kultury tylko do Windows.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy na podstawie kultury określonej przez identyfikator kultury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory wstępnie zdefiniowanych kultur są wymienione w [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global.  
  
 W większości przypadków `culture` parametru jest mapowany na odpowiedni identyfikator ustawień regionalnych National Language Support (NLS). Wartość `culture` parametr staje się wartością <xref:System.Globalization.CultureInfo.LCID%2A> właściwości nowej <xref:System.Globalization.CultureInfo>.  
  
 Zaleca się, że wywołanie konstruktora nazwy ustawień regionalnych <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, ponieważ nazw ustawień regionalnych są preferowane w porównaniu do LCID. Dla niestandardowych ustawień regionalnych wymagana jest nazwa ustawień regionalnych.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Jeśli identyfikator określona kultura odpowiada identyfikator kultury bieżącej kultury Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> te zastąpienia, w tym ustawienia użytkownika dla właściwości, który używa <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo> (na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) wyniki metod i wartości właściwości są niezdefiniowane.  
  
 Jeśli identyfikator określona kultura nie pasuje do identyfikatora bieżącej kultury Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> , użyje wartości domyślnych dla określonej kultury.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Ma zawsze wartość właściwości `true`.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącą kulturą Windows i użytkownik zmienił kalendarza z Hidżry na gregoriański.  
  
-   Za pomocą `CultureInfo("0x0401")` (kulturze nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (czyli ustawienia użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest ustawiona na `true`.  
  
-   Za pomocą `CultureInfo("0x041E")` (kulturze nazwa th ty), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest ustawiona na `true`.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starszych wersji systemu Windows nie obsługują. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby użyć ustawienia domyślnego .NET Framework, waluty, aplikacja powinna używać <xref:System.Globalization.CultureInfo> przeciążenia konstruktora, który akceptuje `useUserOverride` parametru i ustaw ją na `false`.  
  
> [!NOTE]
>  Dla wstecznej zgodności, kultury tworzony przy użyciu `culture` będą mieć parametr 0x0004 i 0x7c04 <xref:System.Globalization.CultureInfo.Name%2A> własności nazwy zh-CHS i zh-CHT, odpowiednio. Zamiast tego wolisz należy do konstruowania kultury przy użyciu bieżącego standardowej kultury nazwy zh-Hans i zh-Hant, jeśli nie ma powodu używania starszych nazw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza niż zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> nie jest prawidłową wartością kulturą identyfikatorem. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest prawidłową wartością kulturą identyfikatorem. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], Konstruktor ten wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury Metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwy <see cref="P:System.Globalization.CultureInfo.Name" /> istniejącego <see cref="T:System.Globalization.CultureInfo" />, lub nazwę kultury tylko do Windows. <paramref name="name" /> nie jest rozróżniana wielkość liter.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy na podstawie kultury określonej przez nazwę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać listę nazw kultur wstępnie zdefiniowanych, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, Konstruktor tworzy instancję niezmiennej kultury; jest to równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury. Jeśli skojarzony identyfikator kultury `name` dopasowania identyfikator kultury bieżącej kultury Windows ten konstruktor tworzy <xref:System.Globalization.CultureInfo> obiektu, który używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo>wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 Jeśli skojarzony identyfikator kultury `name` nie pasuje identyfikator kultury bieżącej kultury Windows ten konstruktor tworzy <xref:System.Globalization.CultureInfo> obiekt, który używa wartości domyślnych dla określonej kultury.  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> Ma zawsze wartość właściwości `true`.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącą kulturą systemu Windows, a użytkownik zmienił kalendarza z Hidżra na kalendarz gregoriański.  
  
-   Za pomocą `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (czyli ustawienia użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ustawiono `true`.  
  
-   Za pomocą `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest równa `true`.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> Właściwości nowej <xref:System.Globalization.CultureInfo> jest ustawiona na identyfikator kultury, skojarzone z określoną nazwą.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starszych wersji systemu Windows nie należy tego robić. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby użyć ustawienia domyślnego .NET Framework, waluty, aplikacja powinna używać <xref:System.Globalization.CultureInfo> przeciążenia konstruktora, który akceptuje `useUserOverride` parametru i ustaw ją na `false`.  
  
   
  
## Examples  
 Poniższy przykład pobiera bieżącej kultury. Jeśli jest coś innego niż kultury francuski (Francja), wywołuje metodę <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor do tworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury francuski (Francja) i sprawia, że bieżąca kultura wątku. W przeciwnym razie tworzy <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kultury francuski (Luksemburg) i sprawia, że bieżącej kultury.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest nazwą prawidłową kultury. Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów wywołujących sekcji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest nazwą prawidłową kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], Konstruktor ten wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury i <paramref name="name" /> nie jest to nazwa dodatkowych lub zastąpienie kultury, metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> identyfikator <see cref="P:System.Globalization.CultureInfo.LCID" /> właściwości istniejącego <see cref="T:System.Globalization.CultureInfo" /> obiektu lub identyfikator kultury tylko do Windows.</param>
        <param name="useUserOverride">Atrybut typu wartość logiczna, która wskazuje, czy ma być używany na ustawienia kultury wybrane przez użytkownika (<see langword="true" />) lub domyślne ustawienia kultury (<see langword="false" />).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy na podstawie kultury określonej parametrem identyfikator kultury a atrybut typu wartość logiczna określająca, czy ustawienia kultury wybrane przez użytkownika z systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory wstępnie zdefiniowanych kultur są wymienione w [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global.  
  
 W większości przypadków `culture` parametru jest mapowany na odpowiedni identyfikator ustawień regionalnych National Language Support (NLS). Wartość `culture` parametr staje się wartością <xref:System.Globalization.CultureInfo.LCID%2A> właściwości nowej <xref:System.Globalization.CultureInfo>.  
  
 Zaleca się, że wywołanie konstruktora nazwy ustawień regionalnych <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, ponieważ nazw ustawień regionalnych są preferowane w porównaniu do LCID. Dla niestandardowych ustawień regionalnych wymagana jest nazwa ustawień regionalnych.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Aplikacje powinny zwykle nie nie zezwalaj na przesłonięcia użytkownika. Należy pamiętać, że nie można przydzielać zastąpienia sam gwarantuje stabilności danych; Zobacz wpis na blogu [kulturę danych nie należy uznać za stabilne (z wyjątkiem niezmiennej)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwość jest ustawiona na `true` i identyfikator określona kultura odpowiada identyfikator bieżącej kultury Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> , który używa tych zastąpień, w tym ustawienia użytkownika dla właściwości z <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 W przeciwnym razie ten konstruktor tworzy <xref:System.Globalization.CultureInfo> , użyje wartości domyślnych dla określonej kultury.  
  
 Wartość `useUserOverride` parametr staje się wartością <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwości.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącą kulturą systemu Windows, a użytkownik zmienił kalendarza z Hidżry na gregoriański.  
  
-   Za pomocą `CultureInfo("0x0401", true)` (kulturze nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (czyli ustawienia użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest ustawiona na `true`.  
  
-   Za pomocą `CultureInfo("0x0401", false)` (kulturze nazwa ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.HijriCalendar> (czyli kalendarz domyślny dla ar-SA) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest równa `false`.  
  
-   Za pomocą `CultureInfo("0x041E", true)` (kulturze nazwa th ty), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest ustawiona na `true`.  
  
-   Za pomocą `CultureInfo("0x041E", false)` (kulturze nazwa th ty), <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest ustawiona na `false`.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starszych wersji systemu Windows nie obsługują. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby użyć ustawienia domyślnego .NET Framework, waluty, aplikacja powinna być ustawiona `useUserOverride` parametr `false`.  
  
> [!NOTE]
>  Dla wstecznej zgodności, kultury tworzony przy użyciu `culture` będą mieć parametr 0x0004 i 0x7c04 <xref:System.Globalization.CultureInfo.Name%2A> własności nazwy zh-CHS i zh-CHT, odpowiednio. Zamiast tego wolisz należy do konstruowania kultury przy użyciu bieżącego standardowej kultury nazwy zh-Hans i zh-Hant, jeśli nie ma powodu używania starszych nazw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza niż zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> nie jest prawidłową wartością kulturą identyfikatorem. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest prawidłową wartością kulturą identyfikatorem. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], Konstruktor ten wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury Metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="useUserOverride" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwy <see cref="P:System.Globalization.CultureInfo.Name" /> istniejącego <see cref="T:System.Globalization.CultureInfo" />, lub nazwę kultury tylko do Windows. <paramref name="name" /> nie jest rozróżniana wielkość liter.</param>
        <param name="useUserOverride">Atrybut typu wartość logiczna, która wskazuje, czy ma być używany na ustawienia kultury wybrane przez użytkownika (<see langword="true" />) lub domyślne ustawienia kultury (<see langword="false" />).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Globalization.CultureInfo" /> klasy na podstawie kultury określonej przez nazwę i na atrybut typu wartość logiczna określająca, czy ustawienia kultury wybrane przez użytkownika z systemu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać listę nazw kultur wstępnie zdefiniowanych, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, Konstruktor tworzy instancję niezmiennej kultury; jest to równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą Windows za pośrednictwem część Opcje regionalne i językowe w Panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Aplikacje powinny zwykle nie nie zezwalaj na przesłonięcia użytkownika. Należy pamiętać, że nie można przydzielać zastąpienia sam gwarantuje stabilności danych; Zobacz wpis na blogu [kulturę danych nie należy uznać za stabilne (z wyjątkiem niezmiennej)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwość jest ustawiona na `true` i identyfikator kultury, skojarzone z nazwą określona kultura odpowiada identyfikator kultury bieżącej kultury Windows, ten konstruktor tworzy <xref:System.Globalization.CultureInfo> , który używa tych zastąpień w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i właściwości <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 W przeciwnym razie ten konstruktor tworzy <xref:System.Globalization.CultureInfo> , użyje wartości domyślnych dla określonej kultury.  
  
 Wartość `useUserOverride` parametr staje się wartością <xref:System.Globalization.CultureInfo.UseUserOverride%2A> właściwości.  
  
 Na przykład załóżmy, że arabski (Arabia Saudyjska) jest bieżącą kulturą systemu Windows, a użytkownik zmienił kalendarza z Hidżra na kalendarz gregoriański.  
  
-   Za pomocą `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.GregorianCalendar> (czyli ustawienia użytkownika) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ustawiono `true`.  
  
-   Za pomocą `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.HijriCalendar> (czyli kalendarz domyślny dla ar-SA) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> ustawiono `false`.  
  
-   Za pomocą `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest równa `true`.  
  
-   Za pomocą `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> ustawiono <xref:System.Globalization.ThaiBuddhistCalendar> (czyli kalendarz domyślny dla tego th) i <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest równa `false`.  
  
 <xref:System.Globalization.CultureInfo.LCID%2A> Właściwości nowej <xref:System.Globalization.CultureInfo> jest ustawiona na identyfikator kultury, skojarzone z określoną nazwą.  
  
 W przypadku kultur, w których walutą jest euro, architektura .NET Framework i Windows XP ustawia domyślną walutę jako euro. Jednak starszych wersji systemu Windows nie należy tego robić. W związku z tym, jeśli użytkownik starszej wersji systemu Windows nie zmienił ustawienia waluty korzystając z opcji ustawień regionalnych i językowych w panelu sterowania, waluty mogą być niepoprawne. Aby użyć ustawienia domyślnego .NET Framework, waluty, aplikacja powinna być ustawiona `useUserOverride` parametr `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest nazwą prawidłową kultury. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest nazwą prawidłową kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], Konstruktor ten wygeneruje <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury i <paramref name="name" /> nie jest to nazwa dodatkowych lub zastąpienie kultury, metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kalendarz domyślny używany przez kulturę.</summary>
        <value>A <see cref="T:System.Globalization.Calendar" /> która reprezentuje kalendarz domyślny używany przez kulturę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 W związku z tym jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true`, wartość tej właściwości może się różnić od kalendarz domyślny używany przez kulturę.  
  
 Aplikacja jest zmieniany kalendarz używany przez bieżącą <xref:System.Globalization.CultureInfo> , ustawiając <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, który jest wystąpieniem <xref:System.Globalization.DateTimeFormatInfo> klasy. Nowy kalendarz musi być jednym z kalendarzy na liście <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> zawiera również inne właściwości, umożliwiające dostosowanie formatowania daty i godziny skojarzone z tym <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odświeżanie pamięci podręcznej informacje związane z kulturą.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje, takie jak domyślne wzorce culture i format jest buforowana przy pierwszym, gdy jest żądany. Czy informacje można zmieniać podczas cyklu życia <xref:System.AppDomain>, na przykład, gdy użytkownik modyfikuje część Opcje regionalne i językowe w Panelu sterowania. Jednak <xref:System.Globalization.CultureInfo> klasy nie automatycznie wykrywa zmiany w ustawieniach systemowych.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Metoda Czyści pamięć podręczną <xref:System.Globalization.CultureInfo> obiekty utworzone przez <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> i odświeża informacje zawarte w <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, i <xref:System.Globalization.RegionInfo.CurrentRegion%2A> właściwości, w oparciu o bieżące ustawienia systemu.  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A> Metoda nie powoduje odświeżenia informacji w <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> właściwości dla istniejących wątkach. Wątki w przyszłości będzie jednak żadnego nowego <xref:System.Globalization.CultureInfo> wartości właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Kopię bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klon jest zapisywalny nawet wtedy, gdy oryginalny <xref:System.Globalization.CultureInfo> jest tylko do odczytu. W związku z tym można zmodyfikować właściwości klonu.  
  
 Płytką kopię obiektu jest kopią tylko obiekt. Jeśli obiekt zawiera odwołania do innych obiektów, płytka kopia nie tworzy kopii obiektów, do którego się odwołuje. Odwołuje się do obiektów, oryginalnym zamiast tego. Natomiast głębokie kopiowanie obiektu tworzy kopię obiektu i wszystko bezpośrednio lub pośrednio odwołuje się ten obiekt kopię.  
  
 <xref:System.Globalization.CultureInfo.Clone%2A> Metoda tworzy rozszerzone płytka kopia. Obiekty zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, i <xref:System.Globalization.CultureInfo.Calendar%2A> właściwości również są kopiowane. W związku z tym, sklonowany <xref:System.Globalization.CultureInfo> obiektu można zmodyfikować jej właściwości w skopiowane bez wywierania wpływu na oryginalny <xref:System.Globalization.CultureInfo> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klony <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpienia skojarzone z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CompareInfo" /> Określa, w jaki można porównać ciągi dla kultury.</summary>
        <value>
          <see cref="T:System.Globalization.CompareInfo" /> Określa, w jaki można porównać ciągi dla kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A> Właściwość zwraca <xref:System.Globalization.CompareInfo> obiektu, który dostarcza informacje specyficzne dla kultury, używane w operacjach porównania sortowania i ciąg kultury.  
  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) przy użyciu międzynarodowego sortowania, a drugi <xref:System.Globalization.CultureInfo> przy użyciu tradycyjnych sortowania.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Wstępnie zdefiniowanej <see cref="T:System.Globalization.CultureInfo" /> nazwę lub nazwę istniejącej <see cref="T:System.Globalization.CultureInfo" /> obiektu. <paramref name="name" /> nie jest rozróżniana wielkość liter.</param>
        <summary>Tworzy <see cref="T:System.Globalization.CultureInfo" /> reprezentujący określonej kultury, który jest skojarzony z określoną nazwą.</summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje: 
Niezmiennej kulturze, jeśli <paramref name="name" /> jest pustym ciągiem ("").  
  
—lub— 
Określonej kultury skojarzonej z <paramref name="name" />, jeśli <paramref name="name" /> to kultura neutralna.  
  
—lub— 
Kultury określonej parametrem <paramref name="name" />, jeśli <paramref name="name" /> jest już określonej kultury.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> Metoda zawija wywołanie do <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> konstruktora.  
  
> [!NOTE]
>  Aby uzyskać listę nazw kultur wstępnie zdefiniowanych, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47.  
  
 Kultury są podzielone na trzy: kultury niezmiennej kultury neutralnej i określonych kultur. Aby uzyskać więcej informacji, zobacz opis <xref:System.Globalization.CultureInfo> klasy.  
  
 Jeśli identyfikator kultury określonej kultury zwracanego przez tę metodę odpowiada identyfikator kultury bieżącej kultury Windows, ta metoda tworzy <xref:System.Globalization.CultureInfo> zastępuje obiekt, który używa kultury Windows. Zastąpienia obejmują ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Do utworzenia wystąpienia <xref:System.Globalization.CultureInfo> obiektu, że przy użyciu domyślnego ustawienia kultury, a nie zastępuje użytkownika, wywołaj <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora o wartości `false` dla `useUserOverride` argumentu.  
  
 Mimo że <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> metoda nazwa zawiera określenie "Specific", należy pamiętać, że dane kultury mogą zmieniać między wersjami, lub z powodu niestandardowych kultur lub z powodu przesłonięcia użytkownika. Do zapisywania danych, należy użyć niezmiennej kultury lub formularzy binarne lub stałą.  
  
   
  
## Examples  
 Poniższy przykład pobiera tablicę <xref:System.Globalization.CultureInfo> obiektami, które reprezentują kultury neutralnej z <xref:System.Globalization.CultureInfo.GetCultures%2A> metody i sortuje tablicy. Gdy wykonuje iteracje elementów w tablicy, przekazuje on nazwę każdej kultury neutralnej do <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> metody i wyświetla nazwę określonej kultury jest zwracany przez metodę.  
  
> [!NOTE]
>  W przykładzie użyto nazwy kultur zh-CHS i zh-CHT. Jednak aplikacje docelowe Windows Vista i później należy użyć nazwy zh-Hans zamiast zh-CHS i zh-Hant zamiast zh-CHT. nazwy zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
>   
>  Należy zauważyć, że wyniki przykładu może różnić się w ramach instalacji systemu Windows tajwański, których dane wejściowe, chiński (tradycyjny) kultury neutralnej (zh, zh-CHT lub zh-Hant) będzie zwracać zh-TW.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie jest nazwą prawidłową kultury.  
  
—lub— 
Kultury określonej parametrem <paramref name="name" /> nie ma określonej kultury skojarzonych z nim.</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="name" /> ma wartość null.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest nazwą prawidłową kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ta metoda wyrzuca <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typy kultury, które odnoszą się do bieżącego <see cref="T:System.Globalization.CultureInfo" /> obiektu.</summary>
        <value>Bitowa kombinacja co najmniej jeden <see cref="T:System.Globalization.CultureTypes" /> wartości. Nie ma żadnej wartości domyślnej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Globalization.CultureTypes> wyliczenie i <xref:System.Globalization.CultureInfo.CultureTypes%2A> właściwości.  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje kulturę używaną przez bieżącego wątku.</summary>
        <value>Obiekt, który reprezentuje kulturę używaną przez bieżącego wątku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> Obiekt, który jest zwracany przez tę właściwość i powiązane obiekty określenia domyślnego formatu daty, godziny, numery, wartości waluty, sortowanie kolejność tekstu, wielkość liter konwencje i porównywania ciągów.  
  
 Bieżąca kultura jest właściwością wykonywany wątek. Pobieranie wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwość jest więcej odpowiednik wydajnego pobierania <xref:System.Globalization.CultureInfo> obiektu zwróconego przez `Thread.CurrentThread.CurrentCulture` właściwości.
  
> [!NOTE]
>  W .NET Framework 4.5.2 i wcześniejszymi wersjami <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość jest tylko do odczytu.  oznacza to, że można pobrać wartości właściwości, ale nie można go ustawić. Aby zmienić bieżącej kultury, należy przypisać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowy kultura `Thread.CurrentThread.CurrentCulture` właściwości. Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości odczytu / zapisu; można ustawić lub pobrać wartości właściwości. Jeśli ustawisz wartość właściwości na <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę nowe wartości `Thread.CurrentThread.CurrentCulture` zmienia także właściwości.  
  
 W tej sekcji:  
  
 [Sposób ustalania kultury wątku](#ThreadCulture)   
 [Pobieranie bieżącej kultury](#Getting)   
 [Jawne ustawianie właściwości CurrentCulture](#ExplicitSetting)   
 [Bieżąca kultura i napisanie użytkownika](#Overrides)   
 [Kultura i aplikacji Windows](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Ustalanie kultury wątku  
 Rozpoczęcie wątku, jego kultury początkowo jest określany w następujący sposób:  
  
-   Pobierając kultury, który jest określony przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w domenie aplikacji, w którym wykonywany jest wątek, jeśli wartość właściwości jest `null`.  
  
-   Jeśli wątek jest wątek puli wątków, które wykonuje operację asynchroniczną z opartego na zadaniach i aplikacji jest przeznaczony dla [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszej wersji programu .NET Framework, jego kultury jest określana przez kulturę wątku wywołującego.  W poniższym przykładzie bieżąca kultura jest zmieniana portugalski (Brazylia) i uruchamia sześciu zadań podrzędnych, z których każda wyświetla jego identyfikator wątku, Identyfikatora zadania i jego bieżącej kultury. Poszczególne zadania (oraz wątki) odziedziczył kultury wątku wywołującego.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Aby uzyskać więcej informacji, zobacz sekcję "Kultury i opartego na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.  
  
-   Przez wywołanie metody Windows `GetUserDefaultLocaleName` funkcji.  
  
 Należy pamiętać, że jeśli ustawisz określoną kulturę, która różni się od kultury zainstalowany system lub preferowanej kultury użytkownika, a aplikacja uruchamia się wiele wątków, bieżącej kultury te wątki będzie kultury, która jest zwracana przez `GetUserDefaultLocaleName` Funkcja, chyba że kultury do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w domenie aplikacji, w którym wykonywany jest wątek.  
  
 Aby uzyskać więcej informacji o sposobie kultury wątku, zobacz sekcję "Kultura i wątki" w <xref:System.Globalization.CultureInfo> odwołania do stron.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Pobieranie bieżącej kultury  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> Właściwość jest ustawienie na wątek; oznacza to, że każdy wątek może mieć własnej kultury. Pobieranie wartości można pobrać kultury bieżącego wątku <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości, w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Można również pobrać wartość kultury bieżącego wątku z <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> właściwości.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Jawne ustawianie właściwości CurrentCulture  
 Rozpoczęcie od przeczytania artykułu [!INCLUDE[net_v46](~/includes/net-v46-md.md)], aby zmienić kulturę, w której jest używany przez istniejącego wątku, należy ustawić <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwość nową kulturą. Jeśli zmienisz jawnie kultury wątku w ten sposób, aby zmienić będzie nadal występować, jeśli wątek przekracza granice domen aplikacji. Poniższy przykład zmienia bieżącą kulturę wątku holenderski (Holandia). Ten pokazuje również, że gdy bieżący wątek przekracza granice domen aplikacji, jego bieżąca kultura pozostaje zmienione.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Zmiana kultury za pomocą <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwość wymaga <xref:System.Security.Permissions.SecurityPermission> uprawnienia o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> wartość zestawu. Manipulowanie wątków jest niebezpieczne ze względu na stan zabezpieczeń skojarzone z wątków. W związku z tym to uprawnienie należy podać tylko zaufanego kodu, a następnie tylko gdy jest to konieczne. Nie można zmienić kulturę wątku w kodzie częściowo zaufanym.  
  
 Począwszy od [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], możesz jawnie zmienić bieżącą kulturą wątku, kultury neutralnej (na przykład francuski) lub określonej kultury (na przykład francuski (Kanada)). Gdy <xref:System.Globalization.CultureInfo> obiekt reprezentuje kultury neutralnej wartości <xref:System.Globalization.CultureInfo> właściwości, takie jak <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, i <xref:System.Globalization.CultureInfo.TextInfo%2A> odzwierciedlają określoną kulturę, która jest skojarzona z kultury neutralnej. Na przykład dominujący kultura angielski kultury neutralnej jest angielski (Stany Zjednoczone); dominujący kultury dla niemieckiego kultury jest niemiecki (Niemcy). Poniższy przykład ilustruje różnicę w formatowanie, gdy bieżącą kulturą jest równa określonej kultury francuski (Kanada) i kultury neutralnej, francuski.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Można również użyć <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości wraz z <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> właściwość umożliwiająca ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości aplikacji ASP.NET do użytkownika preferowanego kultury, tak jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>Bieżąca kultura i napisanie użytkownika  
 Windows umożliwia użytkownikom zastąpić wartości właściwości standardowe <xref:System.Globalization.CultureInfo> obiekt i jego skojarzone obiekty za pomocą **Opcje regionalne i językowe** w Panelu sterowania. <xref:System.Globalization.CultureInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość odzwierciedla przesłonięcia te użytkownika w następujących przypadkach:  
  
-   Jeśli bieżąca kultura wątku sprawdzeniami niejawnie Windows `GetUserDefaultLocaleName` funkcji.  
  
-   Jeśli bieżącą kulturą wątku, określony przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość odpowiada bieżącej kulturze systemu Windows.  
  
-   Jeśli bieżąca kultura wątku jawnie ustawionej na kulturę, zwracany przez <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> metoda i że kultura odpowiada bieżącej kulturze systemu Windows.  
  
-   Jeśli bieżąca kultura wątku ustawiono jawnie tworzone przez kulturę <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> Konstruktor i że kultura odpowiada bieżącej kulturze systemu Windows.  
  
 W niektórych przypadkach, szczególnie w przypadku aplikacji serwerowych, ustawianie bieżącej kultury, <xref:System.Globalization.CultureInfo> obiekt, który odzwierciedla napisanie użytkownika może być niepożądane. Zamiast tego można ustawić bieżącą kulturę wątku <xref:System.Globalization.CultureInfo> zastępuje obiekt, który nie będzie odzwierciedlał użytkownika, w następujący sposób:  
  
-   Przez wywołanie metody <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora o wartości `false` dla `useUserOverride` argumentu.  
  
-   Przez wywołanie metody <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> metody, która zwraca buforowane, tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>Bieżąca kultura i aplikacje platformy uniwersalnej systemu Windows  
 W aplikacjach Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości odczytu / zapisu, dokładnie tak jak w aplikacjach .NET Framework i .NET Core; służy do pobieranie i ustawianie bieżącej kultury. Jednak aplikacje platformy uniwersalnej systemu Windows nie dokonuje rozróżnienia między bieżącą kulturę i bieżącej kultury interfejsu użytkownika. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości mapy, aby pierwsza wartość w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.  

W aplikacjach .NET Framework i .NET Core, bieżącą kulturą jest ustawienie na wątek, a <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwość odzwierciedla kultury bieżącego wątku. W aplikacjach platformy UWP bieżącej kultury mapuje [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) właściwość, która jest ustawienie globalne. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> zmienia właściwość kulturę całej aplikacji; kultury nie można ustawić na podstawie na wątek.
  
## Examples  
 W poniższym przykładzie pokazano, jak zmienić <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> bieżącego wątku.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać Ustawianie bieżącej kultury. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.CultureInfo" /> obiekt, który reprezentuje bieżącą kulturę interfejsu użytkownika, używany przez Menedżera zasobów do wyszukiwania w czasie wykonywania zasoby specyficzne dla kultury.</summary>
        <value>Kultura używana przez Menedżera zasobów do wyszukiwania w czasie wykonywania zasoby specyficzne dla kultury.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżąca kultura interfejsu użytkownika jest właściwością na wątek. Oznacza to, że każdy wątek ma swój własny bieżącej kultury interfejsu użytkownika. Ta właściwość jest równoważna do pobierania lub, począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ustawiając <xref:System.Globalization.CultureInfo> przypisane do obiektu `System.Threading.Thread.CurrentThread.CurrentUICulture` właściwości. Rozpoczęcie wątku, jego kultura interfejsu użytkownika początkowo jest określany w następujący sposób:  
  
-   Pobierając kultury, który jest określony przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w domenie aplikacji, w którym wykonywany jest wątek, jeśli wartość właściwości jest `null`.  
  
-   Jeśli wątek jest wątek puli wątków, które wykonuje operację asynchroniczną z opartego na zadaniach i aplikacji jest przeznaczony dla [!INCLUDE[net_v46](~/includes/net-v46-md.md)] lub nowszej wersji programu .NET Framework, jego kultura interfejsu użytkownika jest określana przez kulturę interfejsu użytkownika wywołującego wątku.  Poniższy przykład zmienia bieżącą kultury interfejsu użytkownika do portugalski (Brazylia) i uruchamia sześciu zadań podrzędnych, z których każda wyświetla jego identyfikator wątku, Identyfikatora zadania i jego bieżącej kultury interfejsu użytkownika. Poszczególne zadania (oraz wątki) odziedziczył kultura interfejsu użytkownika wywołującego wątku.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Aby uzyskać więcej informacji, zobacz sekcję "Kultury i opartego na zadaniach asynchronicznej operacji" w <xref:System.Globalization.CultureInfo> tematu.  
  
-   Przez wywołanie metody Windows `GetUserDefaultUILanguage` funkcji.  
  
> [!NOTE]
>  W [!INCLUDE[Compact](~/includes/compact-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość jest tylko do odczytu. Bieżąca kultura interfejsu użytkownika zależy od ustawień regionalnych systemu i nie można zmienić programowo.  
  
 Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], aby zmienić kulturę interfejsu użytkownika przez wątek, należy ustawić <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwość nową kulturą. Jeśli zmienisz jawnie kultura interfejsu użytkownika dla wątku w ten sposób, aby zmienić będzie się powtarzać, jeśli wątek przekracza granice domen aplikacji.  
  
> [!NOTE]
>  W .NET Framework 4.5.2 i wcześniejszymi wersjami <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość jest tylko do odczytu.  oznacza to, że można pobrać wartości właściwości, ale nie można go ustawić. Aby zmienić bieżącej kultury interfejsu użytkownika, możesz przypisać <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nową kulturą interfejsu użytkownika do `Thread.CurrentThread.CurrentUICulture` właściwości. Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości odczytu / zapisu; można ustawić lub pobrać wartości właściwości. Jeśli ustawisz wartość właściwości na <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę nowe wartości `Thread.CurrentThread.CurrentCulture` zmienia także właściwości.  
  
 W tej sekcji:  
  
 [Pobieranie bieżącej kultury interfejsu użytkownika](#Getting)   
 [Jawne ustawianie bieżącej kultury interfejsu użytkownika](#Explicit)   
 [Niejawne Ustawianie bieżącej kultury interfejsu użytkownika](#Implicit)   
 [Zagadnienia dotyczące zabezpieczeń](#Security)   
 [Bieżąca kultura interfejsu użytkownika i Windows aplikacji](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Pobieranie bieżącej kultury interfejsu użytkownika  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> Właściwość jest ustawienie na wątek; oznacza to, że każdy wątek może mieć własną kultura interfejsu użytkownika. Pobierz kulturę bieżącego wątku interfejsu użytkownika poprzez pobranie wartości <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości, w poniższym przykładzie pokazano.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Możesz również pobrać wartość Bieżący wątek kultury interfejsu użytkownika z <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Jawne ustawianie bieżącej kultury interfejsu użytkownika  
 Począwszy od [!INCLUDE[net_v46](~/includes/net-v46-md.md)], można zmienić bieżącej kultury interfejsu użytkownika, przypisując <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje nowy kultura <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Bieżąca kultura interfejsu użytkownika można ustawić określoną kulturę (np. en US lub de-DE) lub kultury neutralnej (np. en lub de). W poniższym przykładzie ustawiono bieżącej kultury interfejsu użytkownika, fr-FR lub francuski (Francja).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 W przypadku aplikacji wielowątkowych została jawnie ustawiona kultura interfejsu użytkownika z żadnym z wątków, przypisując <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje tę kulturę w wątku <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Jeśli wątek kultury, którego chcesz ustawić bieżącego wątku, można przypisać nowe kultura <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwości. Gdy kultura interfejsu użytkownika wątku jest ustawiony w sposób jawny, wątek zachowuje tę samą kulturę, nawet jeśli zostanie przekroczony granic domeny aplikacji i wykonuje kod w innej domenie aplikacji.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Niejawne ustawianie bieżącej kultury interfejsu użytkownika  
 Po pierwszym wątku, łącznie z wątku głównego aplikacji, domyślnie tworzone jego bieżącej kultury interfejsu użytkownika jest ustawiony w następujący sposób:  
  
-   Przy użyciu kultury definicją <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwość dla bieżącej domeny aplikacji, jeśli wartość właściwości jest `null`.  
  
-   Za pomocą systemu domyślnej kultury. W systemach używających systemu operacyjnego Windows, środowisko uruchomieniowe języka wspólnego wywołuje Windows `GetUserDefaultUILanguage` funkcję, aby ustawić bieżącej kultury interfejsu użytkownika. `GetUserDefaultUILanguage` zwraca domyślną kulturę interfejsu użytkownika ustawione przez użytkownika. Jeśli użytkownik nie ma ustawiony domyślny język interfejsu użytkownika, zwraca kulturze pierwotnie zainstalowany w systemie.  
  
 Jeśli wątek przekracza granic aplikacji i wykonuje kod w innej domenie aplikacji, jego kultury jest określana w taki sam sposób jak w przypadku nowo utworzonego wątku.  
  
 Należy pamiętać, że można ustawić określonej kultury interfejsu użytkownika, który różni się od kultury interfejsu użytkownika zainstalowany system lub użytkownik preferowanego kultura interfejsu użytkownika, a aplikacja uruchamia się wiele wątków, bieżącej kultury interfejsu użytkownika w tych wątków będzie kultury zwrócony przez `GetUserDefaultUILanguage`funkcji, chyba że kultury do <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w domenie aplikacji, w którym wykonywany jest wątek.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
 Zmiana kultury bieżącego wątku wymaga <xref:System.Security.Permissions.SecurityPermission> uprawnienia o <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> wartość zestawu.  
  
> [!CAUTION]
>  Manipulowanie wątków jest niebezpieczne ze względu na stan zabezpieczeń skojarzone z wątków. W związku z tym to uprawnienie należy podać tylko zaufanego kodu, a następnie tylko gdy jest to konieczne. Nie można zmienić kulturę wątku w kodzie częściowo zaufanym.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>Bieżąca kultura interfejsu użytkownika i aplikacji platformy uniwersalnej systemu Windows  
 
W aplikacjach Windows platformy Uniwersalnej <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości odczytu / zapisu, dokładnie tak jak w aplikacjach .NET Framework i .NET Core; służy do pobieranie i ustawianie bieżącej kultury. Jednak aplikacje platformy uniwersalnej systemu Windows nie dokonuje rozróżnienia między bieżącą kulturę i bieżącej kultury interfejsu użytkownika. <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości mapy, aby pierwsza wartość w [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) kolekcji.

W aplikacjach .NET Framework i .NET Core, to ustawienie na wątek jest bieżąca kultura interfejsu użytkownika i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwość odzwierciedla kultura interfejsu użytkownika tylko bieżącego wątku. W aplikacjach platformy UWP bieżącej kultury mapuje [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) właściwość, która jest ustawienie globalne. Ustawienie <xref:System.Globalization.CultureInfo.CurrentCulture%2A> zmienia właściwość kulturę całej aplikacji; kultury nie można ustawić na podstawie na wątek.    
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zmienić <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> bieżącego wątku.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Nazwa kultury, która nie może być używana do lokalizowania plików zasobów jest właściwością. W nazwach plików zasobów może zawierać wyłącznie litery, cyfry, łączniki i podkreślenia.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do ustawiania bieżącej kultury interfejsu użytkownika. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiujący kulturalnie odpowiedni format wyświetlania daty i godziny.</summary>
        <value>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiujący kulturalnie odpowiedni format wyświetlania daty i godziny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 Wartość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwość nie jest obliczana, dopóki aplikacja uzyskuje dostęp do właściwości. Jeśli użytkownik może zmienić bieżącej kultury do nowego kultury, natomiast aplikacja jest uruchomiona aplikacja uzyskuje dostęp do <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> lub <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości, aplikacja pobiera wartości domyślne dla nowych kultury zamiast zastąpienia kultura, oryginalnym. Aby zachować zastąpienia oryginalnego bieżącej kultury, aplikacja powinna uzyskać dostępu <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości przed zmianą bieżącej kultury.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klony <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpienia skojarzone z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> Właściwości ani żadnych <see cref="T:System.Globalization.DateTimeFormatInfo" /> właściwości jest ustawiona i <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</exception>
        <block subset="none" type="usage">
          <para>Jeśli <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> jest <see cref="T:System.Globalization.TaiwanCalendar" /> ale <see cref="P:System.Threading.Thread.CurrentCulture" /> nie jest ustawiony na chiński (Tajwan), następnie o nazwie zh-TW <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, i <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> zwraca pusty ciąg ("").</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kulturę domyślną na potrzeby wątków w bieżącej domenie aplikacji.</summary>
        <value>Kulturę domyślną na potrzeby wątków w bieżącej domenie aplikacji lub <see langword="null" /> Jeśli bieżąca kultura systemu jest domyślną kulturą wątku w domenie aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i poprzednich wersjach, domyślnie kulturę wszystkie wątki ustawiono kultury systemu Windows. W przypadku aplikacji, którego bieżącą kulturą różni się od domyślnej kultury systemu to zachowanie jest często niepożądane. W [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość włącza aplikację do definiowania domyślnej kultury wszystkich wątków w domenie aplikacji.  
  
> [!IMPORTANT]
>  Jeśli nie ma jawnie ustawiona kultura wszelkie istniejące wątki wykonywania w domenie aplikacji, ustawienie <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość ulegnie zmianie kulturę te wątki. Jednakże, jeśli te wątki są wykonywane w innej domenie aplikacji, jego kultury jest definiowany przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości w tej domenie aplikacji lub, jeśli ma wartości domyślnej jest zdefiniowany, według domyślnej kultury systemu. W związku z tym firma Microsoft zaleca zawsze jawnie ustawiona kultura z wątku głównego aplikacji i nie zależą od <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwości, aby zdefiniować kultury wątku głównego aplikacji.  
  
 Chyba że jest ono określone jawnie, wartość <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> właściwość `null`, i kultury wątków w domenie aplikacji, które nie zostały przypisane jawne kultury jest definiowany przez kulturę domyślną na system Windows.  
  
 Aby uzyskać więcej informacji na temat kultur, wątki i domen aplikacji, zobacz "Kultura i wątki" i "Kultura i domeny aplikacji" sekcje w <xref:System.Globalization.CultureInfo> odwołania do stron.  
  
   
  
## Examples  
 Poniższy przykład ilustruje domyślne zachowanie programu .NET Framework podczas definiowania bieżącej kultury nowy wątek. Podczas uruchamiania w przykładzie bieżącą kulturą i bieżącej kultury interfejsu użytkownika na francuską (Francja) we wszystkich systemach, z wyjątkiem tych, na których domyślnej kultury systemu jest już francuski (Francja). Jeśli system domyślnej kultury jest już francuski (Francja), kod ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika do języka angielskiego (Stany Zjednoczone). Następnie wywołuje `DisplayRandomNumbers` procedura, która generuje trzech liczb losowych, a następnie wyświetli je jako wartości waluty. Następnie tworzy nowy wątek, który wykonuje również `DisplayRandomNumbers` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Dane wyjściowe z przykładu pokazują, gdy ten przykład zostanie uruchomiony na komputerze, na których kulturą systemu jest angielski (Stany Zjednoczone), wątek główny wyświetla jego wartości waluty przy użyciu konwencji formatowania kultury francuski (Francja). Jednak ponieważ kultury wątku roboczego jest tworzony na podstawie bieżącej kultury systemu Windows, a nie aplikacji bieżącej kultury, wątku roboczego wyświetla jego wartości waluty przy użyciu konwencji formatowania kultury angielski (Stany Zjednoczone).  
  
 W poniższym przykładzie użyto <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby określić bieżącą kulturę i bieżącej kultury interfejsu użytkownika dla nowego wątku aplikacji. Podczas uruchamiania w przykładzie bieżącą kulturą i bieżącej kultury interfejsu użytkownika na francuską (Francja) we wszystkich systemach, z wyjątkiem tych, na których domyślnej kultury systemu jest już francuski (Francja). Jeśli system domyślnej kultury jest już francuski (Francja), Ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika do języka angielskiego (Stany Zjednoczone). Następnie wywołuje `DisplayRandomNumbers` procedura, która generuje trzech liczb losowych, a następnie wyświetli je jako wartości waluty. Następnie tworzy nowy wątek, który wykonuje również `DisplayRandomNumbers` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Dane wyjściowe z przykładu pokazują, gdy ten przykład zostanie uruchomiony na komputerze, na których kulturą systemu jest angielski (Stany Zjednoczone), zarówno w wątku głównym, jak i w wątku roboczego wyświetlić ich wartości waluty przy użyciu konwencji formatowania kultury francuski (Francja).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślną kulturę interfejsu użytkownika dla wątków w bieżącej domenie aplikacji.</summary>
        <value>Domyślną kulturę interfejsu użytkownika dla wątków w bieżącej domenie aplikacji lub <see langword="null" /> w przypadku systemu bieżącej kultury interfejsu użytkownika wątku domyślna kultura interfejsu użytkownika w domenie aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] i poprzednich wersjach, domyślnie kultura interfejsu użytkownika wszystkich wątków ustawiono kultury systemu Windows. W przypadku aplikacji, w których bieżącej kultury interfejsu użytkownika, który różni się od domyślnej kultury systemu to zachowanie jest często niepożądane. W [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwość umożliwia definiowanie domyślnej kultury wszystkie wątki interfejsu użytkownika w domenie aplikacji.  
  
> [!IMPORTANT]
>  Jeśli nie ma jawnie ustawiona kultura interfejsu użytkownika z wszelkie istniejące wątki, wykonywania w domenie aplikacji, ustawienie <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwość ulegnie zmianie kulturę te wątki. Jednakże, jeśli te wątki są wykonywane w innej domenie aplikacji, jego kultury jest definiowany przez <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości w tej domenie aplikacji lub, jeśli ma wartości domyślnej jest zdefiniowany, według domyślnej kultury systemu. W związku z tym firma Microsoft zaleca zawsze jawne ustawienie kultury wątku usługi głównej aplikacji i nie należy polegać na <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby zdefiniować kultury wątku głównego aplikacji.  
  
 Chyba że jest ono określone jawnie, wartość <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwość `null`, a bieżąca kultura wszystkie wątki w domenie aplikacji, które nie zostały przypisane jawne kultury jest definiowane przez kulturę domyślną na system Windows.  
  
 Aby uzyskać więcej informacji na temat kultur, wątki i domen aplikacji, zobacz "Kultura i wątki" i "Kultura i domeny aplikacji" sekcje w <xref:System.Globalization.CultureInfo> odwołania do stron.  
  
   
  
## Examples  
 Poniższy przykład ilustruje domyślne zachowanie programu .NET Framework podczas definiowania bieżącej kultury nowy wątek. Używa zasobów języka angielskiego i rosyjski. Poniższy plik tekstowy o nazwie GreetingStrings.txt zawiera zasoby w języku angielskim:  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Jest ona kompilowana do binarnego pliku Resources o nazwie GreetingStrings.resources przy użyciu [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) za pomocą następującego polecenia.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Poniższy plik tekstowy o nazwie GreetingStrings.ru RU.txt zawiera zasoby języka rosyjskiego:  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Jest ona kompilowana do binarnego pliku Resources o nazwie GreetingStrings.ru RU.resources przy użyciu [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) za pomocą następującego polecenia.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Kod aplikacji, co przedstawiono poniżej znajduje się w pliku o nazwie Example1.vb lub Example1.cs. Jest kompilowany do pliku wykonywalnego przy użyciu następującego polecenia dla kompilatora języka Visual Basic:  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Dla kompilatora C# polecenie jest podobne:  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Spowoduje to utworzenie zestawu, który zawiera przykładowy kod wykonywalny wraz z zasobami dla jego kultury rezerwowej. Można również użyć [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) do utworzenia pliku zasobów dla kultury rosyjski (Rosja) za pomocą następującego polecenia:  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Podczas uruchamiania przykładu Ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika rosyjski (Rosja) we wszystkich systemach, z wyjątkiem tych, na których domyślnej kultury systemu jest już rosyjski (Rosja). Jeśli domyślna kultura systemu, jest już rosyjski (Rosja), zestawy kod bieżącej kultury i bieżącego interfejsu użytkownika kultury na angielski (Stany Zjednoczone). Następnie wywołuje `ShowGreeting` procedury Wyświetla prosty ciąg znaków jest wywoływana po raz pierwszy i nieco inny ciąg na kolejnych wywołań. Następnie tworzy nowy wątek, który wykonuje również `ShowGreeting` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Wynika z przykładu pokazują, gdy ten przykład zostanie uruchomiony na komputerze, na których kulturą systemu jest angielski (Stany Zjednoczone), wątek główny wyświetla jego początkowego ciąg w języku rosyjskim. Jednak ponieważ kultury wątku roboczego jest tworzony na podstawie bieżącej kultury systemu Windows, a nie aplikacji bieżącej kultury, wątku roboczego wyświetla jego ciąg w języku angielskim.  
  
 W poniższym przykładzie użyto <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> i <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> właściwości, aby określić bieżącą kulturę i bieżącej kultury interfejsu użytkownika dla nowego wątku aplikacji.  
  
 W przykładzie użyto tych samych plików zasobów, jak w poprzednim przykładzie. Polecenia, aby skompilować i osadzać zasobów zlokalizowanego języka rosyjskiego w zestawie satelickim również są identyczne, z tą różnicą, że nazwa zestawu pliku wykonywalnego zmienia się.  
  
 Podczas uruchamiania przykładu Ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika rosyjski (Rosja) we wszystkich systemach, z wyjątkiem tych, na których domyślnej kultury systemu jest już rosyjski (Rosja). Jeśli system domyślnej kultury jest już rosyjski (Rosja), Ustawia bieżącą kulturę i bieżącej kultury interfejsu użytkownika do języka angielskiego (Stany Zjednoczone). Następnie wywołuje `ShowGreeting` procedury Wyświetla prosty ciąg znaków jest wywoływana po raz pierwszy i nieco inny ciąg na kolejnych wywołań. Następnie tworzy nowy wątek, który wykonuje również `ShowGreeting` procedury.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Dane wyjściowe z przykładu pokazują, gdy ten przykład zostanie uruchomiony na komputerze, na których kulturą systemu jest angielski (Stany Zjednoczone), zarówno w wątku głównym, jak i w wątku roboczego Wyświetl ich ciągi w języku rosyjskim.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">W operacji zestawu <see cref="P:System.Globalization.CultureInfo.Name" /> wartość właściwości jest nieprawidłowa.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę pełną zlokalizowanej kultury.</summary>
        <value>Nazwa pełną zlokalizowanej kultury w formacie *languagefull* [*kraju/regionfull*], gdzie *languagefull* jest pełna nazwa języka i  *kraj/regionfull* jest pełna nazwa kraju/regionu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje zlokalizowana nazwa <xref:System.Globalization.CultureInfo> obiektu.  
  
 Nazwy kultury mogą się różnić z powodu skryptów lub konwencje formatowania. Należy użyć nazwy zwrócone do wyświetlania i próbuje go przeanalizować.  
  
 Jeśli utworzono kulturę niestandardową poprzez <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy <xref:System.Globalization.CultureInfo.DisplayName%2A> właściwość jest inicjowana na wartość <xref:System.Globalization.CultureInfo.NativeName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie są wyświetlane odpowiednio kultur zh-CHS i zh-CHT z identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury w formacie *languagefull* [*kraju/regionfull*] w języku angielskim.</summary>
        <value>Nazwa kultury w formacie *languagefull* [*kraju/regionfull*] w języku angielskim, gdzie *languagefull* jest pełna nazwa języka i *kraju / regionfull* jest pełna nazwa kraju/regionu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład <xref:System.Globalization.CultureInfo.EnglishName%2A> dla określonej kultury en US nazwa jest "Angielski (Stany Zjednoczone)".  
  
 Wartość tej właściwości jest taka sama, niezależnie od wersji językowej architektury .NET Framework.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Określa, czy określony obiekt ma tę samą kulturę, co bieżący <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> jest tę samą kulturę, co bieżący <see cref="T:System.Globalization.CultureInfo" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Dwa <xref:System.Globalization.CultureInfo> obiekty są traktowane jako równe, jeżeli ich <xref:System.Globalization.CultureInfo.Name%2A> i <xref:System.Globalization.CultureInfo.CompareInfo%2A> właściwości są takie same.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nie nadaje się domyślnej kultury interfejsu użytkownika graficzne pobiera odpowiednie dla aplikacji konsoli kultura interfejsu użytkownika alternatywnych.</summary>
        <returns>Kultura alternatywne, służący do odczytywania i wyświetlania tekstu na konsoli.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Języki, np. arabski, hebrajski, Urdu i Syryjski opierają się na tekstu dwukierunkowego. Aplikacje Windows, które mają graficznego interfejsu użytkownika, obsługuje języki dwukierunkowe. Jednak aplikacje konsoli, które wykorzystują tekst interfejsu użytkownika konsoli systemu operacyjnego, nie są oferowane Dwukierunkowa obsługa. W związku z tym jeśli jest lokalizowany aplikację konsolową w języku na arabski lub hebrajski aplikacji wyświetla nie można go odczytać tekst na ekranie konsoli.  
  
 Kultura interfejsu użytkownika określa zasoby, aplikacja musi obsługiwać dane wejściowe użytkownika i danych wyjściowych i domyślnie jest taka sama jak kultury systemu operacyjnego. Na przykład <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> właściwość zwraca kulturę arabski arabskim systemie operacyjnym. Użyj <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> metodę, która pobierze kultury, które są odpowiednie dla interfejsu użytkownika aplikacji konsoli. Po aplikacja pobiera kultura interfejsu użytkownika rezerwowy, jego należy przypisać kultury bieżącej kultury interfejsu użytkownika bieżącego wątku. Aby uzyskać więcej informacji, zobacz sekcję "Jawne ustawienie bieżącej kultury interfejsu użytkownika" <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> właściwości.  
  
 Poniżej przedstawiono wstępnie zdefiniowanych kultur, w których ma inną rezerwowego interfejsu kultury nazwę użytkownika na podstawie nazwy kultur wstępnie zdefiniowanych.  
  
|Wstępnie zdefiniowanych kultur|Nazwa kultury|Nazwa kultury interfejsu użytkownika rezerwowe|  
|------------------------|------------------|------------------------------------------|  
|Amharski|am|pl pl|  
|Amharski (Etiopia)|AM ET|pl pl|  
|(neutralny język arabski)|ar|pl pl|  
|Arabski (Zjednoczone Emiraty Arabskie)|ar-AE|pl pl|  
|Arabski (Bahrajn)|ar BH|pl pl|  
|Arabski (Algieria)|ar-DZ|fr-FR|  
|Arabski (Egipt)|ar EG|pl pl|  
|Arabski (Irak)|ar-IQ|pl pl|  
|Arabski (Jordania)|ar-JO|pl pl|  
|Arabski (Kuwejt)|ar-KW|pl pl|  
|Arabski (Liban)|ar-LB|pl pl|  
|Arabski (Libia)|ar LY|pl pl|  
|Arabski (Maroko)|ar-MA|fr-FR|  
|Arabski (Oman)|ar OM|pl pl|  
|Arabski (Katar)|ar-QA|pl pl|  
|Arabski (Arabia Saudyjska)|ar-SA|pl pl|  
|Arabski (Syria)|ar-SY|pl pl|  
|Arabski (Tunezja)|ar-TN|fr-FR|  
|Arabski (Jemen)|ar-YE|pl pl|  
|Assamese|as|pl pl|  
|Asamski (Indie)|as-IN|pl pl|  
|Bengali|bn|pl pl|  
|Bengalski (Bangladesz)|bn-BD|pl pl|  
|Bengalski (Indie)|bn-IN|pl pl|  
|Tibetan|bo|pl pl|  
|Tybetański (Chińska Republika LUDOWA)|bo-CN|pl pl|  
|Malediwski|dv|pl pl|  
|Malediwski (Indie)|cyfrowa MV|pl pl|  
|Perski|FA|pl pl|  
|Perski (Iran)|fa-IR|pl pl|  
|Gujarati|gu|pl pl|  
|Gudżarati (Indie)|w gu|pl pl|  
|Hebrajski|ADAM|pl pl|  
|Hebrajski (Izrael)|HE-IL|pl pl|  
|Hindi|hi|pl pl|  
|Hindi (India)|w|pl pl|  
|Yi|ii|pl pl|  
|Yi (PRC)|ii-CN|pl pl|  
|Inukitut Syllabics|puszek IU|pl pl|  
|Inukitut sylabiczny (Kanada)|iu-Cans-CA|pl pl|  
|Khmerski|km|pl pl|  
|Khmerski (Kambodża)|km-KH|pl pl|  
|Kannada|kn|pl pl|  
|Kannada (Indie)|kn-IN|pl pl|  
|Konkani|kok|pl pl|  
|Konkani (Indie)|kok-IN|pl pl|  
|Lao|Lo|pl pl|  
|Laotański (Laotańska rld)|Lo LA|pl pl|  
|Malayalam|ml|pl pl|  
|Malajalam (Indie)|ml-IN|pl pl|  
|Mohawk|MOH|pl pl|  
|Mohawk (Kanada)|moh-CA|pl pl|  
|Marathi|mr|pl pl|  
|Marathi (Indie)|mr-IN|pl pl|  
|Nepalski|ne|pl pl|  
|Nepalski (Nepal)|ne-NP|pl pl|  
|Norweski|Brak|nb-NO|  
|Orija|lub|pl pl|  
|Orija (Indie)|lub w|pl pl|  
|Punjabi|pa|pl pl|  
|Pendżabski (Indie)|w dostawcy|pl pl|  
|Dari|żądania ściągnięcia|pl pl|  
|Dari (Afganistan)|prs-AF|pl pl|  
|Paszto|PS|pl pl|  
|Paszto (Afganistan)|ps-AF|pl pl|  
|Sanskrit|sa|pl pl|  
|Sanskrycki (Indie)|w SA|pl pl|  
|Syngaleski|si|pl pl|  
|Syngaleski (Sri Lanka)|SI LK|pl pl|  
|Syryjski|SYR|pl pl|  
|Syryjski (Syria)|syr-SY|pl pl|  
|Tamilski|ta|pl pl|  
|Tamilski (Indie)|Ta w|pl pl|  
|Telugu|Usuń|pl pl|  
|Telugu (Indie)|Twórz w|pl pl|  
|Tajski|TH|pl pl|  
|Tajski (Tajlandia)|TH Th|pl pl|  
|Ujgurski|g|pl pl|  
|Ujgurski (Chińska Republika LUDOWA)|ug-CN|pl pl|  
|Urdu|usługi|pl pl|  
|Urdu (Pakistan)|Twój klucz podstawowy|pl pl|  
|Wietnamski|vi|pl pl|  
|Wietnamski (Wietnam)|vi-VN|pl pl|  
  
 Aplikacja może używać <xref:System.Globalization.CultureAndRegionInfoBuilder> do utworzenia zamiennika dla kultury i kultury, że można mieć kultury rezerwowego konsoli wybrane.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kultura interfejsu użytkownika rezerwowy, które są skojarzone z obiektem kultury.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Identyfikator ustawień regionalnych (LCID).</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury przy użyciu identyfikatora określonej kultury.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Firma Microsoft zaleca używanie przeciążenia tej metody dla typu string (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), ponieważ nazw ustawień regionalnych, powinny być używane zamiast LCID. Niestandardowe ustawienia regionalne wymagana jest nazwa ustawień regionalnych.  
  
 Jeśli `culture` to identyfikator ustawień regionalnych bieżącej kultury, zwrócony <xref:System.Globalization.CultureInfo> obiekt nie będzie odzwierciedlał wszelkie przesłonięcia użytkownika.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="culture" /> jest mniejsza niż zero.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="culture" /> Określa kulturę, która nie jest obsługiwana. Zobacz uwagi do obiektu wywołującego sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="culture" /> nie jest prawidłową wartością kulturą identyfikatorem. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ta metoda wyrzuca <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="culture" /> systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury Metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kultury. <paramref name="name" /> nie jest rozróżniana wielkość liter.</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury przy użyciu nazwy określonej kultury.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać listę nazw kultur wstępnie zdefiniowanych, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Metoda pobiera buforowany, tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu. Oferuje lepszą wydajność w porównaniu do odpowiedniego wywołania <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora.  
  
 Jeśli `name` to nazwa bieżącej kultury, zwrócony <xref:System.Globalization.CultureInfo> obiekt nie będzie odzwierciedlał wszelkie przesłonięcia użytkownika. To sprawia, że metoda odpowiedni dla aplikacji serwera lub narzędzi nie mają konta rzeczywistego użytkownika w systemie i muszą załadować efektywnie różnych kultur.  
  
 Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda zwraca niezmiennej kultury. Jest to równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> Określa kulturę, która nie jest obsługiwana. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie jest nazwą prawidłową kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ta metoda wyrzuca <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury i <paramref name="name" /> nie jest to nazwa dodatkowych lub zastąpienie kultury, metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="altName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kultury. <paramref name="name" /> nie jest rozróżniana wielkość liter.</param>
        <param name="altName">Nazwa kultury, który dostarcza <see cref="T:System.Globalization.TextInfo" /> i <see cref="T:System.Globalization.CompareInfo" /> obiekty używane do zainicjowania <paramref name="name" />. <paramref name="altName" /> nie jest rozróżniana wielkość liter.</param>
        <summary>Pobiera wystąpienie pamięci podręcznej, tylko do odczytu w kultury. Parametry określają kulturę, w której jest inicjowany za pomocą <see cref="T:System.Globalization.TextInfo" /> i <see cref="T:System.Globalization.CompareInfo" /> obiekty określone przez inną kulturę.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać listę nazw kultur wstępnie zdefiniowanych, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47.  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> Metoda uzyskuje pamięci podręcznej tylko do odczytu <xref:System.Globalization.CultureInfo> obiektu. Oferuje lepszą wydajność w porównaniu do odpowiedniego wywołania <xref:System.Globalization.CultureInfo.%23ctor%2A> konstruktora. Metoda jest używana do tworzenia kultury podobny do określonej przez `name` parametru, ale przy użyciu innego sortowania i wielkość liter reguły.  
  
 Jeśli `name` lub `altName` to nazwa bieżącej kultury zwracanych obiektów nie odzwierciedlają zastąpienia użytkownika. Jeśli `name` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda zwraca niezmiennej kultury. Jest to równoważne do pobierania wartości <xref:System.Globalization.CultureInfo.InvariantCulture%2A> właściwości. Jeśli `altName` jest <xref:System.String.Empty?displayProperty=nameWithType>, metoda używa system pisma i porównanie reguł określonych przez niezmienną kulturę.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> lub <paramref name="altName" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> lub <paramref name="altName" /> określa kulturę, która nie jest obsługiwana. Zobacz uwagi dotyczące obiektów wywołujących sekcji, aby uzyskać więcej informacji.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> lub <paramref name="altName" /> nie jest nazwą prawidłową kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ta metoda wyrzuca <see cref="T:System.Globalization.CultureNotFoundException" />. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury i <paramref name="name" /> nie jest to nazwa dodatkowych lub zastąpienie kultury, metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku. Począwszy od aplikacji działających w ramach [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] lub później na Windows 7 lub nowszym, metoda próbuje pobrać <see cref="T:System.Globalization.CultureInfo" /> obiektu, którego identyfikator jest <paramref name="name" /> z systemu operacyjnego; Jeśli system operacyjny nie obsługuje tej kultury i <paramref name="name" /> nie jest to nazwa dodatkowych lub zastąpienie kultury, metoda zgłasza wyjątek <see cref="T:System.Globalization.CultureNotFoundException" /> wyjątku.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa języka określonych przez standard RFC 4646.</param>
        <summary>Przestarzałe. Pobiera tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiekt językowej cechy, które są identyfikowane za pomocą określonego tagu języka RFC 4646.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda i <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> właściwości są przestarzałe. Zamiast korzystać z tych elementów, aplikacja powinna używać nowego <xref:System.Globalization.CultureInfo> obiektu i wywołania <xref:System.Globalization.CultureInfo.Name%2A> właściwości. Tagi IETF i nazwy są identyczne.  
  
 Standard RFC 4646, które są obsługiwane przez Internet Engineering Task Force (IETF) definiuje IETF tagu języka, który zapewnia jednolite sposób identyfikacji języka. Format tagu języka IETF jest taka sama jak nazwa kultury, zwracany przez <xref:System.Globalization.CultureInfo.Name%2A> właściwości, ale nie identyfikuje jednoznacznie kultury. Różnych kultur udostępnianie tego samego tagu języka IETF tych kultur mają identyczne cechy językowej. Językowej właściwości kultury są zawarte w <xref:System.Globalization.TextInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo> obiektu.  
  
 Tag języka IETF składa się z identyfikatora języka obowiązkowe, odpowiadającym opcjonalne skryptu i identyfikator opcjonalny region.  
  
 Twoje aplikacje powinny używać pobrane kultury do kontrolowania zadań specyficznych dla języka, takich jak zarządzanie pisowni i gramatyki. Aplikacje nie należy używać pobrane kultury do kontrolowania zadania specyficzne dla kultury, takie jak tekst sortowania lub formatowania godziny i daty.  
  
 Aby uzyskać więcej informacji, zobacz RFC 4646, "Tagi dla identyfikacji języków" i najbardziej aktualną wersję roboczą standardowe, wersja robocza phillips-langtags-05.txt, w [ http://go.microsoft.com/fwlink/?LinkId=100231 ](https://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ma wartość null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException">
          <paramref name="name" /> nie odpowiada obsługiwanej kultury.</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] i starsza <see cref="T:System.ArgumentException" /> Jeśli <paramref name="name" /> nie odpowiada nazwa obsługiwanej kultury. Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ta metoda wyrzuca <see cref="T:System.Globalization.CultureNotFoundException" />.</para>
        </block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" />
      </Parameters>
      <Docs>
        <param name="types">Bitowa kombinacja wartości wyliczenia, które filtrują kultur do pobrania.</param>
        <summary>Pobiera listę obsługiwanych kultur filtrowane według określonego <see cref="T:System.Globalization.CultureTypes" /> parametru.</summary>
        <returns>Tablica zawierająca kultury określonej przez <paramref name="types" /> parametru. Tablica kultur jest posortowana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A> Metoda najczęściej jest wywoływana z `types` parametrów ustaw następujące wartości:  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, która zwraca wszystkich określonych kultur.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, która zwraca wszystkie kultury neutralnej i Niezmienna kultura.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, która zwraca neutralne i nacechowane, kultur zainstalowane w systemie Windows i kultury niestandardowe utworzone przez użytkownika.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, która zwraca niestandardowych kultur, takich jak te zarejestrowane przez <xref:System.Globalization.CultureAndRegionInfoBuilder> klasy. W wersjach systemu Windows przed systemem Windows 10 <xref:System.Globalization.CultureTypes.UserCustomCulture> wartość ma zastosowanie do wszystkich zdefiniowanych przez użytkownika niestandardowych kultur. Począwszy od systemu Windows 10, dotyczy ona kultur systemu, które nie mają pełnych danych kultury i nie mają unikatowy identyfikator lokalny wskazane przez <xref:System.Globalization.CultureInfo.LCID%2A> wartości właściwości. W rezultacie poniższy kod zwróci różne wyniki podczas uruchamiania w systemie Windows 10 i w starszej wersji systemu Windows.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie są wyświetlane odpowiednio kultur zh-CHS i zh-CHT z identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="types" /> Określa nieprawidłową kombinację <see cref="T:System.Globalization.CultureTypes" /> wartości.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">
          <see cref="T:System.Type" /> Dla którego należy pobrać obiekt formatowania. Ta metoda obsługuje tylko <see cref="T:System.Globalization.NumberFormatInfo" /> i <see cref="T:System.Globalization.DateTimeFormatInfo" /> typów.</param>
        <summary>Pobiera obiekt, który definiuje sposób formatowania określonego typu.</summary>
        <returns>Wartość <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> właściwość, która jest <see cref="T:System.Globalization.NumberFormatInfo" /> zawierający domyślne informacje formatu liczb dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, jeśli <paramref name="formatType" /> jest <see cref="T:System.Type" /> dla obiektu <see cref="T:System.Globalization.NumberFormatInfo" /> klasy.  
  
—lub— 
Wartość <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> właściwość, która jest <see cref="T:System.Globalization.DateTimeFormatInfo" /> zawierający domyślne Data i godzina format informacje dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, jeśli <paramref name="formatType" /> jest <see cref="T:System.Type" /> dla obiektu <see cref="T:System.Globalization.DateTimeFormatInfo" /> klasy.  
  
—lub— 
wartość null, jeśli <paramref name="formatType" /> jest jakiegokolwiek innego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> implementuje <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` udostępnia formatu liczbowego specyficzne dla kultury, używane w połączeniu z metodami Format w podstawowe typy danych. `DateTimeFormatInfo` Określa sposób formatowania wartości daty i godziny dla określonej kultury.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcji wyznaczania wartości skrótu dla bieżącego <see cref="T:System.Globalization.CultureInfo" />, odpowiednio do wyznaczania wartości skrótu algorytmów i struktur danych, takich jak Tabela skrótów.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Ta metoda generuje tę samą wartość skrótu dla dwóch obiektów, które są takie same, zgodnie z opisem w <xref:System.Globalization.CultureInfo.Equals%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Przestarzałe. Pobiera identyfikator standard RFC 4646 dla języka.</summary>
        <value>Ciąg identyfikacyjny standard RFC 4646 dla języka.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta właściwość i <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> metody są przestarzałe. Zamiast tego należy używać <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> właściwości. Tagi IETF i nazwy są identyczne.  
  
 Standard RFC 4646, które są obsługiwane przez Internet Engineering Task Force (IETF) definiuje IETF tagu języka, który zapewnia jednolite sposób identyfikacji języka. Format tagu języka IETF jest podobne do nazwy kultury, zwracany przez <xref:System.Globalization.CultureInfo.Name%2A> właściwości, ale nie identyfikuje jednoznacznie kultury. Oznacza to różnych kultur udostępnianie tego samego tagu języka IETF tych kultur mają identyczne cechy językowej. Językowej właściwości kultury są zawarte w <xref:System.Globalization.TextInfo> obiekt skojarzony z <xref:System.Globalization.CultureInfo> obiektu.  
  
 Tag języka IETF składa się z identyfikatora języka obowiązkowe, odpowiadającym opcjonalne skryptu i identyfikator opcjonalny region.  
  
 Aby uzyskać więcej informacji, zobacz [RFC 5646 "tagi dla języków rozpoznawanie](https://go.microsoft.com/fwlink/?LinkId=230876). Aby uzyskać listę tagi podrzędne, zobacz [tagów podrzędnych języków IANA](https://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> reprezentująca kultury zainstalowane w systemie operacyjnym.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> Reprezentująca kultury zainstalowane w systemie operacyjnym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W zlokalizowanym systemie operacyjnym, takich jak japońska wersja systemu Windows ta właściwość zwraca kulturę systemu operacyjnego. Ta właściwość jest równoważna `GetSystemDefaultUILanguage` w interfejsie API Windows.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> obiekt niezależnych od kultury (niezmiennej).</summary>
        <value>Obiekt, który jest niezależny od kultury (niezmiennego).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Niezmienna kultura jest uwzględniana kultura; jest on skojarzony z języka angielskiego, ale nie z jakiegokolwiek kraju/regionu. Należy określić kulturę niezmienną według nazwy za pomocą pustego ciągu ("") w wywołaniu <xref:System.Globalization.CultureInfo> metody wystąpienia. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> pobiera również wystąpienie niezmiennej kultury. Może służyć w prawie każdym method in Class metoda <xref:System.Globalization> przestrzeni nazw, która wymaga kultury. Obiekty, takie jak zwracany przez właściwości <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, i <xref:System.Globalization.CultureInfo.NumberFormat%2A> również odzwierciedlają porównywania ciągów i formatowania Konwencji niezmiennej kultury.  
  
 W odróżnieniu od danych wrażliwych na kulturę, co może ulec zmianie przez dostosowywanie użytkownika lub aktualizacje do programu .NET Framework lub systemu operacyjnego, danych niezmiennej kultury jest stabilna, wraz z upływem czasu i różnych kultur zainstalowanych i nie można dostosować przez użytkowników. To sprawia, że niezmiennej kultury szczególnie użyteczne w przypadku operacji, które wymagają wyników niezależnych od kultury, takie jak formatowanie i analizowanie operacji, które utrzymują sformatowane dane, lub sortowanie i operacje, które wymagają, że dane wyświetlane w kolejności ustalonej kolejności niezależnie od kultury.  
  
## <a name="string-operations"></a>Operacje na ciągach  
 Można użyć niezmiennej kultury dla operacji na ciągach wrażliwych na kulturę, nie dotyczy Konwencji bieżącej kultury wątku, które są zgodne w różnych kultur. Na przykład może być posortowane dane są widoczne w ustalonej kolejności lub zastosować zestaw standardowych konwencji obudowy do ciągów, niezależnie od bieżącej kultury wątku. Aby to zrobić, należy przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> obiekt do metody, która ma <xref:System.Globalization.CultureInfo> parametrów, takich jak <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> i <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Utrwalanie danych  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> Właściwość może służyć do utrwalenia danych w formacie niezależnych od kultury. Dzięki temu znanego formatu nie powoduje zmiany i który może służyć do serializacji i deserializacji danych różnych kultur. Po rozszeregowano dane mogą być sformatowane odpowiednio oparte na Konwencji kultury bieżącego użytkownika.  
  
 Na przykład, jeśli zdecydujesz się zachować dane daty i godziny w postaci ciągu, można przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> obiekt <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metodą tworzenia ciągu, na które można przekazać <xref:System.Globalization.CultureInfo.InvariantCulture%2A> obiekt <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> lub <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metoda do przekonwertowania ciągu wartości daty i godziny. Ta technika zapewnia, że data podstawowej, a nie zmieniaj wartości czasu, jeśli danych jest odczytywanych lub zapisywanych przez użytkowników z różnych kultur.  
  
 W poniższym przykładzie użyto niezmiennej kultury, aby utrwalić <xref:System.DateTime> wartość jako ciąg. Następnie analizuje ciąg i wyświetla jego wartość przy użyciu konwencji formatowania francuski (Francja) i kultur niemiecki (Niemcy).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Decyzje dotyczące bezpieczeństwa  
 Jeśli wykonujesz decyzja dotycząca zabezpieczeń (np. Czy chcesz zezwolić na dostęp do zasobu systemu) na podstawie wyniku porównania ciągów lub zmiana wielkości liter, nie należy używać niezmiennej kultury. Zamiast tego należy wykonać porównanie porządkowe wielkość liter lub nie przez wywołanie metody, która obejmuje <xref:System.StringComparison> parametr i przekazując, albo <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> lub <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> jako argument. Kod, który wykonuje operacje na ciągach wrażliwych na kulturę może spowodować luki w zabezpieczeniach, czy bieżąca kultura jest zmianie i czy kultury na komputerze, na którym jest uruchomiony kod, który różni się od kultury, który służy do testowania kodu. Z kolei porównania porządkowego zależy wyłącznie od wartość binarną w porównaniu znaków.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżący <see cref="T:System.Globalization.CultureInfo" /> reprezentuje kultury neutralnej.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> reprezentuje kultury neutralnej; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultury neutralnej jest kultury, który jest skojarzony z językiem, ale nie od kraju lub regionu. Różni się od określonej kultury, czyli kultury, który jest skojarzony z zarówno język i kraj lub region. Na przykład fr jest nazwa kultury neutralnej francuska, fr-FR jest nazwa kultury francuski (Francja).  
  
 Jeśli ta właściwość zwraca `false`, kultura jest określoną kulturę lub niezmiennej kultury.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, które kultury przy użyciu języka chińskiego są kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżący <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Globalization.CultureInfo> jest tylko do odczytu, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> wystąpienia są też tylko do odczytu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Globalization.CultureInfo.IsReadOnly%2A> pomaga również chronić <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpienia skojarzone z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator aktywnych ustawień regionalnych.</summary>
        <value>Liczba ze znakiem 32-bitowy, który określa identyfikator ustawień regionalnych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikator ustawień regionalnych był wcześniej nazywany układ klawiatury. Identyfikator ustawień regionalnych jest pojęciem szerszym niż układ klawiatury, ponieważ może również oznaczać konwertera mowy na tekst, danych wejściowych Method Editor (IME) lub inne formy wprowadzania danych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>Identyfikator kultury dla bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków identyfikator kultury jest mapowany na odpowiedni identyfikator ustawień regionalnych NLS.  
  
 W wersjach systemu Windows przed systemu Windows 10, identyfikator ustawień regionalnych `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 lub 4096) jest przypisany do kultury niestandardowe utworzone przez użytkownika. Począwszy od systemu Windows 10, jest przypisany do żadnej kultury, która nie ma unikatowy identyfikator, a nie ma pełnych danych dostarczanych przez system. W wyniku tego kod, który iteruje po kultur i pobiera z <xref:System.Globalization.CultureInfo.LCID%2A> wartość `LOCALE_CUSTOM_UNSPECIFIED` zwraca podciąg większy <xref:System.Globalization.CultureInfo> obiekty, jeśli działa w systemie Windows 10.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) przy użyciu kolejności sortowania międzynarodowych i innym <xref:System.Globalization.CultureInfo> z porządkiem sortowania tradycyjnych.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury w formacie *languagecode2*-*kraju/regioncode2*.</summary>
        <value>Nazwa kultury w formacie *languagecode2*-*kraju/regioncode2*. *languagecode2* jest mała litera kodu dwuliterowych pochodną ISO 639-1. *kraj/regioncode2* jest tworzony na podstawie ISO 3166 i zwykle składa się z dwóch wielkie litery lub tagu języka BCP 47.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać listę nazw kultur wstępnie zdefiniowanych i identyfikatory które <xref:System.Globalization.CultureInfo.Name%2A> właściwości może zwracać, zobacz [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) w Centrum deweloperów Go Global. Ponadto, począwszy od systemu Windows 10 `name` może być dowolny prawidłowy tag języka BCP 47. Należy zauważyć, że nazwy kultury, mogą ulec zmianie i czy też można odzwierciedlają one nazwy kultury niestandardowe.  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> Właściwość następuje Standardy nazewnictwa w <xref:System.Globalization.CultureInfo> temat poświęcony klasie. Zwraca krótka nazwa kultury, która nie obejmuje żadnego wskazania alternatywną kolejność sortowania. Na przykład można utworzyć wystąpienia <xref:System.Globalization.CultureInfo> obiektu przy użyciu ciągu "de-DE_phoneb", aby odzwierciedlić alternatywną kolejność sortowania, <xref:System.Globalization.CultureInfo.Name%2A> "de-DE" zwraca wartość właściwości.  
  
 Aby uzyskać pełną nazwę kultury, należy użyć <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, lub <xref:System.Globalization.CultureInfo.NativeName%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kultury zawierające język, kraj/region i opcjonalne skryptu, który kultury jest ustawiony na wyświetlanie.</summary>
        <value>Nazwa kultury. składa się z pełną nazwę języka, pełną nazwę kraju/regionu i opcjonalnie skryptu. Format jest omówiona w opisie <see cref="T:System.Globalization.CultureInfo" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej właściwości jest taka sama, niezależnie od wersji językowej architektury .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Globalization.NumberFormatInfo" /> definiujący kulturalnie odpowiedni format wyświetlania liczby, waluty i wartości procentowej.</summary>
        <value>A <see cref="T:System.Globalization.NumberFormatInfo" /> definiujący kulturalnie odpowiedni format wyświetlania liczby, waluty i wartości procentowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 Wartości <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości nie są obliczane, dopóki użytkownik uzyskuje dostęp do właściwości. Jeśli użytkownik korzysta z Panelu sterowania można zmienić bieżącej kultury na nową kulturą, gdy aplikacja jest uruchomiona, a następnie uzyskuje dostęp do <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> lub <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwość, aplikacja pobiera wartości domyślne dla nowych kultury. nie zastąpienia oryginalnego kultury. Aby zachować zastąpienia oryginalnego bieżącej kultury, aplikacja powinna uzyskać dostępu <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości przed zmianą bieżącej kultury.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że CultureInfo.Clone również klony <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpienia skojarzone z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Właściwość jest ustawiona na wartość null.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> Właściwości ani żadnych <see cref="T:System.Globalization.NumberFormatInfo" /> właściwości jest ustawiona i <see cref="T:System.Globalization.CultureInfo" /> jest tylko do odczytu.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera listę kalendarzy, które mogą być używane przez kulturę.</summary>
        <value>Tablica typu <see cref="T:System.Globalization.Calendar" /> reprezentujący kalendarze, które mogą być używane przez kulturę, reprezentowane przez bieżącą <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacja jest zmieniany kalendarz używany przez bieżącą <xref:System.Globalization.CultureInfo> , ustawiając <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> właściwość <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, który jest wystąpieniem <xref:System.Globalization.DateTimeFormatInfo> klasy. Nowy kalendarz musi być jednym z kalendarzy na liście <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> zawiera również inne właściwości, umożliwiające dostosowanie formatowania daty i godziny skojarzone z tym <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób określania <xref:System.Globalization.GregorianCalendar> wersje obsługiwane przez kulturę.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.CultureInfo" /> reprezentująca kultury nadrzędny bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> Reprezentująca kultury nadrzędny bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kultura ma hierarchię w nadrzędnej określonej kultury czyli kultury neutralnej, jest elementem nadrzędnym kultury neutralnej <xref:System.Globalization.CultureInfo.InvariantCulture%2A>i element nadrzędny <xref:System.Globalization.CultureInfo.InvariantCulture%2A> jest niezmiennej kultury, sam. Kultura nadrzędna obejmuje tylko zestaw informacje, które są wspólne dla jego elementów podrzędnych.  
  
 Jeśli zasoby dla określonej kultury nie są dostępne w systemie, używane są zasoby dla kultury neutralnej. Jeśli zasobów dla kultury neutralnej nie są dostępne, używane są zasoby osadzone w głównym zestawie. Aby uzyskać więcej informacji na temat procesu bazowego zasobu, zobacz [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 Poniższy przykład kodu określa kulturę nadrzędnego każdej określonej kultury przy użyciu języka chińskiego.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">
          <see cref="T:System.Globalization.CultureInfo" /> Obiekt do opakowania.</param>
        <summary>Zwraca tylko do odczytu otokę określonego <see cref="T:System.Globalization.CultureInfo" /> obiektu.</summary>
        <returns>Tylko do odczytu <see cref="T:System.Globalization.CultureInfo" /> otokę <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę otokę zapobiega wszelkie modyfikacje `ci`, lub obiektów zwróconych przez `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> i `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, że <xref:System.Globalization.CultureInfo.ReadOnly%2A> metoda pomaga w ochronie <xref:System.Globalization.DateTimeFormatInfo> i <xref:System.Globalization.NumberFormatInfo> wystąpienia skojarzone z <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ci" /> ma wartość null.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Globalization.TextInfo" /> definiujący system pisma skojarzonego z kulturą.</summary>
        <value>
          <see cref="T:System.Globalization.TextInfo" /> Definiujący system pisma skojarzonego z kulturą.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A> Właściwość zawiera informacje specyficzne dla kultury, wielkości liter dla ciągów. Aby wykonać wielkość liter w wyrazie niewrażliwość na ustawienia kulturowe, aplikacja powinna używać <xref:System.Globalization.CultureInfo.TextInfo%2A> właściwość <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia <xref:System.Globalization.CultureInfo> dla hiszpański (Hiszpania) przy użyciu kolejności sortowania międzynarodowych i innym <xref:System.Globalization.CultureInfo> z porządkiem sortowania tradycyjnych.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obraz ISO 639-2 trzyliterowy kod języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>ISO 639-2 trzyliterowy kod języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład — trzyliterowy skrót dla języka angielskiego jest "eng".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub utrwalanie danych jest to zazwyczaj lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko język może spowodować utratę kontekstu i danych.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera trzyliterowy kod języka, zgodnie z definicją w interfejsie API Windows.</summary>
        <value>Trzyliterowy kod języka zgodnie z definicją w interfejsie API Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca taką samą wartość jak metoda interfejsu API Windows `GetLocaleInfo` wartością LOCALE_SABBREVLANGNAME. Na przykład trzyliterowy kod w języku angielskim (Stany Zjednoczone) zgodnie z definicją w interfejsie API Windows jest "tekst enu".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub utrwalanie danych jest to zazwyczaj lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko język może spowodować utratę kontekstu i danych.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla kilka właściwości kultury neutralnej.  
  
> [!NOTE]
>  W przykładzie wyświetlono starsze nazwy kultur zh-CHS i zh-CHT z odpowiednimi identyfikatorami kultur 0x0004 i 0x7C04. Jednak, w przypadku aplikacji systemu Windows Vista, należy użyć nazwy zh-Hans zamiast zh-CHS oraz nazwy zh-Hant zamiast zh-CHT. Nazwy Zh-Hans i zh-Hant stanowią bieżące normy i powinny być używane, jeśli nie ma powodu używania starszych nazw.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg zawierający nazwę bieżącego <see cref="T:System.Globalization.CultureInfo" /> w formacie *languagecode2*-*kraju/regioncode2*.</summary>
        <returns>Ciąg zawierający nazwę bieżącego <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Zwraca znormalizowane wersję nazwa kultury, który jest przekazywany do <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> lub <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> konstruktora lub <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> lub <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> metody. Jego normalizuje za pomocą konwersji znaków w ciągu wynikowego *languagecode2* małych liter i konwersji znaków *kraju/regioncode2* na wielką, jeśli jest to konieczne.  
  
 Nazw kultur wstępnie zdefiniowanych są wymienione w [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) strony w Centrum deweloperów Go Global.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod dwuliterowych ISO 639-1 dla języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <value>Kod ISO 639-1 dwuliterowych języka bieżącego <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład dwuliterowy skrót dla języka angielskiego jest "en". <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> Wartości właściwości dla niezmiennej kultury to "iv".  
  
> [!NOTE]
>  Podczas komunikacji między przetwarza lub utrwalanie danych jest to zazwyczaj lepiej użyć pełnego <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. Przy użyciu tylko język może spowodować utratę kontekstu i danych.  
  
 Jeśli ISO 639-1 nie definiuje kod języka dwuliterowych dla danej kultury <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> właściwość zwraca ciąg, który składa się z co najmniej trzech liter. Aby uzyskać więcej informacji zobacz przykład.  
  
   
  
## Examples  
 Poniższy przykład wyświetla kultur którego <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> właściwość składa się z kodem języka dwuliterowych.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy bieżący <see cref="T:System.Globalization.CultureInfo" /> obiekt używa ustawienia kultury wybrane przez użytkownika.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący <see cref="T:System.Globalization.CultureInfo" /> korzysta z ustawień kultury wybrane przez użytkownika; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik może wybrać do nadpisania niektóre wartości skojarzone z bieżącą kulturą systemu Windows korzystając z opcji ustawień regionalnych i językowych w panelu sterowania. Na przykład, użytkownik może wybrać do wyświetlania datę w innym formacie lub użyć waluty innej niż domyślna dla danej kultury.  
  
 Jeśli <xref:System.Globalization.CultureInfo.UseUserOverride%2A> jest `true` i określona kultura odpowiada bieżącej kultury systemu Windows, <xref:System.Globalization.CultureInfo> używa tych zastąpień, w tym ustawienia użytkownika dla właściwości <xref:System.Globalization.DateTimeFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwości właściwości i <xref:System.Globalization.NumberFormatInfo> wystąpienie zwrócone przez <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości. Jeśli ustawienia użytkownika są niezgodne z kulturą skojarzoną z <xref:System.Globalization.CultureInfo>, na przykład, jeśli wybrany kalendarz nie jest jedną z <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, wyniki metod i wartości właściwości są niezdefiniowane.  
  
 Ta właściwość jest ustawiona, gdy <xref:System.Globalization.CultureInfo> zostanie utworzony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>