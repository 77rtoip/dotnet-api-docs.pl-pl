<Type Name="EqualityComparer&lt;T&gt;" FullName="System.Collections.Generic.EqualityComparer&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6926c9fb583cd56e84ecf6ce168cd1d09195ea51" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645546" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EqualityComparer&lt;T&gt; : System.Collections.Generic.IEqualityComparer&lt;T&gt;, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit EqualityComparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt;, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.EqualityComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EqualityComparer(Of T)&#xA;Implements IEqualityComparer, IEqualityComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class EqualityComparer abstract : System::Collections::Generic::IEqualityComparer&lt;T&gt;, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type EqualityComparer&lt;'T&gt; = class&#xA;    interface IEqualityComparer&#xA;    interface IEqualityComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ obiektów do porównania.</typeparam>
    <summary>Udostępnia klasę podstawową dla implementacji <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> interfejs generyczny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dziedziczyć po tej klasie do implementacji niestandardowych z <xref:System.Collections.Generic.IEqualityComparer%601> ogólny interfejs do użytku z kolekcją klas takich jak <xref:System.Collections.Generic.Dictionary%602> klasy ogólnej lub za pomocą metod, takich jak <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> Określa, czy typ sprawdzenia właściwości `T` implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> ogólny interfejs i jeśli tak, zwraca <xref:System.Collections.Generic.EqualityComparer%601> który wywołuje wykonania <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> — metoda. W przeciwnym razie zwraca <xref:System.Collections.Generic.EqualityComparer%601>, zgodnie z `T`.  
  
 Zaleca się, że pochodzi od <xref:System.Collections.Generic.EqualityComparer%601> klasy zamiast wykonania <xref:System.Collections.Generic.IEqualityComparer%601> interfejsu, ponieważ <xref:System.Collections.Generic.EqualityComparer%601> testów dla równości przy użyciu klasy <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> zamiast metody <xref:System.Object.Equals%2A?displayProperty=nameWithType> metody. Jest to zgodne z `Contains`, `IndexOf`, `LastIndexOf`, i `Remove` metody <xref:System.Collections.Generic.Dictionary%602> klasy i innych kolekcji.  
  
   
  
## Examples  
 Poniższy przykład tworzy kolekcję słownika obiektów typu `Box` z porównania równości. Dwa pola są traktowane jako równe, jeśli ich wymiary są takie same. Następnie dodaje pola do kolekcji.  
  
 Słownik zostaje odtworzone w porównania równości, który definiuje równości w inny sposób: dwa pola są traktowane jako równe, jeśli ich woluminy są takie same.  
  
 [!code-csharp[System.Collections.Generic.EqualityComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.equalitycomparer/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.EqualityComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.equalitycomparer/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.EqualityComparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EqualityComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Generic.EqualityComparer`1" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.EqualityComparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.EqualityComparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.EqualityComparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As EqualityComparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::EqualityComparer&lt;T&gt; ^ Default { System::Collections::Generic::EqualityComparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.EqualityComparer&lt;'T&gt;" Usage="System.Collections.Generic.EqualityComparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.EqualityComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca domyślny porównania równości dla typu określone przez argument rodzajowy.</summary>
        <value>Domyślne wystąpienie elementu <see cref="T:System.Collections.Generic.EqualityComparer`1" /> klasy dla typu <typeparamref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> Określa, czy typ sprawdzenia właściwości `T` implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> interfejs, a jeśli tak, zwraca <xref:System.Collections.Generic.EqualityComparer%601> używającą tę implementację. W przeciwnym razie zwraca <xref:System.Collections.Generic.EqualityComparer%601> używającą zastąpień z <xref:System.Object.Equals%2A?displayProperty=nameWithType> i <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> dostarczonych przez `T`.  
  
   
  
## Examples  
 Poniższy przykład tworzy kolekcję zawierającą elementy `Box` wpisz i wyszukuje pola dopasowania innego pola wywołując `FindFirst` metody dwa razy.
  
 Pierwszy wyszukiwania nie określa żadnych porównania równości, co oznacza `FindFirst` używa <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> ustalenie porównania pól. Które z kolei używa wdrożenia <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metoda `Box` klasy. Dwa pola są traktowane jako równe, jeśli ich wymiary są takie same.
  
 Drugi wyszukiwania określa porównania równości (`BoxEqVolume`) definiujący równości wg woluminu. Dwa pola są traktowane jako równe, jeśli ich woluminy są takie same.
  
 [!code-csharp[System.Collections.Generic.EqualityComparer.Default#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.equalitycomparer.default/cs/program.cs)]
 [!code-vb[System.Collections.Generic.EqualityComparer.Default#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.equalitycomparer.default/vb/program.vb)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
        <altmember cref="T:System.IEquatable`1" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As T, y As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(T x, T y);" />
      <MemberSignature Language="F#" Value="override this.Equals : 'T * 'T -&gt; bool" Usage="equalityComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="y">Drugi obiekt, który będzie porównywany.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, określa, czy dwa obiekty typu <typeparamref name="T" /> są takie same.</summary>
        <returns>
          <see langword="true" /> Podane obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.EqualityComparer%601.Equals%2A> Metoda jest zwrotnej, symetrycznego i przechodnie. Oznacza to, zwraca `true` Jeśli użyty do porównania obiektu z samym sobą; `true` dla dwóch obiektów `x` i `y` przypadku `true` dla `y` i `x`; i `true` dla dwóch obiektów `x` i `z` przypadku `true` dla `x` i `y` , a także `true` dla `y` i `z`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementacje są wymagane do zapewnienia, że jeśli <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> metoda zwraca <see langword="true" /> dla dwóch obiektów <c>x</c> i <c>y</c>, następnie wartość zwrócona przez <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)" /> metoda <c>x</c> musi być równa wartości zwracane dla <c>y</c>.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(T obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : 'T -&gt; int" Usage="equalityComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, dla którego można pobrać wartość skrótu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej służy jako funkcji wyznaczania wartości skrótu dla określonego obiektu do tworzenia skrótów algorytmów i struktury danych, takich jak tablicy skrótów.</summary>
        <returns>Wartość skrótu dla określonego obiektu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Typ <paramref name="obj" /> jest typem referencyjnym i <paramref name="obj" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Implementacje są wymagane do zapewnienia, że jeśli <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> metoda zwraca <see langword="true" /> dla dwóch obiektów <c>x</c> i <c>y</c>, następnie wartość zwrócona przez <see cref="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)" /> metoda <c>x</c> musi być równa wartości zwracane dla <c>y</c>.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="y">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy podane obiekty są takie same.</summary>
        <returns>
          <see langword="true" /> Podane obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest otoki dla <xref:System.Collections.Generic.EqualityComparer%601.Equals%28%600%2C%600%29> metody, więc `obj` musi być rzutowane na typ określony przez argument rodzajowy `T` bieżącego wystąpienia. Jeśli nie można rzutować na `T`, <xref:System.ArgumentException> jest generowany.  
  
 Porównywanie `null` jest dozwolone, a nie generuje wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="x" /> lub <paramref name="y" /> jest typu, który nie może być rzutowana na typ <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> Dla której ma zostać zwrócone skrótu.</param>
        <summary>Zwraca wartość skrótu dla określonego obiektu.</summary>
        <returns>Wartość skrótu dla określonego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest otoki dla <xref:System.Collections.Generic.EqualityComparer%601.GetHashCode%28%600%29> metody, więc `obj` musi być typu, która może być rzutowana na typ określony przez argument typu ogólnego `T` bieżącego wystąpienia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Typ <paramref name="obj" /> jest typem referencyjnym i <paramref name="obj" /> jest <see langword="null" />.  - lub - <paramref name="obj" /> jest typu, który nie może być rzutowana na typ <typeparamref name="T" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>