<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a15e40f8b5fcfba97f002f47821b6cc779cd08c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69334989" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ obiektów do wyliczenia.</typeparam>
    <summary>Uwidacznia moduł wyliczający, który obsługuje prostą iterację w kolekcji określonego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601>jest interfejsem podstawowym dla kolekcji w <xref:System.Collections.Generic> przestrzeni nazw, takich jak <xref:System.Collections.Generic.Dictionary%602> <xref:System.Collections.Generic.List%601>,, <xref:System.Collections.Generic.Stack%601> i innych kolekcji ogólnych, takich <xref:System.Collections.ObjectModel.ObservableCollection%601> jak <xref:System.Collections.Concurrent.ConcurrentStack%601>i. Kolekcje, które <xref:System.Collections.Generic.IEnumerable%601> implementują, można wyliczyć przy `foreach` użyciu instrukcji.  
  
 W przypadku nieogólnej wersji tego interfejsu, zobacz <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601>zawiera pojedynczą metodę, którą należy zaimplementować podczas implementowania tego interfejsu; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, która<xref:System.Collections.Generic.IEnumerator%601> zwraca obiekt. Zwraca <xref:System.Collections.Generic.IEnumerator%601> możliwość wykonywania iteracji przez kolekcję przez <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ujawnienie właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak zaimplementować <xref:System.Collections.Generic.IEnumerable%601> interfejs i jak używać tej implementacji do tworzenia zapytania LINQ. Podczas implementowania <xref:System.Collections.Generic.IEnumerable%601>należy również zaimplementować <xref:System.Collections.Generic.IEnumerator%601> lub tylko dla C# , można użyć słowa kluczowego [Yield](~/docs/csharp/language-reference/keywords/yield.md) . Implementacja <xref:System.Collections.Generic.IEnumerator%601> wymaga<xref:System.IDisposable> również implementacji, która będzie widoczna w tym przykładzie.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Aby zapoznać C# się z innym przykładem, który <xref:System.Collections.Generic.IEnumerable%601> demonstruje sposób implementacji interfejsu, zobacz [przykład Generics](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Ten przykład używa `yield` słowa kluczowego zamiast implementowania <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />jest dołączony do parzystości z kolekcjami nieogólnymi; Implementacja <see cref="T:System.Collections.Generic.IEnumerable`1" /> zezwala na przekazywanie kolekcji ogólnej do metody, która oczekuje <see cref="T:System.Collections.IEnumerable" /> obiektu.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Przewodnik: Implementowanie interfejsu IEnumerable (Of T) w Visual Basic</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratory (C# i Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">Przykłady typów ogólnych</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</summary>
        <returns>Moduł wyliczający, który może być używany do iteracji kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca <xref:System.Collections.Generic.IEnumerator%601> możliwość wykonywania iteracji przez kolekcję przez <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ujawnienie właściwości. Moduł wyliczający służy do odczytywania danych w kolekcji, ale nie do modyfikowania kolekcji.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. W tym miejscu <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. W związku z tym, należy <xref:System.Collections.IEnumerator.MoveNext%2A> wywołać metodę, aby wykonać przechodzenie modułu wyliczającego do pierwszego elementu kolekcji przed odczytem <xref:System.Collections.Generic.IEnumerator%601.Current%2A>wartości.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.IEnumerator.MoveNext%2A> momentu, aż <xref:System.Collections.IEnumerator.MoveNext%2A> zostanie <xref:System.Collections.Generic.IEnumerator%601.Current%2A> wywołany ponownie jako zestaw do następnego elementu.  
  
 Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.Collections.IEnumerator.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócone `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. Nie można ponownie <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ustawić na pierwszy element kolekcji; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego.  

 Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodawanie, modyfikowanie lub usuwanie elementów, zachowanie modułu wyliczającego jest niezdefiniowane.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, więc moduł wyliczający pozostaje prawidłowy, dopóki kolekcja pozostanie niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest unieważniony, a użytkownik może uzyskać nieoczekiwane wyniki. Ponadto Wyliczenie kolekcji nie jest procedurą bezpieczną wątkowo. Aby zagwarantować bezpieczeństwo wątków, należy zablokować kolekcję podczas wyliczania lub zaimplementować synchronizację w kolekcji.  
  
 Domyślne implementacje kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> przestrzeni nazw nie są zsynchronizowane.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób implementacji <xref:System.Collections.Generic.IEnumerable%601> interfejsu i używa tej implementacji do tworzenia zapytania LINQ. Podczas implementowania <xref:System.Collections.Generic.IEnumerable%601>należy również zaimplementować <xref:System.Collections.Generic.IEnumerator%601> lub tylko dla C# , można użyć słowa kluczowego [Yield](~/docs/csharp/language-reference/keywords/yield.md) . Implementacja <xref:System.Collections.Generic.IEnumerator%601> wymaga<xref:System.IDisposable> również implementacji, która będzie widoczna w tym przykładzie.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Aby zapoznać C# się z innym przykładem, który <xref:System.Collections.Generic.IEnumerable%601> demonstruje sposób implementacji interfejsu, zobacz [przykład Generics](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). Ten przykład używa `yield` słowa kluczowego zamiast zaimplementowania <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">Przewodnik: Implementowanie interfejsu IEnumerable (Of T) w Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratory (C# i Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
