<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="adb912232f4b1cc24aae06820581a339fe0c8e29" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37701597" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ obiektów do wyliczenia.</typeparam>
    <summary>Udostępnia moduł wyliczający, który obsługuje prosty iteracji przez kolekcję określonego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> jest podstawowy interfejs dla kolekcji w <xref:System.Collections.Generic> przestrzeni nazw, takich jak <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, i <xref:System.Collections.Generic.Stack%601> i inne kolekcje ogólne, takie jak <xref:System.Collections.ObjectModel.ObservableCollection%601> i <xref:System.Collections.Concurrent.ConcurrentStack%601>. Kolekcje, które implementują <xref:System.Collections.Generic.IEnumerable%601> mogą być wyliczane przy użyciu `foreach` instrukcji.  
  
 Wersja nieogólnego tego interfejsu dla <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.  
  
 <xref:System.Collections.Generic.IEnumerable%601> zawiera jedną metodę, który muszą implementować podczas implementowania tego interfejsu; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, co powoduje zwrócenie <xref:System.Collections.Generic.IEnumerator%601> obiektu. Zwrócony <xref:System.Collections.Generic.IEnumerator%601> zapewnia możliwość do iterowania po kolekcji uwidaczniając <xref:System.Collections.Generic.IEnumerator%601.Current%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład demonstruje sposób implementacji <xref:System.Collections.Generic.IEnumerable%601> interfejsu i jak utworzyć zapytanie LINQ za pomocą tej implementacji. Podczas implementacji <xref:System.Collections.Generic.IEnumerable%601>, należy także zaimplementować <xref:System.Collections.Generic.IEnumerator%601> lub tylko język C#, można użyć [uzyskanie](~/docs/csharp/language-reference/keywords/yield.md) — słowo kluczowe. Implementowanie <xref:System.Collections.Generic.IEnumerator%601> wymaga również <xref:System.IDisposable> do zaimplementowania, które będą widoczne w tym przykładzie.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Dla innego języka C# przykładu, który demonstruje sposób implementacji <xref:System.Collections.Generic.IEnumerable%601> interfejsu, zobacz [przykładowe ogólne](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). W tym przykładzie użyto `yield` — słowo kluczowe, a nie Implementowanie <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> jest uwzględniany w przypadku parzystości z kolekcjami nieogólnego; Implementowanie <see cref="T:System.Collections.Generic.IEnumerable`1" /> umożliwia ogólnej kolekcji mają być przekazane do metody, która oczekuje <see cref="T:System.Collections.IEnumerable" /> obiektu.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</summary>
        <returns>Moduł wyliczający, który może służyć do iterowania po kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócony <xref:System.Collections.Generic.IEnumerator%601> zapewnia możliwość do iterowania po kolekcji uwidaczniając <xref:System.Collections.Generic.IEnumerator%601.Current%2A> właściwości. Moduły wyliczające służy do odczytywania danych w kolekcji, ale nie należy modyfikować kolekcji.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. W tym miejscu <xref:System.Collections.Generic.IEnumerator%601.Current%2A> jest niezdefiniowana. W związku z tym, należy wywołać <xref:System.Collections.IEnumerator.MoveNext%2A> metody wyprzedzeniem modułu wyliczającego do pierwszego elementu kolekcji przed odczytaniem wartości właściwości <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> Zwraca tego samego obiektu, dopóki nie <xref:System.Collections.IEnumerator.MoveNext%2A> wywoływana jest ponownie jako <xref:System.Collections.IEnumerator.MoveNext%2A> ustawia <xref:System.Collections.Generic.IEnumerator%601.Current%2A> do następnego elementu.  
  
 Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A> przebiegów koniec kolekcji, moduł wyliczający jest umieszczany za ostatnim elementem w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający jest w tym miejscu, kolejne wywołania <xref:System.Collections.IEnumerator.MoveNext%2A> również zwracać `false`. Jeśli ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócił `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> jest niezdefiniowana. Nie można ustawić <xref:System.Collections.Generic.IEnumerator%601.Current%2A> do pierwszego elementu w kolekcji; należy utworzyć nowe wystąpienie modułu wyliczającego zamiast tego.  

 Jeśli zmiany zostały wprowadzone do kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, zachowanie modułu wyliczającego jest niezdefiniowane.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, więc moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający zostaje unieważniony, i może uzyskać nieoczekiwane wyniki. Ponadto wyliczania kolekcji nie jest procedurą odporną. Aby zagwarantować bezpieczeństwo wątków, możesz zablokować kolekcję podczas wyliczania lub Wdrażanie synchronizacji w kolekcji.  
  
 Domyślne implementacje kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> przestrzeni nazw nie są zsynchronizowane.  
  
   
  
## Examples  
 Poniższy przykład demonstruje sposób implementacji <xref:System.Collections.Generic.IEnumerable%601> interfejsu i używa tę implementację, aby utworzyć kwerendę LINQ. Podczas implementacji <xref:System.Collections.Generic.IEnumerable%601>, należy także zaimplementować <xref:System.Collections.Generic.IEnumerator%601> lub tylko język C#, można użyć [uzyskanie](~/docs/csharp/language-reference/keywords/yield.md) — słowo kluczowe. Implementowanie <xref:System.Collections.Generic.IEnumerator%601> wymaga również <xref:System.IDisposable> do zaimplementowania, które będą widoczne w tym przykładzie.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 Dla innego języka C# przykładu, który demonstruje sposób implementacji <xref:System.Collections.Generic.IEnumerable%601> interfejsu, zobacz [przykładowe ogólne](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). W tym przykładzie użyto programu `yield` — słowo kluczowe, a nie Implementowanie <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>