<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e4479c1651fa72e0392b7b806525ef6bb955034" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69340310" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ obiektów do wyliczenia.</typeparam>
    <summary>Obsługuje prostą iterację w kolekcji ogólnej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601>jest interfejsem podstawowym dla wszystkich ogólnych modułów wyliczających.  
  
 `foreach` Instrukcja C# języka(`for each` C++w VisualBasic)ukrywazłożonośćmodułówwyliczających.`For Each`  W związku z `foreach` tym zaleca się użycie zamiast bezpośredniego manipulowania modułem wyliczającym.  
  
 Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. W tym miejscu <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. W związku z tym przed <xref:System.Collections.IEnumerator.MoveNext%2A> przeczytaniem <xref:System.Collections.Generic.IEnumerator%601.Current%2A>wartości parametru należy wywołać metodę wyliczającą do pierwszego elementu kolekcji.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.IEnumerator.MoveNext%2A> momentu wywołania metody. <xref:System.Collections.IEnumerator.MoveNext%2A>ustawia <xref:System.Collections.Generic.IEnumerator%601.Current%2A> do następnego elementu.  
  
 Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.Collections.IEnumerator.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócone `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. Nie można ponownie <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ustawić na pierwszy element kolekcji; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego.  
  
 <xref:System.Collections.IEnumerator.Reset%2A> Metoda jest zapewniana dla współdziałania modelu com. Nie musi być zaimplementowana; Zamiast tego, implementacja może po prostu zgłosić <xref:System.NotSupportedException>. Jeśli jednak zdecydujesz się to zrobić, upewnij się, że żadne obiekty wywołujące nie bazują na <xref:System.Collections.IEnumerator.Reset%2A> tej funkcji.  
  
 Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodawanie, modyfikowanie lub usuwanie elementów, zachowanie modułu wyliczającego jest niezdefiniowane.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania. Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 Domyślne implementacje kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> przestrzeni nazw nie są zsynchronizowane.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację <xref:System.Collections.Generic.IEnumerator%601> interfejsu klasy kolekcji obiektów niestandardowych. Obiekt niestandardowy jest wystąpieniem typu `Box`, a Klasa kolekcji to. `BoxCollection` Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Collections.Generic.ICollection%601> interfejsu.  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Implementacja tego interfejsu wymaga wdrożenia nieogólnego <see cref="T:System.Collections.IEnumerator" /> interfejsu. Metody i nie<see cref="M:System.Collections.IEnumerator.Reset" /> są zależne od ipojawiająsiętylkownieogólnyminterfejsie.<typeparamref name="T" /> <see cref="M:System.Collections.IEnumerator.MoveNext" /> <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> Właściwość jest wyświetlana w obu interfejsie i ma różne typy zwracane. Zaimplementuj nierodzajową <see cref="P:System.Collections.IEnumerator.Current" /> właściwość jako jawną implementację interfejsu. Pozwala to wszystkim konsumentom nieogólnego interfejsu na korzystanie z interfejsu ogólnego.  
  
Ponadto <see cref="T:System.Collections.Generic.IEnumerator`1" /> <see cref="M:System.IDisposable.Dispose" /> implementuje <see cref="T:System.IDisposable" />metodę, która wymaga zaimplementowania metody. Pozwala to na zamknięcie połączeń z bazą danych lub wydań plików lub podobnych operacji przy korzystaniu z innych zasobów. Jeśli nie ma dodatkowych zasobów do usunięcia, należy podać pustą <see cref="M:System.IDisposable.Dispose" /> implementację.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element w kolekcji na bieżącym miejscu modułu wyliczającego.</summary>
        <value>Element w kolekcji na bieżącym miejscu modułu wyliczającego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>nie jest zdefiniowany w żadnym z następujących warunków:  
  
-   Moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji zaraz po utworzeniu modułu wyliczającego.   <xref:System.Collections.IEnumerator.MoveNext%2A>musi zostać wywołana, aby przemieścić moduł wyliczający do pierwszego elementu kolekcji przed odczytem wartości <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  
  
-   Ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócone `false`, które wskazuje koniec kolekcji.  
  
-   Moduł wyliczający jest unieważniony z powodu zmian wprowadzonych w kolekcji, takich jak dodawanie, modyfikowanie lub usuwanie elementów.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.IEnumerator.MoveNext%2A> momentu wywołania metody. <xref:System.Collections.IEnumerator.MoveNext%2A>ustawia <xref:System.Collections.Generic.IEnumerator%601.Current%2A> do następnego elementu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja tego interfejsu wymaga wdrożenia nieogólnego <see cref="T:System.Collections.IEnumerator" /> interfejsu. <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> Właściwość jest wyświetlana w obu interfejsie i ma różne typy zwracane. Zaimplementuj nierodzajową <see cref="P:System.Collections.IEnumerator.Current" /> właściwość jako jawną implementację interfejsu. Pozwala to wszystkim konsumentom nieogólnego interfejsu na korzystanie z interfejsu ogólnego.</para></block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>
