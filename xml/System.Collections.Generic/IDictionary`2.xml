<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="30b8a-101">Typ kluczy w słowniku.</span><span class="sxs-lookup"><span data-stu-id="30b8a-101">The type of keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="30b8a-102">Typ wartości w słowniku.</span><span class="sxs-lookup"><span data-stu-id="30b8a-102">The type of values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="30b8a-103">Reprezentuje kolekcję ogólną par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="30b8a-103">Represents a generic collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-104"><xref:System.Collections.Generic.IDictionary%602> Interfejs jest podstawowy interfejs dla kolekcji par klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="30b8a-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="30b8a-105">Każdy element jest parę klucza i wartości przechowywane w <xref:System.Collections.Generic.KeyValuePair%602> obiektu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="30b8a-106">Każda para musi mieć unikatowy klucz.</span><span class="sxs-lookup"><span data-stu-id="30b8a-106">Each pair must have a unique key.</span></span> <span data-ttu-id="30b8a-107">Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.</span><span class="sxs-lookup"><span data-stu-id="30b8a-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="30b8a-108">Wartość może być `null` i nie musi być unikatowa.</span><span class="sxs-lookup"><span data-stu-id="30b8a-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="30b8a-109"><xref:System.Collections.Generic.IDictionary%602> Interfejs umożliwiający zawartych w niej klucze i wartości, które mają zostać wyliczone, ale nie oznacza wszystkie określony porządek sortowania.</span><span class="sxs-lookup"><span data-stu-id="30b8a-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="30b8a-110">`foreach` Instrukcji języka C# (`For Each` w języku Visual Basic `for each` w języku C++) zwraca obiekt typu elementów w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="30b8a-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="30b8a-111">Ponieważ każdy element <xref:System.Collections.Generic.IDictionary%602> parę klucz/wartość jest typu elementu nie jest typu klucza lub typ wartości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="30b8a-112">Zamiast tego jest typ elementu <xref:System.Collections.Generic.KeyValuePair%602>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="30b8a-113">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="30b8a-113">For example:</span></span>  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="30b8a-114">`foreach` Instrukcja jest otokę moduł wyliczający, który zezwala tylko odczyt z bez zapisywania do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="30b8a-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30b8a-115">Ponieważ klucze mogą być dziedziczone i ich zachowanie zmieniona, ich bezwzględną unikatowości nie może zagwarantować porównania przy użyciu <xref:System.Type.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="30b8a-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-116">Poniższy przykład kodu tworzy pustą <xref:System.Collections.Generic.Dictionary%602> ciągów, z ciągu kluczy i uzyskuje się dostęp przy użyciu <xref:System.Collections.Generic.IDictionary%602> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="30b8a-117">Przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Add%2A> metodę, aby dodać niektóre elementy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="30b8a-118">W przykładzie pokazano, że <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda zgłasza <xref:System.ArgumentException> podczas próby dodania zduplikowany klucz.</span><span class="sxs-lookup"><span data-stu-id="30b8a-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="30b8a-119">W przykładzie użyto <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksator w języku C#) można pobrać wartości, z którego wynika, że <xref:System.Collections.Generic.KeyNotFoundException> jest generowany, gdy żądany klucz jest nieobecny i mogą być zastępowane pokazujący, że wartość skojarzona z kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="30b8a-120">W przykładzie pokazano sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metodę jako bardziej wydajny sposób można pobrać wartości, jeśli program często będą musieli spróbować wartości kluczy, które nie znajdują się w słowniku i sposobu użycia <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> metody, aby sprawdzić, czy istnieje klucz przed wywołaniem <xref:System.Collections.Generic.IDictionary%602.Add%2A>metody.</span><span class="sxs-lookup"><span data-stu-id="30b8a-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="30b8a-121">Ponadto w przykładzie pokazano, jak wyliczyć kluczy i wartości w słowniku i jak wyliczyć wyłącznie przy użyciu wartości <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="30b8a-122">Klasy implementującej muszą posiadać do porównania kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-122">The implementing class must have a means to compare keys.</span></span></para>
    </block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="30b8a-123">Obiekt używany jako klucz elementu do dodania.</span><span class="sxs-lookup"><span data-stu-id="30b8a-123">The object to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="30b8a-124">Obiekt używany jako wartość elementu do dodania.</span><span class="sxs-lookup"><span data-stu-id="30b8a-124">The object to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="30b8a-125">Dodaje element z podany klucz i wartość do <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-126">Można również użyć <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości, aby dodać nowe elementy za pomocą ustawienia wartości klucza, który nie istnieje w słowniku; na przykład `myCollection["myNonexistentKey"] = myValue` w języku C# (`myCollection("myNonexistentKey") = myValue` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="30b8a-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="30b8a-127">Jednak jeśli określony klucz już istnieje w słowniku, ustawienie <xref:System.Collections.Generic.IDictionary%602.Item%2A> stara wartość jest zastąpienie właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="30b8a-128">Z kolei <xref:System.Collections.Generic.IDictionary%602.Add%2A> — metoda nie modyfikuje istniejące elementy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="30b8a-129">Implementacje może różnić się w sposób określają równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasa umożliwia użytkownikowi określenie <xref:System.Collections.Generic.IComparer%601> wdrożenia do użycia na potrzeby porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="30b8a-130">Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.</span><span class="sxs-lookup"><span data-stu-id="30b8a-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-131">Poniższy przykład kodu tworzy pustą <xref:System.Collections.Generic.Dictionary%602> z ciągów z kluczami całkowitą i uzyskuje się dostęp przy użyciu <xref:System.Collections.Generic.IDictionary%602> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="30b8a-132">Przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Add%2A> metodę, aby dodać niektóre elementy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="30b8a-133">W przykładzie pokazano, że <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda zgłasza <xref:System.ArgumentException> podczas próby dodania zduplikowany klucz.</span><span class="sxs-lookup"><span data-stu-id="30b8a-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="30b8a-134">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-135">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30b8a-136"><paramref name="key" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-136"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="30b8a-137">Element z tym samym kluczem już istnieje w <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="30b8a-138"><see cref="T:System.Collections.Generic.IDictionary`2" /> Jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="30b8a-139">Klucz do zlokalizowania w <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="30b8a-140">Określa, czy <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z określonym kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="30b8a-141"><see langword="true" /> Jeśli <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z kluczem; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-141"><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-142">Implementacje może różnić się w sposób określają równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasa umożliwia użytkownikowi określenie <xref:System.Collections.Generic.IComparer%601> wdrożenia do użycia na potrzeby porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="30b8a-143">Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.</span><span class="sxs-lookup"><span data-stu-id="30b8a-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-144">Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> metody, aby sprawdzić, czy istnieje klucz przed wywołaniem <xref:System.Collections.Generic.IDictionary%602.Add%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="30b8a-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="30b8a-145">Przedstawiono również sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metodę, która może być bardziej wydajny sposób można pobrać wartości, jeśli program często próbuje wartości kluczy, które nie znajdują się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="30b8a-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="30b8a-146">Na koniec widoczny jest sposób wstawić elementów przy użyciu <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksator w języku C#).</span><span class="sxs-lookup"><span data-stu-id="30b8a-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="30b8a-147">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-148">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30b8a-149"><paramref name="key" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="30b8a-150">Klucz elementu do pobrania lub ustawienia.</span><span class="sxs-lookup"><span data-stu-id="30b8a-150">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="30b8a-151">Pobiera lub ustawia element z określonym kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-151">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="30b8a-152">Element z określonym kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-152">The element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-153">Ta właściwość umożliwia dostęp do określonego elementu w kolekcji przy użyciu następującej składni: `myCollection[key]` (`myCollection(key)` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="30b8a-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="30b8a-154">Można również użyć <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości, aby dodać nowe elementy za pomocą ustawienia wartości klucza, który nie istnieje w słowniku; na przykład `myCollection["myNonexistentKey"] = myValue` w języku C# (`myCollection("myNonexistentKey") = myValue` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="30b8a-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="30b8a-155">Jednak jeśli określony klucz już istnieje w słowniku, ustawienie <xref:System.Collections.Generic.IDictionary%602.Item%2A> stara wartość jest zastąpienie właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="30b8a-156">Z kolei <xref:System.Collections.Generic.IDictionary%602.Add%2A> — metoda nie modyfikuje istniejące elementy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="30b8a-157">Implementacje może różnić się w sposób określają równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasa umożliwia użytkownikowi określenie <xref:System.Collections.Generic.IComparer%601> wdrożenia do użycia na potrzeby porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="30b8a-158">Używa języka C# do definiowania indeksatory zamiast implementacja słowa kluczowego <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-158">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="30b8a-159">Implementuje Visual Basic <xref:System.Collections.Generic.IDictionary%602.Item%2A> jako domyślna właściwość, która zapewnia te same funkcje indeksowania.</span><span class="sxs-lookup"><span data-stu-id="30b8a-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="30b8a-160">Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.</span><span class="sxs-lookup"><span data-stu-id="30b8a-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-161">Poniższy przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksator w języku C#) można pobrać wartości, z którego wynika, że <xref:System.Collections.Generic.KeyNotFoundException> jest generowany, gdy żądany klucz jest nieobecny i mogą być zastępowane pokazujący, że wartość skojarzona z kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="30b8a-162">W przykładzie przedstawiono również sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metodę jako bardziej wydajny sposób można pobrać wartości, jeśli program często będą musieli spróbować wartości kluczy, które nie znajdują się w słowniku.</span><span class="sxs-lookup"><span data-stu-id="30b8a-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="30b8a-163">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-164">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30b8a-165"><paramref name="key" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="30b8a-166">Właściwość jest pobierana i <paramref name="key" /> nie znaleziono.</span><span class="sxs-lookup"><span data-stu-id="30b8a-166">The property is retrieved and <paramref name="key" /> is not found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="30b8a-167">Właściwość jest ustawiona i <see cref="T:System.Collections.Generic.IDictionary`2" /> jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="30b8a-168">Pobiera <see cref="T:System.Collections.Generic.ICollection`1" /> zawierający klucze <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="30b8a-169"><see cref="T:System.Collections.Generic.ICollection`1" /> Zawierająca klucze obiektu implementującego obiekt <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-170">Kolejność kluczy w zwróconym <xref:System.Collections.Generic.ICollection%601> jest nieokreślony, ale jego gwarantuje to takiej samej kolejności jak odpowiednie wartości w <xref:System.Collections.Generic.ICollection%601> zwrócony przez <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-171">Poniższy przykład kodu pokazuje, jak wyliczyć kluczy wyłącznie przy użyciu <xref:System.Collections.Generic.IDictionary%602.Keys%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="30b8a-172">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-173">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="30b8a-174">Klucz elementu do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="30b8a-174">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="30b8a-175">Usuwa element z określonym kluczem z <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <returns>
          <span data-ttu-id="30b8a-176"><see langword="true" /> Jeśli element został pomyślnie usunięty; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-176"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="30b8a-177">Ta metoda zwraca również wartość <see langword="false" /> Jeśli <paramref name="key" /> nie został znaleziony w oryginalnej <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-178">Implementacje może różnić się w sposób określają równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasa umożliwia użytkownikowi określenie <xref:System.Collections.Generic.IComparer%601> wdrożenia do użycia na potrzeby porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-179">Poniższy przykład kodu pokazuje sposób usuwania parę klucza i wartości ze słownika przy użyciu <xref:System.Collections.Generic.IDictionary%602.Remove%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="30b8a-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="30b8a-180">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-181">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30b8a-182"><paramref name="key" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-182"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="30b8a-183"><see cref="T:System.Collections.Generic.IDictionary`2" /> Jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="30b8a-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="30b8a-184">Klucz o wartości do pobrania.</span><span class="sxs-lookup"><span data-stu-id="30b8a-184">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="30b8a-185">Po powrocie z tej metody, wartość skojarzona z określonym kluczem, jeśli klucz zostanie znaleziony; w przeciwnym razie wartość domyślna dla typu <c>wartość</c> parametru.</span><span class="sxs-lookup"><span data-stu-id="30b8a-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <c>value</c> parameter.</span></span> <span data-ttu-id="30b8a-186">Ten parametr jest przekazywany niezainicjowany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-186">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="30b8a-187">Pobiera wartość skojarzoną z określonym kluczem.</span><span class="sxs-lookup"><span data-stu-id="30b8a-187">Gets the value associated with the specified key.</span></span></summary>
        <returns>
          <span data-ttu-id="30b8a-188"><see langword="true" /> Jeśli obiekt z zaimplementowanym interfejsem <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z określonym kluczem, a w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-188"><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-189">Ta metoda łączą funkcjonalność <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> — metoda i <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="30b8a-190">Jeśli klucz nie zostanie znaleziony, a następnie `value` parametr pobiera na odpowiednią wartość domyślną dla typu `TValue`; na przykład zero (0) dla typów całkowitych `false` dla typów logicznych i `null` dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="30b8a-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-191">W przykładzie pokazano sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metody do pobierania wartości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="30b8a-192">Jeśli program próbuje często wartości kluczy, które nie znajdują się w słowniku <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metoda może być skuteczniejsza niż przy użyciu <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksator w języku C#), która zgłasza wyjątków podczas próby pobrania nieistniejącą kluczy.</span><span class="sxs-lookup"><span data-stu-id="30b8a-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="30b8a-193">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-194">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30b8a-195"><paramref name="key" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-195"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="30b8a-196">Pobiera <see cref="T:System.Collections.Generic.ICollection`1" /> zawierający wartości w <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="30b8a-197"><see cref="T:System.Collections.Generic.ICollection`1" /> Zawierający wartości w obiekcie, który implementuje <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="30b8a-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30b8a-198">Wartości w zwróconym <xref:System.Collections.Generic.ICollection%601> jest nieokreślony, ale gwarantuje on to takiej samej kolejności jak odpowiadające im klucze w <xref:System.Collections.Generic.ICollection%601> zwrócony przez <xref:System.Collections.Generic.IDictionary%602.Keys%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30b8a-199">Poniższy przykład kodu pokazuje, jak wyliczyć wyłącznie przy użyciu wartości <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="30b8a-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="30b8a-200">Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany.</span><span class="sxs-lookup"><span data-stu-id="30b8a-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="30b8a-201">Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30b8a-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>