<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36bc19fcec582cbbc2b76d76ec94cd2c8db509f5" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701834" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">Typ kluczy w słowniku.</typeparam>
    <typeparam name="TValue">Typ wartości w słowniku.</typeparam>
    <summary>Reprezentuje kolekcję ogólną pary klucz/wartość.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IDictionary%602> Interfejs jest podstawowy interfejs dla kolekcji par klucz/wartość.  
  
 Każdy element jest pary klucz/wartość przechowywanych w <xref:System.Collections.Generic.KeyValuePair%602> obiektu.  
  
 Każda para musi mieć unikatowy klucz. Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`. Wartość może być `null` i nie musi być unikatowa. <xref:System.Collections.Generic.IDictionary%602> Interfejs umożliwia zawartej kluczy i wartości do wyliczenia, ale nie oznacza wszelkie określony porządek sortowania.  
  
 `foreach` Instrukcja języka C# (`For Each` w języku Visual Basic `for each` w języku C++) zwraca obiekt typu elementów w kolekcji. Ponieważ każdy element obiektu <xref:System.Collections.Generic.IDictionary%602> to para klucz/wartość typu elementu nie jest typ klucza lub typu wartości. Typ elementu to <xref:System.Collections.Generic.KeyValuePair%602>. Na przykład:  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 `foreach` Instrukcja jest otokę modułu wyliczającego, umożliwiający tylko odczyt z bez zapisywania do kolekcji.  
  
> [!NOTE]
>  Ponieważ klucze mogą być dziedziczone, a następnie zmienić ich zachowania, ich bezwzględnych unikatowości nie może zagwarantować porównania przy użyciu <xref:System.Type.Equals%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy pustą <xref:System.Collections.Generic.Dictionary%602> ciągów, za pomocą ciągu kluczy i uzyskuje dostęp do ją przy użyciu <xref:System.Collections.Generic.IDictionary%602> interfejsu.  
  
 Przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Add%2A> metodę, aby dodać niektóre elementy. W przykładzie pokazano, że <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda zgłasza wyjątek <xref:System.ArgumentException> podczas próby dodania zduplikowany klucz.  
  
 W przykładzie użyto <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksatora w języku C#) można pobrać wartości, demonstrując, <xref:System.Collections.Generic.KeyNotFoundException> jest zgłaszany, gdy żądana klucz jest nieobecny i mogą być zastępowane przedstawiający, że wartość skojarzoną z kluczem.  
  
 W przykładzie pokazano sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metodę jako bardziej wydajny sposób pobrać wartości, jeśli program często będą musieli spróbować wartości klucza, które nie znajdują się w słowniku i sposobu użycia <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> metodę, aby sprawdzić, czy klucz istnieje przed wywołaniem <xref:System.Collections.Generic.IDictionary%602.Add%2A>metody.  
  
 Ponadto w przykładzie pokazano, jak wyliczyć kluczy i wartości w słowniku i jak wyliczyć samodzielnie, przy użyciu wartości <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Klasy implementującej musi mieć oznacza, że do porównywania kluczy.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">Obiekt do użycia jako klucz elementu do dodania.</param>
        <param name="value">Obiekt do użycia jako wartość elementu do dodania.</param>
        <summary>Dodaje element z podany klucz i wartość do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości, aby dodać nowe elementy, ustawiając wartość klucza, który nie istnieje w słowniku; na przykład `myCollection["myNonexistentKey"] = myValue` w języku C# (`myCollection("myNonexistentKey") = myValue` w języku Visual Basic). Jednakże, jeśli określony klucz już istnieje w słowniku, ustawienie <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwość zastępuje starą wartość. Z kolei <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda nie modyfikować istniejące elementy.  
  
 Implementacje może różnić się w sposób ustalają one, równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasy zezwala użytkownikowi na określenie <xref:System.Collections.Generic.IComparer%601> wdrażania służące do porównywania kluczy.  
  
 Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy pustą <xref:System.Collections.Generic.Dictionary%602> z ciągów za pomocą kluczy liczby całkowitej i uzyskuje dostęp do ją przy użyciu <xref:System.Collections.Generic.IDictionary%602> interfejsu. Przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Add%2A> metodę, aby dodać niektóre elementy. W przykładzie pokazano, że <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda zgłasza wyjątek <xref:System.ArgumentException> podczas próby dodania zduplikowany klucz.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Element o takim samym kluczem już istnieje w <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.Generic.IDictionary`2" /> Jest tylko do odczytu.</exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Klucz do zlokalizowania w <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
        <summary>Określa, czy <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z określonym kluczem.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z określonym kluczem; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje może różnić się w sposób ustalają one, równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasy zezwala użytkownikowi na określenie <xref:System.Collections.Generic.IComparer%601> wdrażania służące do porównywania kluczy.  
  
 Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> metodę, aby sprawdzić, czy klucz istnieje przed wywołaniem <xref:System.Collections.Generic.IDictionary%602.Add%2A> metody. Prezentuje sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metody, która może być bardziej efektywne sposobem pobrania wartości, jeśli program próbuje często wartości klucza, które nie znajdują się w słowniku. Ponadto pokazano, jak wstawić elementów przy użyciu <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksatora w języku C#).  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Klucz elementu do pobrania lub ustawienia.</param>
        <summary>Pobiera lub ustawia element z określonym kluczem.</summary>
        <value>Element z określonym kluczem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia dostęp do określonego elementu w kolekcji przy użyciu następującej składni: `myCollection[key]` (`myCollection(key)` w języku Visual Basic).  
  
 Można również użyć <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości, aby dodać nowe elementy, ustawiając wartość klucza, który nie istnieje w słowniku; na przykład `myCollection["myNonexistentKey"] = myValue` w języku C# (`myCollection("myNonexistentKey") = myValue` w języku Visual Basic). Jednakże, jeśli określony klucz już istnieje w słowniku, ustawienie <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwość zastępuje starą wartość. Z kolei <xref:System.Collections.Generic.IDictionary%602.Add%2A> metoda nie modyfikować istniejące elementy.  
  
 Implementacje może różnić się w sposób ustalają one, równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasy zezwala użytkownikowi na określenie <xref:System.Collections.Generic.IComparer%601> wdrażania służące do porównywania kluczy.  
  
 W języku C# używa słowa kluczowego w celu zdefiniowania indeksatorów, a nie Implementowanie <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości. Implementuje języka Visual Basic <xref:System.Collections.Generic.IDictionary%602.Item%2A> jako właściwość domyślną, która zapewnia taką samą funkcjonalność indeksowania.  
  
 Implementacje mogą mieć różne czy umożliwiają one `key` jako `null`.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksatora w języku C#) można pobrać wartości, demonstrując, <xref:System.Collections.Generic.KeyNotFoundException> jest zgłaszany, gdy żądana klucz jest nieobecny i mogą być zastępowane przedstawiający, że wartość skojarzoną z kluczem.  
  
 W przykładzie pokazano również sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metodę jako bardziej wydajny sposób, aby pobrać wartości, jeśli program często będą musieli spróbować wartości klucza, które nie znajdują się w słowniku.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Właściwości są pobierane i <paramref name="key" /> nie zostanie znaleziony.</exception>
        <exception cref="T:System.NotSupportedException">Właściwość została ustawiona i <see cref="T:System.Collections.Generic.IDictionary`2" /> jest tylko do odczytu.</exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Generic.ICollection`1" /> zawierający klucze <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
        <value>
          <see cref="T:System.Collections.Generic.ICollection`1" /> Zawierająca klucze obiektu implementującego obiekt <see cref="T:System.Collections.Generic.IDictionary`2" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolejność kluczy w zwróconym elemencie <xref:System.Collections.Generic.ICollection%601> jest nieokreślony, ale jest gwarantowane do takiej samej kolejności jak odpowiednie wartości w <xref:System.Collections.Generic.ICollection%601> zwrócone przez <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wyliczyć kluczy samodzielnie, przy użyciu <xref:System.Collections.Generic.IDictionary%602.Keys%2A> właściwości.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Klucz elementu do usunięcia.</param>
        <summary>Usuwa element z określonym kluczem z <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
        <returns>
          <see langword="true" /> Jeśli element został pomyślnie usunięty; w przeciwnym razie <see langword="false" />.  Ta metoda zwraca też wartość <see langword="false" /> Jeśli <paramref name="key" /> nie został znaleziony w oryginalnym <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje może różnić się w sposób ustalają one, równości obiektów; na przykład <xref:System.Collections.Generic.List%601> klasy używa <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, podczas gdy <xref:System.Collections.Generic.Dictionary%602> klasy zezwala użytkownikowi na określenie <xref:System.Collections.Generic.IComparer%601> wdrażania służące do porównywania kluczy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak usunąć parę klucza i wartości ze słownika przy użyciu <xref:System.Collections.Generic.IDictionary%602.Remove%2A> metody.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Collections.Generic.IDictionary`2" /> Jest tylko do odczytu.</exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Klucz wartości, których można pobrać.</param>
        <param name="value">Gdy metoda zwróci wartość, wartość jest skojarzone z określonym kluczem, jeśli klucz zostanie znaleziony; w przeciwnym razie wartość domyślna dla typu <c>wartość</c> parametru. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Pobiera wartość skojarzoną z określonym kluczem.</summary>
        <returns>
          <see langword="true" /> Jeśli obiekt implementujący <see cref="T:System.Collections.Generic.IDictionary`2" /> zawiera element z określonym kluczem, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda łączy w sobie funkcje <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> metody i <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości.  
  
 Jeśli klucz nie zostanie znaleziony, a następnie `value` parametr pobiera na odpowiednią wartość domyślną dla typu `TValue`; na przykład, wartość zero (0) dla typów całkowitoliczbowych `false` dotyczące typów logicznych i `null` dla typów odwołań.  
  
   
  
## Examples  
 W przykładzie pokazano sposób użycia <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metody do pobierania wartości. Jeśli program próbuje często wartości klucza, które nie znajdują się w słowniku, <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> metoda może być wydajniejsze niż używanie metody <xref:System.Collections.Generic.IDictionary%602.Item%2A> właściwości (indeksatora w języku C#), który wyrzuca wyjątki podczas próby pobrania nieistniejącej kluczy.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Generic.ICollection`1" /> zawierające wartości w <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
        <value>
          <see cref="T:System.Collections.Generic.ICollection`1" /> Zawierające wartości w obiekcie, który implementuje <see cref="T:System.Collections.Generic.IDictionary`2" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolejność wartości w zwróconym elemencie <xref:System.Collections.Generic.ICollection%601> jest nieokreślony, ale jest gwarantowane do takiej samej kolejności jak w odpowiadających im kluczy w <xref:System.Collections.Generic.ICollection%601> zwrócone przez <xref:System.Collections.Generic.IDictionary%602.Keys%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wyliczyć wartości samodzielnie, przy użyciu <xref:System.Collections.Generic.IDictionary%602.Values%2A> właściwości.  
  
 Ten kod jest częścią większego przykładu, który zostanie skompilowany i wykonany. Zobacz <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>