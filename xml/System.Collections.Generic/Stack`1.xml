<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack`1.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54573609c4b35e8133fdd9cc4e6d874da8137223e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4573609c4b35e8133fdd9cc4e6d874da8137223e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Specifies the type of elements in the stack.</source>
          <target state="translated">Określa typ elementów w stosie.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</source>
          <target state="translated">Reprezentuje kolekcję (LIFO) ostatnich w pierwszym poza rozmiar zmiennej wystąpień tego samego typu określony.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest implementowany jako tablicy.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">Stosów i kolejek są przydatne, gdy będziesz potrzebować tymczasowego przechowywania informacji; oznacza to, gdy można odrzucić elementu po pobraniu jej wartość.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> muszą uzyskać dostęp do informacji w tej samej kolejności, że jest on przechowywany w kolekcji.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> if you need to access the information in reverse order.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> Jeśli musisz uzyskiwać dostęp do informacji w odwrotnej kolejności.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> types when you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> i <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> typy, gdy trzeba uzyskać dostępu do kolekcji przez wiele wątków jednocześnie.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A common use for <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> is to preserve variable states during calls to other procedures.</source>
          <target state="translated">Użycia <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> jest zachowanie stanów zmiennej podczas wywołania do innych procedur.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> and its elements:</source>
          <target state="translated">Trzy główne operacje mogą być wykonywane na <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> i jej elementów:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> Wstawia element w górnej części <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Usuwa element z góry <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Zwraca element, który znajduje się na początku <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> , ale nie powoduje usunięcia go z <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest liczba elementów <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> może przechowywać.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Po dodaniu elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, automatycznie zostaje zwiększona wydajność zgodnie z żądaniem ponowne przydzielanie tablicy wewnętrznej.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Można zmniejszyć pojemność przez wywołanie metody <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> jest mniejsza niż pojemność stosu, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Jeśli trzeba nowego elementu, można zwiększyć pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> staje się O (<ph id="ph2">`n`</ph>) operację, której <ph id="ph3">`n`</ph> jest <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Operacja O(1) jest.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> akceptuje <ph id="ph2">`null`</ph> jako prawidłowa wartość dla odwołania do typów i umożliwia zduplikowane elementy.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Publiczne statyczne (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> w języku Visual Basic) elementy członkowskie tego typu są bezpieczne dla wątków.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Wystąpienia elementów członkowskich nie dają gwarancji bezpieczeństwa wątków.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> może obsługiwać wielu czytników jednocześnie, jak długo kolekcji nie jest modyfikowany.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Mimo tego, wyliczania kolekcji leżą nie jest bezpieczne wątkowo procedurą.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> klasy, która jest pusty i ma początkowej wydajności domyślnej.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest liczba elementów który <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> może przechowywać.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Po dodaniu elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, automatycznie zostaje zwiększona wydajność zgodnie z żądaniem ponowne przydzielanie tablicy wewnętrznej.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Jeśli rozmiar kolekcji można oszacować, określając początkowa pojemność eliminuje konieczność wykonania wielu operacji zmiany rozmiaru podczas dodawania elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Można zmniejszyć pojemność przez wywołanie metody <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Ten konstruktor jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje ten konstruktor i kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection to copy elements from.</source>
          <target state="translated">Aby skopiować elementy z kolekcji.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> skopiowane klasy, która zawiera elementów kopiowanych z określonej kolekcji i ma wystarczającej wydajności, aby pomieścić liczby elementów.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest liczba elementów który <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> może przechowywać.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Po dodaniu elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, automatycznie zostaje zwiększona wydajność zgodnie z żądaniem ponowne przydzielanie tablicy wewnętrznej.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Jeśli rozmiar kolekcji można oszacować, określając początkowa pojemność eliminuje konieczność wykonania wielu operacji zmiany rozmiaru podczas dodawania elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Można zmniejszyć pojemność przez wywołanie metody <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> of the collection.</source>
          <target state="translated">Elementy są kopiowane na <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> w tej samej kolejności odczytywania ich przez <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> kolekcji.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`collection`</ph>.</source>
          <target state="translated">Ten konstruktor jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest liczba elementów w <ph id="ph3">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">Poniższy przykład kodu pokazuje ten konstruktor i kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can contain.</source>
          <target state="translated">Początkowa liczba elementów który <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> może zawierać.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> klasy, która jest pusty i określonej pojemności początkowej lub początkowa pojemność domyślny, w zależności od jest większa.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest liczba elementów który <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> może przechowywać.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Po dodaniu elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, automatycznie zostaje zwiększona wydajność zgodnie z żądaniem ponowne przydzielanie tablicy wewnętrznej.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Jeśli rozmiar kolekcji można oszacować, określając początkowa pojemność eliminuje konieczność wykonania wielu operacji zmiany rozmiaru podczas dodawania elementów do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Można zmniejszyć pojemność przez wywołanie metody <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Ten konstruktor jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Usuwa wszystkie obiekty z <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> jest ustawiany na zero, a ponadto są również zwalniane odwołania do innych obiektów z elementów kolekcji.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">Pojemność pozostaje niezmieniona.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Aby zresetować pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, wywołaj <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Przycinanie pustą <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> ustawia pojemność <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> do wydajności domyślnej.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Obiekt do zlokalizowania w <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">Wartość może być <ph id="ph1">&lt;see langword="null" /&gt;</ph> dla typów odwołań.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Określa, czy element jest <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="item" /&gt;</ph> znajduje się w <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Ta metoda określa równości przy użyciu domyślna funkcja porównująca równości <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> dla <ph id="ph2">`T`</ph>, typu wartości na liście.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda wykonuje wyszukiwanie liniowe; w związku z tym ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Jednowymiarowa <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> który jest miejscem docelowym elementów kopiowanych z <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> Musi mieć indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Liczony od zera indeks w <bpt id="p1">&lt;c&gt;</bpt>tablicy<ept id="p1">&lt;/c&gt;</ept> od rozpoczyna się kopiowanie które.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Kopie <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> do istniejącej jednowymiarowej tablicy <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, rozpoczynając od określonego indeksu tablicy.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Elementy są kopiowane na tablicy w kolejności (LIFO) ostatnich w pierwszym poza, podobne polecenie elementów zwróconych przez kolejne wywołania <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w źródle <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> jest większa niż dostępne miejsce od <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> do końca tablicy docelowej <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Pobiera liczbę elementów zawartych w <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów zawartych w <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can store.</source>
          <target state="translated">Pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest liczba elementów który <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> może przechowywać.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> jest to liczba elementów, które są rzeczywiście w <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Pojemność zawsze jest większa niż lub równa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> przekracza pojemność podczas dodawania elementów, pojemność zwiększa się o automatyczne ponowne przydzielanie tablicy wewnętrznej przed skopiowaniem starych elementów i dodawanie nowych elementów.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Pobieranie wartości tej właściwości jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The following code example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka właściwości i metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Returns an enumerator for the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Zwraca moduł wyliczający dla <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> Dla <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Instrukcji języka C# (<ph id="ph2">`for each`</ph> w języku C++ <ph id="ph3">`For Each`</ph> w języku Visual Basic) ukrywa złożoność wyliczenia.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">W związku z tym przy użyciu <ph id="ph1">`foreach`</ph> jest zalecane, zamiast bezpośrednie manipulowanie modułu wyliczającego.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">W tym miejscu <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">W związku z tym należy wywołać <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytywania wartości <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> Zwraca tego samego obiektu, dopóki nie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> Ustawia <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> do następnego elementu.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> przekazuje końcem kolekcji, moduł wyliczający jest umieszczony za ostatnim elementem w kolekcji i <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Gdy moduł wyliczający jest w tym miejscu kolejnych wywołań <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> zwracają również <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Jeśli przez ostatnie wywołanie <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> zwrócił <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Nie można ustawić <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> do pierwszego elementu w kolekcji; należy utworzyć nowe wystąpienie modułu wyliczającego zamiast tego.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie czy usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniany, a jego zachowanie staje się niezdefiniowane.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Domyślne implementacje kolekcji w <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> nie są zsynchronizowane.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Ta metoda jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The following code example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class is enumerable.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, że <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> enumerable jest klasą ogólną.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) is used to enumerate the queue.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Instrukcji (<ph id="ph2">`For Each`</ph> w języku Visual Basic <ph id="ph3">`for each`</ph> w języku C++) jest używany do wyliczenia kolejki.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Zwraca obiekt, w górnej części <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> bez usuwania go.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Obiekt w górnej części <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Ta metoda jest podobna do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metody, ale <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> nie modyfikuje <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Jeśli typ <ph id="ph1">`T`</ph> jest typem referencyjnym <ph id="ph2">`null`</ph> może zostać umieszczony na <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jako symbolu zastępczego, jeśli to konieczne.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Ta metoda jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> Jest pusta.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Usuwa i zwraca obiekt, w górnej części <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The object removed from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Usunąć obiektu z góry <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Ta metoda jest podobna do <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> metody, ale <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> nie modyfikuje <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Jeśli typ <ph id="ph1">`T`</ph> jest typem referencyjnym <ph id="ph2">`null`</ph> może zostać umieszczony na <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jako symbolu zastępczego, jeśli to konieczne.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest implementowany jako tablicy.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Ta metoda jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> Jest pusta.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The object to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Obiekt do przekazania do <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">Wartość może być <ph id="ph1">&lt;see langword="null" /&gt;</ph> dla typów odwołań.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Wstawia obiektu w górnej części <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jest implementowany jako tablicy.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> jest już równa pojemności pojemność <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> zwiększa się o automatyczne ponowne przydzielanie tablicy wewnętrznej, a istniejące elementy są kopiowane do nowej tablicy przed dodaniem nowego elementu.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Jeśli typ <ph id="ph1">`T`</ph> jest typem referencyjnym <ph id="ph2">`null`</ph> może zostać umieszczony na <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> jako symbolu zastępczego, jeśli to konieczne.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">Zajmuje miejsca na stosie, a jest traktowany jak inne obiekty.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> jest mniejsza niż pojemność stosu, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Jeśli trzeba nowego elementu, można zwiększyć pojemność <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> staje się O (<ph id="ph2">`n`</ph>) operację, której <ph id="ph3">`n`</ph> jest <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> Który może służyć do iterowania po kolekcji.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Instrukcji języka C# (<ph id="ph2">`for each`</ph> w języku C++ <ph id="ph3">`For Each`</ph> w języku Visual Basic) ukrywa złożoność wyliczenia.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">W związku z tym przy użyciu <ph id="ph1">`foreach`</ph> jest zalecane, zamiast bezpośrednie manipulowanie modułu wyliczającego.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">W tym miejscu <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">W związku z tym należy wywołać <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytywania wartości <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> Zwraca tego samego obiektu, dopóki nie <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> Ustawia <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> do następnego elementu.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> przekazuje końcem kolekcji, moduł wyliczający jest umieszczony za ostatnim elementem w kolekcji i <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Gdy moduł wyliczający jest w tym miejscu kolejnych wywołań <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwracają również <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Jeśli przez ostatnie wywołanie <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwrócił <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Nie można ustawić <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> do pierwszego elementu w kolekcji; należy utworzyć nowe wystąpienie modułu wyliczającego zamiast tego.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie czy usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniany, a jego zachowanie staje się niezdefiniowane.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Domyślne implementacje kolekcji w <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> nie są zsynchronizowane.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Ta metoda jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Jednowymiarowa <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> który jest miejscem docelowym elementów kopiowanych z <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> Musi mieć indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Liczony od zera indeks w <bpt id="p1">&lt;c&gt;</bpt>tablicy<ept id="p1">&lt;/c&gt;</ept> od rozpoczyna się kopiowanie które.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Kopiuje elementy <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> do <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, rozpoczynając od określonego <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> indeksu.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Jeśli typ źródła <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> nie można automatycznie rzutować na typ docelowy <ph id="ph2">`array`</ph>, implementacje nieogólnego <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, podczas gdy throw ogólnego implementacje <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> jest wielowymiarowy.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> nie ma indeksowania liczony od zera.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Liczba elementów w źródle <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest większa niż dostępne miejsce od <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> do końca tablicy docelowej <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Typ źródła <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> nie można automatycznie rzutować na typ docelowy <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Pobiera wartość wskazującą czy uzyskują dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest synchronizowane (wielowątkowość).</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli dostęp do <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> jest synchronizowane (wielowątkowość); w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">W implementacji domyślnej <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, ta właściwość zawsze zwraca <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Domyślne implementacje kolekcji w <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> nie są zsynchronizowane.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</source>
          <target state="translated">W rzadkich przypadkach, gdy wyliczenia będą konkurować o dostępów do zapisu należy zablokować kolekcję podczas całej wyliczenia.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Zwraca obiekt, który może służyć do synchronizujący dostęp do <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">Synchronizacja jest efektywne tylko wtedy, gdy wszystkie wątki zablokować ten obiekt przed uzyskaniem dostępu do kolekcji.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Pobieranie wartości tej właściwości jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Pobiera obiekt, który może służyć do synchronizujący dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Obiekt, który może służyć do synchronizujący dostęp do <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">W implementacji domyślnej <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, ta właściwość zawsze zwraca bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Domyślne implementacje kolekcji w <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> nie są zsynchronizowane.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Zwraca obiekt, który może służyć do synchronizujący dostęp do <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">Synchronizacja jest efektywne tylko wtedy, gdy wszystkie wątki zablokować ten obiekt przed uzyskaniem dostępu do kolekcji.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">Poniższy kod przedstawia użycie <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> właściwości dla C#, C++ i Visual Basic.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Pobieranie wartości tej właściwości jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> Który może służyć do iterowania po kolekcji.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Instrukcji języka C# (<ph id="ph2">`for each`</ph> w języku C++ <ph id="ph3">`For Each`</ph> w języku Visual Basic) ukrywa złożoność wyliczenia.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">W związku z tym przy użyciu <ph id="ph1">`foreach`</ph> jest zalecane, zamiast bezpośrednie manipulowanie modułu wyliczającego.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> również wprowadzono moduł wyliczający wróć do tej pozycji.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">W tym miejscu <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">W związku z tym należy wywołać <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytywania wartości <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> zwraca ten sam obiekt do momentu <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> jest wywoływana.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> Ustawia <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> do następnego elementu.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> przekazuje końcem kolekcji, moduł wyliczający jest umieszczony za ostatnim elementem w kolekcji i <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Gdy moduł wyliczający jest w tym miejscu kolejnych wywołań <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwracają również <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Jeśli przez ostatnie wywołanie <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> zwrócił <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> jest niezdefiniowana.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Aby ustawić <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> aby pierwszym elementem kolekcji ponownie, należy wywołać <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> następuje <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie czy usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniany, a jego zachowanie staje się niezdefiniowane.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">Domyślne implementacje kolekcji w <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> nie są zsynchronizowane.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Ta metoda jest operacją O(1).</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Kopie <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> do nowej tablicy.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Nowe tablica zawierająca kopie elementów <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Elementy są kopiowane na tablicy w kolejności (LIFO) ostatnich w pierwszym poza, podobne polecenie elementów zwróconych przez kolejne wywołania <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie kodu pokazano kilka metod <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> klasy ogólnej, łącznie z <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">Przykład kodu tworzy stosu ciągów o pojemności domyślnej i używa <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> metody do dystrybuowania pięć ciągów na stosie.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Wyliczane są elementy stosu nie zmienia stanu stosu.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Metoda jest używana do pop pierwszy ciąg ze stosu.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Metodę spojrzeć na następny element na stosie, a następnie <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> metoda jest używana do Powiększ go.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Metoda jest używana do utworzenia tablicy i skopiuj do niego elementów stosu, a następnie tablicy jest przekazywana do <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> konstruktora przyjmującego <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, tworząc kopię stosu w kolejności elementów wycofane.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Elementy kopii są wyświetlane.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Tablica dwukrotnie rozmiar stosu jest tworzony i <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> metoda służy do kopiowania elementów tablicy, zaczynając od środka tablicy.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Konstruktor jest używany ponownie, aby utworzyć kopię stosu w kolejności elementów cofnąć; w związku z tym trzy elementy wartości null znajdują się na końcu.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Metoda jest używana do pokazują, że ciąg "4" jest pierwsza kopia stosu, po którym <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda usuwa kopię i <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> właściwość pokazuje, że stos jest pusty.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">Ustawia pojemność na rzeczywistą liczbę elementów w <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, jeśli ten numer jest mniejsza niż 90 procent obecna pojemność.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Ta metoda może służyć do narzut zminimalizować pamięci kolekcji, jeśli żadne nowe elementy, które zostaną dodane do kolekcji.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">Koszt ponowne przydzielanie i kopiowanie dużej <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> mogą być jednak znaczące, więc <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> — metoda nie robi nic, jeśli lista jest więcej niż 90 procent pojemności.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Dzięki temu można uniknąć ponoszenia koszt dużych; Ponowna alokacja dla niewielkich korzyści.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Ta metoda jest O (<ph id="ph1">`n`</ph>) operację, której <ph id="ph2">`n`</ph> jest <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Aby zresetować <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> do stanu początkowego wywołać <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> metoda przed wywołaniem <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> — metoda.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Przycinanie pustą <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> ustawia pojemność <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> do wydajności domyślnej.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>