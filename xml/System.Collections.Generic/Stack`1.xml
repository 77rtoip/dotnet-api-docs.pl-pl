<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aab26b9c2d23749c4d13cae365541686e6c2ad96" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69334637" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Określa typ elementów w stosie.</typeparam>
    <summary>Reprezentuje kolekcję o rozmiarze "ostatniego" w pierwszej kolejności (LIFO) wystąpień tego samego typu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601>jest zaimplementowany jako tablica.  
  
 Stosy i kolejki są przydatne, gdy potrzebujesz magazynu tymczasowego na potrzeby informacji; oznacza to, że jeśli chcesz odrzucić element po pobraniu jego wartości. Użyj <xref:System.Collections.Generic.Queue%601> , jeśli chcesz uzyskać dostęp do informacji w takiej samej kolejności, w jakiej są przechowywane w kolekcji. Użyj <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> , jeśli chcesz uzyskać dostęp do informacji w odwrotnej kolejności.  
  
 Użyj typów <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> i, jeśli chcesz uzyskać dostęp do kolekcji z wielu wątków jednocześnie. <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType>  
  
 Typowym zastosowaniem <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> jest zachowywanie Stanów zmiennych podczas wywołań do innych procedur.  
  
 Trzy główne operacje można wykonać na <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> i jego elementach:  
  
-   <xref:System.Collections.Generic.Stack%601.Push%2A>Wstawia element w górnej części <xref:System.Collections.Stack>.  
  
-   <xref:System.Collections.Generic.Stack%601.Pop%2A>Usuwa element z góry <xref:System.Collections.Generic.Stack%601>.  
  
-   <xref:System.Collections.Generic.Stack%601.Peek%2A>Zwraca element, który znajduje się w górnej części, <xref:System.Collections.Generic.Stack%601> ale nie usuwa go <xref:System.Collections.Generic.Stack%601>z.  
  
 Pojemność a to liczba <xref:System.Collections.Generic.Stack%601> elementów, które <xref:System.Collections.Generic.Stack%601> mogą być przechowywane. Gdy elementy są dodawane do <xref:System.Collections.Generic.Stack%601>, pojemność jest automatycznie zwiększana zgodnie z wymaganiami przez ponowną alokację tablicy wewnętrznej. Wydajność można zmniejszyć, wywołując <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>metodę.  
  
 Jeśli <xref:System.Collections.Generic.Stack%601.Count%2A> jest mniejsza niż pojemność stosu, <xref:System.Collections.Generic.Stack%601.Push%2A> jest operacją o (1). Jeśli pojemność musi być zwiększona w celu uwzględnienia nowego elementu <xref:System.Collections.Generic.Stack%601.Push%2A> , to operacja o (`n`), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>. <xref:System.Collections.Generic.Stack%601.Pop%2A>jest operacją O (1).  
  
 <xref:System.Collections.Generic.Stack%601>akceptuje `null` jako prawidłową wartość dla typów odwołań i umożliwia duplikowanie elementów.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej. Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Publiczne statyczne (<see langword="Shared" /> w Visual Basic) członkowie tego typu są bezpieczne wątkowo. Wystąpienia elementów członkowskich nie dają gwarancji bezpieczeństwa wątków.  
  
<see cref="T:System.Collections.Generic.Stack`1" /> Może obsługiwać wielu czytników współbieżnie, o ile kolekcja nie jest modyfikowana.  Nawet w ten sposób Wyliczanie za pomocą kolekcji nie jest w sposób wewnętrzny bezpieczny dla wątków.  Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.</threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">Iteratory (C# i Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Generic.Stack`1" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Collections.Generic.Stack`1" /> klasy, która jest pusta i ma domyślną pojemność początkową.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojemność programu to liczba <xref:System.Collections.Generic.Stack%601> elementów <xref:System.Collections.Generic.Stack%601> , które mogą być przechowywane. Gdy elementy są dodawane do <xref:System.Collections.Generic.Stack%601>, pojemność jest automatycznie zwiększana zgodnie z wymaganiami przez ponowną alokację tablicy wewnętrznej.  
  
 Jeśli rozmiar kolekcji można oszacować, określenie początkowej pojemności eliminuje konieczność wykonywania wielu operacji zmiany rozmiaru podczas dodawania elementów do <xref:System.Collections.Generic.Stack%601>.  
  
 Wydajność można zmniejszyć, wywołując <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>metodę.  
  
 Ten konstruktor jest operacją O (1).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje tego konstruktora i kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">Kolekcja, z której mają zostać skopiowane elementy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Collections.Generic.Stack`1" /> klasy zawierające elementy skopiowane z określonej kolekcji i ma wystarczającą pojemność, aby pomieścić liczbę skopiowanych elementów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojemność programu to liczba <xref:System.Collections.Generic.Stack%601> elementów <xref:System.Collections.Generic.Stack%601> , które mogą być przechowywane. Gdy elementy są dodawane do <xref:System.Collections.Generic.Stack%601>, pojemność jest automatycznie zwiększana zgodnie z wymaganiami przez ponowną alokację tablicy wewnętrznej.  
  
 Jeśli rozmiar kolekcji można oszacować, określenie początkowej pojemności eliminuje konieczność wykonywania wielu operacji zmiany rozmiaru podczas dodawania elementów do <xref:System.Collections.Generic.Stack%601>.  
  
 Wydajność można zmniejszyć, wywołując <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>metodę.  
  
 Elementy są kopiowane <xref:System.Collections.Generic.Stack%601> do tabeli w tej samej kolejności, w jakiej są odczytywane <xref:System.Collections.Generic.IEnumerator%601> przez kolekcję.  
  
 Ten konstruktor jest operacją o`n`(), gdzie `n` jest liczbą elementów w `collection`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje tego konstruktora i kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">Początkowa liczba elementów, które <see cref="T:System.Collections.Generic.Stack`1" /> może zawierać.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Collections.Generic.Stack`1" /> klasy, która jest pusta i ma określoną pojemność początkową lub domyślną pojemność początkową, w zależności od tego, która jest większa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojemność programu to liczba <xref:System.Collections.Generic.Stack%601> elementów <xref:System.Collections.Generic.Stack%601> , które mogą być przechowywane. Gdy elementy są dodawane do <xref:System.Collections.Generic.Stack%601>, pojemność jest automatycznie zwiększana zgodnie z wymaganiami przez ponowną alokację tablicy wewnętrznej.  
  
 Jeśli rozmiar kolekcji można oszacować, określenie początkowej pojemności eliminuje konieczność wykonywania wielu operacji zmiany rozmiaru podczas dodawania elementów do <xref:System.Collections.Generic.Stack%601>.  
  
 Wydajność można zmniejszyć, wywołując <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>metodę.  
  
 Ten konstruktor jest operacją o`n`(), gdzie `n` is `capacity`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie obiekty z <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601.Count%2A>jest ustawiona na zero, a odwołania do innych obiektów z elementów kolekcji również są wydane.  
  
 Pojemność pozostaje niezmieniona. Aby zresetować pojemność <xref:System.Collections.Generic.Stack%601>wywołania <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>, Przycinanie pustego <xref:System.Collections.Generic.Stack%601> zestawu ustawia pojemność <xref:System.Collections.Generic.Stack%601> do pojemności domyślnej.  
  
 Ta metoda jest operacją o`n`(), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.Clear%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt, który ma zostać zlokalizowany w <see cref="T:System.Collections.Generic.Stack`1" />. Wartość może być <see langword="null" /> dla typów referencyjnych.</param>
        <summary>Określa, <see cref="T:System.Collections.Generic.Stack`1" />czy element znajduje się w.</summary>
        <returns><see langword="true" />Jeśli <paramref name="item" /> znajduje się <see cref="T:System.Collections.Generic.Stack`1" />w; w przeciwnym razie <see langword="false" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa równość przy użyciu domyślnej funkcji <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> porównującej `T`równość dla, typu wartości na liście.  
  
 Ta metoda przeprowadza wyszukiwanie liniowe; w związku z tym ta metoda jest operacją o (`n`), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.Contains%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">Wykonywanie niezależnych od kultury operacji na ciągach w kolekcjach</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Jednowymiarowy <see cref="T:System.Array" /> , który jest miejscem docelowym elementów skopiowanych z <see cref="T:System.Collections.Generic.Stack`1" />. <see cref="T:System.Array" /> Musi mieć indeksowanie oparte na zero.</param>
        <param name="arrayIndex">Indeks (liczony od zera) <paramref name="array" /> , w którym rozpoczyna się kopiowanie.</param>
        <summary>Kopiuje do istniejącej jednowymiarowego <see cref="T:System.Array" />, rozpoczynając od określonego indeksu tablicy. <see cref="T:System.Collections.Generic.Stack`1" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są kopiowane do tablicy w kolejności Last-in-First-Out (LIFO), podobnie jak w kolejności elementów zwracanych przez pomyślne wywołania do <xref:System.Collections.Generic.Stack%601.Pop%2A>.  
  
 Ta metoda jest operacją o`n`(), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.CopyTo%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />jest mniejsza od zera.</exception>
        <exception cref="T:System.ArgumentException">Liczba elementów w źródle <see cref="T:System.Collections.Generic.Stack`1" /> jest większa niż dostępne miejsce od <paramref name="arrayIndex" /> do końca miejsca docelowego <paramref name="array" />.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów zawartych w <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <value>Liczba elementów zawartych w <see cref="T:System.Collections.Generic.Stack`1" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojemność <xref:System.Collections.Generic.Stack%601> jest liczbą elementów <xref:System.Collections.Generic.Stack%601> , które mogą być przechowywane. <xref:System.Collections.Generic.Stack%601.Count%2A>to liczba elementów, które faktycznie znajdują się w <xref:System.Collections.Generic.Stack%601>.  
  
 Pojemność jest zawsze większa lub równa <xref:System.Collections.Generic.Stack%601.Count%2A>. Jeśli <xref:System.Collections.Generic.Stack%601.Count%2A> przekracza pojemność podczas dodawania elementów, wydajność jest zwiększana przez automatyczne ponowne przydzielanie tablicy wewnętrznej przed skopiowaniem starych elementów i dodaniem nowych elementów.  
  
 Pobieranie wartości tej właściwości jest operacją O(1).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka właściwości i metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, łącznie z <xref:System.Collections.Generic.Stack%601.Count%2A> właściwością.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający dla <see cref="T:System.Collections.Generic.Stack`1" />elementu.</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> Dla .<see cref="T:System.Collections.Generic.Stack`1" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` Instrukcja C# języka(`for each` C++w VisualBasic)ukrywazłożonośćmodułówwyliczających.`For Each` W związku z `foreach` tym zaleca się użycie zamiast bezpośredniego manipulowania modułem wyliczającym.  
  
 Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. W tym miejscu <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> nie jest zdefiniowane. W związku z tym przed <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> przeczytaniem <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>wartości parametru należy wywołać metodę wyliczającą do pierwszego elementu kolekcji.  
  
 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> momentu wywołania metody. <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>ustawia <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> do następnego elementu.  
  
 Jeśli <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> zwrócone `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> nie jest zdefiniowane. Nie można ponownie <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> ustawić na pierwszy element kolekcji; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego.  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniony i następne wywołanie <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> lub <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> wygeneruje <xref:System.InvalidOperationException>.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 Implementacje domyślne kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> programie nie są zsynchronizowane.  
  
 Ta metoda jest operacją O(1).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, że <xref:System.Collections.Generic.Stack%601> Klasa generyczna jest wyliczalna. Instrukcja (`For Each` w Visual Basic, `for each` in C++) służy do wyliczania kolejki. `foreach`  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt w górnej części <see cref="T:System.Collections.Generic.Stack`1" /> bez usuwania go.</summary>
        <returns>Obiekt w górnej części <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podobna do <xref:System.Collections.Generic.Stack%601.Pop%2A> metody, ale <xref:System.Collections.Generic.Stack%601.Peek%2A> nie modyfikuje <xref:System.Collections.Generic.Stack%601>.  
  
 Jeśli typ `T` jest typem referencyjnym, `null` można go wypchnąć do <xref:System.Collections.Generic.Stack%601> elementu jako symbol zastępczy, w razie konieczności.  
  
 Ta metoda jest operacją O(1).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.Peek%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość <see cref="T:System.Collections.Generic.Stack`1" /> jest pusta.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa i zwraca obiekt w górnej części <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <returns>Obiekt usunięty z góry <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podobna do <xref:System.Collections.Generic.Stack%601.Peek%2A> metody, ale <xref:System.Collections.Generic.Stack%601.Peek%2A> nie modyfikuje <xref:System.Collections.Generic.Stack%601>.  
  
 Jeśli typ `T` jest typem referencyjnym, `null` można go wypchnąć do <xref:System.Collections.Generic.Stack%601> elementu jako symbol zastępczy, w razie konieczności.  
  
 <xref:System.Collections.Generic.Stack%601>jest zaimplementowany jako tablica. Ta metoda jest operacją O(1).  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.Pop%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wartość <see cref="T:System.Collections.Generic.Stack`1" /> jest pusta.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt do wypchnięcia na <see cref="T:System.Collections.Generic.Stack`1" />. Wartość może być <see langword="null" /> dla typów referencyjnych.</param>
        <summary>Wstawia obiekt w górnej części <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601>jest zaimplementowany jako tablica.  
  
 Jeśli <xref:System.Collections.Generic.Stack%601.Count%2A> jest już równa pojemności, pojemność <xref:System.Collections.Generic.Stack%601> programu jest zwiększana przez automatyczne ponowne przydzielanie tablicy wewnętrznej, a istniejące elementy są kopiowane do nowej tablicy przed dodaniem nowego elementu.  
  
 Jeśli typ `T` jest typem referencyjnym, `null` można go wypchnąć do <xref:System.Collections.Generic.Stack%601> elementu jako symbol zastępczy, w razie konieczności. Zajmuje miejsce w stosie i jest traktowany jak każdy obiekt.  
  
 Jeśli <xref:System.Collections.Generic.Stack%601.Count%2A> jest mniejsza niż pojemność stosu, <xref:System.Collections.Generic.Stack%601.Push%2A> jest operacją o (1). Jeśli pojemność musi być zwiększona w celu uwzględnienia nowego elementu <xref:System.Collections.Generic.Stack%601.Push%2A> , to operacja o (`n`), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.Push%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerator`1" /> , Który może być używany do iteracji kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` Instrukcja C# języka(`for each` C++w VisualBasic)ukrywazłożonośćmodułówwyliczających.`For Each` W związku z `foreach` tym zaleca się użycie zamiast bezpośredniego manipulowania modułem wyliczającym.  
  
 Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. W tym miejscu <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. W związku z tym przed <xref:System.Collections.IEnumerator.MoveNext%2A> przeczytaniem <xref:System.Collections.Generic.IEnumerator%601.Current%2A>wartości parametru należy wywołać metodę wyliczającą do pierwszego elementu kolekcji.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.IEnumerator.MoveNext%2A> momentu wywołania metody. <xref:System.Collections.IEnumerator.MoveNext%2A>ustawia <xref:System.Collections.Generic.IEnumerator%601.Current%2A> do następnego elementu.  
  
 Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.Collections.IEnumerator.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócone `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> nie jest zdefiniowane. Nie można ponownie <xref:System.Collections.Generic.IEnumerator%601.Current%2A> ustawić na pierwszy element kolekcji; zamiast tego należy utworzyć nowe wystąpienie modułu wyliczającego.  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniony i następne wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> lub <xref:System.Collections.IEnumerator.Reset%2A> wygeneruje <xref:System.InvalidOperationException>.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 Implementacje domyślne kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> programie nie są zsynchronizowane.  
  
 Ta metoda jest operacją O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Jednowymiarowy <see cref="T:System.Array" /> , który jest miejscem docelowym elementów skopiowanych z <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> Musi mieć indeksowanie oparte na zero.</param>
        <param name="arrayIndex">Indeks (liczony od zera) <paramref name="array" /> , w którym rozpoczyna się kopiowanie.</param>
        <summary>Kopiuje elementy <see cref="T:System.Collections.ICollection" /> <see cref="T:System.Array" />do, zaczynając od określonego <see cref="T:System.Array" /> indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Jeśli nie można automatycznie rzutować <xref:System.Collections.ICollection> typu źródła na typ docelowy `array`, nieogólne implementacje <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, podczas gdy ogólna implementacja <xref:System.ArgumentException>zgłasza.  
  
 Ta metoda jest operacją o`n`(), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />jest mniejsza od zera.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" />jest wielowymiarowych.  
  
—lub— 
 <paramref name="array" />nie ma indeksowania opartego na zero.  
  
—lub— 
Liczba elementów w źródle <see cref="T:System.Collections.ICollection" /> jest większa niż dostępne miejsce od <paramref name="arrayIndex" /> do końca miejsca docelowego <paramref name="array" />.  
  
—lub— 
Nie można automatycznie rzutować <see cref="T:System.Collections.ICollection" /> typu źródła na typ docelowy. <paramref name="array" /></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Collections.ICollection" /> czy dostęp do elementu jest synchronizowany (bezpieczny wątkowo).</summary>
        <value><see langword="true" />Jeśli dostęp do programu <see cref="T:System.Collections.ICollection" /> jest synchronizowany (wątek bezpieczny); <see langword="false" />w przeciwnym razie.  W domyślnej implementacji programu <see cref="T:System.Collections.Generic.Stack`1" />ta właściwość zawsze zwraca wartość. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje domyślne kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> programie nie są zsynchronizowane.  
  
 Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.  W rzadkich przypadkach, gdy wyliczenia będą konkurować o z dostępem do zapisu, musisz zablokować kolekcję podczas całego wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>zwraca obiekt, który może służyć do synchronizowania dostępu do <xref:System.Collections.ICollection>elementu. Synchronizacja jest skuteczna tylko wtedy, gdy wszystkie wątki blokują ten obiekt przed uzyskaniem dostępu do kolekcji.  
  
 Pobieranie wartości tej właściwości jest operacją O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Collections.ICollection" />.</summary>
        <value>Obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Collections.ICollection" />.  W domyślnej implementacji programu <see cref="T:System.Collections.Generic.Stack`1" />ta właściwość zawsze zwraca bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje domyślne kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> programie nie są zsynchronizowane.  
  
 Wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.  Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>zwraca obiekt, który może służyć do synchronizowania dostępu do <xref:System.Collections.ICollection>elementu. Synchronizacja jest skuteczna tylko wtedy, gdy wszystkie wątki blokują ten obiekt przed uzyskaniem dostępu do kolekcji. Poniższy kod przedstawia użycie <xref:System.Collections.ICollection.SyncRoot%2A> właściwości dla C#, C++i Visual Basic.  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 Pobieranie wartości tej właściwości jest operacją O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który dokonuje iteracji w kolekcji.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> , Który może być używany do iteracji kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `foreach` Instrukcja C# języka(`for each` C++w VisualBasic)ukrywazłożonośćmodułówwyliczających.`For Each` W związku z `foreach` tym zaleca się użycie zamiast bezpośredniego manipulowania modułem wyliczającym.  
  
 Moduły wyliczające mogą służyć do odczytu danych w kolekcji, ale nie można za ich pomocą modyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. <xref:System.Collections.IEnumerator.Reset%2A>przywraca również moduł wyliczający z powrotem do tego położenia.  W tym miejscu <xref:System.Collections.IEnumerator.Current%2A> nie jest zdefiniowane. W związku z tym przed <xref:System.Collections.IEnumerator.MoveNext%2A> przeczytaniem <xref:System.Collections.IEnumerator.Current%2A>wartości parametru należy wywołać metodę wyliczającą do pierwszego elementu kolekcji.  
  
 <xref:System.Collections.IEnumerator.Current%2A>zwraca ten sam obiekt do <xref:System.Collections.IEnumerator.MoveNext%2A> momentu <xref:System.Collections.IEnumerator.Reset%2A> wywołania metody lub. <xref:System.Collections.IEnumerator.MoveNext%2A>ustawia <xref:System.Collections.IEnumerator.Current%2A> do następnego elementu.  
  
 Jeśli <xref:System.Collections.IEnumerator.MoveNext%2A> przekazuje koniec kolekcji, moduł wyliczający jest umieszczony po ostatnim elemencie w kolekcji i <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Gdy moduł wyliczający znajduje się w tym miejscu, kolejne <xref:System.Collections.IEnumerator.MoveNext%2A> wywołania również `false`zwracają. Jeśli ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócone `false`, <xref:System.Collections.IEnumerator.Current%2A> nie jest zdefiniowane. Aby ponownie <xref:System.Collections.IEnumerator.Current%2A> ustawić na pierwszy element kolekcji, możesz wywołać metodę <xref:System.Collections.IEnumerator.Reset%2A> i <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie lub usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniony i następne wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> lub <xref:System.Collections.IEnumerator.Reset%2A> wygeneruje <xref:System.InvalidOperationException>.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość.  Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania.  Aby zezwolić wielu wątkom na dostęp do kolekcji w celu odczytu i zapisu danych, należy zaimplementować własny mechanizm synchronizacji.  
  
 Implementacje domyślne kolekcji w <xref:System.Collections.Generic?displayProperty=nameWithType> programie nie są zsynchronizowane.  
  
 Ta metoda jest operacją O(1).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> Kopiuje do nowej tablicy.</summary>
        <returns>Nowa tablica zawierająca kopie elementów <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są kopiowane do tablicy w kolejności Last-in-First-Out (LIFO), podobnie jak w kolejności elementów zwracanych przez pomyślne wywołania do <xref:System.Collections.Generic.Stack%601.Pop%2A>.  
  
 Ta metoda jest operacją o`n`(), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje kilka metod <xref:System.Collections.Generic.Stack%601> klasy generycznej, w <xref:System.Collections.Generic.Stack%601.ToArray%2A> tym metodę.  
  
 Przykładowy kod tworzy stos ciągów z pojemnością domyślną i używa <xref:System.Collections.Generic.Stack%601.Push%2A> metody do wypychania pięciu ciągów na stos. Elementy stosu są wyliczane, co nie powoduje zmiany stanu stosu. <xref:System.Collections.Generic.Stack%601.Pop%2A> Metoda jest używana do wypróbowania pierwszego ciągu na stosie. Metoda jest używana do przeszukiwania następnego elementu na stosie, a <xref:System.Collections.Generic.Stack%601.Pop%2A> następnie metoda jest używana do wyłączania. <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 Metoda jest używana do tworzenia tablicy i kopiowania do niej elementów stosu, a następnie tablica jest przenoszona <xref:System.Collections.Generic.Stack%601.%23ctor%2A> do konstruktora, który pobiera <xref:System.Collections.Generic.IEnumerable%601>, tworząc kopię stosu z kolejnością elementów odwróconych. <xref:System.Collections.Generic.Stack%601.ToArray%2A> Zostaną wyświetlone elementy kopiowane.  
  
 Tworzona jest podwójna tablica rozmiaru stosu, a <xref:System.Collections.Generic.Stack%601.CopyTo%2A> Metoda jest używana do kopiowania elementów tablicy, zaczynając od środka tablicy. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> Konstruktor jest ponownie używany do tworzenia kopii stosu z kolejnością elementów odwróconych; w związku z tym trzy elementy null są na końcu.  
  
 Metoda służy do pokazywania, że ciąg "cztery" znajduje się w pierwszej kopii stosu, po <xref:System.Collections.Generic.Stack%601.Clear%2A> której Metoda czyści kopię, a <xref:System.Collections.Generic.Stack%601.Count%2A> Właściwość wskazuje, że stos jest pusty. <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia pojemność na rzeczywistą liczbę elementów w <see cref="T:System.Collections.Generic.Stack`1" />, jeśli ta liczba jest mniejsza niż 90% bieżącej pojemności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody można użyć do zminimalizowania obciążenia pamięci kolekcji, jeśli do kolekcji nie zostaną dodane żadne nowe elementy. Koszt ponownej alokacji i kopiowania dużego <xref:System.Collections.Generic.Stack%601> może być istotny, <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> Dlatego metoda nie robi nic, jeśli lista ma więcej niż 90% pojemności. Pozwala to uniknąć ponoszenia dużego kosztu ponownego alokacji dla stosunkowo małego wzmocnienia.  
  
 Ta metoda jest operacją o`n`(), gdzie `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.  
  
 Aby zresetować <xref:System.Collections.Generic.Stack%601> do stanu początkowego, należy <xref:System.Collections.Generic.Stack%601.Clear%2A> wywołać metodę przed wywołaniem <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> metody. Przycinanie pustego <xref:System.Collections.Generic.Stack%601> zestawu ustawia pojemność <xref:System.Collections.Generic.Stack%601> do pojemności domyślnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
