<Type Name="Comparer&lt;T&gt;" FullName="System.Collections.Generic.Comparer&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3605f22f18741f9d594c6aa830f85604d9b8bf52" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701657" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Comparer&lt;T&gt; : System.Collections.Generic.IComparer&lt;T&gt;, System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Comparer`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IComparer`1&lt;!T&gt;, class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Comparer`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Comparer(Of T)&#xA;Implements IComparer, IComparer(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Comparer abstract : System::Collections::Generic::IComparer&lt;T&gt;, System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type Comparer&lt;'T&gt; = class&#xA;    interface IComparer&#xA;    interface IComparer&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ obiektów do porównania.</typeparam>
    <summary>Udostępnia klasę bazową dla implementacji <see cref="T:System.Collections.Generic.IComparer`1" /> interfejs generyczny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pochodzi z tej klasy, aby zapewnić niestandardową implementację <xref:System.Collections.Generic.IComparer%601> interfejs do użytku z klas kolekcji, takie jak <xref:System.Collections.Generic.SortedList%602> i <xref:System.Collections.Generic.SortedDictionary%602> klas ogólnych.  
  
 Różnica między pochodząca od <xref:System.Collections.Generic.Comparer%601> klasy i wdrażanie <xref:System.IComparable?displayProperty=nameWithType> interfejs jest w następujący sposób:  
  
-   Aby określić, jak dwa obiekty powinny być porównywane domyślnie, należy zaimplementować <xref:System.IComparable?displayProperty=nameWithType> interfejsu w klasie. Daje to gwarancję, że operacjach sortowania będzie używać domyślnego kodu porównania, podane.  
  
-   Aby zdefiniować funkcję porównującą zamiast domyślny moduł porównujący, pochodzi od <xref:System.Collections.Generic.Comparer%601> klasy. Następnie można ten moduł porównujący w operacjach sortowania, przyjmujące funkcję porównującą jako parametr.  
  
 Obiekt zwrócony przez <xref:System.Collections.Generic.Comparer%601.Default%2A> używa właściwości <xref:System.IComparable%601?displayProperty=nameWithType> interfejs ogólny (`IComparable<T>` w języku C# `IComparable(Of T)` w języku Visual Basic) do porównywania dwóch obiektów. Jeśli typ `T` nie implementuje <xref:System.IComparable%601?displayProperty=nameWithType> ogólny interfejs <xref:System.Collections.Generic.Comparer%601.Default%2A> właściwość zwraca <xref:System.Collections.Generic.Comparer%601> , który używa <xref:System.IComparable?displayProperty=nameWithType> interfejsu.  
  
   
  
## Examples  
 Poniższy przykład pochodzi z klasy, `BoxLengthFirst`, z <xref:System.Collections.Generic.Comparer%601> klasy. Ten moduł porównujący porównuje dwa obiekty typu `Box`. Sortuje je najpierw długość, a następnie według wysokość, a następnie szerokości. `Box` Klasy implementuje <xref:System.IComparable%601> interfejs do sterowania domyślnym porównaniem między dwoma `Box` obiektów. Ta domyślna implementacja sortuje, wysokość, a następnie według długości, a następnie według szerokość. W przykładzie przedstawiono różnice między porównania dwóch przez posortowanie listy `Box` obiektów za pomocą `BoxLengthFirst` modułu porównującego i za pomocą domyślna funkcja porównująca.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> i <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> może zachowywać się inaczej pod względem kultury ważność i uwzględnianie wielkości liter.  Dla porównania ciągu <see cref="T:System.StringComparer" /> klasy są zalecane przez <c>modułu porównującego&lt;ciąg&gt;</c>.  Właściwości <see cref="T:System.StringComparer" /> klasy zwracają wstępnie zdefiniowanych wystąpień, które porównywania ciągów z różnymi kombinacjami czułości kultury i uwzględnianie wielkości liter.  Uwzględnianie wielkości liter i ważność kultury są spójne we wszystkich członków tego samego <see cref="T:System.StringComparer" /> wystąpienia.  Aby uzyskać więcej informacji na temat porównań specyficzne dla kultury, zobacz <see cref="N:System.Globalization" /> przestrzeni nazw i [globalizacji i Localization](~/docs/standard/globalization-localization/index.md).</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.StringComparer" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Comparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Comparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Collections.Generic.Comparer`1" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As T, y As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(T x, T y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : 'T * 'T -&gt; int" Usage="comparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="y">Drugi obiekt, który będzie porównywany.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, wykonuje porównanie dwóch obiektów tego samego typu i zwraca wartość wskazującą, czy jeden obiekt jest mniejszy, równy lub większy niż drugi.</summary>
        <returns>Liczba całkowita wskazująca wartości względne <paramref name="x" /> i <paramref name="y" />, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość </term><description> znaczenie </description></listheader><item><term> mniejsza niż zero </term><description><paramref name="x" /> jest mniejsza niż <paramref name="y" />.  </description></item><item><term> Zero </term><description><paramref name="x" /> jest równa <paramref name="y" />.  </description></item><item><term> Większa od zera </term><description><paramref name="x" /> jest większa niż <paramref name="y" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementować tę metodę, aby zapewnić niestandardową sortowania kolejności porównania dla typu `T`.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano funkcję porównującą `Box` obiekty, których można użyć zamiast domyślna funkcja porównująca. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Collections.Generic.Comparer%601> klasy.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]
 [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Typ <paramref name="T" /> nie implementuje albo <see cref="T:System.IComparable`1" /> ogólny interfejs lub <see cref="T:System.IComparable" /> interfejsu.</exception>
        <block subset="none" type="overrides">
          <para>Porównywanie <see langword="null" /> za pomocą dowolnego odwołania do typu jest dozwolone i nie generuje wyjątek. Odwołanie o wartości null jest uważana za mniejszą od wszelkich odwołania, który nie ma wartości null.  Aby uzyskać informacje dotyczące porównania specyficznego dla kultury, zobacz <see cref="N:System.Globalization" /> przestrzeni nazw i [globalizacji i Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Create (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Comparer`1&lt;!T&gt; Create(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (comparison As Comparison(Of T)) As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::Comparer&lt;T&gt; ^ Create(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="static member Create : Comparison&lt;'T&gt; -&gt; System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Create comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">Porównania do użycia.</param>
        <summary>Tworzy funkcję porównującą przy użyciu określonego porównania.</summary>
        <returns>Nowy moduł porównujący.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.Comparer`1&lt;!T&gt; Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Comparer`1.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As Comparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::Comparer&lt;T&gt; ^ Default { System::Collections::Generic::Comparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.Generic.Comparer&lt;'T&gt;" Usage="System.Collections.Generic.Comparer&lt;'T&gt;.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Comparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca domyślne sortowanie porównania zamówienia dla typu określonego przez argument ogólny.</summary>
        <value>Obiekt, który dziedziczy <see cref="T:System.Collections.Generic.Comparer`1" /> i służy jako modułu porównującego kolejność sortowania dla typu <paramref name="T" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Comparer%601> Zwracane przez tę właściwość używa <xref:System.IComparable%601?displayProperty=nameWithType> interfejs ogólny (`IComparable<T>` w języku C# `IComparable(Of T)` w języku Visual Basic) do porównywania dwóch obiektów. Jeśli typ `T` nie implementuje <xref:System.IComparable%601?displayProperty=nameWithType> interfejs ogólny, właściwość ta zwraca <xref:System.Collections.Generic.Comparer%601> , który używa <xref:System.IComparable?displayProperty=nameWithType> interfejsu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Collections.Generic.Comparer%601.Default%2A> właściwość, aby pobrać obiekt, który wykonuje porównanie domyślne. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Collections.Generic.Comparer%601> klasy.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Dla porównania ciągu <see cref="T:System.StringComparer" /> klasy są zalecane przez <c>modułu porównującego&lt;ciąg&gt; </c> (<c>porównania (Of String)</c> w języku Visual Basic).  Właściwości <see cref="T:System.StringComparer" /> klasy zwracają wstępnie zdefiniowanych wystąpień, które porównywania ciągów z różnymi kombinacjami czułości kultury i uwzględnianie wielkości liter.  Uwzględnianie wielkości liter i ważność kultury są spójne we wszystkich członków tego samego <see cref="T:System.StringComparer" /> wystąpienia.  Aby uzyskać więcej informacji na temat porównań specyficzne dla kultury, zobacz <see cref="N:System.Globalization" /> przestrzeni nazw i [globalizacji i Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="y">Drugi obiekt, który będzie porównywany.</param>
        <summary>Porównuje dwa obiekty i zwraca wartość wskazującą, czy dany obiekt jest mniejszy niż równy lub większy niż drugi.</summary>
        <returns>Liczba całkowita wskazująca wartości względne <paramref name="x" /> i <paramref name="y" />, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość </term><description> znaczenie </description></listheader><item><term> mniejsza niż zero </term><description><paramref name="x" /> jest mniejsza niż <paramref name="y" />.  </description></item><item><term> Zero </term><description><paramref name="x" /> jest równa <paramref name="y" />.  </description></item><item><term> Większa od zera </term><description><paramref name="x" /> jest większa niż <paramref name="y" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest otoką <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> metody, więc `obj` musi być rzutowany na typ określony przez argument ogólny `T` bieżącego wystąpienia. Jeśli nie można rzutować `T`, <xref:System.ArgumentException> zgłaszany.  
  
 Porównywanie `null` za pomocą dowolnego odwołania do typu jest dozwolone i nie generuje wyjątek. Podczas sortowania `null` jest uważany za mniej niż jakikolwiek inny obiekt.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> metodę, aby porównać dwa obiekty. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Collections.Generic.Comparer%601> klasy.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]
 [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="x" /> lub <paramref name="y" /> jest typu, który nie może być rzutowany na typ <paramref name="T" />.  - lub - <paramref name="x" /> i <paramref name="y" /> nie należy implementować albo <see cref="T:System.IComparable`1" /> ogólny interfejs lub <see cref="T:System.IComparable" /> interfejsu.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)" /> i <see cref="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)" /> działają inaczej niż pod względem kultury ważność i uwzględnianie wielkości liter.  Dla porównania ciągu <see cref="T:System.StringComparer" /> klasy są zalecane przez <c>modułu porównującego&lt;ciąg&gt;</c>.  Właściwości <see cref="T:System.StringComparer" /> klasy zwracają wstępnie zdefiniowanych wystąpień, które porównywania ciągów z różnymi kombinacjami czułości kultury i uwzględnianie wielkości liter.  Uwzględnianie wielkości liter i ważność kultury są spójne we wszystkich członków tego samego <see cref="T:System.StringComparer" /> wystąpienia.  Aby uzyskać więcej informacji na temat porównań specyficzne dla kultury, zobacz <see cref="N:System.Globalization" /> przestrzeni nazw i [globalizacji i Localization](~/docs/standard/globalization-localization/index.md).</para>
        </block>
        <altmember cref="T:System.StringComparer" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>