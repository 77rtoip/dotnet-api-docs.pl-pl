<Type Name="InvalidCastException" FullName="System.InvalidCastException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7906f31b11cbf95ef8c0899681cd7c2ecc491667" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30744047" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvalidCastException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidCastException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidCastException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidCastException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidCastException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek zgłaszany Nieprawidłowe rzutowanie lub jawnej konwersji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework obsługuje automatyczną konwersję z typów pochodnych na typy podstawowe i z powrotem na typ pochodny oraz z typów, które są dostępne interfejsy do interfejsu obiektów i wykonać ich kopię. Zawiera także różne mechanizmy, które obsługuje niestandardowe konwersji. Aby uzyskać więcej informacji, zobacz [typ konwersji w programie .NET Framework](~/docs/standard/base-types/type-conversion.md).  
  
 <xref:System.InvalidCastException> Wyjątek podczas konwersji wystąpienia jednego typu na inny typ jest nieobsługiwany. Na przykład próby konwersji <xref:System.Char> do wartości <xref:System.DateTime> wartość zgłasza <xref:System.InvalidCastException> wyjątku. Różni się od <xref:System.OverflowException> wyjątek, który jest generowany, gdy jest obsługiwana konwersja typu jeden do innego, ale wartość typu źródła znajduje się poza zakresem typu docelowego.  <xref:System.InvalidCastException> Wyjątku jest spowodowany przez błąd projektanta i nie powinny być obsługiwane w `try/catch` zablokować; zamiast tego przyczyną wyjątku powinny zostać usunięte.  
  
 Informacje o konwersji obsługiwane przez system, zobacz <xref:System.Convert> klasy. Dla błędów występujących podczas docelowego może przechowywać typ źródła wartości, ale nie jest duży do przechowywania wartości z określonego źródła, zobacz <xref:System.OverflowException> wyjątku.  
  
> [!NOTE]
>  W wielu przypadkach kompilujący języka wykrywa, że brak konwersji między typu źródłowego i docelowego i generuje błąd kompilatora.  
  
 Niektóre warunki, w których zgłasza próba konwersji <xref:System.InvalidCastException> wyjątek omówiono w następujących sekcjach:  
  
 [Typy pierwotne i IConvertible](#Primitive)   
 [Metoda Convert.ChangeType](#ChangeType)   
 [Zawężanie konwersji i implementacje IConvertible](#Narrowing)   
 [Rzutowanie w dół](#Downcasting)   
 [Konwersja z obiektu interfejsu](#Interface)   
 [Konwersja ciągu](#String)   
 [Visual Basic 6.0 migracji](#Migration)  
  
 Na potrzeby konwersji jawnego odwołania do pomyślnego, wartość źródła musi być `null`, lub typ obiektu odwołuje się argument źródła musi być możliwe do przekonwertowania na typ docelowy przez niejawnej konwersji odwołania.  
  
 Poniższe instrukcje języku pośrednim (IL) throw <xref:System.InvalidCastException> wyjątek:  
  
-   `castclass`  
  
-   `refanyval`  
  
-   `unbox`  
  
 <xref:System.InvalidCastException> używa COR_E_INVALIDCAST HRESULT, która ma wartość 0x80004002.  
  
 Aby uzyskać listę początkowe wartości właściwości dla wystąpienia <xref:System.InvalidCastException>, zobacz <xref:System.InvalidCastException.%23ctor%2A> konstruktorów.  
  
<a name="Primitive"></a>   
## <a name="primitive-types-and-iconvertible"></a>Typy pierwotne i IConvertible  
 Możesz bezpośrednio lub pośrednio wywoływać typem pierwotnym <xref:System.IConvertible> implementację, która nie obsługuje określonej konwersji. Na przykład próby konwersji <xref:System.Boolean> do wartości <xref:System.Char> lub <xref:System.DateTime> do wartości <xref:System.Int32> zgłasza <xref:System.InvalidCastException> wyjątku. Poniższy przykład wywołuje zarówno <xref:System.Boolean.System%23IConvertible%23ToChar%2A?displayProperty=nameWithType> i <xref:System.Convert.ToChar%28System.Boolean%29?displayProperty=nameWithType> metod do konwertowania <xref:System.Boolean> do wartości <xref:System.Char>. W obu przypadkach zgłasza wyjątek, wywołanie metody <xref:System.InvalidCastException> wyjątku.  
  
 [!code-csharp[System.InvalidCastException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/iconvertible1.cs#2)]
 [!code-vb[System.InvalidCastException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/iconvertible1.vb#2)]  
  
 Konwersja nie jest obsługiwane, nie istnieje obejście.  
  
<a name="ChangeType"></a>   
## <a name="the-convertchangetype-method"></a>Metoda Convert.ChangeType  
 Została wywołana <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> nie implementują metodę, aby przekonwertować obiektu z jednego typu do innego, ale jeden lub oba typy <xref:System.IConvertible> interfejsu.  
  
 W większości przypadków ponieważ konwersja nie jest obsługiwana, nie istnieje obejście. W niektórych przypadkach możliwym obejściem jest ręczne ich przypisywanie wartości właściwości typu źródłowego do podobnych właściwości typu docelowego.  
  
<a name="Narrowing"></a>   
## <a name="narrowing-conversions-and-iconvertible-implementations"></a>Zawężanie konwersji i implementacje IConvertible  
 Operatory zawężającej zdefiniuj jawne konwersje obsługiwane przez typ.  Operator rzutowania w języku C# lub `CType` metody konwersji w języku Visual Basic (Jeśli `Option Strict` znajduje się na) jest wymagane do przeprowadzenia konwersji.  
  
 Jednakże, jeśli typ docelowy ani typu źródłowego definiuje jawnego lub zawężanie konwersji między tymi dwoma typami i <xref:System.IConvertible> wdrażania jednego lub obu typów nie obsługuje konwersji z typu źródłowego na typ docelowy <xref:System.InvalidCastException>wyjątku.  
  
 W większości przypadków ponieważ konwersja nie jest obsługiwana, nie istnieje obejście.  
  
<a name="Downcasting"></a>   
## <a name="downcasting"></a>Rzutowanie w dół  
 Jesteś rzutowanie w dół, oznacza to, że próby konwersji wystąpienia typu podstawowego do jednego z jego typów pochodnych. W poniższym przykładzie próby konwersji `Person` do obiektu `PersonWithID` obiekt kończy się niepowodzeniem.  
  
 [!code-csharp[System.InvalidCastException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/basetoderived1.cs#1)]
 [!code-vb[System.InvalidCastException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/basetoderived1.vb#1)]  
  
 Jak pokazano na przykład, przypisanie elementu podrzędnego powiedzie się tylko wtedy, gdy `Person` obiekt został utworzony przez rozszerzające z `PersonWithId` do obiektu `Person` obiekt, lub jeśli `Person` obiekt jest `null`.  
  
<a name="Interface"></a>   
## <a name="conversion-from-an-interface-object"></a>Konwersja z obiektu interfejsu  
 Próbujesz konwertować obiektu interfejsu do typu, który implementuje ten interfejs, ale typ docelowy nie jest tego samego typu lub klasy podstawowej typu, w którym pierwotnie został utworzony obiekt interfejsu. Poniższy przykład zwraca <xref:System.InvalidCastException> wyjątek podczas próby konwersji <xref:System.IFormatProvider> do obiektu <xref:System.Globalization.DateTimeFormatInfo> obiektu. Konwersja nie powiedzie się, ponieważ mimo że <xref:System.Globalization.DateTimeFormatInfo> klasa implementuje <xref:System.IFormatProvider> interfejsu <xref:System.Globalization.DateTimeFormatInfo> obiektu nie jest powiązana z <xref:System.Globalization.CultureInfo> klasy, z którego został utworzony obiekt interfejsu.  
  
 [!code-csharp[System.InvalidCastException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/Interface1.cs#3)]
 [!code-vb[System.InvalidCastException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/Interface1.vb#3)]  
  
 Ponieważ wyjątek komunikat oznacza, konwersja powiedzie się tylko wtedy, gdy obiekt interfejsu jest konwertowana z powrotem do wystąpienia typu oryginalnej, w tym przypadku <xref:System.Globalization.CultureInfo>. Konwersja powiedzie się także, jeśli obiekt interfejsu jest konwertowana na wystąpienie typu podstawowego oryginalnego typu.  
  
<a name="String"></a>   
## <a name="string-conversions"></a>Konwersja ciągu  
 Próbujesz konwertować wartość lub obiekt reprezentacji ciągu przy użyciu operatora rzutowania w języku C#. W poniższym przykładzie, próba można rzutować <xref:System.Char> wartość ciągu i podjęcie próby rzutowanie liczby całkowitej w celu throw ciąg <xref:System.InvalidCastException> wyjątku.  
  
 [!code-csharp[System.InvalidCastException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString1.cs#4)]  
  
> [!NOTE]
>  Za pomocą Visual Basic `CStr` operator można przekonwertować wartości typu pierwotnego do ciągu zakończy się pomyślnie. Operacja nie zgłasza <xref:System.InvalidCastException> wyjątku.  
  
 Aby pomyślnie konwertowania instancję dowolnego typu do reprezentacji ciągu wywołać jej `ToString` metoda, jak w poniższym przykładzie wykonuje.  `ToString` Metody występuje zawsze, od momentu <xref:System.Object.ToString%2A> metody jest definiowana za pomocą <xref:System.Object> klasy i dlatego jest dziedziczone lub zastąpione przez wszystkie typy zarządzane.  
  
 [!code-csharp[System.InvalidCastException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString2.cs#5)]  
  
<a name="Migration"></a>   
## <a name="visual-basic-60-migration"></a>Visual Basic 6.0 migracji  
 Uaktualnianie aplikacji Visual Basic 6.0, w wyniku wywołania zdarzenie niestandardowe w formancie użytkownika do programu Visual Basic .NET i <xref:System.InvalidCastException> wyjątek z komunikatem, "określone rzutowanie jest nieprawidłowy." Aby wyeliminować ten wyjątek, zmień wiersz kodu w formularzu (takie jak `Form1`)  
  
```  
Call UserControl11_MyCustomEvent(UserControl11, New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 i zamień ją na następujący wiersz kodu:  
  
```  
Call UserControl11_MyCustomEvent(UserControl11(0), New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A> właściwość nowego wystąpienia dostarczony przez system komunikat, który opisuje błąd, takie jak "Nie można rzutować typu źródłowego na typ docelowy." Ten komunikat uwzględnia bieżącą kulturę systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.InvalidCastException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który opisuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> klasy z powodu określonego błędu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A?displayProperty=nameWithType> właściwość nowego przy użyciu wyjątek `message` parametru. Zawartość `message` ma na celu rozumiane przez człowieka. Obiekt wywołujący tego konstruktora jest wymagany w celu zagwarantowania, że ten ciąg został zlokalizowany w bieżącej kulturze systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.InvalidCastException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidCastException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidCastException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt zawierający dane serializowanego obiektu.</param>
        <param name="context">Informacje kontekstowe o źródłowego lub miejscu docelowym.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> z zserializowanymi danymi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływana podczas deserializacji do odtworzenia obiektu wyjątku przesyłanego za pomocą strumienia. Aby uzyskać więcej informacji, zobacz [XML i serializacji SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie wyjaśniający przyczynę wyjątku.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <c>innerException</c> parametr nie jest <see langword="null" />, bieżący wyjątek jest zgłaszany w <see langword="catch" /> bloku, który obsługuje wyjątek wewnętrzny.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> z określonego komunikatu o błędzie i odwołania do wyjątek wewnętrzny będący przyczyną tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek zgłaszany bezpośrednio w wyniku poprzedniego wyjątku powinien zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. <xref:System.Exception.InnerException%2A> Właściwość zwraca tę samą wartość, który jest przekazywany do konstruktora lub zwraca `null` Jeśli <xref:System.Exception.InnerException%2A> właściwości nie dostarcza do konstruktora wartości wyjątku wewnętrznego.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.InvalidCastException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, errorCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, int errorCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który wskazuje Przyczyna wyjątek wystąpił.</param>
        <param name="errorCode">Wartość kodu (HRESULT) błąd skojarzona z wyjątkiem.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.InvalidCastException" /> klasy przy użyciu określonego komunikatu i błąd kodu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A?displayProperty=nameWithType> właściwość nowego przy użyciu wyjątek `message` parametru. Zawartość `message` ma na celu rozumiane przez człowieka. Obiekt wywołujący tego konstruktora jest wymagany w celu zagwarantowania, że ten ciąg został zlokalizowany w bieżącej kulturze systemu.  
  
 Ten konstruktor dostarcza wartość HRESULT, która jest dostępna dla obiektów dziedziczących z <xref:System.InvalidCastException> klasy za pomocą chronionej <xref:System.Exception.HResult%2A> właściwość <xref:System.Exception> klasy.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.InvalidCastException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>