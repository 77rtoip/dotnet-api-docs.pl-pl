<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d3bee1721752f1378e182ae08c7080273500342" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420921" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="512dc-101">Wskazuje, że Wyliczenie może być traktowane jako pole bitowe; oznacza to zestaw flag.</span><span class="sxs-lookup"><span data-stu-id="512dc-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="512dc-102">Pola bitowe są zwykle używane dla list elementów, które mogą wystąpić w połączeniu, podczas gdy stałe wyliczenia są zwykle używane dla list wzajemnie wykluczających się elementów.</span><span class="sxs-lookup"><span data-stu-id="512dc-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="512dc-103">W związku z tym pola bitowe są przeznaczone do łączenia z bitowe lub operacjami do generowania nienazwanych wartości, natomiast wyliczane stałe nie są.</span><span class="sxs-lookup"><span data-stu-id="512dc-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="512dc-104">Języki różnią się w zależności od użycia pól bitowych w porównaniu z stałymi wyliczeniami.</span><span class="sxs-lookup"><span data-stu-id="512dc-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="512dc-105">Atrybuty FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="512dc-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="512dc-106"><xref:System.AttributeUsageAttribute>stosuje się do tej klasy, a jej <xref:System.AttributeUsageAttribute.Inherited%2A> Właściwość określa `false`.</span><span class="sxs-lookup"><span data-stu-id="512dc-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="512dc-107">Ten atrybut może być stosowany tylko do wyliczeń.</span><span class="sxs-lookup"><span data-stu-id="512dc-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="512dc-108">Wytyczne dotyczące FlagsAttribute i wyliczenia</span><span class="sxs-lookup"><span data-stu-id="512dc-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="512dc-109">Użyj atrybutu <xref:System.FlagsAttribute> niestandardowego dla wyliczenia tylko wtedy, gdy operacja bitowa (oraz, lub, wyłączny lub) ma być wykonywana na wartości liczbowej.</span><span class="sxs-lookup"><span data-stu-id="512dc-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="512dc-110">Zdefiniuj stałe wyliczenia w uprawnieniach dwóch, czyli 1, 2, 4, 8 itd.</span><span class="sxs-lookup"><span data-stu-id="512dc-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="512dc-111">Oznacza to, że poszczególne flagi w połączonych stałych wyliczenia nie nakładają się na siebie.</span><span class="sxs-lookup"><span data-stu-id="512dc-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="512dc-112">Rozważ utworzenie stałej wyliczenia dla często używanych kombinacji flag.</span><span class="sxs-lookup"><span data-stu-id="512dc-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="512dc-113">Na przykład jeśli masz Wyliczenie używane dla operacji we/wy na plikach, które zawierają wyliczenia stałe `Read = 1` i `Write = 2`Rozważ utworzenie `Read` stałej `ReadWrite = Read OR Write`wyliczenia, która łączy i `Write` znaczników.</span><span class="sxs-lookup"><span data-stu-id="512dc-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="512dc-114">Ponadto bitowe lub operacje używane do łączenia flag mogą być uznawane za zaawansowaną koncepcję w pewnych okolicznościach, które nie powinny być wymagane w przypadku prostych zadań.</span><span class="sxs-lookup"><span data-stu-id="512dc-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="512dc-115">Należy zachować ostrożność, jeśli zdefiniujesz liczbę ujemną jako stałą jako flagę, ponieważ wiele pozycji flagi może być ustawiona na 1, co może sprawiać, że kod jest mylący i zachęca do błędów kodowania.</span><span class="sxs-lookup"><span data-stu-id="512dc-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="512dc-116">Wygodnym sposobem sprawdzenia, czy flaga jest ustawiona w wartości liczbowej, jest wykonywanie bitowe i operacja między wartością liczbową a stałą flagą, która ustawia wszystkie bity w wartości liczbowej na zero, które nie odpowiadają fladze , a następnie sprawdź, czy wynik tej operacji jest równy stałemu wyliczeniowi flagi.</span><span class="sxs-lookup"><span data-stu-id="512dc-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="512dc-117">Użyj `None` jako nazwy stałej wyliczeniowej flagi, której wartość jest równa zero.</span><span class="sxs-lookup"><span data-stu-id="512dc-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="512dc-118">Nie można użyć `None` stałej wyliczenia w koniunkcji bitowej i do przetestowania flagi, ponieważ wynik jest zawsze równy zero.</span><span class="sxs-lookup"><span data-stu-id="512dc-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="512dc-119">Można jednak wykonać logiczne, a nie bitowe, porównanie między wartością liczbową i `None` stałą wyliczaną, aby określić, czy wszystkie bity w wartości liczbowej są ustawione.</span><span class="sxs-lookup"><span data-stu-id="512dc-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="512dc-120">Jeśli tworzysz Wyliczenie wartości zamiast wyliczenia flag, nadal będzie wartościowa do utworzenia `None` stałej wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="512dc-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="512dc-121">Przyczyną jest to, że domyślnie pamięć użyta do wyliczenia jest inicjowana do zera przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="512dc-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="512dc-122">W związku z tym, jeśli nie zdefiniujesz stałej, której wartość wynosi zero, Wyliczenie będzie zawierać niedozwoloną wartość podczas tworzenia.</span><span class="sxs-lookup"><span data-stu-id="512dc-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="512dc-123">W przypadku oczywistego domyślnego przypadku, gdy aplikacja musi reprezentować, rozważ użycie stałej wyliczenia, której wartość jest równa zero, aby reprezentować wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="512dc-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="512dc-124">Jeśli nie ma domyślnego przypadku, rozważ użycie stałej wyliczenia, której wartość jest równa zero, co oznacza, że przypadek nie jest reprezentowany przez żadną z innych wyliczeniowe stałe.</span><span class="sxs-lookup"><span data-stu-id="512dc-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="512dc-125">Nie należy definiować wartości wyliczenia wyłącznie w celu dublowania stanu samego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="512dc-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="512dc-126">Na przykład nie należy definiować stałej wyliczenia, która jedynie oznacza koniec wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="512dc-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="512dc-127">Jeśli musisz określić ostatnią wartość wyliczenia, sprawdź tę wartość jawnie.</span><span class="sxs-lookup"><span data-stu-id="512dc-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="512dc-128">Ponadto można przeprowadzić Sprawdzanie zakresu dla pierwszej i ostatniej wyliczanej stałej, jeśli wszystkie wartości w zakresie są prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="512dc-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="512dc-129">Nie określaj stałych, które są zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="512dc-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="512dc-130">Podczas definiowania metody lub właściwości, która pobiera stałą jako wartość, należy rozważyć sprawdzenie poprawności wartości.</span><span class="sxs-lookup"><span data-stu-id="512dc-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="512dc-131">Przyczyną jest to, że można rzutować wartość liczbową na typ wyliczeniowy, nawet jeśli ta wartość liczbowa nie jest zdefiniowana w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="512dc-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="512dc-132">Poniższy przykład ilustruje `FlagsAttribute` użycie atrybutu i pokazuje wpływ <xref:System.Enum.ToString%2A> na <xref:System.Enum> metodę użycia `FlagsAttribute` w deklaracji.</span><span class="sxs-lookup"><span data-stu-id="512dc-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="512dc-133">W poniższym przykładzie zdefiniowano dwa wyliczenia `SingleHue` związane z kolorami i. `MultiHue`</span><span class="sxs-lookup"><span data-stu-id="512dc-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="512dc-134">Ten ostatni ma `FlagsAttribute` atrybut; poprzedni nie.</span><span class="sxs-lookup"><span data-stu-id="512dc-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="512dc-135">W przykładzie pokazano różnicę w działaniu, gdy zakres liczb całkowitych, w tym liczby całkowite, które nie reprezentują bazowych wartości typu wyliczenia, są rzutowane na typ wyliczenia i wyświetlane są ich reprezentacje ciągów.</span><span class="sxs-lookup"><span data-stu-id="512dc-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="512dc-136">Na przykład należy zauważyć, że 3 nie może być reprezentowane `SingleHue` jako wartość, ponieważ 3 nie jest podstawową wartością żadnego `SingleHue` elementu członkowskiego, `FlagsAttribute` natomiast atrybut `MultiHue` umożliwia reprezentowanie 3 jako wartości `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="512dc-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="512dc-137">Inicjuje nowe wystąpienie klasy <see cref="T:System.FlagsAttribute" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="512dc-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="512dc-138">W poniższym przykładzie zdefiniowano `PhoneService` Wyliczenie reprezentujące formy komunikacji dostarczonej przez firmę telefoniczną.</span><span class="sxs-lookup"><span data-stu-id="512dc-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="512dc-139">Inicjuje on trzy zmienne reprezentujące usługę przewidzianą dla trzech różnych gospodarstw domowych, a następnie wskazuje, które gospodarstwa domowe nie mają usługi, w której gospodarstwa domowe mają tylko usługi telefonów komórkowych, i które gospodarstwa domowe mają zarówno telefon komórkowy, jak i usługa linia lądowa.</span><span class="sxs-lookup"><span data-stu-id="512dc-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="512dc-140">Na koniec niejawnie wywołuje <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodę w celu wyświetlenia typów usług udostępnianych każdemu gospodarstwu domowemu.</span><span class="sxs-lookup"><span data-stu-id="512dc-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="512dc-141">Poniższy przykład ilustruje `FlagsAttribute` użycie atrybutu i pokazuje wpływ <xref:System.Enum.ToString%2A> na <xref:System.Enum> metodę użycia `FlagsAttribute` w deklaracji.</span><span class="sxs-lookup"><span data-stu-id="512dc-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
