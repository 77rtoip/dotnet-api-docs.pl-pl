<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b2417901d3ec970c72a2c6cc0524b2108855ce0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431667" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="51ffd-101">Wskazuje, że wyliczenie może być traktowana jako pole bitowe; oznacza to, że zestaw flag.</span>
      <span class="sxs-lookup">
        <span data-stu-id="51ffd-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51ffd-102">Pola bitowe są zazwyczaj używane do listę elementów, które mogą wystąpić w połączeniu, podczas gdy wyliczenie stałe są zazwyczaj używane do listy elementów wykluczają się wzajemnie.</span><span class="sxs-lookup"><span data-stu-id="51ffd-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="51ffd-103">W związku z tym pól bitowych są przeznaczone do można łączyć z operacji lub do generowania wartości bez nazwy, nie są stałych wyliczeniowych.</span><span class="sxs-lookup"><span data-stu-id="51ffd-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="51ffd-104">Języki różnią się w ich użyciem pól bitowych w porównaniu do wyliczenia stałe.</span><span class="sxs-lookup"><span data-stu-id="51ffd-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="51ffd-105">Atrybuty FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="51ffd-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="51ffd-106"><xref:System.AttributeUsageAttribute> jest stosowany do tej klasy, a jego <xref:System.AttributeUsageAttribute.Inherited%2A> określa właściwości `false`.</span><span class="sxs-lookup"><span data-stu-id="51ffd-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="51ffd-107">Ten atrybut można stosować tylko do wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="51ffd-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="51ffd-108">Wytyczne dotyczące FlagsAttribute i wyliczenia</span><span class="sxs-lookup"><span data-stu-id="51ffd-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="51ffd-109">Użyj <xref:System.FlagsAttribute> atrybutu niestandardowego wyliczania tylko wtedy, gdy operacja bitowa (AND, OR wyłączne lub) ma zostać wykonane na wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="51ffd-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="51ffd-110">Zdefiniuj wyliczenie stałe w potęgami liczby dwa, oznacza to, 1, 2, 4, 8 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="51ffd-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="51ffd-111">Oznacza to, że indywidualne flagi w stałych Scalonej wyliczenia nie mogą się pokrywać.</span><span class="sxs-lookup"><span data-stu-id="51ffd-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="51ffd-112">Należy rozważyć utworzenie wyliczany stała dla często używanych flagi kombinacji.</span><span class="sxs-lookup"><span data-stu-id="51ffd-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="51ffd-113">Na przykład, jeśli masz wyliczenie używane dla operacji We/Wy pliku zawierającego stałych wyliczeniowych `Read = 1` i `Write = 2`, należy rozważyć utworzenie Stała wyliczeniowa `ReadWrite = Read OR Write`, który łączy `Read` i `Write` flagi.</span><span class="sxs-lookup"><span data-stu-id="51ffd-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="51ffd-114">Ponadto używane do łączenia z flagami operacji lub może zostać uznane za zaawansowane koncepcji w pewnych okolicznościach, które nie powinny być wymagane dla prostych zadań.</span><span class="sxs-lookup"><span data-stu-id="51ffd-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="51ffd-115">Należy zachować ostrożność, jeśli zdefiniować liczbą ujemną jako stała wyliczenia flag, ponieważ wielu pozycji flagi może być ustawiony na 1, co może zwiększyć mylące kodu i zachęca błędy kodowania.</span><span class="sxs-lookup"><span data-stu-id="51ffd-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="51ffd-116">Jest to wygodny sposób sprawdzić, czy ustawiono flagę w wartość liczbową do wykonania operacji i między wartość liczbową i stała wyliczenia flagi, ustawiająca wszystkie bity w wartość liczbową na zero, które nie odpowiadają flagi , następnie sprawdzić, czy wynik tej operacji jest równa stała wyliczenia flagi.</span><span class="sxs-lookup"><span data-stu-id="51ffd-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="51ffd-117">Użyj `None` jako nazwa flagi wyliczyć stała, którego wartość wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="51ffd-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="51ffd-118">Nie można użyć `None` stała wyliczenia w operacji i do testowania dla flagi, ponieważ wynik to zawsze zero.</span><span class="sxs-lookup"><span data-stu-id="51ffd-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="51ffd-119">Jednak można wykonać operatorów logicznych, nie bitowe, porównania wartości liczbowych i `None` stała wyliczany można określić, czy wszystkie bity w wartość liczbową zostały ustawione.</span><span class="sxs-lookup"><span data-stu-id="51ffd-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="51ffd-120">Jeśli tworzysz wyliczenia wartości, zamiast wyliczenia flag, warto nadal można utworzyć `None` stała wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="51ffd-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="51ffd-121">Przyczyną jest to, że domyślnie pamięć używana na potrzeby wyliczenia ustawiana jest wartość zero przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="51ffd-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="51ffd-122">W związku z tym jeśli nie zostanie zdefiniowana stałą, którego wartość wynosi zero, wyliczenia będzie zawierać niedozwoloną wartość, po jego utworzeniu.</span><span class="sxs-lookup"><span data-stu-id="51ffd-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="51ffd-123">Jeśli domyślny oczywisty przypadek aplikacji musi reprezentować, rozważ użycie stała wyliczenia, którego wartość wynosi zero, aby reprezentować wartość domyślna.</span><span class="sxs-lookup"><span data-stu-id="51ffd-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="51ffd-124">Jeśli nie ma żadnych domyślne działanie case, należy rozważyć użycie stała wyliczenia, którego wartość wynosi zero, który oznacza przypadek, który nie jest reprezentowany przez żaden z innych stałych wyliczeniowych.</span><span class="sxs-lookup"><span data-stu-id="51ffd-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="51ffd-125">Definiuje wartości wyliczenia wyłącznie w celu utworzenia duplikatów stan wyliczenia sam.</span><span class="sxs-lookup"><span data-stu-id="51ffd-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="51ffd-126">Na przykład nie definiują wyliczany stałą, której jedynie oznacza koniec wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="51ffd-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="51ffd-127">Jeśli trzeba określić ostatniej wartości wyliczenia, sprawdź jawnie dla tej wartości.</span><span class="sxs-lookup"><span data-stu-id="51ffd-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="51ffd-128">Ponadto można wykonać sprawdzania zakresu stała wyliczenia imię i nazwisko, jeśli wszystkie wartości w zakresie są prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="51ffd-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="51ffd-129">Nie określaj wyliczone stałe, które są zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="51ffd-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="51ffd-130">Podczas definiowania metody lub właściwości, która ma stałą wyliczone jako wartość, należy wziąć pod uwagę sprawdzania poprawności wartości.</span><span class="sxs-lookup"><span data-stu-id="51ffd-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="51ffd-131">Dzieje się tak można rzutować wartość liczbową na typ wyliczeniowy nawet, jeśli nie zdefiniowano wartości numerycznych w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="51ffd-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51ffd-132">Poniższy przykład przedstawia użycie `FlagsAttribute` atrybutu i pokazuje wpływ na <xref:System.Enum.ToString%2A> przy użyciu metody `FlagsAttribute` na <xref:System.Enum> deklaracji.</span><span class="sxs-lookup"><span data-stu-id="51ffd-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="51ffd-133">W poniższym przykładzie zdefiniowano dwa wyliczenia dotyczące kolorów `SingleHue` i `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="51ffd-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="51ffd-134">Ma to drugie `FlagsAttribute` atrybutu; poprzednie nie.</span><span class="sxs-lookup"><span data-stu-id="51ffd-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="51ffd-135">W przykładzie przedstawiono różnice w zachowaniu, gdy zakres liczb całkowitych, w tym liczby całkowite, które nie reprezentują wartości podstawowych typu wyliczenia są Rzutowanie na typ wyliczeniowy i ich oświadczenia ciąg wyświetlany.</span><span class="sxs-lookup"><span data-stu-id="51ffd-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="51ffd-136">Na przykład, należy pamiętać, że 3 nie może być reprezentowany jako `SingleHue` wartości, ponieważ 3 nie jest odpowiednia wartość dowolnego `SingleHue` elementu członkowskiego, natomiast `FlagsAttribute` atrybutu umożliwia reprezentują 3 jako `MultiHue` wartość `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="51ffd-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="51ffd-137">Inicjuje nowe wystąpienie klasy <see cref="T:System.FlagsAttribute" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51ffd-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="51ffd-138">W poniższym przykładzie zdefiniowano `PhoneService` wyliczenie reprezentujące form komunikacji dostarczone przez firmę telefonu.</span><span class="sxs-lookup"><span data-stu-id="51ffd-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="51ffd-139">Inicjuje trzy zmienne reprezentujący świadczoną na trzy różne domowych i wskazuje, które domowych mieć żadnej usługi, które domowych mają tylko telefon komórkowy usługi i które domowych zarówno telefonu komórkowego, jak i ziemi usługi wiersza.</span><span class="sxs-lookup"><span data-stu-id="51ffd-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="51ffd-140">Na koniec niejawnie wywołuje <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodę, aby wyświetlić typy usługi dla każdego gospodarstwa domowego.</span><span class="sxs-lookup"><span data-stu-id="51ffd-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="51ffd-141">Poniższy przykład przedstawia użycie `FlagsAttribute` atrybutu i pokazuje wpływ na <xref:System.Enum.ToString%2A> przy użyciu metody `FlagsAttribute` na <xref:System.Enum> deklaracji.</span><span class="sxs-lookup"><span data-stu-id="51ffd-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>