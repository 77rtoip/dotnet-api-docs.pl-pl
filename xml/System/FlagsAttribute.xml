<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96fd7d37809a311f589d8aebd6325fa8e619f81a" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52240748" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że wyliczenie może być traktowana jako pole bitowe; oznacza to, że zestaw flag.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pola bitowe są zwykle używane dla list elementów, które mogą wystąpić w połączeniu, natomiast stałych wyliczenia są zwykle używane dla list elementów wzajemnie się wykluczają. W związku z tym pola bitowe są przeznaczone do można łączyć za pomocą bitowej operacji lub do generowania nienazwanych wartości stałych wyliczeniowych nie są. Języki różnią się w ich użyciem pól bitowych w porównaniu do stałych wyliczenia.  
  
## <a name="attributes-of-the-flagsattribute"></a>Atrybuty FlagsAttribute  
 <xref:System.AttributeUsageAttribute> jest stosowany do tej klasy, a jego <xref:System.AttributeUsageAttribute.Inherited%2A> właściwość określa `false`. Ten atrybut można stosować tylko do wyliczenia.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Wytyczne dotyczące FlagsAttribute i wyliczenia  
  
-   Użyj <xref:System.FlagsAttribute> atrybutu niestandardowego wyliczania tylko wtedy, gdy operacja bitowa (AND, OR wyłączne lub) do wykonania na podstawie wartości liczbowej.  
  
-   Definiowanie stałych wyliczenia w potęgi liczby dwa, oznacza to, 1, 2, 4, 8 i tak dalej. Oznacza to, że poszczególne flagi w stałych wyliczenia połączone nie pokrywają się.  
  
-   Należy rozważyć utworzenie Stała wyliczeniowa dla często używanych flagi kombinacji. Na przykład, jeśli masz wyliczenia używane dla operacji We/Wy pliku zawierający stałych wyliczeniowych `Read = 1` i `Write = 2`, należy rozważyć utworzenie Stała wyliczeniowa `ReadWrite = Read OR Write`, która łączy w sobie `Read` i `Write` flagi. Ponadto operacja bitowa lub używane do łączenia flagi może zostać uznane za zaawansowanych koncepcji, w niektórych sytuacjach, które nie powinny być wymagane dla prostych zadań.  
  
-   Należy zachować ostrożność, jeśli zdefiniować liczbę ujemną jako stała wyliczenia flag, ponieważ wielu pozycji flagi może być ustawiony na 1, które mogą sprawić, że kod jest mylące i Zachęć błędy kodowania.  
  
-   Wygodny sposób, aby sprawdzić, czy ustawiono flagę w wartość liczbową, jest do wykonywania operacji bitowej i między wartością numeryczną i Stała wyliczeniowa flagę, która ustawia wszystkie bity w wartości liczbowych na zero, które nie odpowiadają flagę , następnie sprawdź, czy wynikiem tej operacji jest równa Stała wyliczeniowa flagi.  
  
-   Użyj `None` uprzednie Nazwa flagi stałą, której wartość jest równa zero. Nie można użyć `None` Stała wyliczeniowa w operacji bitowej i do testowania dla flagi, ponieważ zawsze wynosi zero. Jednak można wykonać logiczny nie bitowe, porównanie wartości liczbowej i `None` Stała wyliczeniowa w celu ustalenia, czy wszystkie bity w wartości liczbowej są ustawiane.  
  
     Jeśli tworzysz do wyliczenia wartości, zamiast wyliczenia flag, warto nadal tworzyć `None` Stała wyliczeniowa. Przyczyną jest to, że domyślnie pamięć używana na potrzeby wyliczenia jest inicjowane od zera przez środowisko uruchomieniowe języka wspólnego. W związku z tym jeżeli nie zdefiniujesz stałą, której wartość wynosi zero, wyliczenia zawiera niedozwoloną wartość, podczas jego tworzenia.  
  
     W przypadku przypadek domyślny oczywiste, których Twoja aplikacja potrzebuje do reprezentowania, należy wziąć pod uwagę przy użyciu Stała wyliczeniowa, którego wartość jest równa zero do reprezentowania domyślnie. Jeśli żaden przypadek domyślny, należy rozważyć użycie Stała wyliczeniowa, którego wartością jest zero oznacza przypadek, który nie jest reprezentowany przez żadnego innymi stałych wyliczeniowych.  
  
-   Definiuje wartości wyliczenia wyłącznie w celu utworzenia duplikatów stan samego wyliczenia. Na przykład nie definiują Stała wyliczeniowa, jedynie oznaczający koniec wyliczenia. Jeśli zachodzi potrzeba określenia ostatnie wartości wyliczenia, sprawdź, czy wartości jawnie. Ponadto można wykonać sprawdzania zakresu Stała wyliczeniowa imię i nazwisko, jeśli wszystkie wartości z zakresu są prawidłowe.  
  
-   Nie określaj stałych wyliczeniowych, które są zarezerwowane do użytku w przyszłości.  
  
-   Podczas definiowania metody lub właściwości, która przyjmuje Stała wyliczeniowa jako wartość, należy wziąć pod uwagę sprawdzania poprawności wartości. Przyczyną jest to, czy można rzutować wartość liczbową na typ wyliczeniowy nawet, jeśli nie zdefiniowano wartości numerycznych w wyliczeniu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie `FlagsAttribute` atrybutu i zawiera efekt <xref:System.Enum.ToString%2A> metodę stosowania `FlagsAttribute` na <xref:System.Enum> deklaracji.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 W poniższym przykładzie zdefiniowano dwa wyliczenia dotyczące kolorów `SingleHue` i `MultiHue`. Ten ostatni ma `FlagsAttribute` atrybutu; pierwsza nie. W przykładzie pokazano różnice w zachowaniu, gdy zakres liczb całkowitych, łącznie z liczb całkowitych nie reprezentujących wartości podstawowym typem wyliczenia są rzutowane na typ wyliczeniowy i ich ciągów reprezentujących wyświetlane.   Na przykład, należy pamiętać, że 3 nie może być reprezentowany jako `SingleHue` wartości, ponieważ 3 nie jest podstawową wartość dowolnego `SingleHue` elementu członkowskiego, natomiast `FlagsAttribute` atrybutu sprawia, że możliwe do reprezentowania 3 jako `MultiHue` wartość `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.FlagsAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie zdefiniowano `PhoneService` wyliczenie, które reprezentuje formy komunikacji, dostarczone przez firmę telefonu. Inicjuje trzy zmienne reprezentujący usług do trzech różnych gospodarstw domowych i wskazuje, które gospodarstw domowych mają żadna usługa domowych, które mają tylko usługi telefonu komórkowego i które gospodarstw domowych telefonu komórkowego i ziemi usługi wiersza. Na koniec niejawnie wywołuje <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodę, aby wyświetlić typy usługę świadczoną na każdym gospodarstwo domowe.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Poniższy przykład ilustruje użycie `FlagsAttribute` atrybutu i zawiera efekt <xref:System.Enum.ToString%2A> metodę stosowania `FlagsAttribute` na <xref:System.Enum> deklaracji.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>