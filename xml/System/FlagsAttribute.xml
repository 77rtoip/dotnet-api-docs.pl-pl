<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d3bee1721752f1378e182ae08c7080273500342" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420921" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że Wyliczenie może być traktowane jako pole bitowe; oznacza to zestaw flag.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pola bitowe są zwykle używane dla list elementów, które mogą wystąpić w połączeniu, podczas gdy stałe wyliczenia są zwykle używane dla list wzajemnie wykluczających się elementów. W związku z tym pola bitowe są przeznaczone do łączenia z bitowe lub operacjami do generowania nienazwanych wartości, natomiast wyliczane stałe nie są. Języki różnią się w zależności od użycia pól bitowych w porównaniu z stałymi wyliczeniami.  
  
## <a name="attributes-of-the-flagsattribute"></a>Atrybuty FlagsAttribute  
 <xref:System.AttributeUsageAttribute>stosuje się do tej klasy, a jej <xref:System.AttributeUsageAttribute.Inherited%2A> Właściwość określa `false`. Ten atrybut może być stosowany tylko do wyliczeń.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Wytyczne dotyczące FlagsAttribute i wyliczenia  
  
-   Użyj atrybutu <xref:System.FlagsAttribute> niestandardowego dla wyliczenia tylko wtedy, gdy operacja bitowa (oraz, lub, wyłączny lub) ma być wykonywana na wartości liczbowej.  
  
-   Zdefiniuj stałe wyliczenia w uprawnieniach dwóch, czyli 1, 2, 4, 8 itd. Oznacza to, że poszczególne flagi w połączonych stałych wyliczenia nie nakładają się na siebie.  
  
-   Rozważ utworzenie stałej wyliczenia dla często używanych kombinacji flag. Na przykład jeśli masz Wyliczenie używane dla operacji we/wy na plikach, które zawierają wyliczenia stałe `Read = 1` i `Write = 2`Rozważ utworzenie `Read` stałej `ReadWrite = Read OR Write`wyliczenia, która łączy i `Write` znaczników. Ponadto bitowe lub operacje używane do łączenia flag mogą być uznawane za zaawansowaną koncepcję w pewnych okolicznościach, które nie powinny być wymagane w przypadku prostych zadań.  
  
-   Należy zachować ostrożność, jeśli zdefiniujesz liczbę ujemną jako stałą jako flagę, ponieważ wiele pozycji flagi może być ustawiona na 1, co może sprawiać, że kod jest mylący i zachęca do błędów kodowania.  
  
-   Wygodnym sposobem sprawdzenia, czy flaga jest ustawiona w wartości liczbowej, jest wykonywanie bitowe i operacja między wartością liczbową a stałą flagą, która ustawia wszystkie bity w wartości liczbowej na zero, które nie odpowiadają fladze , a następnie sprawdź, czy wynik tej operacji jest równy stałemu wyliczeniowi flagi.  
  
-   Użyj `None` jako nazwy stałej wyliczeniowej flagi, której wartość jest równa zero. Nie można użyć `None` stałej wyliczenia w koniunkcji bitowej i do przetestowania flagi, ponieważ wynik jest zawsze równy zero. Można jednak wykonać logiczne, a nie bitowe, porównanie między wartością liczbową i `None` stałą wyliczaną, aby określić, czy wszystkie bity w wartości liczbowej są ustawione.  
  
     Jeśli tworzysz Wyliczenie wartości zamiast wyliczenia flag, nadal będzie wartościowa do utworzenia `None` stałej wyliczenia. Przyczyną jest to, że domyślnie pamięć użyta do wyliczenia jest inicjowana do zera przez środowisko uruchomieniowe języka wspólnego. W związku z tym, jeśli nie zdefiniujesz stałej, której wartość wynosi zero, Wyliczenie będzie zawierać niedozwoloną wartość podczas tworzenia.  
  
     W przypadku oczywistego domyślnego przypadku, gdy aplikacja musi reprezentować, rozważ użycie stałej wyliczenia, której wartość jest równa zero, aby reprezentować wartość domyślną. Jeśli nie ma domyślnego przypadku, rozważ użycie stałej wyliczenia, której wartość jest równa zero, co oznacza, że przypadek nie jest reprezentowany przez żadną z innych wyliczeniowe stałe.  
  
-   Nie należy definiować wartości wyliczenia wyłącznie w celu dublowania stanu samego wyliczenia. Na przykład nie należy definiować stałej wyliczenia, która jedynie oznacza koniec wyliczenia. Jeśli musisz określić ostatnią wartość wyliczenia, sprawdź tę wartość jawnie. Ponadto można przeprowadzić Sprawdzanie zakresu dla pierwszej i ostatniej wyliczanej stałej, jeśli wszystkie wartości w zakresie są prawidłowe.  
  
-   Nie określaj stałych, które są zarezerwowane do użytku w przyszłości.  
  
-   Podczas definiowania metody lub właściwości, która pobiera stałą jako wartość, należy rozważyć sprawdzenie poprawności wartości. Przyczyną jest to, że można rzutować wartość liczbową na typ wyliczeniowy, nawet jeśli ta wartość liczbowa nie jest zdefiniowana w wyliczeniu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje `FlagsAttribute` użycie atrybutu i pokazuje wpływ <xref:System.Enum.ToString%2A> na <xref:System.Enum> metodę użycia `FlagsAttribute` w deklaracji.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 W poniższym przykładzie zdefiniowano dwa wyliczenia `SingleHue` związane z kolorami i. `MultiHue` Ten ostatni ma `FlagsAttribute` atrybut; poprzedni nie. W przykładzie pokazano różnicę w działaniu, gdy zakres liczb całkowitych, w tym liczby całkowite, które nie reprezentują bazowych wartości typu wyliczenia, są rzutowane na typ wyliczenia i wyświetlane są ich reprezentacje ciągów.   Na przykład należy zauważyć, że 3 nie może być reprezentowane `SingleHue` jako wartość, ponieważ 3 nie jest podstawową wartością żadnego `SingleHue` elementu członkowskiego, `FlagsAttribute` natomiast atrybut `MultiHue` umożliwia reprezentowanie 3 jako wartości `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.FlagsAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie zdefiniowano `PhoneService` Wyliczenie reprezentujące formy komunikacji dostarczonej przez firmę telefoniczną. Inicjuje on trzy zmienne reprezentujące usługę przewidzianą dla trzech różnych gospodarstw domowych, a następnie wskazuje, które gospodarstwa domowe nie mają usługi, w której gospodarstwa domowe mają tylko usługi telefonów komórkowych, i które gospodarstwa domowe mają zarówno telefon komórkowy, jak i usługa linia lądowa. Na koniec niejawnie wywołuje <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodę w celu wyświetlenia typów usług udostępnianych każdemu gospodarstwu domowemu.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Poniższy przykład ilustruje `FlagsAttribute` użycie atrybutu i pokazuje wpływ <xref:System.Enum.ToString%2A> na <xref:System.Enum> metodę użycia `FlagsAttribute` w deklaracji.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
