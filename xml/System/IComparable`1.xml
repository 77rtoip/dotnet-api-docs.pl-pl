<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3331f1bbc5cf363b6ed960262fcd90e74a236a00" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34241378" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Typ obiektu do porównania.</typeparam>
    <summary>Definiuje metodę uogólniony porównania implementujący typu wartości lub klasy do utworzenia metody porównania typu do porządkowania i sortowania jego wystąpienia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest implementowany przez typy wartości, których można uporządkowane lub sortowane i udostępnia metodę jednoznacznie porównania porządkowania elementów członkowskich obiektu kolekcji ogólnej. Na przykład jeden numer może być większy niż drugi numer, a jeden ciąg może występować w porządku alfabetycznym przed innym. Wymaga ona, czy typy implementującej definiują jedną metodę <xref:System.IComparable%601.CompareTo%28%600%29>, który wskazuje, czy pozycja bieżącego wystąpienia w kolejności sortowania jest przed, po lub taka sama jak drugi obiekt tego samego typu. Metoda nie jest zazwyczaj wywoływana bezpośrednio z kodu dewelopera. Zamiast tego jest ona wywoływana automatycznie przez metody takie jak <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> i <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Zazwyczaj typy umożliwiające <xref:System.IComparable%601> implementacja również implementować <xref:System.IEquatable%601> interfejsu. <xref:System.IEquatable%601> Interfejs definiuje <xref:System.IEquatable%601.Equals%2A> metodę, która określa równości wystąpień typu implementującej.  
  
 Implementacja <xref:System.IComparable%601.CompareTo%28%600%29> metoda musi zwracać <xref:System.Int32> mający jedną z trzech wartości, jak pokazano w poniższej tabeli.  
  
|Wartość|Znaczenie|  
|-----------|-------------|  
|Mniej niż zero|Ten obiekt poprzedza obiekt określony przez <xref:System.IComparable%601.CompareTo%2A> metody w kolejności sortowania.|  
|Zero|Występuje, w tym samym miejscu w porządku sortowania obiektu określonego przez tego bieżącego wystąpienia <xref:System.IComparable%601.CompareTo%2A> argument metody.|  
|Większe od zera|Obiekt określony przez następuje tego bieżącego wystąpienia <xref:System.IComparable%601.CompareTo%2A> argument metody w kolejności sortowania.|  
  
 Wszystkie typy liczbowe (takich jak <xref:System.Int32> i <xref:System.Double>) implementuje <xref:System.IComparable%601>, tak jak <xref:System.String>, <xref:System.Char>, i <xref:System.DateTime>. Niestandardowe typy powinny także podać własne implementacja <xref:System.IComparable%601> umożliwiające wystąpienia obiektów, które mają być uporządkowane lub sortowane.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.IComparable%601> dla prostego `Temperature` obiektu. W przykładzie jest tworzony <xref:System.Collections.Generic.SortedList%602> kolekcji ciągów `Temperature` obiektu kluczy i dodaje kilka par temperatury i ciągi do listy poza kolejnością. W wywołaniu <xref:System.Collections.Generic.SortedList%602.Add%2A> metody <xref:System.Collections.Generic.SortedList%602> używa kolekcji <xref:System.IComparable%601> implementacji sortowanie pozycji list, które są następnie wyświetlane w kolejności narastania temperatury.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Zastąp parametr typu <see cref="T:System.IComparable`1" /> interfejsu z typem, który implementuje ten interfejs.  W przypadku zastosowania <see cref="T:System.IComparable`1" />, powinien przeciążać <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, i <see langword="op_LessThanOrEqual" /> operatorów, aby zwrócić wartości, które są zgodne z <see cref="M:System.IComparable`1.CompareTo(`0)" />. Ponadto należy również zaimplementować <see cref="T:System.IEquatable`1" />. Zobacz <see cref="T:System.IEquatable`1" /> artykułu, aby uzyskać pełne informacje.</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Porównuje bieżące wystąpienie z innym obiektem tego samego typu i zwraca liczbę całkowitą, która wskazuje, czy bieżące wystąpienie poprzedza, następuje po lub występuje w tym samym położeniu, co inny obiekt w porządku sortowania.</summary>
        <returns>Wartość, która określa względną kolejność obiektów są porównywane. Zwrócona wartość zawiera następujące znaczenie: <list type="table"><listheader><term> wartość </term><description> znaczenie </description></listheader><item><term> mniejsza od zera </term><description>Poprzedza tego wystąpienia <paramref name="other" /> w kolejności sortowania.  </description></item><item><term> Zero </term><description> tego wystąpienia odbywa się w tej samej pozycji w kolejności sortowania jako <paramref name="other" />.  </description></item><item><term> Większa od zera </term><description> następuje to wystąpienie <paramref name="other" /> w kolejności sortowania.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> udostępnia metodę jednoznacznie porównania porządkowania elementów członkowskich obiektu kolekcji ogólnej. W związku z tym zazwyczaj nie jest wywoływany bezpośrednio z kodu dewelopera. Zamiast tego jest ona wywoływana automatycznie przez metody takie jak <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> i <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Ta metoda jest tylko definicję i musi być implementowana przez obowiązują określony typ klasy lub wartości. Znaczenie porównania określony w wartości zwracać sekcji ("poprzedza", "występuje w tym samym miejscu" i "następuje) zależy od konkretnej implementacji.  
  
 Zgodnie z definicją porównuje większa od dowolnego obiektu `null`, i porównanie dwóch puste odwołania do siebie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.IComparable%601> dla prostego `Temperature` obiektu. W przykładzie jest tworzony <xref:System.Collections.Generic.SortedList%602> kolekcji ciągów `Temperature` obiektu kluczy i dodaje kilka par temperatury i ciągi do listy poza kolejnością. W wywołaniu <xref:System.Collections.Generic.SortedList%602.Add%2A> metody <xref:System.Collections.Generic.SortedList%602> używa kolekcji <xref:System.IComparable%601> implementacji sortowanie pozycji list, które są następnie wyświetlane w kolejności narastania temperatury.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Dla obiektów, A, B i C, muszą być spełnione następujące warunki: <c>A.CompareTo(A)</c> jest wymagany do zwrócenia zero.  Jeśli <c>A.CompareTo(B)</c> zwraca zero, następnie <c>B.CompareTo(A)</c> jest wymagany do zwrócenia zero.  Jeśli <c>A.CompareTo(B)</c> zwraca zero i <c>B.CompareTo(C)</c> zwraca zero, następnie <c>A.CompareTo(C)</c> jest wymagany do zwrócenia zero.  Jeśli <c>A.CompareTo(B)</c> zwraca wartość inną niż zero, następnie <c>B.CompareTo(A)</c> musi zwracać wartość przeciwną wartość.  Jeśli <c>A.CompareTo(B)</c> zwraca wartość <paramref name="x" /> który nie jest równa zero, a <c>B.CompareTo(C)</c> zwraca wartość <paramref name="y" /> z ten sam znak co <paramref name="x" />, następnie <c>A. CompareTo(C)</c> musi zwracać wartość ten sam znak co <paramref name="x" /> i <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Użyj <see cref="M:System.IComparable`1.CompareTo(`0)" /> metodę, aby określić kolejność wystąpienia klasy.</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>