<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="66c28a588c6563962b8b229acd02051259aa5897" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420398" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Typ obiektu do porównania.</typeparam>
    <summary>Definiuje uogólnioną metodę porównania, która jest implementowana przez typ wartości lub klasy w celu utworzenia metody porównywania specyficznego dla typu w celu porządkowania lub sortowania jej wystąpień.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest implementowany przez typy, których wartości mogą być uporządkowane lub sortowane i zapewnia metodę porównania silnie wpisaną do porządkowania elementów członkowskich obiektu kolekcji ogólnej. Na przykład jedna liczba może być większa niż druga cyfra, a jeden ciąg może być wyświetlany w kolejności alfabetycznej przed inną. Wymaga, aby implementacje typów definiują pojedynczą <xref:System.IComparable%601.CompareTo%28%600%29>metodę,, która wskazuje, czy pozycja bieżącego wystąpienia w kolejności sortowania jest wcześniejsza niż, po lub taka sama jak w przypadku drugiego obiektu tego samego typu. Zazwyczaj metoda nie jest wywoływana bezpośrednio z kodu dewelopera. Zamiast tego jest wywoływana automatycznie przy użyciu metod, takich <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> jak <xref:System.Collections.Generic.SortedList%602.Add%2A>i.  
  
 Zazwyczaj typy, które oferują <xref:System.IComparable%601> implementację, <xref:System.IEquatable%601> implementują również interfejs. <xref:System.IEquatable%601> Interfejs<xref:System.IEquatable%601.Equals%2A> definiuje metodę, która określa równość wystąpień typu implementującego.  
  
 Implementacja <xref:System.IComparable%601.CompareTo%28%600%29> metody musi <xref:System.Int32> zwracać, która ma jedną z trzech wartości, jak pokazano w poniższej tabeli.  
  
|Wartość|Znaczenie|  
|-----------|-------------|  
|Mniej niż zero|Ten obiekt poprzedza obiekt określony przez <xref:System.IComparable%601.CompareTo%2A> metodę w kolejności sortowania.|  
|Zero|To bieżące wystąpienie występuje w tym samym położeniu w porządku sortowania co obiekt określony przez <xref:System.IComparable%601.CompareTo%2A> argument metody.|  
|Większe od zera|To bieżące wystąpienie następuje po obiekcie określonym przez <xref:System.IComparable%601.CompareTo%2A> argument Method w kolejności sortowania.|  
  
 Wszystkie typy liczbowe (takie jak <xref:System.Int32> i <xref:System.Double> <xref:System.String>) <xref:System.IComparable%601> <xref:System.DateTime>implementują jako, i. <xref:System.Char> Typy niestandardowe powinny również zapewniać własną implementację <xref:System.IComparable%601> , aby umożliwić porządkowanie lub sortowanie wystąpień obiektów.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje implementację <xref:System.IComparable%601> dla prostego `Temperature` obiektu. Przykład tworzy <xref:System.Collections.Generic.SortedList%602> kolekcję ciągów z `Temperature` kluczami obiektów i dodaje kilka par temperatury i ciągów do listy poza sekwencją. W wywołaniu <xref:System.Collections.Generic.SortedList%602.Add%2A> metody <xref:System.Collections.Generic.SortedList%602> kolekcja używa <xref:System.IComparable%601> implementacji do sortowania wpisów listy, które są następnie wyświetlane w kolejności rosnącej temperatury.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Zastąp parametr <see cref="T:System.IComparable`1" /> Type interfejsu typem implementującym ten interfejs.  
  
W <see cref="T:System.IComparable`1" />przypadku zaimplementowania należy <see langword="op_GreaterThan" />przeciążać <see langword="op_GreaterThanOrEqual" />operatory <see langword="op_LessThan" />,, <see langword="op_LessThanOrEqual" /> i, aby zwracały wartości, które <see cref="M:System.IComparable`1.CompareTo(`0)" />są spójne z. Ponadto należy również zaimplementować <see cref="T:System.IEquatable`1" />. Aby uzyskać <see cref="T:System.IEquatable`1" /> pełne informacje, zobacz artykuł.</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Porównuje bieżące wystąpienie z innym obiektem tego samego typu i zwraca liczbę całkowitą, która wskazuje, czy bieżące wystąpienie poprzedza, następuje po lub występuje w tym samym położeniu, co inny obiekt w porządku sortowania.</summary>
        <returns>Wartość, która wskazuje względną kolejność porównywanych obiektów. Wartość zwracana ma następujące znaczenie: 
 <list type="table"><listheader><term> Wartość 
 </term><description> Znaczenie 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> To wystąpienie poprzedza <paramref name="other" /> porządek sortowania.  
  
 </description></item><item><term> Zero 
 </term><description> To wystąpienie występuje w tym samym położeniu w kolejności sortowania, <paramref name="other" />jak.  
  
 </description></item><item><term> Większe od zera 
 </term><description> To wystąpienie następuje <paramref name="other" /> w kolejności sortowania.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A>zapewnia metodę porównania silnie wpisaną do porządkowania elementów członkowskich obiektu kolekcji ogólnej. Z tego względu zazwyczaj nie jest on wywoływany bezpośrednio z kodu dewelopera. Zamiast tego jest wywoływana automatycznie przy użyciu metod, takich <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> jak <xref:System.Collections.Generic.SortedList%602.Add%2A>i.  
  
 Ta metoda jest tylko definicją i musi być implementowana przez określoną klasę lub typ wartości, aby mieć efekt. Znaczenie porównania określone w sekcji wartości zwracane ("poprzedza", "występuje w tym samym położeniu co" i "poniżej") zależy od określonej implementacji.  
  
 Według definicji, każdy obiekt porównuje więcej `null`niż i dwa odwołania o wartości null są porównywane ze sobą.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje implementację <xref:System.IComparable%601> dla prostego `Temperature` obiektu. Przykład tworzy <xref:System.Collections.Generic.SortedList%602> kolekcję ciągów z `Temperature` kluczami obiektów i dodaje kilka par temperatury i ciągów do listy poza sekwencją. W wywołaniu <xref:System.Collections.Generic.SortedList%602.Add%2A> metody <xref:System.Collections.Generic.SortedList%602> kolekcja używa <xref:System.IComparable%601> implementacji do sortowania wpisów listy, które są następnie wyświetlane w kolejności rosnącej temperatury.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Dla obiektów A, B i C, muszą być spełnione następujące wartości: 
 Do zwrócenia wartości zero wymagany jest <c>element a. CompareTo (a)</c> .  
  
Jeśli <c>A. CompareTo (B)</c> zwraca zero, wówczas do zwrócenia zera wymagany jest ciąg <c>B. CompareTo (A)</c> .  
  
Jeśli <c>a. CompareTo (B)</c> zwraca zero i <c>B. CompareTo (C)</c> zwraca zero, a a <c>. CompareTo (c)</c> jest wymagany do zwrócenia zera.  
  
Jeśli <c>obiekt. CompareTo (B)</c> zwraca wartość inną niż zero, wówczas do zwrócenia wartości znaku odwrotnego wymagana jest funkcja <c>B. CompareTo (A)</c> .  
  
Jeśli <c>a. CompareTo (B)</c> zwraca wartość <paramref name="x" /> , która nie jest równa zero, a <c>B. CompareTo (c)</c> zwraca wartość <paramref name="y" /> tego samego znaku co <paramref name="x" />, a <c>. CompareTo (c)</c> jest wymagana do zwrócenia wartości tego samego znaku co <paramref name="x" /> i .<paramref name="y" /></para></block>
        <block subset="none" type="usage"><para><see cref="M:System.IComparable`1.CompareTo(`0)" /> Użyj metody, aby określić kolejność wystąpień klasy.</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>
