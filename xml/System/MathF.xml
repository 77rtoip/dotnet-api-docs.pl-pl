<Type Name="MathF" FullName="System.MathF">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e2e0c51ad5b1b7db6569bdce9243c970f50e5d9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405611" /></Metadata><TypeSignature Language="C#" Value="public static class MathF" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MathF extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MathF" />
  <TypeSignature Language="VB.NET" Value="Public Class MathF" />
  <TypeSignature Language="C++ CLI" Value="public ref class MathF abstract sealed" />
  <TypeSignature Language="F#" Value="type MathF = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia stałe i statyczne metody dla kątów, logarytmu i innych typowych funkcji matematycznych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

`MathF` Statyczne pola i metody klasy odpowiadają <xref:System.Math> klasom klasy, z tą różnicą, że ich parametry <xref:System.Double>są typu <xref:System.Single> , a <xref:System.Double> nie i zwracają <xref:System.Single> wartości.

         ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float x);" />
      <MemberSignature Language="F#" Value="static member Abs : single -&gt; single" Usage="System.MathF.Abs x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, która jest większa lub równa <see cref="F:System.Single.MinValue" />, ale mniejsza lub <see cref="F:System.Single.MaxValue" />równa.</param>
        <summary>Zwraca wartość bezwzględną liczby zmiennoprzecinkowej o pojedynczej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa o pojedynczej precyzji, x, taka jak 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bezwzględna elementu <xref:System.Single> jest wartością numeryczną bez znaku. Na przykład absolutna wartość obu 1,2 e-03 i-1,2 E03 to 1,2 E03.  
  
 Jeśli `x` jest <xref:System.Single.PositiveInfinity> <xref:System.Single.PositiveInfinity>równa lub, wartość zwracana to. <xref:System.Single.NegativeInfinity> Jeśli `x` jest <xref:System.Single.NaN>równa, wartość zwracana to. <xref:System.Single.NaN>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static float Acos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acos(float x);" />
      <MemberSignature Language="F#" Value="static member Acos : single -&gt; single" Usage="System.MathF.Acos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca cosinus, gdzie <paramref name="x" /> musi być większa lub równa-1, ale mniejsza lub równa 1.</param>
        <summary>Zwraca kąt, którego cosinus jest równy podanej liczbie.</summary>
        <returns>Kąt θ, mierzony w radianach, taki jak 0 ≤ θ ≤ π.
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> -1<paramref name="x" /> lub 1lub<paramref name="x" /> równa się<see cref="F:System.Single.NaN" />. &lt; &gt;</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static float Acosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acosh(float x);" />
      <MemberSignature Language="F#" Value="static member Acosh : single -&gt; single" Usage="System.MathF.Acosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca cosinus hiperboliczny, gdzie <paramref name="x" /> musi być większa lub równa 1, ale mniejsza lub <see cref="F:System.Single.PositiveInfinity" />równa.</param>
        <summary>Zwraca kąt, którego cosinus hiperboliczny jest równy podanej liczbie.</summary>
        <returns>Kąt θ, mierzony w radianach, taki jak 0 ≤ θ ≤ ∞.
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> 1&lt; lub <paramref name="x" /> równa<see cref="F:System.Single.NaN" />się.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static float Asin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asin(float x);" />
      <MemberSignature Language="F#" Value="static member Asin : single -&gt; single" Usage="System.MathF.Asin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca sinus, gdzie <paramref name="x" /> musi być większa lub równa-1, ale mniejsza lub równa 1.</param>
        <summary>Zwraca kąt, którego sinus jest równy podanej liczbie.</summary>
        <returns>Kąt, θ, mierzony w radianach, taki jak π/2 ≤ θ ≤ π/2.
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> -1<paramref name="x" /> lub 1lub<paramref name="x" /> równa się<see cref="F:System.Single.NaN" />. &lt; &gt;</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodatnia wartość zwrotna reprezentuje kąt w kierunku przeciwnym do osi x. ujemna wartość zwracana reprezentuje kąt w prawo.  
  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static float Asinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asinh(float x);" />
      <MemberSignature Language="F#" Value="static member Asinh : single -&gt; single" Usage="System.MathF.Asinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca sinus hiperboliczny, gdzie <paramref name="x" /> musi być większa lub <see cref="F:System.Single.NegativeInfinity" />równa, ale <see cref="F:System.Single.PositiveInfinity" />mniejsza lub równa.</param>
        <summary>Zwraca kąt, którego sinus hiperboliczny jest podaną liczbą.</summary>
        <returns>Kąt θ, mierzony w radianach, taki jak ∞ &lt; θ ≤-1 lub 1 ≤ θ &lt; ∞. 
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static float Atan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan(float x);" />
      <MemberSignature Language="F#" Value="static member Atan : single -&gt; single" Usage="System.MathF.Atan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca tangens.</param>
        <summary>Zwraca kąt, którego tangens jest równy podanej liczbie.</summary>
        <returns>Kąt, θ, mierzony w radianach, taki jak π/2 ≤ θ ≤ π/2.  
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równe,-π/2 zaokrąglony do podwójnej precyzji ( <paramref name="x" /> - <see cref="F:System.Single.NegativeInfinity" />1.5707963267949), jeśli Equals, lub π/2 zaokrąglony do <paramref name="x" /> podwójnej precyzji (1.5707963267949), jeśli jest równa <see cref="F:System.Single.PositiveInfinity" />się.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodatnia wartość zwrotna reprezentuje kąt w kierunku przeciwnym do osi x. ujemna wartość zwracana reprezentuje kąt w prawo.  
  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static float Atan2 (float y, float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan2(float32 y, float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan2(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Single, x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan2(float y, float x);" />
      <MemberSignature Language="F#" Value="static member Atan2 : single * single -&gt; single" Usage="System.MathF.Atan2 (y, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="y">Współrzędna y punktu.</param>
        <param name="x">Współrzędna x punktu.</param>
        <summary>Zwraca kąt, którego tangens jest ilorazem dwóch określonych liczb.</summary>
        <returns>Kąt θ, mierzony w radianach, taki jak π ≤ θ ≤ π, i Tan (θ) <paramref name="y" />=  /  <paramref name="x" />, gdzie (<paramref name="x" />, <paramref name="y" />) jest punktem w płaszczyźnie kartezjańskiego. Zwróć uwagę na następujące kwestie: 
-For (<paramref name="x" />, <paramref name="y" />) w ćwiartki 1, &lt; 0 &lt; θ π/2.  
  
-For (<paramref name="x" />, <paramref name="y" />) w ćwiartki 2, π/ &lt; 2 θ ≤ π.  
  
-For (<paramref name="x" />, <paramref name="y" />) w ćwiartki 3,- &lt; π &lt; θ-π/2.  
  
-For (<paramref name="x" />, <paramref name="y" />) w ćwiartki 4,-π/ &lt; 2 &lt; θ 0.  
  
Dla punktów na granicach ćwiartek wartość zwracana jest następująca: 
-Jeśli y jest 0, a x nie jest ujemna, θ = 0.  
  
-Jeśli y jest 0, a x jest ujemna, θ = π.  
  
-Jeśli y jest dodatnia, a x to 0, θ = π/2.  
  
-Jeśli y jest ujemna, a x to 0, θ =-π/2.  
  
-Jeśli y jest 0, a x to 0, θ = 0.  
  
<paramref name="x" /> Jeślilub<see cref="F:System.Single.NaN" /> <paramref name="x" /> jestlub<see cref="F:System.Single.NegativeInfinity" />, lub jeśli i<paramref name="y" /> są albo<see cref="F:System.Single.PositiveInfinity" /> lub, metoda zwraca <see cref="F:System.Single.NaN" />. <paramref name="y" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana to kąt w płaszczyźnie kartezjańskiego utworzony przez oś x, a wektor rozpoczynający się od źródła (0, 0) i kończący się w punkcie (x, y).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static float Atanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atanh(float x);" />
      <MemberSignature Language="F#" Value="static member Atanh : single -&gt; single" Usage="System.MathF.Atanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">Liczba reprezentująca tangens hiperboliczny, gdzie <paramref name="x" /> musi być większa lub równa-1, ale mniejsza lub równa 1.</param>
        <summary>Zwraca kąt, którego tangens hiperboliczny jest równy podanej liczbie.</summary>
        <returns>Kąt θ, mierzony &lt; w radianach, taki jak ∞ θ &lt;-1 lub 1 &lt; θ &lt; ∞.  
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> -1<paramref name="x" /> lub 1lub<paramref name="x" /> równa się<see cref="F:System.Single.NaN" />. &lt; &gt;</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pomnóż wartość zwracaną przez 180/<xref:System.MathF.PI?displayProperty=nameWithType> do konwersji z radianów na stopnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitDecrement">
      <MemberSignature Language="C#" Value="public static float BitDecrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitDecrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitDecrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitDecrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitDecrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitDecrement : single -&gt; single" Usage="System.MathF.BitDecrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Wartość do zmniejszenia.</param>
        <summary>Zwraca następną najmniejszą wartość, która porównuje mniej niż <paramref name="x" />.</summary>
        <returns>Następna najmniejsza wartość, która porównuje <paramref name="x" />mniej niż.
  
—lub— 
 <see cref="F:System.Single.NegativeInfinity" />if <paramref name="x" /> jest równa <see cref="F:System.Single.NegativeInfinity" />.
  
—lub— 
 <see cref="F:System.Single.NaN" />Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równe.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="BitIncrement">
      <MemberSignature Language="C#" Value="public static float BitIncrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitIncrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitIncrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitIncrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitIncrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitIncrement : single -&gt; single" Usage="System.MathF.BitIncrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Wartość do zwiększenia.</param>
        <summary>Zwraca następną największą wartość, która jest większa <paramref name="x" />niż.</summary>
        <returns>Kolejną największą wartością, która jest większa niż <paramref name="x" />.
  
—lub— 
 <see cref="F:System.Single.PositiveInfinity" />Jeśli <paramref name="x" /> jest <see cref="F:System.Single.PositiveInfinity" />równe.
  
—lub— 
 <see cref="F:System.Single.NaN" />if <paramref name="x" /> jest równa <see cref="F:System.Single.NaN" />.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static float Cbrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cbrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cbrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cbrt(float x);" />
      <MemberSignature Language="F#" Value="static member Cbrt : single -&gt; single" Usage="System.MathF.Cbrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, dla której ma zostać odnaleziony katalog główny modułu.</param>
        <summary>Zwraca katalog główny modułu o podanej liczbie.</summary>
        <returns>Katalog główny <paramref name="x" />modułu.
  
—lub— 
 <see cref="F:System.Single.NaN" />if <paramref name="x" /> jest równa <see cref="F:System.Single.NaN" />.</returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static float Ceiling (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Ceiling(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Ceiling(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Ceiling(float x);" />
      <MemberSignature Language="F#" Value="static member Ceiling : single -&gt; single" Usage="System.MathF.Ceiling x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca najmniejszą wartość całkowitą, która jest większa lub równa określonej liczbie zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Najmniejsza wartość całkowita, która jest większa lub równa <paramref name="x" />. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równe ,<see cref="F:System.Single.NegativeInfinity" />, lub<see cref="F:System.Single.PositiveInfinity" />, ta wartość jest zwracana. Należy zauważyć, że ta metoda <see cref="T:System.Single" /> zwraca zamiast typu całkowitego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4. Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku plus nieskończoność. Innymi słowy, jeśli `x` ma wartość dodatnią, obecność dowolnego częściowego składnika powoduje `x` Zaokrąglenie do najbliższej najwyższej wartości całkowitej. Jeśli `x` jest ujemna, operacja zaokrąglania powoduje odrzucenie dowolnego `x` składnika ułamka. Operacja tej metody różni się od <xref:System.MathF.Floor%28System.Single%29> metody, która obsługuje zaokrąglenie w kierunku nieskończoności ujemnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static float CopySign (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CopySign(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.CopySign(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CopySign(float x, float y);" />
      <MemberSignature Language="F#" Value="static member CopySign : single * single -&gt; single" Usage="System.MathF.CopySign (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której wartość jest używana w wyniku.</param>
        <param name="y">Liczba, której znak jest używany w wyniku.</param>
        <summary>Zwraca wartość o wielkości <paramref name="x" /> i <paramref name="y" />znaku.</summary>
        <returns>Wartość z wielkością <paramref name="x" /> i <paramref name="y" />znakiem.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static float Cos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cos(float x);" />
      <MemberSignature Language="F#" Value="static member Cos : single -&gt; single" Usage="System.MathF.Cos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca cosinus określonego kąta.</summary>
        <returns>Cosinus <paramref name="x" />. Jeśli <paramref name="x" /> <see cref="F:System.Single.NegativeInfinity" />jest <see cref="F:System.Single.PositiveInfinity" />równa <see cref="F:System.Single.NaN" />,, lub, ta metoda zwraca. <see cref="F:System.Single.NaN" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static float Cosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cosh(float x);" />
      <MemberSignature Language="F#" Value="static member Cosh : single -&gt; single" Usage="System.MathF.Cosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca cosinus hiperboliczny odpowiadający podanemu kątowi.</summary>
        <returns>Cosinus hiperboliczny <paramref name="x" />. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.PositiveInfinity" /> równa<see cref="F:System.Single.PositiveInfinity" />lub, jest zwracana. <see cref="F:System.Single.NegativeInfinity" /> Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" /> równa, jest zwracana. <see cref="F:System.Single.NaN" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.    
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const float E = 2.718282;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 E = (2.718282)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Single  = 2.718282" />
      <MemberSignature Language="C++ CLI" Value="public: float E = 2.718282;" />
      <MemberSignature Language="F#" Value="val mutable E : single" Usage="System.MathF.E" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>2.718282</MemberValue>
      <Docs>
        <summary>Reprezentuje logarytm naturalny, określony przez stałą, <see langword="e" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Wartość tej stałej to 2,71828175.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static float Exp (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exp(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Exp(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exp(float x);" />
      <MemberSignature Language="F#" Value="static member Exp : single -&gt; single" Usage="System.MathF.Exp x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba określająca potęgę.</param>
        <summary>Zwraca <see langword="e" /> wartość podniesioną do określonej potęgi.</summary>
        <returns>Liczba <see langword="e" /> podniesiona do potęgi <paramref name="x" />. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" /> równa lub <see cref="F:System.Single.PositiveInfinity" />, ta wartość jest zwracana. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NegativeInfinity" />równe, zwracana jest wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e`jest stałą matematyczną, której wartość wynosi około 2,71828.  
  
 Użyj metody <xref:System.MathF.Pow%2A> , aby obliczyć kompetencje innych baz.  
  
 <xref:System.MathF.Exp%2A>jest odwrotnością <xref:System.MathF.Log%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
        <altmember cref="M:System.MathF.Log(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static float Floor (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Floor(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Floor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Floor(float x);" />
      <MemberSignature Language="F#" Value="static member Floor : single -&gt; single" Usage="System.MathF.Floor x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Zwraca największą wartość całkowitą mniejszą lub równą podanej liczbie zmiennoprzecinkowej o pojedynczej precyzji.</summary>
        <returns>Największa wartość całkowita mniejsza lub równa <paramref name="x" />. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równe ,<see cref="F:System.Single.NegativeInfinity" />, lub<see cref="F:System.Single.PositiveInfinity" />, ta wartość jest zwracana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tej metody jest zgodne ze standardem IEEE 754, sekcja 4. Tego rodzaju zaokrąglenie jest czasami nazywane zaokrąglaniem kierunku minus nieskończoność. Innymi słowy, jeśli `x` ma wartość dodatnią, dowolny składnik częściowy zostanie obcięty. Jeśli `x` jest ujemna, obecność dowolnego komponentu ułamkowego powoduje Zaokrąglenie do mniejszej liczby całkowitej. Operacja tej metody różni się od <xref:System.MathF.Ceiling%2A> metody, która obsługuje zaokrąglanie w kierunku nieskończoności dodatniej.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="FusedMultiplyAdd">
      <MemberSignature Language="C#" Value="public static float FusedMultiplyAdd (float x, float y, float z);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 FusedMultiplyAdd(float32 x, float32 y, float32 z) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FusedMultiplyAdd (x As Single, y As Single, z As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float FusedMultiplyAdd(float x, float y, float z);" />
      <MemberSignature Language="F#" Value="static member FusedMultiplyAdd : single * single * single -&gt; single" Usage="System.MathF.FusedMultiplyAdd (x, y, z)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="z" Type="System.Single" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, z <paramref name="y" />którą ma zostać pomnożona wartość.</param>
        <param name="y">Liczba, z <paramref name="x" />którą ma zostać pomnożona wartość.</param>
        <param name="z">Liczba, która ma zostać dodana do wyniku <paramref name="x" /> mnożenia przez. <paramref name="y" /></param>
        <summary>Zwraca (x * y) + z, zaokrąglone jako jedna operacja Trzyelementowy.</summary>
        <returns>(x * y) + z, zaokrąglone jako jedna operacja Trzyelementowy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wartość jest `(x * y)` obliczana tak, jakby była nieskończona `z` precyzja, dodaje do tego wyniku tak, jakby była nieskończona precyzja, a wreszcie zaokrągla do najbliższej reprezentacji wartości.
  
 Różni się to od odrzucanej sekwencji, która może `(x * y)` zostać obliczona tak, jakby była nieskończona preicision, zaokrąglić wynik do najbliższej reprezentacji wartości, dodać "z" do wyniku zaokrąglonego, tak jakby była nieskończona precyzja, a wreszcie zaokrąglić do najbliższej reprezentacji wartościami.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static float IEEERemainder (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 IEEERemainder(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.IEEERemainder(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float IEEERemainder(float x, float y);" />
      <MemberSignature Language="F#" Value="static member IEEERemainder : single * single -&gt; single" Usage="System.MathF.IEEERemainder (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Dywidenda.</param>
        <param name="y">Dzielnik.</param>
        <summary>Zwraca resztę z dzielenia przez określony numer przez inny określony numer.</summary>
        <returns>Liczba równa <paramref name="x" /> -( <paramref name="y" /> <paramref name="x" /> <paramref name="y" /> <paramref name="x" /> <paramref name="y" /> Q), gdzie  /  Q jest ilorazem zaokrąglonym do najbliższej liczby całkowitej (Jeśli  /  jest w połowie między dwoma liczbami całkowitymi, zwracana jest parzysta liczba całkowita).  
  
Jeśli <paramref name="x" /> -(<paramref name="y" /> Q) jest zerem, wartość + 0 jest zwracana w przypadku <paramref name="x" /> wartości dodatnich lub-0, <paramref name="x" /> jeśli jest ujemna.  
  
Jeśli <paramref name="y" /> wartość = 0 <see cref="F:System.Single.NaN" /> , jest zwracana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja jest zgodna z operacją reszty zdefiniowaną w sekcji 5,1 ANSI/IEEE Std 754-1985; IEEE Standard dla binarnej arytmetycznej liczby zmiennoprzecinkowej; Institute of Electrical and Electronics Engineers, Inc; 1985.  
  
 Metoda nie jest taka sama jak [operator reszty.](~/docs/csharp/language-reference/operators/remainder-operator.md) <xref:System.MathF.IEEERemainder%2A> Mimo że obie zwracają resztę po dzielenie, używane formuły są różne. Formuła dla <xref:System.MathF.IEEERemainder%2A> metody jest:  
  
```  
IEEERemainder = dividend - (divisor * MathF.Round(dividend / divisor))  
```  
  
 W przeciwieństwie do formuły dla operatora reszty jest:  
  
```  
Remainder = (MathF.Abs(dividend) - (MathF.Abs(divisor) *   
            (MathF.Floor(MathF.Abs(dividend) / MathF.Abs(divisor))))) *   
            MathF.Sign(dividend)  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ILogB">
      <MemberSignature Language="C#" Value="public static int ILogB (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ILogB(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ILogB(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ILogB (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ILogB(float x);" />
      <MemberSignature Language="F#" Value="static member ILogB : single -&gt; int" Usage="System.MathF.ILogB x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której LOGARYTM ma zostać znaleziony.</param>
        <summary>Zwraca logarytm dziesiętny z podanej liczby.</summary>
        <returns>Jedna z wartości w tabeli poniżej.  
  
 <list type="table"><listheader><term><paramref name="x" />konstruktora 
 </term><description> Wartość zwracana 
 </description></listheader><item><term> Domyślny 
 </term><description> Dziennik <paramref name="x" />w postaci liczby całkowitej 2, czyli (int) log2 — (<paramref name="x" />).  
  
 </description></item><item><term> Zero 
 </term><description><see cref="F:System.Int32.MinValue" /></description></item><item><term> <see cref="F:System.Single.NaN" /> Równe lub lub<see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.NegativeInfinity" /></term><description><see cref="F:System.Int32.MaxValue" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `x` jest określony jako numer podstawowy 10.   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x);" />
      <MemberSignature Language="F#" Value="static member Log : single -&gt; single" Usage="System.MathF.Log x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której LOGARYTM ma zostać znaleziony.</param>
        <summary>Zwraca logarytm naturalny (podstawowy <see langword="e" />) podanej liczby.</summary>
        <returns>Jedna z wartości w tabeli poniżej.  
  
 <list type="table"><listheader><term><paramref name="x" />konstruktora 
 </term><description> Wartość zwracana 
 </description></listheader><item><term> Dodatnie 
 </term><description> Logarytm naturalny z <paramref name="x" />; to jest, LN <paramref name="x" />lub log e<paramref name="x" /></description></item><item><term> Zero 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> Ujemne 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `x` jest określony jako numer podstawowy 10.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Exp(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Log : single * single -&gt; single" Usage="System.MathF.Log (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której LOGARYTM ma zostać znaleziony.</param>
        <param name="y">To be added.</param>
        <summary>Zwraca logarytm o podanej liczbie w określonej bazie.</summary>
        <returns>Jedna z wartości w tabeli poniżej. (+ Nieskończoność <see cref="F:System.Single.PositiveInfinity" />,-nieskończoność <see cref="F:System.Single.NegativeInfinity" /> <see cref="F:System.Single.NaN" />i Nan oznacza.) 
 <list type="table"><listheader><term><paramref name="x" /></term><description><paramref name="newBase" /></description><description> Wartość zwracana 
 </description></listheader><item><term><paramref name="x" />&gt; 0 
 </term><description> (0 &lt; <paramref name="newBase" /> 1)<paramref name="newBase" /> — lub-(&gt;1) &lt; 
 </description><description> lognewBase (a) 
 </description></item><item><term><paramref name="x" />&lt; 0 
 </term><description> (dowolna wartość) 
 </description><description> NaN 
 </description></item><item><term> (dowolna wartość) 
 </term><description><paramref name="newBase" />&lt; 0 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> != 1 
 </term><description><paramref name="newBase" /> = 0 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> != 1 
 </term><description><paramref name="newBase" />= + Nieskończoność 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" />= NaN 
 </term><description> (dowolna wartość) 
 </description><description> NaN 
 </description></item><item><term> (dowolna wartość) 
 </term><description><paramref name="newBase" />= NaN 
 </description><description> NaN 
 </description></item><item><term> (dowolna wartość) 
 </term><description><paramref name="newBase" /> = 1 
 </description><description> NaN 
 </description></item><item><term><paramref name="x" /> = 0 
 </term><description> 0 &lt; 1<paramref name="newBase" /> &lt; 
 </description><description> + Nieskończoność 
 </description></item><item><term><paramref name="x" /> = 0 
 </term><description><paramref name="newBase" />&gt; 1 
 </description><description> -Nieskończoność 
 </description></item><item><term><paramref name="x" />= + Nieskończoność 
 </term><description> 0 &lt; 1<paramref name="newBase" /> &lt; 
 </description><description> -Nieskończoność 
 </description></item><item><term><paramref name="x" />= + Nieskończoność 
 </term><description><paramref name="newBase" />&gt; 1 
 </description><description> + Nieskończoność 
 </description></item><item><term><paramref name="x" /> = 1 
 </term><description><paramref name="newBase" /> = 0 
 </description><description> 0 
 </description></item><item><term><paramref name="x" /> = 1 
 </term><description><paramref name="newBase" />= + Nieskończoność 
 </description><description> 0 
 </description></item></list></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static float Log10 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log10(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log10(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log10(float x);" />
      <MemberSignature Language="F#" Value="static member Log10 : single -&gt; single" Usage="System.MathF.Log10 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której LOGARYTM ma zostać znaleziony.</param>
        <summary>Zwraca logarytm dziesiętny z podanej liczby.</summary>
        <returns>Jedna z wartości w tabeli poniżej.  
  
 <list type="table"><listheader><term><paramref name="x" />konstruktora 
 </term><description> Wartość zwracana 
 </description></listheader><item><term> Dodatnie 
 </term><description> Dziennik <paramref name="x" />Base 10; oznacza to, że log 10<paramref name="x" />.  
  
 </description></item><item><term> Zero 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> Ujemne 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `x` jest określony jako numer podstawowy 10.   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static float Log2 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log2(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log2(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log2(float x);" />
      <MemberSignature Language="F#" Value="static member Log2 : single -&gt; single" Usage="System.MathF.Log2 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której LOGARYTM ma zostać znaleziony.</param>
        <summary>Zwraca logarytm o podstawie 2 dla podanej liczby.</summary>
        <returns>Jedna z wartości w tabeli poniżej.  
  
 <list type="table"><listheader><term><paramref name="x" />konstruktora 
 </term><description> Wartość zwracana 
 </description></listheader><item><term> Dodatnie 
 </term><description> Dziennik <paramref name="x" />Base 2, czyli dziennik 2<paramref name="x" />.  
  
 </description></item><item><term> Zero 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> Ujemne 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Równa się<see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr `x` jest określony jako numer podstawowy 10.   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Max : single * single -&gt; single" Usage="System.MathF.Max (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <param name="y">Druga z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <summary>Zwraca więcej dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji.</summary>
        <returns>Parametr <paramref name="x" /> lub<paramref name="y" />, w zależności od tego, jest większy. Opcja <paramref name="x" />IF, <paramref name="y" />or lub or <paramref name="x" /> <paramref name="y" /> jest równa <see cref="F:System.Single.NaN" /> ,<see cref="F:System.Single.NaN" /> jest zwracana.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static float MaxMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MaxMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MaxMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MaxMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : single * single -&gt; single" Usage="System.MathF.MaxMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <param name="y">Druga z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <summary>Zwraca większą liczbę liczb zmiennoprzecinkowych o pojedynczej precyzji.</summary>
        <returns>Parametr <paramref name="x" /> lub <paramref name="y" />, w zależności od tego, czy ma większą wielkość. Opcja <paramref name="x" />IF, <paramref name="y" />or lub or <paramref name="x" /> <paramref name="y" /> jest równa <see cref="F:System.Single.NaN" /> ,<see cref="F:System.Single.NaN" /> jest zwracana.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Min : single * single -&gt; single" Usage="System.MathF.Min (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <param name="y">Druga z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <summary>Zwraca mniejsze z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji.</summary>
        <returns>Parametr <paramref name="x" /> lub<paramref name="y" />, w zależności od tego, jest mniejszy. Jeśli <paramref name="x" /> <paramref name="x" /> , <paramref name="y" />, lub obiei<paramref name="y" /> są równe ,<see cref="F:System.Single.NaN" />jestzwracanawartość. <see cref="F:System.Single.NaN" /></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static float MinMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MinMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MinMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MinMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : single * single -&gt; single" Usage="System.MathF.MinMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Pierwszy z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <param name="y">Druga z dwóch liczb zmiennoprzecinkowych o pojedynczej precyzji do porównania.</param>
        <summary>Zwraca mniejszą liczbę liczb zmiennoprzecinkowych o pojedynczej precyzji.</summary>
        <returns>Parametr <paramref name="x" /> lub <paramref name="y" />, w zależności od tego, czy ma mniejszą wartość. Opcja <paramref name="x" />IF, <paramref name="y" />or lub or <paramref name="x" /> <paramref name="y" /> jest równa <see cref="F:System.Single.NaN" /> ,<see cref="F:System.Single.NaN" /> jest zwracana.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const float PI = 3.141593;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PI = (3.141593)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Single  = 3.141593" />
      <MemberSignature Language="C++ CLI" Value="public: float PI = 3.141593;" />
      <MemberSignature Language="F#" Value="val mutable PI : single" Usage="System.MathF.PI" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.141593</MemberValue>
      <Docs>
        <summary>Reprezentuje stosunek obwodu okręgu do jego średnicy, określonego przez stałą, π.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Wartość tego pola to 3,14159274.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static float Pow (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Pow(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Pow(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Pow(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Pow : single * single -&gt; single" Usage="System.MathF.Pow (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która ma zostać podniesiona do potęgi.</param>
        <param name="y">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która określa potęgę.</param>
        <summary>Zwraca określoną liczbę podniesioną do określonej potęgi.</summary>
        <returns>Liczba <paramref name="x" /> podniesiona do potęgi <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższa tabela wskazuje wartość zwracaną w przypadku określenia różnych wartości lub zakresów wartości dla `x` parametrów i. `y` Aby uzyskać więcej informacji, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>zobacz <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, i <xref:System.Single.NaN?displayProperty=nameWithType>.  
  
|Parametry|Wartość zwracana|  
|----------------|------------------|  
|`x`lub `y` . =  `NaN`|`NaN`|  
|`x`= Dowolna wartość `NaN`z wyjątkiem; `y` = 0.|1|  
|`x` = `NegativeInfinity`; `y` < 0.|0|  
|`x` = `NegativeInfinity`; `y` jest dodatnią nieparzystą liczbą całkowitą.|`NegativeInfinity`|  
|`x` = `NegativeInfinity`; `y` jest dodatnia, ale nie jest parzystą liczbą całkowitą.|`PositiveInfinity`|  
|`x`< 0, ale `NegativeInfinity`nie; nie jest liczbą całkowitą, `NegativeInfinity`lub `PositiveInfinity`. `y`|`NaN`|  
|`x`=-1; `y` lub.`PositiveInfinity`  =  `NegativeInfinity`|`NaN`|  
|-1 < `x` < 1; `y` = `NegativeInfinity`.|`PositiveInfinity`|  
|-1 < `x` < 1; `y` = `PositiveInfinity`.|0|  
|`x`<-1 lub `x` > 1; `y` = `NegativeInfinity`.|0|  
|`x`<-1 lub `x` > 1; `y` = `PositiveInfinity`.|`PositiveInfinity`|  
|`x` = 0; `y` < 0.|`PositiveInfinity`|  
|`x`= 0; `y` > 0.|0|  
|`x`= 1; jest dowolną wartością z `NaN`wyjątkiem. `y`|1|  
|`x` = `PositiveInfinity`; `y` < 0.|0|  
|`x` = `PositiveInfinity`; `y` > 0.|`PositiveInfinity`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.MathF.Sqrt(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x);" />
      <MemberSignature Language="F#" Value="static member Round : single -&gt; single" Usage="System.MathF.Round x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która ma zostać zaokrąglona.</param>
        <summary>Zaokrągla wartość zmiennoprzecinkową o pojedynczej precyzji do najbliższej wartości całkowitej i zaokrągla wartości punktu środkowego do najbliższej parzystej liczby.</summary>
        <returns>Najbliższa <paramref name="x" />liczba całkowita. Jeśli składnik <paramref name="x" /> częściowy jest w połowie między dwoma liczbami całkowitymi, a jednym z nich jest parzystość, a druga nieparzysta, zwracana jest liczba parzysta. Należy zauważyć, że ta metoda <see cref="T:System.Single" /> zwraca zamiast typu całkowitego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Ta metoda używa domyślnej Konwencji <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>zaokrąglania.

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

Jeśli wartość `x` argumentu to <xref:System.Single.NaN?displayProperty=nameWithType>, metoda zwraca <xref:System.Single.NaN?displayProperty=nameWithType>. Jeśli `x` jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub ,<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>Metoda zwraca<xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Ze względu na utratę precyzji, która może wynikać z reprezentowania wartości dziesiętnych jako liczby zmiennoprzecinkowe lub wykonywania operacji arytmetycznych na wartościach zmiennoprzecinkowych, <see cref="M:System.MathF.Round(System.Single)" /> w niektórych przypadkach Metoda może nie być widoczna w celu zaokrąglania wartości punktu środkowego do Najbliższa parzysta liczba całkowita.</para></block>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits);" />
      <MemberSignature Language="F#" Value="static member Round : single * int -&gt; single" Usage="System.MathF.Round (x, digits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która ma zostać zaokrąglona.</param>
        <param name="digits">Liczba cyfr ułamkowych w wartości zwracanej.</param>
        <summary>Zaokrągla wartość zmiennoprzecinkową o pojedynczej precyzji do określonej liczby cyfr ułamkowych i zaokrągla wartości punktu środkowego do najbliższej parzystej liczby.</summary>
        <returns>Liczba znajdująca się <paramref name="x" /> najbliżej, która zawiera liczbę cyfr dziesiętnych <paramref name="digits" />równą.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wartość `digits` argumentu może być z zakresu od 0 do 6. Należy zauważyć, że 6 to maksymalna liczba cyfr całkowitych i ułamkowych obsługiwanych przez <xref:System.Single> typ.

Ta metoda używa domyślnej Konwencji <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>zaokrąglania. 

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

Jeśli wartość `x` argumentu to <xref:System.Single.NaN?displayProperty=nameWithType>, metoda zwraca <xref:System.Single.NaN?displayProperty=nameWithType>. Jeśli `x` jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub ,<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>Metoda zwraca<xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits" />jest mniejsza niż 0 lub większa niż 6.</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która ma zostać zaokrąglona.</param>
        <param name="mode">Specyfikacja, w której ma <paramref name="x" /> zostać zaokrąglona wartość w połowie między dwiema innymi liczbami.</param>
        <summary>Zaokrągla wartość zmiennoprzecinkową o pojedynczej precyzji do najbliższej liczby całkowitej i używa określonej konwencji zaokrąglania dla wartości środkowych.</summary>
        <returns>Najbliższa <paramref name="x" />liczba całkowita. Jeśli <paramref name="x" /> jest w połowie między dwoma liczbami całkowitymi, a jedna z nich jest parzysta, <paramref name="mode" /> a druga nieparzysta, a następnie określa, które z dwóch wartości są zwracane. Należy zauważyć, że ta metoda <see cref="T:System.Single" /> zwraca zamiast typu całkowitego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

Jeśli wartość `x` argumentu to <xref:System.Single.NaN?displayProperty=nameWithType>, metoda zwraca <xref:System.Single.NaN?displayProperty=nameWithType>. Jeśli `x` jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub ,<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>Metoda zwraca<xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="mode" />nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * int * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, digits, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która ma zostać zaokrąglona.</param>
        <param name="digits">Liczba cyfr ułamkowych w wartości zwracanej.</param>
        <param name="mode">Specyfikacja, w której ma <paramref name="x" /> zostać zaokrąglona wartość w połowie między dwiema innymi liczbami.</param>
        <summary>Zaokrągla wartość zmiennoprzecinkową o pojedynczej precyzji do określonej liczby cyfr ułamkowych i używa określonej konwencji zaokrąglania dla wartości punktu środkowego.</summary>
        <returns>Liczba <paramref name="x" /> znajdująca się najbliżej, która ma liczbę cyfr dziesiętnych <paramref name="digits" />równą. Jeśli <paramref name="x" /> ma mniejszą liczbę cyfr ułamkowych <paramref name="digits" />niż <paramref name="x" /> , jest zwracana bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Wartość `digits` argumentu może być z zakresu od 0 do 6. Należy zauważyć, że 6 to maksymalna liczba cyfr całkowitych i ułamkowych obsługiwanych przez <xref:System.Single> typ.


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

Jeśli wartość `x` argumentu to <xref:System.Single.NaN?displayProperty=nameWithType>, metoda zwraca <xref:System.Single.NaN?displayProperty=nameWithType>. Jeśli `x` jest <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub ,<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>Metoda zwraca<xref:System.Single.PositiveInfinity?displayProperty=nameWithType> lub<xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits" />jest mniejsza niż 0 lub większa niż 6.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="mode" />nie jest prawidłową wartością <see cref="T:System.MidpointRounding" />.</exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleB">
      <MemberSignature Language="C#" Value="public static float ScaleB (float x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ScaleB(float32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ScaleB(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ScaleB (x As Single, n As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ScaleB(float x, int n);" />
      <MemberSignature Language="F#" Value="static member ScaleB : single * int -&gt; single" Usage="System.MathF.ScaleB (x, n)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="n" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która określa wartość bazową.</param>
        <param name="n">Liczba zmiennoprzecinkowa o pojedynczej precyzji, która określa moc.</param>
        <summary>Zwraca wartość x * 2 ^ n obliczoną efektywnie.</summary>
        <returns>x * 2 ^ n obliczono efektywnie.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float x);" />
      <MemberSignature Language="F#" Value="static member Sign : single -&gt; int" Usage="System.MathF.Sign x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba oznaczona.</param>
        <summary>Zwraca liczbę całkowitą wskazującą znak liczby zmiennoprzecinkowej o pojedynczej precyzji.</summary>
        <returns>Liczba, która wskazuje znak <paramref name="x" />, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Znaczenie 
 </description></listheader><item><term> -1 
 </term><description><paramref name="x" />jest mniejsza od zera.  
  
 </description></item><item><term> 0 
 </term><description><paramref name="x" />jest równa zero.  
  
 </description></item><item><term> 1 
 </term><description><paramref name="x" />jest większa od zera.  
  
 </description></item></list></returns>
        <remarks></remarks>
        <exception cref="T:System.ArithmeticException"><paramref name="x" />jest równe <see cref="F:System.Single.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static float Sin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sin(float x);" />
      <MemberSignature Language="F#" Value="static member Sin : single -&gt; single" Usage="System.MathF.Sin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca sinus określonego kąta.</summary>
        <returns>Sinus <paramref name="x" />. Jeśli <paramref name="x" /> <see cref="F:System.Single.NegativeInfinity" />jest <see cref="F:System.Single.PositiveInfinity" />równa <see cref="F:System.Single.NaN" />,, lub, ta metoda zwraca. <see cref="F:System.Single.NaN" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static float Sinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sinh(float x);" />
      <MemberSignature Language="F#" Value="static member Sinh : single -&gt; single" Usage="System.MathF.Sinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca sinus hiperboliczny odpowiadający podanemu kątowi.</summary>
        <returns>Sinus hiperboliczny <paramref name="x" />. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NegativeInfinity" />równe, <see cref="F:System.Single.PositiveInfinity" />, <see cref="T:System.Single" /> lub ,<see cref="F:System.Single.NaN" />ta metoda zwraca wartość równą. <paramref name="x" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static float Sqrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sqrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sqrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sqrt(float x);" />
      <MemberSignature Language="F#" Value="static member Sqrt : single -&gt; single" Usage="System.MathF.Sqrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba, której pierwiastek kwadratowy ma zostać znaleziony.</param>
        <summary>Zwraca pierwiastek kwadratowy z podanej liczby.</summary>
        <returns>Jedna z wartości w tabeli poniżej.  
  
 <list type="table"><listheader><term><paramref name="x" />konstruktora 
 </term><description> Wartość zwracana 
 </description></listheader><item><term> Zero lub dodatnie 
 </term><description> Pierwiastek kwadratowy z <paramref name="x" />wartością dodatnią.  
  
 </description></item><item><term> Ujemne 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Ubiegł<see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> Ubiegł<see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static float Tan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tan(float x);" />
      <MemberSignature Language="F#" Value="static member Tan : single -&gt; single" Usage="System.MathF.Tan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca tangens podanego kąta.</summary>
        <returns>Tangens <paramref name="x" />. Jeśli <paramref name="x" /> <see cref="F:System.Single.NegativeInfinity" />jest <see cref="F:System.Single.PositiveInfinity" />równa <see cref="F:System.Single.NaN" />,, lub, ta metoda zwraca. <see cref="F:System.Single.NaN" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static float Tanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tanh(float x);" />
      <MemberSignature Language="F#" Value="static member Tanh : single -&gt; single" Usage="System.MathF.Tanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Kąt wyrażony w radianach.</param>
        <summary>Zwraca tangens hiperboliczny odpowiadający podanemu kątowi.</summary>
        <returns>Tangens hiperboliczny <paramref name="x" />. Jeśli <paramref name="x" /> jest<see cref="F:System.Single.NegativeInfinity" />równa, ta metoda zwraca wartość-1. Jeśli wartość jest równa <see cref="F:System.Single.PositiveInfinity" />, ta metoda zwraca 1. Jeśli <paramref name="x" /> jest <see cref="F:System.Single.NaN" />równa, ta metoda zwraca. <see cref="F:System.Single.NaN" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kąt, `x`, musi być w radianach. Pomnóż przez <xref:System.MathF.PI?displayProperty=nameWithType>/180, aby przekonwertować stopnie na radiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static float Truncate (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Truncate(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Truncate(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Truncate(float x);" />
      <MemberSignature Language="F#" Value="static member Truncate : single -&gt; single" Usage="System.MathF.Truncate x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Liczba do obcięcia.</param>
        <summary>Oblicza integralną część określonej liczby zmiennoprzecinkowej o pojedynczej precyzji.</summary>
        <returns>Integralna część <paramref name="x" />, czyli liczba, która pozostaje po odrzuceniu cyfr ułamkowych, lub jedna z wartości wymienionych w poniższej tabeli.  
  
 <list type="table"><listheader><term><paramref name="x" /></term><description> Wartość zwracana 
 </description></listheader><item><term><see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term><see cref="F:System.Single.NegativeInfinity" /></term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term><see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.MathF.Truncate%2A>zaokrągla `x` do najbliższej liczby całkowitej w kierunku zera.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
  </Members>
</Type>
