<Type Name="Double" FullName="System.Double">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4bb51935ed74b1ef60e7451850bf1def79a76574" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431930" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float64&gt;, class System.IConvertible, class System.IEquatable`1&lt;float64&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Double" />
  <TypeSignature Language="VB.NET" Value="Public Structure Double&#xA;Implements IComparable, IComparable(Of Double), IConvertible, IEquatable(Of Double), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Double : IComparable, IComparable&lt;double&gt;, IConvertible, IEquatable&lt;double&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type double = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Double&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double> Typu wartość reprezentuje liczbę 64-bitowych podwójnej precyzji z wartościami z zakresu od-1, 79769313486232E308 do + 1, 79769313486232E308, zero dodatnie lub ujemne, <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, a nie liczba (<xref:System.Double.NaN>). Jest on przeznaczony do reprezentowania wartości, że są bardzo duże (na przykład odległości między planety lub galaxies) lub bardzo małych (masa cząsteczkowa substancji w kg), które często są nieprecyzyjne (na przykład odległość od ziemi do innego systemu słoneczny), <xref:System.Double> typ jest zgodny z 60559:1989 IEC (IEEE-754) standard binarny arytmetyczne zmiennoprzecinkowych.  
  
 Ten temat składa się z następujących sekcji:  
  
-   [Odwzorowanie liczby zmiennoprzecinkowej i dokładność](#Precision)  
  
-   [Testowanie pod kątem równości](#Equality)  
  
-   [Wartości zmiennoprzecinkowych i wyjątków](#Exceptions)  
  
-   [Konwersje i struktura Double](#Conversions)  
  
-   [Funkcje liczb zmiennoprzecinkowych](#Functionality)  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a>Reprezentacja liczb zmiennoprzecinkowych i precyzja  
 <xref:System.Double> — Typ danych przechowuje wartości zmiennoprzecinkowe podwójnej precyzji w 64-bitowy format binarny, jak pokazano w poniższej tabeli:  
  
|Część|Bity|  
|----------|----------|  
|Mantysy lub mantysy|0-51|  
|Wykładnik|52 62|  
|Znak (0 = dodatnie, 1 = ujemna)|63|  
  
 Podobnie jak ułamków dziesiętnych występują problemy dotyczące dokładnie reprezentować niektórych ułamkowa (takich jak 1/3 lub <xref:System.Math.PI?displayProperty=nameWithType>), binarne ułamków są w stanie reprezentować niektórych ułamkowych wartości. Na przykład 1: 10, która jest reprezentowana przez dokładne.1 jako ułamek dziesiętny, jest reprezentowana przez.001100110011 jako ułamek binarnego, z wzorca "0011" powtarzające się poza zakresem. W takim przypadku wartość zmiennoprzecinkowa zawiera nieprecyzyjną reprezentację liczba, która reprezentuje. Często wykonaniem dodatkowych operacji matematycznych w oryginalnej wartości zmiennoprzecinkowych zwykle zwiększyć jego brak dokładności. Na przykład jeśli firma Microsoft porównać wynik mnożenia.1 przez 10 i dodawanie.1 do.1 dziewięciokrotnie, widzimy tego ciągu, ponieważ został użyty osiem więcej operacji, przedstawiają wynik mniej dokładne. Należy pamiętać, że tej różnicy widoczne tylko, jeśli wyświetlić dwa <xref:System.Double> wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md), która jeśli to konieczne Wyświetla wszystkie 17 cyfr precyzji obsługiwane przez <xref:System.Double> typu.  
  
 [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
 [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
 Ponieważ niektóre liczby nie może być reprezentowany dokładnie ułamkowych wartości binarne, liczby zmiennoprzecinkowe mogą tylko przybliżonej liczb rzeczywistych.  
  
 Liczby zmiennoprzecinkowe wszystkich również mają ograniczoną liczbę cyfr znaczących, który określa również sposób dokładnie wartość zmiennoprzecinkowa przybliża liczba rzeczywista.   A <xref:System.Double> wartość ma do 15 cyfr dziesiętnych precyzji, mimo że maksymalnie 17 cyfr jest obsługiwany wewnętrznie. Oznacza to, że niektóre operacje zmiennoprzecinkowe może nie dokładność, aby zmienić liczbą zmiennoprzecinkową wartości. Poniższy przykład stanowi ilustrację. Definiuje bardzo dużą wartość zmiennoprzecinkową, a następnie dodaje iloczyn <xref:System.Double.Epsilon?displayProperty=nameWithType> i biliard do niego. Produkt, jednak jest za mały, aby zmodyfikować oryginalne wartości zmiennoprzecinkowych. Jej najmniej znaczący cyfrowego jest tysięcznych, 1 jest najbardziej znaczących cyfr w produkcie<sup>-312</sup>.  
  
 [!code-csharp[System.Double.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation2.cs#4)]
 [!code-vb[System.Double.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation2.vb#4)]  
  
 Dokładność ograniczona liczba zmiennoprzecinkowa ma kilka konsekwencje:  
  
-   Dwie liczb zmiennoprzecinkowych, które są wyświetlane takie same dla określonej dokładności nie może porównać taki sam, ponieważ ich co najmniej cyfr znaczących są różne. W poniższym przykładzie sumowane szereg numerów, a ich razem jest porównywana z ich oczekiwana suma. Mimo że te dwie wartości wydają się być takie same, wywołanie `Equals` metoda wskazuje, że nie są one.  
  
     [!code-csharp[System.Double.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Double.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist3.vb#6)]  
  
     W przypadku zmiany elementów format <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> instrukcji z `{0}` i `{1}` do `{0:R}` i `{1:R}` do wyświetlenia wszystkich cyfr znaczących dwóch <xref:System.Double> wartości, jest jasne, czy dwie wartości nie są równe ponieważ utraty dokładności podczas operacji dodawania. W takim wypadku problem można rozwiązać przez wywołanie metody <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> metody zostać zaokrąglona <xref:System.Double> wartości do żądanego dokładności przed wykonaniem porównania.  
  
-   Operacji matematycznych i porównania, która korzysta liczba zmiennoprzecinkowa może nie uzyskanie takiego samego wyniku Jeśli używana jest liczbą dziesiętną, ponieważ binarne liczbie zmiennoprzecinkowej może nie być równa liczbę dziesiętną. Poprzednim przykładzie pokazano to wyświetlania wyniku pomnożenie.1 przez 10 i dodawanie.1 razy.  
  
     Jeśli dokładność w operacjach numerycznych wartości ułamkowych odgrywa ważną rolę, możesz użyć <xref:System.Decimal> zamiast <xref:System.Double> typu. Gdy dokładność w operacjach numerycznych wartości całkowite poza zakres <xref:System.Int64> lub <xref:System.UInt64> typów jest ważne, użyj <xref:System.Numerics.BigInteger> typu.  
  
-   Wartość może nie obustronne, jeśli liczba zmiennoprzecinkowa. Jeśli operacja konwertuje oryginalna liczba zmiennoprzecinkowa na innej formy, odwrotny operacji przekształca przekonwertowanego formularza do liczba zmiennoprzecinkowa i końcowego liczba zmiennoprzecinkowa nie jest równy oryginalnej, wartość jest określany przesyłania danych Liczba zmiennoprzecinkowa. Obie strony może się nie powieść, ponieważ co najmniej jeden lub więcej cyfr znaczących zostały utracone lub zmienione w konwersji. W poniższym przykładzie trzy <xref:System.Double> wartości są konwertowane na ciągi i zapisywane w pliku. Jak przedstawiono dane wyjściowe, jednak mimo, że wartości wydają się być taki sam, przywrócone wartości nie są równe oryginalnych wartości.  
  
     [!code-csharp[System.Double.Structure#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist4.cs#7)]
     [!code-vb[System.Double.Structure#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist4.vb#7)]  
  
     W tym przypadku wartości mogą być pomyślnie zwrotnego za pomocą "G17" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) zachować pełną dokładność <xref:System.Double> wartości, jak przedstawiono w następującym przykładzie.  
  
     [!code-csharp[System.Double.Structure#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist5.cs#8)]
     [!code-vb[System.Double.Structure#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist5.vb#8)]  

   > [!IMPORTANT]
   >  W przypadku użycia z <xref:System.Double> wartości, specyfikator formatu "R" w niektórych przypadkach nie powiedzie się pomyślnie obustronne oryginalnej wartości. Aby upewnić się, że <xref:System.Double> pomyślnie obustronne wartości Użyj specyfikator formatu "G17".

-   <xref:System.Single> wartości mają dokładności mniejszej niż <xref:System.Double> wartości. A <xref:System.Single> wartość, która jest konwertowana na pozornie równoważne <xref:System.Double> często nie jest równa <xref:System.Double> wartość z powodu różnic w dokładności. W poniższym przykładzie, wynik operacji dzielenia identyczne jest przypisany do <xref:System.Double> i <xref:System.Single> wartość. Po <xref:System.Single> wartość jest rzutowane na <xref:System.Double>, porównanie dwóch wartości pokazuje, że są one nierówne.  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     Aby uniknąć tego problemu, użyj <xref:System.Double> zamiast <xref:System.Single> — typ danych lub użyj <xref:System.Math.Round%2A> metody, aby obie wartości mają tej samej precyzji.  
  
 Ponadto, wynik operacji arytmetyczne i przypisanie z <xref:System.Double> wartości mogą się nieznacznie różnić przez platformę z powodu utraty dokładność <xref:System.Double> typu. Na przykład wynik przypisywanie literału <xref:System.Double> wartości mogą się różnić w 32-bitowych i 64-bitowe wersje programu .NET Framework. Poniższy przykład przedstawia, to kiedy różnica literał wartość - 4.42330604244772E-305 i zmienna, którego wartość jest - 4.42330604244772E-305 są przypisane do <xref:System.Double> zmiennej. Należy pamiętać, że wynik <xref:System.Double.Parse%28System.String%29> metody w tym przypadku nie doświadczają utratę dokładności.  
  
 [!code-csharp[System.Double.Class.Precision#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.class.precision/cs/precision1.cs#1)]
 [!code-vb[System.Double.Class.Precision#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.class.precision/vb/precision1.vb#1)]  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a>Testowanie pod kątem równości  
 Wziąć pod uwagę taki sam, dwa <xref:System.Double> wartości musi reprezentować identyczne wartości. Jednak z powodu różnic w dokładności wartości lub z powodu utraty dokładności przez jeden lub oba wartości zmiennoprzecinkowych wartości, które powinny być identyczne często stają się nierówne z powodu różnic w ich co najmniej cyfr znaczących. W związku z tym wywołań <xref:System.Double.Equals%2A> metodę, aby sprawdzić, czy dwie wartości są równe lub wywołań <xref:System.Double.CompareTo%2A> metodę, aby określić relacji między dwiema <xref:System.Double> wartości, często dać nieoczekiwane wyniki. Jest to widoczne w poniższym przykładzie, gdy dwa najwyraźniej równa <xref:System.Double> wartości stają się nierówne ponieważ pierwszy ma 15 cyfr, a drugi zawiera 17.  
  
 [!code-csharp[System.Double.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Double.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison1.vb#9)]  
  
 Obliczone wartości, które należy wykonać różne ścieżki i często, które są przetwarzane w różnych sposobów udowodnić, będą traktowane jako różne. W poniższym przykładzie jeden <xref:System.Double> kwadrat jest wartość i obliczany jako pierwiastek kwadratowy przywrócić oryginalną wartość. Drugi <xref:System.Double> jest mnożona przez 3.51 i kwadrat przed pierwiastek kwadratowy wyniku jest podzielona przez 3.51, aby przywrócić oryginalną wartość. Mimo że te dwie wartości mogą być identyczne, wywołanie <xref:System.Double.Equals%28System.Double%29> metoda wskazuje, że nie są takie same. Przy użyciu ciągu standardowym formacie "R" do zwrócenia wyniku ciąg, który wyświetla wszystkie cyfr znaczących w każdej wartości Double pokazuje, że druga wartość jest.0000000000001 mniej niż pierwszy.  
  
 [!code-csharp[System.Double.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Double.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison2.vb#10)]  
  
 W przypadku utraty dokładności może mieć wpływ na wynik porównania, może przyjmować jedną z następujących opcji do wywoływania <xref:System.Double.Equals%2A> lub <xref:System.Double.CompareTo%2A> metody:  
  
-   Wywołanie <xref:System.Math.Round%2A?displayProperty=nameWithType> metody upewnij się, że obie wartości mają tej samej precyzji. Poniższy przykład modyfikuje poprzedniego przykładu do tej metody należy użyć, aby dwie wartości ułamkowych są równoważne.  
  
     [!code-csharp[System.Double.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Double.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison3.vb#11)]  
  
     Należy pamiętać, że problem dokładności nadal mają zastosowanie zaokrąglanie wartości punkt środkowy. Aby uzyskać więcej informacji, zobacz <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> metody.  
  
-   Testowanie równości przybliżonej zamiast równości. To wymaga zdefiniowania albo bezwzględnym kwota za pomocą którego można nadal ale różnią się dwie wartości, lub zdefiniuj względną ilość za pomocą którego mniejszą wartość można różnią się od wyższej wartości.  
  
    > [!WARNING]
    >  <xref:System.Double.Epsilon?displayProperty=nameWithType> Czasami jest używany jako środek bezwzględną odległość między dwoma <xref:System.Double> wartości podczas testowania pod kątem równości.  Jednak <xref:System.Double.Epsilon?displayProperty=nameWithType> mierzy najmniejsza możliwa wartość, która może być dodany do lub odjęcia od, <xref:System.Double> którego wartość wynosi zero. Dla większości dodatnie i ujemne <xref:System.Double> wartości, wartość <xref:System.Double.Epsilon?displayProperty=nameWithType> jest za mały, aby zostało wykryte. W związku z tym z wyjątkiem wartości zero, zaleca się jego użycia w testach pod kątem równości.  
  
     W poniższym przykładzie użyto drugie podejście do definiowania `IsApproximatelyEqual` metodę, która sprawdza względną różnicę między dwiema wartościami. Również uwidocznia wynik wywołania `IsApproximatelyEqual` — metoda i <xref:System.Double.Equals%28System.Double%29> metody.  
  
     [!code-csharp[System.Double.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Double.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a>Wartości zmiennoprzecinkowe i wyjątki  
 W przeciwieństwie do operacji z typów całkowitych, które zgłaszają wyjątki w przypadku przepełnienia lub niedozwolony operacji, takich jak dzielenie przez zero, operacje przy użyciu wartości zmiennoprzecinkowych nie zgłaszają wyjątki. Zamiast tego w sytuacjach wyjątkowych, wynik operacji zmiennoprzecinkowej jest zero, nieskończoności dodatniej, nieskończoności ujemnej lub niebędące liczbą (NaN):  
  
-   Jeśli wynik operacji zmiennoprzecinkowej jest za mała dla wartości docelowej format, wynik wynosi zero. Taka sytuacja może wystąpić, gdy dwie liczb bardzo małych są mnożone, jak przedstawiono na poniższym przykładzie.  
  
     [!code-csharp[System.Double.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Double.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional1.vb#1)]  
  
-   Jeśli wielkość wynik operacji zmiennoprzecinkowej przekracza zakres format docelowy, wynik operacji jest <xref:System.Double.PositiveInfinity> lub <xref:System.Double.NegativeInfinity>odpowiednio symbolu wyniku. Wynik operacji przepełnienia <xref:System.Double.MaxValue?displayProperty=nameWithType> jest <xref:System.Double.PositiveInfinity>i wynik operacji przepełnienia <xref:System.Double.MinValue?displayProperty=nameWithType> jest <xref:System.Double.NegativeInfinity>, jak pokazano na poniższym przykładzie.  
  
     [!code-csharp[System.Double.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Double.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/exceptional2.vb#2)]  
  
     <xref:System.Double.PositiveInfinity> powoduje również z dzielenia przez zero z dzielna dodatnią, i <xref:System.Double.NegativeInfinity> wynikiem dzielenia przez zero z ujemną dzielna.  
  
-   Jeśli operacji zmiennoprzecinkowej jest nieprawidłowa, wynik operacji jest <xref:System.Double.NaN>. Na przykład <xref:System.Double.NaN> wyniki z następujących czynności:  
  
    -   Dzielenie przez zero z dzielna zero. Należy pamiętać, że inne przypadków dzielenia przez zero wynik albo <xref:System.Double.PositiveInfinity> lub <xref:System.Double.NegativeInfinity>.  
  
-   Żadnych operacji zmiennoprzecinkowej z nieprawidłowe dane wejściowe. Na przykład wywołanie elementu <xref:System.Math.Sqrt%2A?displayProperty=nameWithType> metoda z ujemną wartością zwraca <xref:System.Double.NaN>, tak jak w przypadku wywoływania <xref:System.Math.Acos%2A?displayProperty=nameWithType> metody z wartością, która jest większa niż jeden lub mniej niż wartość ujemną.  
  
-   Wszelkie operacje z argumentem, którego wartość jest <xref:System.Double.NaN?displayProperty=nameWithType>.  
  
<a name="Conversions"></a>   
## <a name="type-conversions-and-the-double-structure"></a>Konwersje i struktura Double  
 <xref:System.Double> Struktury nie definiuje żadnych operatory konwersji jawnych ani niejawnych; zamiast tego konwersje są implementowane przez kompilator.  
  
 Konwersja wartości dowolnych pierwotnych typów numerycznych <xref:System.Double> konwersję rozszerzającą i dlatego nie wymaga jawnego rzutowania operator lub wywołanie metody konwersji, chyba że jawnie wymaga kompilatora. Na przykład kompilatora C# wymaga operatora rzutowania konwersje z <xref:System.Decimal> do <xref:System.Double>, podczas gdy kompilator Visual Basic nie obsługuje. Poniższy przykład konwertuje wartości minimalnej lub maksymalnej innych typów numerycznych pierwotnych do <xref:System.Double>.  
  
 [!code-csharp[System.Double.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert1.cs#20)]
 [!code-vb[System.Double.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert1.vb#20)]  
  
 Ponadto <xref:System.Single> wartości <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> do konwertowania <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 Należy pamiętać, że konwersji wartości niektóre typy liczbowe do <xref:System.Double> wartość może pociągać za sobą zmniejszenie precyzji. Jak pokazano w przykładzie podczas konwertowania możliwe jest zmniejszenie precyzji <xref:System.Decimal>, <xref:System.Int64>, <xref:System.Single>, i <xref:System.UInt64> wartości do <xref:System.Double> wartości.  
  
 Konwersja typu <xref:System.Double> wartość należącą do innego typu pierwotnych danych liczbowych jest konwersji zawężającej i wymaga operatora rzutowania (w języku C#), metody konwersji (w języku Visual Basic) lub wywołanie <xref:System.Convert> metody. Wartości, które są poza zakresem typu danych docelowych, zdefiniowane w typie docelowym `MinValue` i `MaxValue` właściwości, zachowują się, jak pokazano w poniższej tabeli.  
  
|Typ docelowy|Wynik|  
|-----------------|------------|  
|Dowolnego typu całkowitego|<xref:System.OverflowException> Wyjątków w przypadku konwersji w kontekście zaznaczenia.<br /><br /> W przypadku konwersji w kontekście unchecked (ustawienie domyślne w języku C#), operacji konwersji zakończy się pomyślnie, ale wartość przepełnienia.|  
|<xref:System.Decimal>|<xref:System.OverflowException> Wyjątek.|  
|<xref:System.Single>|<xref:System.Single.NegativeInfinity?displayProperty=nameWithType> dla wartości ujemnych.<br /><br /> <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> dla wartości dodatnie.|  
  
 Ponadto <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> throw <xref:System.OverflowException> podczas konwersji na liczby całkowite w kontekście zaznaczone, ale te przepełnienie wartości po konwersji na liczby całkowite w kontekście niezaznaczone. Podczas konwersji do <xref:System.Decimal>, zawsze zgłaszał <xref:System.OverflowException>. Podczas konwersji do <xref:System.Single>, konwertują do <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, i <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>odpowiednio.  
  
 Należy pamiętać, że zmniejszenie precyzji mogą być wynikiem konwersji <xref:System.Double> wartość do innego typu liczbowego. W przypadku konwertowania niecałkowity <xref:System.Double> wartości, jak pokazano na dane wyjściowe z przykładu, ułamkowych części jest utracone podczas <xref:System.Double> wartość jest zaokrąglana (tak jak w języku Visual Basic) lub obcięta (jak C#). Podczas konwersji do <xref:System.Decimal> i <xref:System.Single> wartości, <xref:System.Double> wartość nie może mieć dokładne reprezentacja w docelowy typ danych.  
  
 Poniższy przykład konwertuje wiele <xref:System.Double> wartości do kilku typów liczbowych. Konwersje występuje w kontekście zaznaczone w języku Visual Basic (ustawienie domyślne), a w języku C# (z powodu [zaznaczone](~/docs/csharp/language-reference/keywords/checked.md) — słowo kluczowe). Dane wyjściowe z przykładu przedstawia wynik konwersji w obu wyewidencjonowany kontekst niezaznaczone. W kontekście niezaznaczone w języku Visual Basic można wykonać konwersji przy kompilacji z `/removeintchecks+` przełącznika kompilatora i języka C#, przez dodawanie komentarza limit `checked` instrukcji.  
  
 [!code-csharp[System.Double.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/convert2.cs#21)]
 [!code-vb[System.Double.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/convert2.vb#21)]  
  
 Aby uzyskać więcej informacji o konwersji liczbowych typów, zobacz [typ konwersji w programie .NET Framework](~/docs/standard/base-types/type-conversion.md) i [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md).  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a>Funkcje zmiennoprzecinkowe  
 <xref:System.Double> Struktury i powiązanych typów udostępniają metody służące do wykonywania operacji w następujących obszarach:  
  
-   **Porównanie wartości**. Możesz wywołać <xref:System.Double.Equals%2A> metodę, aby określić, czy dwa <xref:System.Double> wartości są równe, lub <xref:System.Double.CompareTo%2A> metodę, aby określić relacji między dwiema wartościami.  
  
     <xref:System.Double> Struktury obsługuje również kompletny zestaw operatory porównania. Można na przykład testu równości i nierówności lub określić, czy jedną wartość jest większa lub równa innej. Jeśli jeden z argumentów jest inny niż typ liczbowy <xref:System.Double>, jest konwertowana na <xref:System.Double> przed wykonaniem operacji porównania.  
  
    > [!WARNING]
    >  Z powodu różnic w dokładność dwa <xref:System.Double> wartości, które mają być równe może stają się nierówne, co ma wpływ na wynik porównania. Zobacz [testowanie pod kątem równości](#Equality) sekcji, aby uzyskać więcej informacji na temat porównanie dwóch <xref:System.Double> wartości.  
  
     Możesz także wywołać <xref:System.Double.IsNaN%2A>, <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, i <xref:System.Double.IsNegativeInfinity%2A> metody do testowania dla tych wartości specjalnych.  
  
-   **Operacji matematycznych**. Typowe operacje arytmetyczne, takie jak dodawanie, odejmowanie mnożenia i dzielenia, są implementowane przez Kompilatory języka i instrukcje wspólnego języka pośredniego (CIL), a nie przez <xref:System.Double> metody. Jeśli jeden z argumentów operacji matematycznych jest inny niż typ liczbowy <xref:System.Double>, jest konwertowana na <xref:System.Double> przed wykonaniem tej operacji. Wynikiem operacji jest również <xref:System.Double> wartość.  
  
     Inne operacje matematyczne mogą być wykonywane przez wywołanie metody `static` (`Shared` w języku Visual Basic) metod w <xref:System.Math?displayProperty=nameWithType> klasy. Zawiera dodatkowe metody powszechnie używane dla arytmetyczne (takie jak <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, i <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometrii (takich jak <xref:System.Math.Cos%2A?displayProperty=nameWithType> i <xref:System.Math.Sin%2A?displayProperty=nameWithType>) i calculus (takie jak <xref:System.Math.Log%2A?displayProperty=nameWithType>).  
  
     Można również manipulować wszystkie bity w <xref:System.Double> wartość. <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> Zachowuje metody <xref:System.Double> wartość elementu wzorzec bitów w 64-bitową liczbę całkowitą. <xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType> Metoda zwraca jego wzorca bitowego w tablicy bajtów.  
  
-   **Zaokrąglanie**. Zaokrąglanie jest często używana jako technika zmniejszenia wpływu różnice między wartościami spowodowane przez problemy odwzorowanie liczby zmiennoprzecinkowej i dokładności. Można zaokrąglona <xref:System.Double> wartości przez wywołanie metody <xref:System.Math.Round%2A?displayProperty=nameWithType> metody.  
  
-   **Formatowanie**. Można przekonwertować <xref:System.Double> wartość do reprezentacji ciągu przez wywołanie metody <xref:System.Double.ToString%2A> metody lub za pomocą funkcji formatowania złożonego. Uzyskać informacji na temat sposobu ciągi formatujące kontrolowania reprezentację ciągu wartości zmiennoprzecinkowych, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md) tematów.  
  
-   **Analizowanie ciągów**. Można przekonwertować wartości zmiennoprzecinkowej na reprezentację ciągu <xref:System.Double> wartość wywołując jedną <xref:System.Double.Parse%2A> lub <xref:System.Double.TryParse%2A> metody. W przypadku niepowodzenia operacji analizowania <xref:System.Double.Parse%2A> metoda zgłasza wyjątek, podczas gdy <xref:System.Double.TryParse%2A> metoda zwraca `false`.  
  
-   **Konwersja typu**. <xref:System.Double> Struktura zapewnia jawnej implementacji interfejsu dla <xref:System.IConvertible> interfejs, który obsługuje konwersję między żadnych dwa standardowe typy danych dla .NET Framework. Kompilatory języka obsługują także niejawna konwersja wartości na wszystkich innych standardowych liczbowych typów do <xref:System.Double> wartości. Konwersja wartości dowolnych standardowych typów numerycznych <xref:System.Double> jest konwersję rozszerzającą i nie wymaga użytkownika metoda operatora lub konwersji rzutowanie,  
  
     Jednak konwersja <xref:System.Int64> i <xref:System.Single> wartości może pociągać za sobą zmniejszenie precyzji. W poniższej tabeli wymieniono różnice w dokładności dla każdego z następujących typów:  
  
    |Typ|Maksymalna dozwolona dokładność:|Wewnętrzny dokładności|  
    |----------|-----------------------|------------------------|  
    |<xref:System.Double>|15|17|  
    |<xref:System.Int64>|19 cyfr dziesiętnych|19 cyfr dziesiętnych|  
    |<xref:System.Single>|7 cyfr dziesiętnych|9 cyfr dziesiętnych|  
  
     Najczęściej dotyczy problem dokładności <xref:System.Single> wartości, które są konwertowane na <xref:System.Double> wartości. W poniższym przykładzie nierówne są dwie wartości produkowane przez operacje dzielenia identyczne, ponieważ jedna z wartości jest pojedynczej precyzji wartość zmiennoprzecinkową konwertowane na <xref:System.Double>.  
  
     [!code-csharp[System.Double.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/representation1.cs#3)]
     [!code-vb[System.Double.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/representation1.vb#3)]  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double>:  
  
 [!code-cpp[Double Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#1)]
 [!code-csharp[Double Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#1)]
 [!code-vb[Double Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Wszystkie elementy członkowskie tego typu są bezpieczne wątkowo. Elementy członkowskie, które na pierwszy rzut oka modyfikują stan wystąpienia, w rzeczywistości zwracają nowe wystąpienie zainicjowane z nową wartością. Podobnie jak w przypadku innych typów odczytywanie i zapisywanie w udostępnionej zmiennej, która zawiera wystąpienie tego typu, musi być chronione przez blokadę w celu zagwarantowania bezpieczeństwa wątków.</threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Single" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje tego wystąpienia określonego obiektu lub <see cref="T:System.Double" /> obiektu i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejszy, równa lub większa niż wartość określonego obiektu lub <see cref="T:System.Double" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(double value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : double -&gt; int&#xA;override this.CompareTo : double -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji do porównania.</param>
        <summary>Porównuje tego wystąpienia podanej liczbie zmiennoprzecinkowej podwójnej precyzji i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejsza niż, równa lub większa niż wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Podpisem liczbę określającą względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość zwracana </term><description> opis </description></listheader><item><term> mniejsza od zera </term><description> to wystąpienie jest mniejsza niż <paramref name="value" />.  To wystąpienie nie jest liczbą - lub - (<see cref="F:System.Double.NaN" />) i <paramref name="value" /> jest liczbą.  </description></item><item><term> Zero </term><description> to wystąpienie jest równe <paramref name="value" />.  - lub - zarówno to wystąpienie i <paramref name="value" /> niebędące liczbą (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, lub <see cref="F:System.Double.NegativeInfinity" />.  </description></item><item><term> Większa od zera </term><description> to wystąpienie jest większa niż <paramref name="value" />.  - lub - tego wystąpienia jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Double.NaN" />).  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartości muszą być identyczne, aby były uważane za równe. Szczególnie, gdy wartości zmiennoprzecinkowych zależą od wielu operacji matematycznych, jest typowe dla utratę dokładności i ich wartości były niemal identyczne, z wyjątkiem ich co najmniej cyfr znaczących. W związku z tym wartość zwracaną <xref:System.Double.CompareTo%2A> metody może wydawać w czasie zaskakująco. Na przykład mnożenia przez konkretną wartość następuje dzielenia przez tę samą wartość powinna dawać oryginalnej wartości. W poniższym przykładzie, obliczona wartość okaże się większa niż oryginalna wartość. Wyświetlanie wszystkich cyfr znaczących dwóch wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości w jego co najmniej cyfr znaczących. Dla informacji na temat obsługi tych porównań, zobacz sekcję uwag <xref:System.Double.Equals%28System.Double%29> metody.  
  
 [!code-csharp[System.Double.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Double.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto2.vb#1)]  
  
 Ta metoda implementuje <xref:System.IComparable%601?displayProperty=nameWithType> interfejsu i wykonuje nieco lepsza niż <xref:System.Double.CompareTo%2A?displayProperty=nameWithType> — metoda, ponieważ nie muszą być konwertowane `value` parametru do obiektu.  
  
 Należy zauważyć, że chociaż obiektu, którego wartość jest <xref:System.Double.NaN> nie jest uznawany za taki sam, jak inny obiekt, którego wartość jest <xref:System.Double.NaN> (nawet sam), <xref:System.IComparable%601> interfejsu wymaga, aby `A.CompareTo(A)` zwracać zera.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Double.CompareTo%2A> metody, których typ parametru ma mniejszą liczbę bitów (mniejszą niż jest) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Na przykład, załóżmy, że typ wystąpienia <xref:System.Double> i typ parametru jest <xref:System.Int32>. Kompilator języka Microsoft C# generuje instrukcje do reprezentowania wartości parametru jako <xref:System.Double> obiekt, a następnie generuje <xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType> metodę, która porównuje wartości wystąpienia i poszerzył reprezentację parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano wersje ogólnego i nierodzajowe <xref:System.Double.CompareTo%2A> metody dla kilku typów wartości i odwołania.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="double.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania, lub <see langword="null" />.</param>
        <summary>Porównuje tego wystąpienia określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy wartość tego wystąpienia jest mniejszy, równa lub większa niż wartość określonego obiektu.</summary>
        <returns>Podpisem liczbę określającą względne wartości tego wystąpienia i <paramref name="value" />.  
  
 <list type="table"><listheader><term> Wartość </term><description> opis </description></listheader><item><term> ujemnej liczby całkowitej </term><description> to wystąpienie jest mniejsza niż <paramref name="value" />.  To wystąpienie nie jest liczbą - lub - (<see cref="F:System.Double.NaN" />) i <paramref name="value" /> jest liczbą.  </description></item><item><term> Zero </term><description> to wystąpienie jest równe <paramref name="value" />.  - lub - tego wystąpienia i <paramref name="value" /> są <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, lub <see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> dodatnią liczbą całkowitą </term><description> to wystąpienie jest większa niż <paramref name="value" />.  - lub - tego wystąpienia jest liczbą i <paramref name="value" /> nie jest liczbą (<see cref="F:System.Double.NaN" />).  - lub - <paramref name="value" /> jest <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` Parametr musi być `null` lub wystąpienie `Double`; w przeciwnym razie jest zwracany wyjątek. Wszystkie wystąpienia <xref:System.Double>, niezależnie od jego wartość jest uznawany za większy niż `null`.  
  
 Wartości muszą być identyczne, aby były uważane za równe. Szczególnie, gdy wartości zmiennoprzecinkowych zależą od wielu operacji matematycznych, jest typowe dla utratę dokładności i ich wartości były niemal identyczne, z wyjątkiem ich co najmniej cyfr znaczących. W związku z tym wartość zwracaną <xref:System.Double.CompareTo%2A> metody może wydawać w czasie zaskakująco. Na przykład mnożenia przez konkretną wartość następuje dzielenia przez tę samą wartość powinna dawać oryginalnej wartości. W poniższym przykładzie, obliczona wartość okaże się większa niż oryginalna wartość. Wyświetlanie wszystkich cyfr znaczących dwóch wartości za pomocą "R" [ciągu standardowego formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) wskazuje, że obliczona wartość różni się od oryginalnej wartości w jego co najmniej cyfr znaczących. Dla informacji na temat obsługi tych porównań, zobacz sekcję uwag <xref:System.Double.Equals%28System.Double%29> metody.  
  
 [!code-csharp[System.Double.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Double.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.compareto/vb/compareto3.vb#2)]  
  
 Ta metoda jest zaimplementowana do obsługi <xref:System.IComparable> interfejsu. Należy zauważyć, że chociaż <xref:System.Double.NaN> nie jest uważany za równa innej <xref:System.Double.NaN> (nawet sam), <xref:System.IComparable> interfejsu wymaga, aby `A.CompareTo(A)` zwracać zera.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie `CompareTo` w kontekście `Double`.  
  
 [!code-cpp[System.Double#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#16)]
 [!code-csharp[System.Double#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#16)]
 [!code-vb[System.Double#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> nie jest <see cref="T:System.Double" />.</exception>
        <altmember cref="M:System.Double.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 Epsilon = float64(4.94065645841247E-324)" />
      <MemberSignature Language="DocId" Value="F:System.Double.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Double  = 4.94065645841247E-324" />
      <MemberSignature Language="C++ CLI" Value="public: double Epsilon = 4.94065645841247E-324;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : double" Usage="System.double.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>4.94065645841247E-324</MemberValue>
      <Docs>
        <summary>Reprezentuje najmniejsza dodatnia <see cref="T:System.Double" /> wartość, która jest większa od zera. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.Double.Epsilon> właściwość odzwierciedla najmniejsza dodatnia <xref:System.Double> wartość, która jest ważna w operacjach numerycznych lub porównania podczas wartość <xref:System.Double> wystąpienia wynosi zero. Na przykład w poniższym kodzie które zero i <xref:System.Double.Epsilon> są traktowane jako wartości nierówne, podczas gdy zero i połowy wartości <xref:System.Double.Epsilon> są traktowane jako równe.  
  
 [!code-csharp[System.Double.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Double.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon.vb#5)]  
  
 Mówiąc ściślej, wartość zmiennoprzecinkowa punktu format składa się z znak, mantysa 52-bitowych lub mantysy i wykładnik 11-bitowych. Jak w poniższym przykładzie pokazano, zero ma wykładnik-1022 i mantysy 0. <xref:System.Double.Epsilon> ma wykładnik-1022 i mantysy 1. Oznacza to, że <xref:System.Double.Epsilon> jest najmniejsza dodatnia <xref:System.Double> wartość większą niż zero i reprezentuje najniższą możliwą wartość i najmniejsza możliwa przyrost dla <xref:System.Double> których wykładnik jest-1022.  
  
 [!code-csharp[System.Double.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Double.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/epsilon1.vb#6)]  
  
 Jednak <xref:System.Double.Epsilon> właściwość nie jest miarą ogólne dokładność <xref:System.Double> wpisz; ma zastosowanie tylko do <xref:System.Double> wystąpień, które mają wartość zero lub wykładnik-1022.  
  
> [!NOTE]
>  Wartość <xref:System.Double.Epsilon> właściwość nie jest odpowiednikiem epsilon maszyny, reprezentujący górna granica względny błąd z powodu zaokrąglania w arytmetyczne zmiennoprzecinkowych.  
  
 Wartość tej stałej jest 4, 94065645841247E-324.  
  
 Dwie liczby zmiennoprzecinkowe pozornie równoważne nie może porównać równy z powodu różnic w ich co najmniej cyfr znaczących. Na przykład C# wyrażenie, `(double)1/3 == (double)0.33333`, porównuje taki sam, ponieważ operacji dzielenia po lewej stronie ma maksymalna dokładność, podczas gdy stała po prawej stronie jest dokładny tylko do określonych cyfr. Jeśli tworzysz niestandardowy algorytm, który określa, czy dwie liczb zmiennoprzecinkowych można uznać za taki sam, nie zaleca się podstawowa z algorytmu na wartość <xref:System.Double.Epsilon> stała do ustalenia dopuszczalne marginesu bezwzględna różnicy dla dwie wartości wziąć pod uwagę taki sam.  (Zazwyczaj ten margines różnica jest wiele razy większa niż <xref:System.Double.Epsilon>.) Aby dowiedzieć się, jak porównywania dwóch wartości zmiennoprzecinkowe podwójnej precyzji, zobacz <xref:System.Double> i <xref:System.Double.Equals%28System.Double%29>.  
  
## <a name="platform-notes"></a>Uwagi dotyczące platformy  
 W systemach ARM wartość <xref:System.Double.Epsilon> stała jest za mały, aby zostało wykryte, więc jego jest równa zero. Można zdefiniować alternatywny epsilon wartość, która jest równe 2.2250738585072014E-308 zamiast tego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy dwa wystąpienia elementu <see cref="T:System.Double" /> reprezentują tę samą wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (double obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float64 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(double obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : double -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="obj">A <see cref="T:System.Double" /> obiekt do porównania z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą czy to wystąpienie i określonej <see cref="T:System.Double" /> obiektu reprezentują tę samą wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest taki sam, jak to wystąpienie w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> interfejsu i wykonuje nieco większą niż <xref:System.Double.Equals%2A> , ponieważ nie muszą być konwertowane `obj` parametru do obiektu.  
  
## <a name="widening-conversions"></a>Poszerzenie konwersji  
 W zależności od języka programowania, może być możliwe do kodu <xref:System.Double.Equals%2A> metody, których typ parametru ma mniejszą liczbę bitów (mniejszą niż jest) niż typ wystąpienia. To jest możliwe, ponieważ w niektórych językach programowania jest wykonywana niejawna konwersja poszerzająca, która powoduje reprezentowanie parametru jako typu z taką samą liczbą bitów jak liczba bitów wystąpienia.  
  
 Na przykład, załóżmy, że typ wystąpienia <xref:System.Double> i typ parametru jest <xref:System.Int32>. Kompilator języka Microsoft C# generuje instrukcje do reprezentowania wartości parametru jako <xref:System.Double> obiekt, a następnie generuje <xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType> metodę, która porównuje wartości wystąpienia i poszerzył reprezentację parametru.  
  
 Sprawdź dokumentację języka programowania, aby określić, czy jego kompilator wykonuje niejawne poszerzenia konwersji dla typów liczbowych. Aby uzyskać więcej informacji, zobacz [tabele konwersji typów](~/docs/standard/base-types/conversion-tables.md) tematu.  
  
## <a name="precision-in-comparisons"></a>Precyzja w porównaniach  
 <xref:System.Double.Equals%2A> Metody należy użyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być nierówne ze względu na zróżnicowane dokładność dwóch wartości. Poniższy przykład zgłasza, że <xref:System.Double> wartość.333333 i <xref:System.Double> wartość zwrócona przez dzielenia 1 przez 3 nie są równe.  
  
 [!code-csharp[System.Double.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#1)]
 [!code-vb[System.Double.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#1)]  
  
 Zamiast porównywanie równości, co metoda polega na definiowanie dopuszczalne względną marginesu różnicę między dwiema wartościami (np. jedna z wartości 001%). Jeśli wartość bezwzględna różnicy między dwiema wartościami jest mniejsza niż lub równa tej margines, różnica jest prawdopodobnie z powodu różnic w dokładność i w związku z tym wartości są mogą być takie same. W poniższym przykładzie użyto ta technika pozwala na porównanie.33333 i 1/3, dwa <xref:System.Double> wartości, które można nierówne w poprzednim przykładzie kodu. W tym przypadku wartości są równe.  
  
 [!code-csharp[System.Double.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#2)]
 [!code-vb[System.Double.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#2)]  
  
> [!NOTE]
>  Ponieważ <xref:System.Double.Epsilon> definiuje wyrażenie minimalne z wartość dodatnią, której zakres znajduje się w pobliżu zero, musi być większa niż margines różnicę między dwiema wartościami podobne <xref:System.Double.Epsilon>. Zazwyczaj jest wiele razy większa niż <xref:System.Double.Epsilon>. W związku z tym zaleca się, że nie używasz <xref:System.Double.Epsilon> podczas porównywania <xref:System.Double> wartości pod kątem równości.  
  
 Druga metoda obejmuje porównanie różnicy między dwie liczb zmiennoprzecinkowych z niektórych wartości bezwzględnej. Jeśli różnica jest mniejsza niż lub równa tej wartości bezwzględne, numery są takie same. Jeśli jest większy, liczby nie są takie same. Jeden alternatywą jest arbitralnie wybierz wartości bezwzględnej. Stanowi to problem, jednak ponieważ dopuszczalne margines różnicy zależy od wielkości <xref:System.Double> wartości. Zamiast drugiego korzysta z funkcji projektowania w formacie liczb zmiennoprzecinkowych: różnica między reprezentację liczby całkowitej dwie liczb zmiennoprzecinkowych wartości wskazuje liczbę możliwych wartości zmiennoprzecinkowych rozdzielający je. Na przykład różnica między 0,0 a <xref:System.Double.Epsilon> ma wartość 1, ponieważ <xref:System.Double.Epsilon> jest najmniejszą wartość można przedstawić podczas pracy z <xref:System.Double> którego wartość wynosi zero. W poniższym przykładzie użyto ta technika pozwala na porównanie.33333 i 1/3, które są dwa <xref:System.Double> wartości z poprzedniego przykładu kodu <xref:System.Double.Equals%28System.Double%29> znaleziono metody będą traktowane jako różne. Należy pamiętać, że w przykładzie użyto <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType> do przekonwertowania na jej reprezentację liczby całkowitej wartość zmiennoprzecinkową podwójnej precyzji.  
  
 [!code-csharp[System.Double.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Double.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsabs1.vb#1)]  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
 Jeśli dwa <xref:System.Double.NaN?displayProperty=nameWithType> wartości są sprawdzane pod kątem równości, wywołując <xref:System.Double.Equals%2A> metody, metoda zwraca `true`. Jednak jeśli dwie <xref:System.Double.NaN> wartości są sprawdzane pod kątem równości przy użyciu operatora równości, operator zwraca `false`. Aby ustalić, czy wartość <xref:System.Double> nie jest liczbą (NaN), alternatywą jest wywołanie <xref:System.Double.IsNaN%2A> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Rozpoznanie przeciążenia kompilator może konto do widocznej różnicy zachowanie dwóch <see cref="M:System.Double.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Double" /> jest zdefiniowana i nie jest typu argumentu <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Double.Equals(System.Double)" /> — metoda. W przeciwnym razie wywołać <see cref="M:System.Double.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Double" /> wartość. Poniższy przykład przedstawia różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotne typy liczbowe, z wyjątkiem <see cref="T:System.Decimal" /> i w języku C#, zwraca pierwszy porównanie <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Double.Equals(System.Double)" /> metody, natomiast drugi porównania Zwraca <see langword="false" /> ponieważ wywołuje kompilator <see cref="M:System.Double.Equals(System.Object)" /> metody.  [! code-csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Double.Equals(System.Object)" />
        <altmember cref="Overload:System.Double.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="double.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="obj" /> jest wystąpieniem <see cref="T:System.Double" /> i wartość tego wystąpienia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.Equals%2A> Metody należy użyć ostrożnie, ponieważ dwie wartości najwyraźniej równoważne mogą być nierówne ze względu na zróżnicowane dokładność dwóch wartości. Poniższy przykład zgłasza, że <xref:System.Double> wartość.3333 i <xref:System.Double> zwrócone w wyniku dzielenia 1 przez 3 nie są równe.  
  
 [!code-csharp[System.Double.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Epsilon/cs/Equals_25051.cs#3)]
 [!code-vb[System.Double.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Epsilon/vb/Equals_25051.vb#3)]  
  
 Dla alternatywy dla wywołania <xref:System.Double.Equals%2A> metody, zobacz dokumentację <xref:System.Double.Equals%28System.Double%29> przeciążenia.  
  
> [!NOTE]
>  Ponieważ <xref:System.Double.Epsilon> definiuje wyrażenie minimalne z wartość dodatnią, której zakres znajduje się w pobliżu zero, musi być większa niż margines różnicę między dwiema wartościami podobne <xref:System.Double.Epsilon>. Zazwyczaj jest wiele razy większa niż <xref:System.Double.Epsilon>.  
  
 Dokładność liczb zmiennoprzecinkowych poza udokumentowaną dokładnością jest określona dla implementacji oraz wersji systemu .NET Framework. W związku z tym porównanie dwóch określonych liczb może ulec zmianie między wersji systemu .NET Framework, ponieważ precyzja przedstawienia numeracji wewnętrznej może ulec zmianie.  
  
 Jeśli dwa <xref:System.Double.NaN?displayProperty=nameWithType> wartości są sprawdzane pod kątem równości, wywołując <xref:System.Double.Equals%2A> metody, metoda zwraca `true`. Jednak jeśli dwie <xref:System.Double.NaN> wartości są sprawdzane pod kątem równości przy użyciu operatora równości, operator zwraca `false`. Aby ustalić, czy wartość <xref:System.Double> nie jest liczbą (NaN), alternatywą jest wywołanie <xref:System.Double.IsNaN%2A> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Rozpoznanie przeciążenia kompilator może konto do widocznej różnicy zachowanie dwóch <see cref="M:System.Double.Equals(System.Object)" /> przeciążenia metody. Jeśli niejawna konwersja między <paramref name="obj" /> argumentu i <see cref="T:System.Double" /> jest zdefiniowana i nie jest typu argumentu <see cref="T:System.Object" />, kompilatory mogą wykonać niejawnej konwersji i wywołanie <see cref="M:System.Double.Equals(System.Double)" /> — metoda. W przeciwnym razie wywołać <see cref="M:System.Double.Equals(System.Object)" /> metody, która zawsze zwraca <see langword="false" /> jeśli jego <paramref name="obj" /> argument nie jest <see cref="T:System.Double" /> wartość. Poniższy przykład przedstawia różnicy w zachowaniu przeciążenia dwie metody. W przypadku wszystkich pierwotne typy liczbowe, z wyjątkiem <see cref="T:System.Decimal" /> i w języku C#, zwraca pierwszy porównanie <see langword="true" /> ponieważ kompilator automatycznie wykonuje konwersję rozszerzającą i wywołania <see cref="M:System.Double.Equals(System.Double)" /> metody, natomiast drugi porównania Zwraca <see langword="false" /> ponieważ wywołuje kompilator <see cref="M:System.Double.Equals(System.Object)" /> metody.  [! code-csharp[System.Double.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Double.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.equals/vb/equalsoverl.vb#2)]</para>
        </block>
        <altmember cref="M:System.Double.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="double.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="double.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.TypeCode" /> dla typu wartości <see cref="T:System.Double" />.</summary>
        <returns>Stała wyliczeniowa <see cref="F:System.TypeCode.Double" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsFinite(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(double d);" />
      <MemberSignature Language="F#" Value="static member IsFinite : double -&gt; bool" Usage="System.double.IsFinite d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : double -&gt; bool" Usage="System.double.IsInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Liczba zmiennoprzecinkowa podwójnej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności ujemnej lub dodatnią</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="d" /> daje w wyniku <see cref="F:System.Double.PositiveInfinity" /> lub <see cref="F:System.Double.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Double.PositiveInfinity> lub <xref:System.Double.NegativeInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.IsInfinity%2A>:  
  
 [!code-cpp[System.Double#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#11)]
 [!code-csharp[System.Double#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#11)]
 [!code-vb[System.Double#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNaN(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(double d);" />
      <MemberSignature Language="F#" Value="static member IsNaN : double -&gt; bool" Usage="System.double.IsNaN d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Liczba zmiennoprzecinkowa podwójnej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona wartość nie jest liczbą (<see cref="F:System.Double.NaN" />).</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="d" /> daje w wyniku <see cref="F:System.Double.NaN" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Double.NaN> sygnalizują, że wynik operacji jest niezdefiniowany. Na przykład dzielenia 0,0 przez 0,0 powoduje <xref:System.Double.NaN>.  
  
> [!NOTE]
>  <xref:System.Double.IsNaN%2A> Zwraca `false` Jeśli <xref:System.Double> wartość to <xref:System.Double.PositiveInfinity> lub <xref:System.Double.NegativeInfinity>. Aby sprawdzić, czy te wartości, należy użyć <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, i <xref:System.Double.IsNegativeInfinity%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.IsNaN%2A>:  
  
 [!code-cpp[System.Double#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#8)]
 [!code-csharp[System.Double#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#8)]
 [!code-vb[System.Double#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Double.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegative(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(double d);" />
      <MemberSignature Language="F#" Value="static member IsNegative : double -&gt; bool" Usage="System.double.IsNegative d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNegativeInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : double -&gt; bool" Usage="System.double.IsNegativeInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Liczba zmiennoprzecinkowa podwójnej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności ujemnej.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="d" /> daje w wyniku <see cref="F:System.Double.NegativeInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Double.NegativeInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.IsNegativeInfinity%2A>:  
  
 [!code-cpp[System.Double#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#13)]
 [!code-csharp[System.Double#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#13)]
 [!code-vb[System.Double#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#13)]  
[!code-cpp[System.Double#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#4)]
[!code-csharp[System.Double#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#4)]
[!code-vb[System.Double#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#4)]  
[!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
[!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
[!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsNormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsNormal : double -&gt; bool" Usage="System.double.IsNormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsPositiveInfinity(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(double d);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : double -&gt; bool" Usage="System.double.IsPositiveInfinity d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Liczba zmiennoprzecinkowa podwójnej precyzji.</param>
        <summary>Zwraca wartość wskazującą, czy określona liczba daje w wyniku nieskończoności dodatniej.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="d" /> daje w wyniku <see cref="F:System.Double.PositiveInfinity" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwraca operacji zmiennoprzecinkowych <xref:System.Double.PositiveInfinity> sygnalizują nastąpiło przepełnienie.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.IsPositiveInfinity%2A>:  
  
 [!code-cpp[System.Double#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#12)]
 [!code-csharp[System.Double#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#12)]
 [!code-vb[System.Double#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.IsSubnormal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (d As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(double d);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : double -&gt; bool" Usage="System.double.IsSubnormal d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const double MaxValue = 1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MaxValue = float64(1.79769313486232E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Double  = 1.79769313486232E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MaxValue = 1.79769313486232E+308;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : double" Usage="System.double.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>1.79769313486232E+308</MemberValue>
      <Docs>
        <summary>Reprezentuje największa możliwa wartość z <see cref="T:System.Double" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest dodatnią 1.7976931348623157E + 308.  
  
 Wynik operacji przekraczającą <xref:System.Double.MaxValue?displayProperty=nameWithType> jest <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> wynikiem operacje dodawania, mnożenia i potęgowania, gdy wynik przekracza <xref:System.Double.MaxValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Double.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Double.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.MaxValue>:  
  
 [!code-cpp[Double Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#2)]
 [!code-csharp[Double Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#2)]
 [!code-vb[Double Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const double MinValue = -1.79769313486232E+308;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MinValue = float64(-1.79769313486232E+308)" />
      <MemberSignature Language="DocId" Value="F:System.Double.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Double  = -1.79769313486232E+308" />
      <MemberSignature Language="C++ CLI" Value="public: double MinValue = -1.79769313486232E+308;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : double" Usage="System.double.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-1.79769313486232E+308</MemberValue>
      <Docs>
        <summary>Reprezentuje najniższą możliwą wartość elementu <see cref="T:System.Double" />. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest ujemny 1.7976931348623157E + 308.  
  
 Wynik operacji, która jest mniejsza niż <xref:System.Double.MinValue?displayProperty=nameWithType> jest <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>. W poniższym przykładzie <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> wynikiem odejmowania i mnożenia, gdy wynik jest mniejsza niż <xref:System.Double.MinValue?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Double.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Double.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.MinValue>:  
  
 [!code-cpp[Double Example#2](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#2)]
 [!code-csharp[Double Example#2](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#2)]
 [!code-vb[Double Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const double NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NaN = float64(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Double  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: double NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : double" Usage="System.double.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary>Reprezentuje wartość, która nie jest liczbą (<see langword="NaN" />). To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda lub operator nie zwraca <xref:System.Double.NaN> gdy wynik operacji jest niezdefiniowany. Na przykład wynik dzielenia 0 przez 0 jest <xref:System.Double.NaN>, jak pokazano na poniższym przykładzie. (Jednak pamiętaj, że dzielenia przez zero liczbę inną niż zero albo zwraca <xref:System.Double.PositiveInfinity> lub <xref:System.Double.NegativeInfinity>, w zależności od znak dzielnik.)  
  
 [!code-csharp[System.Double.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs#1)]
 [!code-vb[System.Double.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb#1)]  
  
 Ponadto, wywołaj metodę z <xref:System.Double.NaN> wartość lub operacji na <xref:System.Double.NaN> zwraca wartość <xref:System.Double.NaN>, jak pokazano na poniższym przykładzie.  
  
 [!code-csharp[System.Double.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/nan1.cs#2)]
 [!code-vb[System.Double.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/nan1.vb#2)]  
  
 Użyj <xref:System.Double.IsNaN%2A> metodę, aby określić, czy wartość nie jest liczbą. <xref:System.Double.op_Equality%2A> Operator uwzględnia dwa <xref:System.Double.NaN> wartości były nierówne ze sobą. Ogólnie rzecz biorąc <xref:System.Double> operatory nie może być użyty do porównania <xref:System.Double.NaN?displayProperty=nameWithType> z innymi <xref:System.Double> wartości, mimo że porównanie metod (takich jak <xref:System.Double.Equals%2A> i <xref:System.Double.CompareTo%2A>) może. Poniższy przykład przedstawia różnice w zachowaniu między <xref:System.Double> operatory porównania i metody.  
  
 [!code-csharp[System.Double.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.nan/cs/double.nan4.cs#4)]
 [!code-vb[System.Double.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.nan/vb/double.nan4.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Double.NaN>:  
  
 [!code-cpp[System.Double#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#7)]
 [!code-csharp[System.Double#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#7)]
 [!code-vb[System.Double#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNaN(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 NegativeInfinity = float64(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Double  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : double" Usage="System.double.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje minus nieskończoność. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia przez zero liczbą ujemną.  
  
 To stała jest zwracany, jeśli wynikiem operacji jest mniejsza niż <xref:System.Double.MinValue>.  
  
 Użyj <xref:System.Double.IsNegativeInfinity%2A> ustalenie, czy wartości daje w wyniku nieskończoności ujemnej.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.NegativeInfinity>:  
  
 [!code-cpp[System.Double#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#9)]
 [!code-csharp[System.Double#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#9)]
 [!code-vb[System.Double#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsNegativeInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Equality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : double * double -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Double" /> wartości są równe.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_Equality%2A> Metoda definiuje operator równości dla <xref:System.Double> wartości.  
  
 Jeśli dwa <xref:System.Double.NaN?displayProperty=nameWithType> wartości są sprawdzane pod kątem równości przy użyciu operatora równości, wynikiem jest `false`; dwa <xref:System.Double.NaN?displayProperty=nameWithType> wartości nie są takie same. Jeśli ich są sprawdzane pod kątem równości, wywołując <xref:System.Double.Equals%2A> jest wynik metody `true`.  Aby ustalić, czy wartość <xref:System.Double> nie jest liczbą (NaN), alternatywą jest wywołanie <xref:System.Double.IsNaN%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : double * double -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Double" /> wartość jest większa niż innego określony <see cref="T:System.Double" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest większa niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_GreaterThan%2A> Metoda definiuje działania większa-niż operator dla <xref:System.Double> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : double * double -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Double" /> wartość jest większa lub równa innej określony <see cref="T:System.Double" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest większa niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_GreaterThanOrEqual%2A> Metoda definiuje operacji operatora większą niż lub równości dla <xref:System.Double> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_Inequality(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : double * double -&gt; bool" Usage="System.double.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy dwa określone <see cref="T:System.Double" /> wartości nie są takie same.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_Inequality%2A> Metoda definiuje operator nierówności <xref:System.Double> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThan(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : double * double -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Double" /> wartość jest mniejsza niż innego określony <see cref="T:System.Double" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_LessThan%2A> Metoda definiuje operacji less-niż operator dla <xref:System.Double> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (double left, double right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float64 left, float64 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Double, right As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(double left, double right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : double * double -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="left">Pierwsza wartość do porównania.</param>
        <param name="right">Druga wartość do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określonej <see cref="T:System.Double" /> wartość jest mniejsza niż lub równa do innego określony <see cref="T:System.Double" /> wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="left" /> jest mniejsza niż lub równa <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.op_LessThanOrEqual%2A> Metoda definiuje operacji operatora mniej niż — lub równości dla <xref:System.Double> wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową podwójnej precyzji.</summary>
        <altmember cref="Overload:System.Double.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; double" Usage="System.double.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji odpowiada wartość liczbowa lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` Parametr może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>, lub ciągiem w postaci:  
  
 [*ws*] [*znak*] [*cyfr całkowitym*[*,*]]*cyfr całkowitym*[*.* [*cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+). Wiodący znak można użyć.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfr całkowitym* symbol separatora grupy można podzielić na partycje. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|,|Symbol separatora tysięcy specyficzny dla kultury.|  
|.|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. Oznacza to, że biały znak, tysięcy separatorów są dozwolone, na przykład gdy symbole waluty nie są. W przypadku skuteczniejszą kontroli nad styl elementy są dozwolone w `s` dla operacji analizowania została wykonana pomyślnie, należy wywołać <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> lub <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.  
  
 `s` Parametr jest interpretowany, korzystając z informacji formatowania w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącej kultury wątku. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>. Aby przeanalizować ciągu przy użyciu formatowania informacji niektóre inne kultury, należy wywołać <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> lub <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.  
  
 Zwykle w przypadku przekazania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Double.Parse%28System.String%29> metody.  
  
 [!code-cpp[Double Example#5](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#5)]
 [!code-csharp[Double Example#5](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#5)]
 [!code-vb[Double Example#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje numer w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="M:System.Double.TryParse(System.String,System.Double@)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; double" Usage="System.double.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowe połączenie wartości wyliczenia, które wskazują elementy style, które mogą być obecne w <c>s</c>. Typowy wartość określającą jest kombinacją <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <summary>Konwertuje reprezentacja ciągu liczb w stylu określony numer zmiennoprzecinkowe podwójnej precyzji równoważne.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji odpowiada wartość liczbowa lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy style (takich jak biały znak, tysięcy separatorów i symboli walut) mogą w `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Parametr może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType>. W zależności od wartości `style`, również może mieć postać:  
  
 [*ws*] [*$*] [*znak*] [*cyfr całkowitym*[*,*]]* typy całkowite cyfr*[*.* [*cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|$|Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+). Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|,|Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi|  
|.|Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `s` Parametr może reprezentować liczbę w notacji wykładniczej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementy, które mogą być obecne, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w `s` oprócz cyfr|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Dziesiętnego (*.*) i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów z takich elementów jak dodatnią lub ujemną znaki oraz symbole dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`oraz symbol punktu dziesiętnego (.). `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy dziesiętnym (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową.|  
  
 `s` Parametru jest analizować przy użyciu formatowania informacji w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącego ustawienia kulturowego systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  
  
 Zwykle w przypadku przekazania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> metodę, aby przeanalizować reprezentacji ciągu <xref:System.Double> wartości przy użyciu kultury en US.  
  
 [!code-csharp[System.Double.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse.cs#1)]
 [!code-vb[System.Double.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje numer w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> obejmuje <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; double" Usage="System.double.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury formatowania informacji na temat <c>s</c>.</param>
        <summary>Konwertuje reprezentację liczby w określonym formacie specyficzne dla kultury równoważne numer zmiennoprzecinkowe podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji odpowiada wartość liczbowa lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> metoda jest zwykle używana do konwersji tekstu, które mogą być sformatowane na różne sposoby <xref:System.Double> wartość. Na przykład może służyć do przekonwertowania tekst wprowadzony przez użytkownika w polu tekstowym HTML wartość liczbowa.  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej przez `provider`, lub mogą zawierać ciąg w formie:  
  
 [*ws*] [*znak*]*cyfr całkowitym*[*.* [*cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+).|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Działa z *cyfr całkowitym* symbol separatora grupy można podzielić na partycje. Na przykład w niektórych kulturach przecinek (,) oddziela grupy wartości tysięcznych. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|.|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym).|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Aby uzyskać więcej informacji na temat formaty liczbowe, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md) tematu.  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje specyficzne dla kultury używane przy interpretacji format `s`. Zazwyczaj jest <xref:System.Globalization.NumberFormatInfo> lub <xref:System.Globalization.CultureInfo> obiektu. Jeśli `provider` jest `null` lub <xref:System.Globalization.NumberFormatInfo> nie można uzyskać, informacje dotyczące formatowania dla bieżącego ustawienia kulturowego systemu.  
  
 Zwykle w przypadku przekazania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie występuje program obsługi zdarzeń kliknięcia przycisku w formularzu sieci Web. Używa tablicy zwracanej przez <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> właściwości w celu określenia ustawień regionalnych użytkownika. Następnie tworzy <xref:System.Globalization.CultureInfo> obiekt, który odpowiada ustawień regionalnych. <xref:System.Globalization.NumberFormatInfo> Obiektu, który należy do tego <xref:System.Globalization.CultureInfo> obiektu są następnie przekazywane do <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29> wejściowych metodę, aby przekonwertować użytkownika do <xref:System.Double> wartości.  
  
 [!code-csharp[ParseMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#2)]
 [!code-vb[ParseMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje numer w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
        <altmember cref="M:System.Double.ToString" />
        <altmember cref="Overload:System.Double.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Double" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; double" Usage="System.double.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="style">Bitowe połączenie wartości wyliczenia, które wskazują elementy style, które mogą być obecne w <c>s</c>. Jest Typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">Obiekt, który dostarcza specyficzne dla kultury formatowania informacji na temat <c>s</c>.</param>
        <summary>Konwertuje reprezentację liczby w określonym styl i format specyficzne dla kultury równoważne numer zmiennoprzecinkowe podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji odpowiada wartość liczbowa lub symbol określony w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `style` Parametru definiuje elementy style (takich jak biały znak, tysięcy separatorów i symboli walut) mogą w `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury określonej przez `provider`. W zależności od wartości `style`, również może mieć postać:  
  
 [*ws*] [*$*] [*znak*] [*całkowite cyfr*,]*cyfr całkowitym*[. [ *cyfr ułamkowych*]] [E [*znak*]*wykładniczej cyfr*] [*ws*]  
  
 Elementy w ramce w nawiasy kwadratowe ([i]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|$|Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> i <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości bieżącej kultury. Symbol waluty bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Symbol znaku minus (-) lub znaku dodatniego (+). Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. *Cyfr całkowitym* element może być nieobecne w przypadku ciągu zawiera *cyfr ułamkowych* elementu.|  
|,|Separator grupy specyficzny dla kultury. Symbol separatora grupy bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi|  
|.|Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|E|Znak „e” lub „E”, który wskazuje, że wartość jest reprezentowana w zapisie wykładniczym (naukowym). `s` Parametr może reprezentować liczbę w notacji wykładniczej, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementy, które mogą być obecne, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Elementy dozwolone w `s` oprócz cyfr|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|Dziesiętnego (*.*) i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|Znak „e” lub znak „E”, co oznacza zapis wykładniczy. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr*E*cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów z takich elementów jak dodatnią lub ujemną znaki oraz symbole dziesiętnego.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|Element separatora tysięcznego (,).|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|Element określający walutę ($).|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`oraz symbol punktu dziesiętnego (.). `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (,) i elementy dziesiętnym (.).|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie elementy. Jednak `s` nie może reprezentować liczbę szesnastkową.|  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu, który dostarcza informacje specyficzne dla kultury używane przy interpretacji format `s`. Zazwyczaj jest <xref:System.Globalization.NumberFormatInfo> lub <xref:System.Globalization.CultureInfo> obiektu. Jeśli `provider` jest `null` lub <xref:System.Globalization.NumberFormatInfo> nie można uzyskać, informacje dotyczące formatowania dla bieżącego ustawienia kulturowego systemu.  
  
 Zwykle w przypadku przekazania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/parse2.cs#3)]
 [!code-vb[System.Double.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/parse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody można przypisać kilku reprezentacji ciągu wartości temperatury `Temperature` obiektu.  
  
 [!code-csharp[System.Double.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.Parse/cs/Parse3.cs#2)]
 [!code-vb[System.Double.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.Parse/vb/Parse3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> reprezentuje wartość numeryczną.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> jest <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
        <altmember cref="M:System.Double.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const double PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PositiveInfinity = float64(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Double.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Double  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: double PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : double" Usage="System.double.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary>Reprezentuje nieskończoności dodatniej. To pole jest stałe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest wynik dzielenia przez zero liczbą dodatnią.  
  
 To stała jest zwracany, jeśli wynikiem operacji jest większa niż <xref:System.Double.MaxValue>.  
  
 Użyj <xref:System.Double.IsPositiveInfinity%2A> ustalenie, czy wartości daje w wyniku nieskończoności dodatniej.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie <xref:System.Double.PositiveInfinity>:  
  
 [!code-cpp[System.Double#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#10)]
 [!code-csharp[System.Double#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#10)]
 [!code-vb[System.Double#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.IsPositiveInfinity(System.Double)" />
        <altmember cref="M:System.Double.IsInfinity(System.Double)" />
        <altmember cref="F:System.Double.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
        <returns>
          <see langword="true" /> Jeśli wartość bieżącego wystąpienia nie jest 0; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Byte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda zgłasza <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia Ta metoda zgłasza wyjątek <see cref="T:System.InvalidCastException" /></summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia, bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Int64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.SByte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.Single" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Typ, do którego można przekonwertować to <see cref="T:System.Double" /> wartość.</param>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> Implementację, która dostarcza informacje specyficzne dla kultury o formacie zwracanej wartości.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie `static` (`Shared` w języku Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ten parametr jest ignorowany.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
        <returns>Wartość bieżącego wystąpienia przekonwertować <see cref="T:System.UInt64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Double> wystąpienia jest rzutowane na <xref:System.IConvertible> interfejsu. Zalecaną alternatywą jest wywołanie <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="double.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu.</summary>
        <returns>Ciąg reprezentujący wartość tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.ToString> Formatów metody <xref:System.Double> wartości domyślnej ("G" lub ogólny) formacie bieżącej kultury. Jeśli chcesz określić inny format, dokładność lub kultury, użyj innego przeciążenia metody <xref:System.Double.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|Określony format lub dokładności|Domyślną kulturę (bieżącego)|<xref:System.Double.ToString%28System.String%29>|  
|Określony format lub dokładności|Określoną kulturę|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciągiem w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9. Elementy wymienione w poniższej tabeli są obsługiwane.  
  
|Element|Opis|  
|-------------|-----------------|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*typy całkowite cyfr*|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'*.*'|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr określający część ułamkową liczby.|  
|"*e*"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|*wykładniczej cyfr*|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 W poniższym przykładzie użyto domyślnie <xref:System.Double.ToString?displayProperty=nameWithType> metodę w celu wyświetlenia reprezentacji ciągu liczby <xref:System.Double> wartości.  
  
 [!code-csharp[System.Double.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.Double.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#1)]  
  
 Poniższy przykład przedstawia użycie <xref:System.Double.ToString%2A>.  
  
 [!code-cpp[System.Double#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double/CPP/doublesample.cpp#3)]
 [!code-csharp[System.Double#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double/CS/doublesample.cs#3)]
 [!code-vb[System.Double#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double/VB/doublesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="double.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanych danych formatowania specyficznych dla kultury.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.ToString%28System.IFormatProvider%29> Formatów metody <xref:System.Double> wartości domyślnej ("G" lub ogólny) format określonej kultury. Jeśli chcesz określić inny format lub kultury, użyj innego przeciążenia metody <xref:System.Double.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślne (bieżącego)|<xref:System.Double.ToString>|  
|Określony format lub dokładności|Domyślną kulturę (bieżącego)|<xref:System.Double.ToString%28System.String%29>|  
|Określony format lub dokładności|Określoną kulturę|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub ciągiem w postaci:  
  
 [znak]cyfry-całkowite[.[cyfry-ułamkowe]][e[znak]cyfry-wykładnicze]  
  
 Elementy opcjonalne są obramowane nawiasami kwadratowymi ([ i ]). Elementy, które zawierają „cyfry”, składają się z serii cyfr od 0 do 9. Elementy wymienione w poniższej tabeli są obsługiwane.  
  
|Element|Opis|  
|-------------|-----------------|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*typy całkowite cyfr*|Ciąg cyfr określający część całkowitą liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|'*.*'|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Ciąg cyfr określający część ułamkową liczby.|  
|"*e*"|Mała litera „e”, wskazująca zapis wykładniczy (naukowy).|  
|*wykładniczej cyfr*|Ciąg cyfr określające wykładnik potęgi.|  
  
 Oto kilka przykładów zwracanej wartości: „100”, „-123,456,789”, „123.45e + 6”, „500”, „3.1416”, „600”, „-0.123” i „-nieskończoność”.  
  
 To wystąpienie jest sformatowana za pomocą ogólnego specyfikatora formatu liczbowego („G”).  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametru zapewnia informacje specyficzne dla kultury używaną w formatowaniu. Jeśli `provider` jest `null`, wartość zwracana jest sformatowany przy użyciu <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono reprezentację dwa <xref:System.Double> wartości przy użyciu <xref:System.Globalization.CultureInfo> obiektów, które reprezentują kilka innych kultur.  
  
 [!code-csharp[System.Double.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#2)]
 [!code-vb[System.Double.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#2)]  
  
 Poniższy przykład przedstawia użycie <xref:System.Double.ToString%2A>, biorąc <xref:System.String> i <xref:System.IFormatProvider> jako parametry.  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="double.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.ToString%28System.String%29> Formatów metody <xref:System.Double> wartości w określonym formacie przy użyciu konwencji bieżącej kultury. Jeśli chcesz określić inny format lub kultury, użyj innego przeciążenia metody <xref:System.Double.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślną kulturę (bieżącego)|<xref:System.Double.ToString>|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|Określony format lub dokładności|Określoną kulturę|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub reprezentację liczby, określony przez `format`.  
  
 `format` Parametr może mieć żadnych specyfikator prawidłowy standardowego formatu liczbowego, z wyjątkiem D i X, a także dowolną kombinację specyfikatory niestandardowego formatu liczbowego. Jeśli `format` jest `null` lub pusty ciąg, wartość zwracana jest sformatowany w systemie specyfikator formatu liczbowego ogólne ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 Domyślnie zwracana wartość zawiera tylko 15 cyfr precyzji chociaż maksymalnie 17 cyfr jest obsługiwany wewnętrznie. Jeśli wartość tego wystąpienia jest większa niż 15 znaków, <xref:System.Double.ToString%2A> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwanej liczby. Jeśli potrzebujesz bardziej precyzyjnie określić `format` ze specyfikacją formatu "G17" zawsze zwraca 17 cyfr precyzji lub "R", która zwraca 15 cyfr, jeśli liczba może być reprezentowany z tym dokładności lub 17 cyfr, jeśli liczba może być tylko reprezentowane z precyzja maksymalna.  
  
   
  
## Examples  
 W poniższym przykładzie określa wartość liczbową i formatuje je jako wartość walutową przy użyciu ciągu standardowego formatu liczbowego "C" i jako wartość liczbowa do trzech miejsc dziesiętnych przy użyciu ciągu standardowego formatu liczbowego "N". Ciągi wynik są sformatowane przy użyciu konwencji kultury en US. Aby uzyskać więcej informacji na ciągi formatujące liczb, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
 [!code-csharp[System.Double.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString7.cs#7)]
 [!code-vb[System.Double.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString7.vb#7)]  
  
 W poniższym przykładzie przedstawiono kilka <xref:System.Double> wartości przy użyciu specyfikatory obsługiwanego formatu liczbowego standardowe wraz z trzech niestandardowe ciągi formatujące liczby. Jeden z tych niestandardowych ciągów formatu ilustruje sposób konsoli <xref:System.Single> wartości z zerami. Ponadto w przykładzie użyto specyfikatory precyzji z każdego specyfikator formatu standardowych, z wyjątkiem "R". Wartości dokładności specyfikatory zakresu od 0 do 3. Aby dokonać konwersji wartości liczbowych na ciągi, w przykładzie użyto Konwencji formatowania kultury en US.  
  
 [!code-cpp[System.Double.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Double.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#3)]
 [!code-vb[System.Double.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> jest nieprawidłowy.</exception>
        <block subset="none" type="usage">
          <para>W niektórych przypadkach <see cref="T:System.Double" /> wartości sformatowany w systemie nie pomyślnie obustronne ciągu standardowego formatu liczbowego "R" Jeśli skompilowana przy użyciu <see langword="/platform:x64" /> lub <see langword="/platform:anycpu" /> przełączników i wykonywania na 64-bitowym. Aby obejść ten problem, można sformatować <see cref="T:System.Double" /> wartości przy użyciu ciągu standardowego formatu liczbowego "G17". W poniższym przykładzie użyto ciągu formatu "R" z <see cref="T:System.Double" /> wartość tego obustronne nie ma pomyślnie, a także format używa "G17" ciąg pomyślnie obustronne oryginalnej wartości.  [! kodu csharp [System.Double.ToString#6] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Double.ToString/cs/roundtripex2.cs#6)] [! kodu vb [System.Double.ToString#6] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Double.ToString/vb/roundtripex2.vb#6)]</para>
        </block>
        <altmember cref="M:System.Double.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="double.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu liczbowego.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość liczbową tego wystąpienia na równoważną reprezentację w postaci ciągu przy użyciu podanego formatu i informacji specyficznych dla kultury.</summary>
        <returns>Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29> Formatów metody <xref:System.Double> wartości w określonym formacie określonej kultury. Jeśli chcesz określić inny format lub kultury, użyj innego przeciążenia metody <xref:System.Double.ToString%2A> metody, w następujący sposób:  
  
|Aby użyć formatu|Dla kultury|Użyj przeciążenia|  
|-------------------|-----------------|----------------------|  
|Format domyślny ("G")|Domyślną kulturę (bieżącego)|<xref:System.Double.ToString>|  
|Format domyślny ("G")|Określoną kulturę|<xref:System.Double.ToString%28System.IFormatProvider%29>|  
|Określony format lub dokładności|Domyślną kulturę (bieżącego)|<xref:System.Double.ToString%28System.String%29>|  
  
 Zwracana wartość może być <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, lub reprezentację liczby, określony przez `format`.  
  
 `format` Parametr może mieć żadnych specyfikator prawidłowy standardowego formatu liczbowego, z wyjątkiem D i X, a także dowolną kombinację specyfikatory niestandardowego formatu liczbowego. Jeśli `format` jest `null` lub pusty ciąg, wartość zwracana dla tego wystąpienia jest sformatowany w systemie specyfikator formatu liczbowego ogólne ("G").  
  
 Środowisko .NET Framework zapewnia rozbudowaną obsługę formatowania. Opisano to szczegółowo w następujących tematach poświęconych formatowaniu:  
  
-   Aby uzyskać więcej informacji na temat specyfikatorów formatu liczbowego, zobacz [standardowe ciągi formatu liczbowego](~/docs/standard/base-types/standard-numeric-format-strings.md) i [niestandardowe ciągi formatów liczbowych](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Aby uzyskać więcej informacji na temat formatowania, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `provider` Parametr jest <xref:System.IFormatProvider> implementacji których <xref:System.IFormatProvider.GetFormat%2A> metoda zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Zazwyczaj `provider` jest <xref:System.Globalization.CultureInfo> obiektu lub <xref:System.Globalization.NumberFormatInfo> obiektu. `provider` Parametru zapewnia informacje specyficzne dla kultury używaną w formatowaniu. Jeśli `provider` jest `null`, wartość zwracana jest sformatowany przy użyciu <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury.  
  
 Domyślnie zwracana wartość zawiera tylko 15 cyfr precyzji chociaż maksymalnie 17 cyfr jest obsługiwany wewnętrznie. Jeśli wartość tego wystąpienia jest większa niż 15 znaków, <xref:System.Double.ToString%2A> zwraca <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> zamiast oczekiwanej liczby. Jeśli potrzebujesz bardziej precyzyjnie określić `format` ze specyfikacją formatu "G17" zawsze zwraca 17 cyfr precyzji lub "R", która zwraca 15 cyfr, jeśli liczba może być reprezentowany z tym dokładności lub 17 cyfr, jeśli liczba może być tylko reprezentowane z precyzja maksymalna.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Double> wartość przy użyciu specyfikatory obsługiwanego formatu liczbowego standardowe dla kilku różnych kultur.  
  
 [!code-cpp[System.Double.ToString#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Double.ToString/cpp/tostring1.cpp#4)]
 [!code-csharp[System.Double.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.ToString/cs/ToString1.cs#4)]
 [!code-vb[System.Double.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.ToString/vb/ToString1.vb#4)]  
  
 Poniższy przykład przedstawia użycie <xref:System.Double.ToString%2A>, biorąc <xref:System.String> i <xref:System.IFormatProvider> jako parametry.  
  
 [!code-cpp[Double Example#4](~/samples/snippets/cpp/VS_Snippets_CLR/Double Example/CPP/source.cpp#4)]
 [!code-csharp[Double Example#4](~/samples/snippets/csharp/VS_Snippets_CLR/Double Example/CS/source.cs#4)]
 [!code-vb[Double Example#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Double Example/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>W niektórych przypadkach <see cref="T:System.Double" /> wartości sformatowany w systemie nie pomyślnie obustronne ciągu standardowego formatu liczbowego "R" Jeśli skompilowana przy użyciu <see langword="/platform:x64" /> lub <see langword="/platform:anycpu" /> przełączników i wykonywania na 64-bitowym. Aby obejść ten problem, można sformatować <see cref="T:System.Double" /> wartości przy użyciu ciągu standardowego formatu liczbowego "G17". W poniższym przykładzie użyto ciągu formatu "R" z <see cref="T:System.Double" /> wartość tego obustronne nie ma pomyślnie, a także format używa "G17" ciąg pomyślnie obustronne oryginalnej wartości.  [! kodu csharp [System.Double.ToString#5] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Double.ToString/cs/roundtripex1.cs#5)] [! kodu vb [System.Double.ToString#5] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Double.ToString/vb/roundtripex1.vb#5)]</para>
        </block>
        <altmember cref="M:System.Double.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="double.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową podwójnej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <altmember cref="Overload:System.Double.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.double.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, która ma zostać przekształcona.</param>
        <param name="result">Po powrocie z tej metody zawiera podwójnej precyzji zmiennoprzecinkowe liczbowy odpowiednik <c>s</c> parametru, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Konwersja nie powiedzie się, jeśli <c>s</c> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest liczbą ma nieprawidłowy format lub reprezentuje liczbę mniej niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <c>wynik</c> zostaną zastąpione.</param>
        <summary>Konwertuje ciąg reprezentujący liczbę na odpowiadającą mu liczbę zmiennoprzecinkową podwójnej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie różni się od <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> metody, zwracając wartość logiczną wskazującą, czy operacja analizy zakończyła się pomyślnie zamiast zwracać przeanalizowana wartość liczbową. Eliminuje konieczność użycia obsługi wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie może zostać przeanalizowany pomyślnie.  
  
 `s` Parametr może zawierać bieżącej kultury <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> (porównania ciągów jest rozróżniana wielkość liter), lub ciągiem w postaci:  
  
 [ws] [znak] [całkowite cyfry,] cyfr typy całkowite [. [ cyfr ułamkowych]] [e [znak] wykładniczej cyfry] [ws]  
  
 Elementy w nawiasach kwadratowych są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Ciąg znaków spacji.|  
|*sign*|Znak ujemny lub symbol znaku dodatniego.|  
|*typy całkowite cyfr*|Seria cyfr od 0 do 9, określające integralną część liczby. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora grupy specyficzny dla kultury.|  
|*.*|Symbol dziesiętny specyficzny dla kultury.|  
|*cyfr ułamkowych*|Seria cyfr od 0 do 9, która określa ułamkową część liczby.|  
|*E*|Wielkie i małe znak "e" wskazującą notacji wykładniczej (naukowych).|  
|*wykładniczej cyfr*|Seria cyfr od 0 do 9, który Określ wykładnik.|  
  
 Aby uzyskać więcej informacji na temat formaty liczbowe, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).  
  
 `s` Parametr jest interpretowany za pomocą kombinacji <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> i <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi. Oznacza to, że biały znak i separatory tysięczne są dozwolone, ale symbole walut nie. Aby oznaczyć elementy (takie jak symbolu waluty, tysięcy separatorów i białe) które mogą być obecne w `s`, użyj <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> przeciążenie metody.  
  
 `s` Parametru jest analizować przy użyciu formatowania informacji w <xref:System.Globalization.NumberFormatInfo> obiekt, który został zainicjowany dla bieżącego ustawienia kulturowego systemu. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>. Można przeanalizować ciągu przy użyciu formatowania informacji z innymi określonej kultury, użyj <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> przeciążenie metody.  
  
 Zwykle w przypadku przekazania <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs#3)]
 [!code-vb[System.Double.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametru podczas operacji analizowania i separatorów dziesiętnych i grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny zamiast separatora grupy. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29> metodę, aby przekonwertować z reprezentacji ciągu wartości numerycznych <xref:System.Double> wartości. Zakłada się, że en US jest bieżącej kultury.  
  
 [!code-csharp[System.Double.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse1a.cs#1)]
 [!code-vb[System.Double.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse1a.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Double.Parse(System.String)" />
        <altmember cref="M:System.Double.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] double % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.double.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający liczbę, która ma zostać przekształcona.</param>
        <param name="style">Bitowe połączenie <see cref="T:System.Globalization.NumberStyles" /> wartości wskazujących format dozwolonych <c>s</c>. Jest Typowa wartość do określenia <see cref="F:System.Globalization.NumberStyles.Float" /> połączone z <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> Który dostarcza informacje dotyczące formatowania specyficzne dla kultury o <c>s</c>.</param>
        <param name="result">Po powrocie z tej metody zawiera podwójnej precyzji zmiennoprzecinkowe liczbowy odpowiednik wartość liczbowa lub symbol zawarty w <c>s</c>, jeśli konwersja powiodła się lub zero, jeśli konwersja nie powiodła się. Konwersja nie powiedzie się, jeśli <c>s</c> parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />, nie jest w formacie zgodne z <c>styl</c>, reprezentuje liczbę mniej niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />, lub jeśli <c>styl</c> nie jest prawidłową kombinacją <see cref="T:System.Globalization.NumberStyles" /> wyliczone stałe. Ten parametr jest przekazywany jako niezainicjowany; dowolna wartość pierwotnie podane w <c>wynik</c> zostaną zastąpione.</param>
        <summary>Konwertuje reprezentację liczby w określonym styl i format specyficzne dla kultury równoważne numer zmiennoprzecinkowe podwójnej precyzji. Zwracana wartość wskazuje, czy konwersja powiodła się czy nie.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Double.TryParse%2A> Przypomina metody <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> metody, z wyjątkiem tej metody nie zgłosić wyjątek, jeśli konwersja nie powiedzie się. Jeśli konwersja zakończy się powodzeniem, jest zwracana wartość `true` i `result` parametru ustawiono na wynik konwersji. W przypadku niepowodzenia konwersji jest zwracana wartość `false` i `result` parametr ma wartość zero. Eliminuje to konieczność użycia obsługi wyjątków do testowania <xref:System.FormatException> w przypadku gdy `s` jest nieprawidłowy i nie może zostać przeanalizowany pomyślnie.  
  
 `style` Parametr określa format dopuszczalny `s` parametr powodzenie operacji analizy. Musi być kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenia. Następujące <xref:System.Globalization.NumberStyles> elementy członkowskie nie są obsługiwane:  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 `s` Może zawierać parametru <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, lub <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> dla kultury wskazywanym przez `provider`. Ponadto, w zależności od wartości `style`, `s` parametr może zawierać następujące elementy:  
  
 [ws] [$] [znak] [całkowite cyfry,] typu całkowitego cyfry [.fractional cyfry] [e [znak] wykładniczej cyfry] [ws]  
  
 Elementy w nawiasach kwadratowych ([ i ]) są opcjonalne. W tabeli poniżej opisano każdy element.  
  
|Element|Opis|  
|-------------|-----------------|  
|*ws*|Opcjonalny odstęp. Biały znak, może występować na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flagi. Może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flagi.|  
|*$*|Symbol waluty specyficzny dla kultury. Jej położenie w ciągu jest definiowana za pomocą <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> lub <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metody `provider` parametru. Symbol waluty może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flagi.|  
|*sign*|Opcjonalny znak. Logowania może wystąpić na początku `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flagę która może występować na końcu `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flagi. Użycie nawiasów w `s` wskaż wartość ujemną, jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flagi.|  
|*typy całkowite cyfr*|Ciąg cyfr od 0 do 9, które określają jej część całkowitą. Cyfry całkowite mogą być nieobecne w przypadku cyfr ułamkowych.|  
|*,*|Symbol separatora tysięcy specyficzny dla kultury. Tysięcy bieżącej kultury symbol separatora może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flagi.|  
|*.*|Symbol dziesiętny specyficzny dla kultury. Symbol punktu dziesiętnego bieżącej kultury może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*cyfr ułamkowych*|Ciąg cyfr od 0 do 9, które określają część ułamkową liczby. Cyfr ułamkowych może występować w `s` Jeśli `style` obejmuje <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flagi.|  
|*e*|E lub litery E, która wskazuje, że `s` może reprezentować liczbę przy użyciu notacji wykładniczej. `s` Parametr może reprezentować liczbę w notacji wykładniczej, jeżeli styl zawiera <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flagi.|  
|*wykładniczej cyfr*|Ciąg cyfr od 0 do 9, które określają wykładnik potęgi.|  
  
 Ciąg zawierający tylko cyfry (które odpowiada <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> styl) zawsze przeanalizowany pomyślnie. Pozostałe <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> członkowie sterować elementów, które mogą być, ale nie muszą znajdować się w ciągu wejściowym. W poniższej tabeli przedstawiono poszczególne <xref:System.Globalization.NumberStyles> flagi mają wpływ na elementy, które mogą być obecne w `s`.  
  
|Wartość wyliczenia NumberStyles|Dodatkowe (poza cyframi) elementy dozwolone w parametrze s|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|*Cyfr całkowitym* tylko element.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|*.* i *cyfr ułamkowych* elementów.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|`s` Parametr można również użyć notacji wykładniczej. Ta flaga samodzielnie obsługuje wartości w postaci *cyfr całkowitym*E*wykładniczej cyfr*; dodatkowe flagi są niezbędne do pomyślnie analizowanie ciągów w notacji wykładniczej z takich elementów jak dodatnie lub ujemne znaki i symbole separatorem dziesiętnym.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|*Ws* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|*Ws* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|*Znak* element na początku `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|*Znak* element na końcu `s`.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|*Znak* elementu w postaci nawiasów otaczającej wartość liczbową.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|*,* Elementu.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|* $ * Elementu.|  
|<xref:System.Globalization.NumberStyles.Currency>|Wszystkie. `s` Parametr nie może reprezentować liczbę szesnastkową lub numer w notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Float>|*Ws* element na początku lub na końcu `s`, *znak* na początku `s`i *.* symbol. `s` Parametr można również użyć notacji wykładniczej.|  
|<xref:System.Globalization.NumberStyles.Number>|`ws`, `sign`, Tysięcy separatora (*,),* i dziesiętnym (*.*) elementów.|  
|<xref:System.Globalization.NumberStyles.Any>|Wszystkie style, z wyjątkiem `s` nie może reprezentować liczbę szesnastkową.|  
  
 `provider` Parametr jest <xref:System.IFormatProvider> wdrożenia, takich jak <xref:System.Globalization.NumberFormatInfo> lub <xref:System.Globalization.CultureInfo> obiektu. `provider` Parametru zapewnia informacje specyficzne dla kultury używany podczas analizy. Jeśli `provider` jest `null` lub <xref:System.Globalization.NumberFormatInfo> nie można uzyskać obiektu, informacji o formacie bieżącej kultury jest używany.  
  
 Konwersja kończy się niepowodzeniem, jeśli `s` parametr jest `null` lub nie wartość liczbową, `provider` parametru nie przekazuje <xref:System.Globalization.NumberFormatInfo> obiekt, lub `style` parametru nie jest kombinacją flag bitowych z <xref:System.Globalization.NumberStyles> wyliczenie.  
  
 Zwykle w przypadku przekazania <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody typu ciąg, który jest tworzony przez wywołanie metody <xref:System.Double.ToString%2A?displayProperty=nameWithType> metoda, oryginalny <xref:System.Double> jest zwracana wartość. Jednak ze względu na utratę precyzji wartości mogą być różne. Ponadto próby przeprowadzenia analizy reprezentację ciągu, albo <xref:System.Double.MinValue> lub <xref:System.Double.MaxValue> zgłasza <xref:System.OverflowException>, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Double.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/tryparse2.cs#3)]
 [!code-vb[System.Double.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/tryparse2.vb#3)]  
  
 Jeśli okaże się separatorem w `s` parametr podczas operacji analizowania i odpowiedniej walucie lub liczbę dziesiętną i separatorów grup są takie same, operacji analizowania zakłada, że separator separator dziesiętny, a nie grupą separator. Aby uzyskać więcej informacji na temat separatorów, zobacz <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, i <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType> metodę, aby przeanalizować reprezentację liczby styl, który jest sformatowany przy użyciu Konwencji określonej kultury.  
  
 [!code-csharp[System.Double.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Double.TryParse/cs/TryParse1.cs#2)]
 [!code-vb[System.Double.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Double.TryParse/vb/TryParse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> nie jest <see cref="T:System.Globalization.NumberStyles" /> wartość.  - lub - <paramref name="style" /> obejmuje <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> wartość.</exception>
        <altmember cref="M:System.Double.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>