<Type Name="Convert" FullName="System.Convert">
  <TypeSignature Language="C#" Value="public static class Convert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Convert extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Convert" />
  <TypeSignature Language="VB.NET" Value="Public Class Convert" />
  <TypeSignature Language="C++ CLI" Value="public ref class Convert abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="233c1-101">Konwertuje podstawowy typ danych na inny typ danych podstawowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-101">Converts a base data type to another base data type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-102">Metod statycznych <xref:System.Convert> klasy są głównie używane do obsługi konwersji do i z podstawowe typy danych w programie .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="233c1-102">The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework.</span></span> <span data-ttu-id="233c1-103">Obsługiwane typy podstawowe są <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> i <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-103">The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>.</span></span> <span data-ttu-id="233c1-104">Ponadto <xref:System.Convert> klasa zawiera metody służące do obsługi innych rodzajów konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-104">In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.</span></span>  
  
 <span data-ttu-id="233c1-105">Ten temat składa się z następujących sekcji:</span><span class="sxs-lookup"><span data-stu-id="233c1-105">This topic consists of the following sections:</span></span>  
  
 <span data-ttu-id="233c1-106">[Konwersje do i z typów podstawowych](#Base) </span><span class="sxs-lookup"><span data-stu-id="233c1-106">[Conversions to and from Base Types](#Base) </span></span>  
 <span data-ttu-id="233c1-107">[Podawać numery](#NonDecimal) </span><span class="sxs-lookup"><span data-stu-id="233c1-107">[Non-Decimal Numbers](#NonDecimal) </span></span>  
 <span data-ttu-id="233c1-108">[Konwersje z niestandardowych obiektów na typy podstawowe](#Custom) </span><span class="sxs-lookup"><span data-stu-id="233c1-108">[Conversions from Custom Objects to Base Types](#Custom) </span></span>  
 <span data-ttu-id="233c1-109">[Informacje dotyczące formatowania specyficzne dla kultury](#Culture) </span><span class="sxs-lookup"><span data-stu-id="233c1-109">[Culture-Specific Formatting Information](#Culture) </span></span>  
 <span data-ttu-id="233c1-110">[Kodowania Base64](#Base64) </span><span class="sxs-lookup"><span data-stu-id="233c1-110">[Base64 Encoding](#Base64) </span></span>  
 [<span data-ttu-id="233c1-111">Inne typowe konwersje</span><span class="sxs-lookup"><span data-stu-id="233c1-111">Other Common Conversions</span></span>](#Other)  
  
<a name="Base"></a>   
## <a name="conversions-to-and-from-base-types"></a><span data-ttu-id="233c1-112">Konwersja z i na typy podstawowe</span><span class="sxs-lookup"><span data-stu-id="233c1-112">Conversions to and from Base Types</span></span>  
 <span data-ttu-id="233c1-113">Istnieje metoda konwersji do przekonwertowania na każdy typ podstawowy co typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-113">A conversion method exists to convert every base type to every other base type.</span></span> <span data-ttu-id="233c1-114">Jednak rzeczywiste wywołanie do metody określonej konwersji może utworzyć jednej z pięciu wartości, w zależności od wartości typu podstawowego w czasie wykonywania i docelowy typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-114">However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type.</span></span> <span data-ttu-id="233c1-115">Te pięć wyniki są:</span><span class="sxs-lookup"><span data-stu-id="233c1-115">These five outcomes are:</span></span>  
  
-   <span data-ttu-id="233c1-116">Brak konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-116">No conversion.</span></span> <span data-ttu-id="233c1-117">Ten błąd występuje podczas próby konwertować z typu do samego siebie (na przykład wywołując <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType> z argumentem typu <xref:System.Int32>).</span><span class="sxs-lookup"><span data-stu-id="233c1-117">This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType> with an argument of type <xref:System.Int32>).</span></span> <span data-ttu-id="233c1-118">W tym przypadku metoda po prostu zwraca wystąpienie oryginalnego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-118">In this case, the method simply returns an instance of the original type.</span></span>  
  
-   <span data-ttu-id="233c1-119"><xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-119">An <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="233c1-120">Dzieje się tak, gdy określonego konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-120">This occurs when a particular conversion is not supported.</span></span> <span data-ttu-id="233c1-121"><xref:System.InvalidCastException> Jest zgłaszany w przypadku konwersji następujące:</span><span class="sxs-lookup"><span data-stu-id="233c1-121">An <xref:System.InvalidCastException> is thrown for the following conversions:</span></span>  
  
    -   <span data-ttu-id="233c1-122">Konwersje z <xref:System.Char> do <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, lub <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="233c1-122">Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.</span></span>  
  
    -   <span data-ttu-id="233c1-123">Konwersje z <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, lub <xref:System.DateTime> do <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="233c1-123">Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.</span></span>  
  
    -   <span data-ttu-id="233c1-124">Konwersje z <xref:System.DateTime> do żadnego innego typu, z wyjątkiem <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-124">Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.</span></span>  
  
    -   <span data-ttu-id="233c1-125">Konwersje z innych typów, z wyjątkiem <xref:System.String>, do <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="233c1-125">Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.</span></span>  
  
-   <span data-ttu-id="233c1-126">A <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-126">A <xref:System.FormatException>.</span></span> <span data-ttu-id="233c1-127">Dzieje się tak, jeśli można przekonwertować wartości ciągu na inne typu podstawowego próba nie powiedzie się, ponieważ ciąg nie jest w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-127">This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format.</span></span> <span data-ttu-id="233c1-128">Wyjątek podczas konwersji następujące:</span><span class="sxs-lookup"><span data-stu-id="233c1-128">The exception is thrown for the following conversions:</span></span>  
  
    -   <span data-ttu-id="233c1-129">Ciąg do przekonwertowania na <xref:System.Boolean> wartość nie jest równa <xref:System.Boolean.TrueString?displayProperty=nameWithType> lub <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-129">A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=nameWithType> or <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="233c1-130">Ciąg do przekonwertowania na <xref:System.Char> wartość składa się z wielu znaków.</span><span class="sxs-lookup"><span data-stu-id="233c1-130">A string to be converted to a <xref:System.Char> value consists of multiple characters.</span></span>  
  
    -   <span data-ttu-id="233c1-131">Ciąg do przekonwertowania do dowolnego typu liczbowego nie został rozpoznany jako prawidłowy numer.</span><span class="sxs-lookup"><span data-stu-id="233c1-131">A string to be converted to any numeric type is not recognized as a valid number.</span></span>  
  
    -   <span data-ttu-id="233c1-132">Ciąg do przekonwertowania na <xref:System.DateTime> nie został rozpoznany jako prawidłowy wartość daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-132">A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.</span></span>  
  
-   <span data-ttu-id="233c1-133">Konwersja powiodło się.</span><span class="sxs-lookup"><span data-stu-id="233c1-133">A successful conversion.</span></span> <span data-ttu-id="233c1-134">Podczas konwersji między dwa różne typy podstawowe nie są wymienione w poprzedniej wyników powiedzie się wszystkie konwersje rozszerzającą, a także wszystkich konwersji zawężającej, które nie powoduje utraty danych i metoda zwróci wartość docelowego typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-134">For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.</span></span>  
  
-   <span data-ttu-id="233c1-135"><xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-135">An <xref:System.OverflowException>.</span></span> <span data-ttu-id="233c1-136">Dzieje się tak, gdy zawężającej wyniki konwersji doprowadzi do utraty danych.</span><span class="sxs-lookup"><span data-stu-id="233c1-136">This occurs when a narrowing conversion results in a loss of data.</span></span> <span data-ttu-id="233c1-137">Na przykład próby konwersji <xref:System.Int32> wystąpienie, którego wartość to 10 000 do <xref:System.Byte> wpisz zgłasza <xref:System.OverflowException> ponieważ 10000 jest poza zakresem <xref:System.Byte> — typ danych.</span><span class="sxs-lookup"><span data-stu-id="233c1-137">For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.</span></span>  
  
 <span data-ttu-id="233c1-138">Wystąpił wyjątek nie zostanie wygenerowany, jeśli konwersja typu liczbowego powoduje utratę dokładności (oznacza to, utratę niektórych co najmniej cyfr znaczących).</span><span class="sxs-lookup"><span data-stu-id="233c1-138">An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits).</span></span> <span data-ttu-id="233c1-139">Jednak zostanie wygenerowany wyjątek, jeśli wynik jest większy niż mogą być reprezentowane przez typ zwracanej wartości metody określonej konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-139">However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.</span></span>  
  
 <span data-ttu-id="233c1-140">Na przykład, jeśli <xref:System.Double> jest konwertowana na <xref:System.Single>, może wystąpić utrata dokładności, ale nie jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="233c1-140">For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown.</span></span> <span data-ttu-id="233c1-141">Jednak jeśli wielkość <xref:System.Double> jest zbyt duży, aby mogły być reprezentowane przez <xref:System.Single>, jest zgłaszany wyjątek przepełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-141">However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.</span></span>  
  
<a name="NonDecimal"></a>   
## <a name="non-decimal-numbers"></a><span data-ttu-id="233c1-142">Podawać numery</span><span class="sxs-lookup"><span data-stu-id="233c1-142">Non-Decimal Numbers</span></span>  
 <span data-ttu-id="233c1-143"><xref:System.Convert> Klasa zawiera metody statyczne wywołujące do konwersji wartości całkowitych na ciąg podawać oświadczenia, a do konwertowania ciągów tej liczby podawać reprezentują do wartości całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-143">The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values.</span></span> <span data-ttu-id="233c1-144">Każda z tych metod konwersji obejmuje `base` argumentu, co pozwala określić układzie; binarny (podstawa 2), ósemkowy (podstawa 8) i szesnastkowym (podstawa 16), a także dziesiętnych (o podstawie 10).</span><span class="sxs-lookup"><span data-stu-id="233c1-144">Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10).</span></span> <span data-ttu-id="233c1-145">Istnieje zestaw metod do konwertowania każdego zgodne ze specyfikacją CLS pierwotne typy całkowite ciąg, a druga do przekonwertowania ciągu na każdy pierwotne typy całkowite:</span><span class="sxs-lookup"><span data-stu-id="233c1-145">There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:</span></span>  
  
-   <span data-ttu-id="233c1-146"><xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> i <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, można przekonwertować wartości typu byte do i z ciągu w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-146"><xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="233c1-147"><xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> i <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, aby przekonwertować 16-bitową liczbę całkowitą ze znakiem do i z ciągu w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-147"><xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="233c1-148"><xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> i <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, aby przekonwertować całkowita 32-bitowej do i z ciągu w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-148"><xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="233c1-149"><xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> i <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, o konwersję całkowita 64-bitowej do i z ciągu w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-149"><xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="233c1-150"><xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, aby przekonwertować reprezentacja ciągu wartości bajtu w określonym formacie bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-150"><xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.</span></span>  
  
-   <span data-ttu-id="233c1-151"><xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, aby przekonwertować na liczbę całkowitą bez znaku 16-bitowych reprezentację liczby całkowitej w określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-151"><xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.</span></span>  
  
-   <span data-ttu-id="233c1-152"><xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, można przekonwertować na liczbę całkowitą bez znaku 32-bitowych reprezentację liczby całkowitej w określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-152"><xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.</span></span>  
  
-   <span data-ttu-id="233c1-153"><xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, aby przekonwertować na liczbę całkowitą bez znaku 64-bitowych reprezentację liczby całkowitej w określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-153"><xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.</span></span>  
  
 <span data-ttu-id="233c1-154">Poniższy przykład konwertuje wartość <xref:System.Int16.MaxValue?displayProperty=nameWithType> na ciąg w wszystkie obsługiwane formaty liczbowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-154">The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=nameWithType> to a string in all supported numeric formats.</span></span> <span data-ttu-id="233c1-155">Następnie konwertuje wartość ciągu z powrotem do <xref:System.Int16> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-155">It then converts the string value back to a <xref:System.Int16> value.</span></span>  
  
 [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]
 [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]
 [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  
  
<a name="Custom"></a>   
## <a name="conversions-from-custom-objects-to-base-types"></a><span data-ttu-id="233c1-156">Konwersja niestandardowych obiektów na typy podstawowe</span><span class="sxs-lookup"><span data-stu-id="233c1-156">Conversions from Custom Objects to Base Types</span></span>  
 <span data-ttu-id="233c1-157">Oprócz obsługi konwersji między typami podstawowej <xref:System.Convert> metoda obsługuje konwersję dowolnego typu niestandardowego do dowolnego typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-157">In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type.</span></span> <span data-ttu-id="233c1-158">Aby to zrobić, niestandardowy typ musi implementować <xref:System.IConvertible> interfejs, który definiuje metody do konwersji na typ implementujący do każdego z typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-158">To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types.</span></span> <span data-ttu-id="233c1-159">Konwersje, które nie są obsługiwane przez określonego typu powinien zgłosić <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-159">Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.</span></span>  
  
 <span data-ttu-id="233c1-160">Gdy <xref:System.Convert.ChangeType%2A> metody jest przekazywany typu niestandardowego jako pierwszy parametr, lub gdy `Convert.To` *typu* — metoda (takich jak <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType> lub <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> jest nazywane i jako jego pierwszego przekazano wystąpienia typu niestandardowego Parametr <xref:System.Convert> metoda z kolei wywołuje typu niestandardowego <xref:System.IConvertible> implementacji, aby dokonać konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-160">When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion.</span></span> <span data-ttu-id="233c1-161">Aby uzyskać więcej informacji, zobacz [typ konwersji w programie .NET Framework](~/docs/standard/base-types/type-conversion.md).</span><span class="sxs-lookup"><span data-stu-id="233c1-161">For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="culture-specific-formatting-information"></a><span data-ttu-id="233c1-162">Informacje o formatowaniu specyficzne dla kultury</span><span class="sxs-lookup"><span data-stu-id="233c1-162">Culture-Specific Formatting Information</span></span>  
 <span data-ttu-id="233c1-163">Wszystkie metody konwersji typu podstawowego i <xref:System.Convert.ChangeType%2A> metoda zawierać przeciążenia, które ma parametr typu <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-163">All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-164">Na przykład <xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType> metoda ma następujące dwa przeciążenia:</span><span class="sxs-lookup"><span data-stu-id="233c1-164">For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType> method has the following two overloads:</span></span>  
  
-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
 <span data-ttu-id="233c1-165"><xref:System.IFormatProvider> Parametrów można podać formatowania informacje specyficzne dla kultury w celu ułatwienia procesu konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-165">The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process.</span></span> <span data-ttu-id="233c1-166">Jednak jest ignorowana przez większość metody konwersji typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-166">However, it is ignored by most of the base type conversion methods.</span></span> <span data-ttu-id="233c1-167">Jest używany tylko za pomocą następujących metod konwersji typu podstawowego. Jeśli `null` <xref:System.IFormatProvider> argument jest przekazywany do tych metod <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-167">It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="233c1-168">Za pomocą metod, które przekonwertować wartości typu liczbowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-168">By methods that convert a value to a numeric type.</span></span> <span data-ttu-id="233c1-169"><xref:System.IFormatProvider> Parametr jest używany przez przeciążenie, które ma parametry typu <xref:System.String> i <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-169">The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-170">Jest również używany przez przeciążenie, które ma parametry typu <xref:System.Object> i <xref:System.IFormatProvider> Jeśli obiektu środowiska wykonawczego typu jest <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-170">It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.</span></span>  
  
-   <span data-ttu-id="233c1-171">Za pomocą metod, które przekonwertować wartości daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-171">By methods that convert a value to a date and time.</span></span> <span data-ttu-id="233c1-172"><xref:System.IFormatProvider> Parametr jest używany przez przeciążenie, które ma parametry typu <xref:System.String> i <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-172">The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-173">Jest również używany przez przeciążenie, które ma parametry typu <xref:System.Object> i <xref:System.IFormatProvider> Jeśli obiektu środowiska wykonawczego typu jest <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-173">It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.</span></span>  
  
-   <span data-ttu-id="233c1-174">Przez <xref:System.Convert.ToString%2A?displayProperty=nameWithType> przeciążenia, które obejmują <xref:System.IFormatProvider> parametr i przekonwertować liczbowa wartość na ciąg lub <xref:System.DateTime> wartość na ciąg.</span><span class="sxs-lookup"><span data-stu-id="233c1-174">By the <xref:System.Convert.ToString%2A?displayProperty=nameWithType> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.</span></span>  
  
 <span data-ttu-id="233c1-175">Jednak dowolny typ zdefiniowany przez użytkownika, który zawiera <xref:System.IConvertible> ułatwia użycie <xref:System.IFormatProvider> parametru.</span><span class="sxs-lookup"><span data-stu-id="233c1-175">However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.</span></span>  
  
<a name="Base64"></a>   
## <a name="base64-encoding"></a><span data-ttu-id="233c1-176">Kodowania Base64</span><span class="sxs-lookup"><span data-stu-id="233c1-176">Base64 Encoding</span></span>  
 <span data-ttu-id="233c1-177">Kodowanie Base64 konwertuje dane binarne na ciąg.</span><span class="sxs-lookup"><span data-stu-id="233c1-177">Base64 encoding converts binary data to a string.</span></span> <span data-ttu-id="233c1-178">Dane wyrażonej w postaci cyfr base-64 można łatwo przekazywane za pośrednictwem kanałów danych, które mogą przesyłać tylko 7-bitowe znaki.</span><span class="sxs-lookup"><span data-stu-id="233c1-178">Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.</span></span> <span data-ttu-id="233c1-179"><xref:System.Convert> Klasa zawiera następujące metody umożliwiające obsługuje kodowania base64: zestaw metod obsługi Konwertowanie tablicy bajtów do i z <xref:System.String> lub do i z tablicy znaków Unicode zawierającego cyfrę base-64 znaków.</span><span class="sxs-lookup"><span data-stu-id="233c1-179">The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.</span></span>  
  
-   <span data-ttu-id="233c1-180"><xref:System.Convert.ToBase64String%2A>, który konwertuje tablicę bajtów na ciąg kodowany w formacie base64.</span><span class="sxs-lookup"><span data-stu-id="233c1-180"><xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.</span></span>  
  
-   <span data-ttu-id="233c1-181"><xref:System.Convert.ToBase64CharArray%2A>, który konwertuje tablicę bajtów do tablicy znaków z kodowaniem base64.</span><span class="sxs-lookup"><span data-stu-id="233c1-181"><xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.</span></span>  
  
-   <span data-ttu-id="233c1-182"><xref:System.Convert.FromBase64String%2A>, który konwertuje ciąg kodowany w formacie base64 na tablicę bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-182"><xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.</span></span>  
  
-   <span data-ttu-id="233c1-183"><xref:System.Convert.FromBase64CharArray%2A>, który konwertuje tablicę znaków z kodowaniem base64 na tablicę bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-183"><xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.</span></span>  
  
<a name="Other"></a>   
## <a name="other-common-conversions"></a><span data-ttu-id="233c1-184">Inne typowe konwersje</span><span class="sxs-lookup"><span data-stu-id="233c1-184">Other Common Conversions</span></span>  
 <span data-ttu-id="233c1-185">Inne klasy w NET Framework służy do wykonywania niektórych konwersji, które nie są obsługiwane przez metody statycznej <xref:System.Convert> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-185">You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.</span></span>  <span data-ttu-id="233c1-186">Należą do nich następujące elementy:</span><span class="sxs-lookup"><span data-stu-id="233c1-186">These include:</span></span>  
  
 <span data-ttu-id="233c1-187">Konwersja na tablice typu byte</span><span class="sxs-lookup"><span data-stu-id="233c1-187">Conversion to byte arrays</span></span>  
 <span data-ttu-id="233c1-188"><xref:System.BitConverter> Klasa udostępnia metody, które konwertują pierwotne typy liczbowe (w tym <xref:System.Boolean>) z bajt i tablice typu byte tablic z powrotem do typów danych pierwotnych.</span><span class="sxs-lookup"><span data-stu-id="233c1-188">The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.</span></span>  
  
 <span data-ttu-id="233c1-189">Znak kodowania i dekodowania</span><span class="sxs-lookup"><span data-stu-id="233c1-189">Character encoding and decoding</span></span>  
 <span data-ttu-id="233c1-190"><xref:System.Text.Encoding> Klasy i jej klas pochodnych (takich jak <xref:System.Text.UnicodeEncoding> i <xref:System.Text.UTF8Encoding>) podania metod do kodowania tablicy znaków lub ciąg (oznacza to, aby przekonwertować je na tablicę bajtów przy użyciu określonego kodowania) i zdekodować zakodowanego bajtów tablicy (oznacza to, że przekonwertować Tablica bajtowa znaków UTF16 zakodowane w formacie Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-190">The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters.</span></span> <span data-ttu-id="233c1-191">Aby uzyskać więcej informacji, zobacz [kodowania znaków w programie .NET Framework](~/docs/standard/base-types/character-encoding.md)</span><span class="sxs-lookup"><span data-stu-id="233c1-191">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-192">W poniższym przykładzie pokazano niektórych metod konwersji w <xref:System.Convert> klasy, w tym <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, i <xref:System.Convert.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="233c1-192">The following example demonstrates some of the conversion methods in the <xref:System.Convert> class, including <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, and <xref:System.Convert.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Convert#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/converter.cpp#1)]
 [!code-csharp[System.Convert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/converter.cs#1)]
 [!code-vb[System.Convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/converter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.SByte" />
    <altmember cref="T:System.Int16" />
    <altmember cref="T:System.Int32" />
    <altmember cref="T:System.Int64" />
    <altmember cref="T:System.Byte" />
    <altmember cref="T:System.UInt16" />
    <altmember cref="T:System.UInt32" />
    <altmember cref="T:System.UInt64" />
    <altmember cref="T:System.Single" />
    <altmember cref="T:System.Double" />
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Boolean" />
    <altmember cref="T:System.Char" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="ChangeType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-193">Zwraca obiekt, którego wartość jest odpowiednikiem określonego obiektu określonego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-193">Returns an object of a specified type whose value is equivalent to a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-194">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-194">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="conversionType"><span data-ttu-id="233c1-195">Typ obiektu, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="233c1-195">The type of object to return.</span></span></param>
        <summary><span data-ttu-id="233c1-196">Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-196">Returns an object of the specified type and whose value is equivalent to the specified object.</span></span></summary>
        <returns><span data-ttu-id="233c1-197">Obiekt, którego typ jest <paramref name="conversionType" /> , którego wartość jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-197">An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-198">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-198">-or-</span></span>  
  
 <span data-ttu-id="233c1-199">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> nie jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-199">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-200"><xref:System.Convert.ChangeType%2A> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do `conversionType`.</span><span class="sxs-lookup"><span data-stu-id="233c1-200"><xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`.</span></span> <span data-ttu-id="233c1-201">`value` Parametr może być dowolnego typu obiektu i `conversionType` można też <xref:System.Type> obiekt, który reprezentuje dowolnego typu podstawowego lub niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-201">The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type.</span></span> <span data-ttu-id="233c1-202">Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-202">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="233c1-203">Metoda, która wymaga tej konwersji `value` do `conversionType` być obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-203">The method requires that conversion of `value` to `conversionType` be supported.</span></span>  
  
 <span data-ttu-id="233c1-204">Ta metoda używa kultury bieżącej wątku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-204">This method uses the current thread's culture for the conversion.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-205">Poniższy przykład przedstawia użycie <xref:System.Convert.ChangeType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-205">The following example illustrates the use of the <xref:System.Convert.ChangeType%2A> method.</span></span>  
  
 [!code-cpp[convertchangetype#1](~/samples/snippets/cpp/VS_Snippets_CLR/convertchangetype/CPP/convertchangetype.cpp#1)]
 [!code-csharp[convertchangetype#1](~/samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/CS/convertchangetype.cs#1)]
 [!code-vb[convertchangetype#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convertchangetype/VB/convertchangetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-206">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-206">This conversion is not supported.</span></span>  
  
 <span data-ttu-id="233c1-207">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-207">-or-</span></span>  
  
 <span data-ttu-id="233c1-208"><paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-208"><paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.</span></span>  
  
 <span data-ttu-id="233c1-209">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-209">-or-</span></span>  
  
 <span data-ttu-id="233c1-210"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-210"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-211"><paramref name="value" /> nie jest w formacie rozpoznawanym przez <paramref name="conversionType" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-211"><paramref name="value" /> is not in a format recognized by <paramref name="conversionType" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-212"><paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="conversionType" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-212"><paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-213"><paramref name="conversionType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-213"><paramref name="conversionType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="233c1-214"><see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> Metoda można przekonwertować wartości wyliczenia do innego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-214">The <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> method can convert an enumeration value to another type.</span></span> <span data-ttu-id="233c1-215">Jednak go nie można przekonwertować typu wartością wyliczenia nawet, jeśli typ źródła jest podstawowy typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-215">However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</span></span> <span data-ttu-id="233c1-216">Aby przekonwertować typu wartości wyliczenia, użyj operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="233c1-216">To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</span></span> <span data-ttu-id="233c1-217">Poniższy przykład przedstawia konwersji do i z <c>kontynencie</c> wartości wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-217">The following example illustrates the conversion to and from a <c>Continent</c> enumeration value.</span></span>  
  
 [!code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)]
 [!code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  
  
 <span data-ttu-id="233c1-218"><see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> Metoda można przekonwertować typu dopuszczającego wartości null do innego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-218">The <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> method can convert a nullable type to another type.</span></span> <span data-ttu-id="233c1-219">Jednak go nie można przekonwertować typu do wartości typu dopuszczającego wartość null, nawet jeśli <paramref name="conversionType" /> jest typem podstawowym <see cref="T:System.Nullable`1" />. Aby dokonać konwersji, można użyć operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="233c1-219">However, it cannot convert another type to a value of a nullable type, even if <paramref name="conversionType" /> is the underlying type of the <see cref="T:System.Nullable`1" />.To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</span></span> <span data-ttu-id="233c1-220">Poniższy przykład przedstawia konwersji do i z typu dopuszczającego wartość null.</span><span class="sxs-lookup"><span data-stu-id="233c1-220">The following example illustrates the conversion to and from a nullable type.</span></span>  
  
 [!code-csharp[System.Convert.ChangeType#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable.cs#7)]
 [!code-vb[System.Convert.ChangeType#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable.vb#7)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-221">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-221">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="typeCode"><span data-ttu-id="233c1-222">Typ obiektu, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="233c1-222">The type of object to return.</span></span></param>
        <summary><span data-ttu-id="233c1-223">Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-223">Returns an object of the specified type whose value is equivalent to the specified object.</span></span></summary>
        <returns><span data-ttu-id="233c1-224">Obiekt, którego typ podstawowy jest <paramref name="typeCode" /> , którego wartość jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-224">An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-225">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-225">-or-</span></span>  
  
 <span data-ttu-id="233c1-226">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> jest <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, lub <see cref="F:System.TypeCode.Object" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-226">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-227"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do wstępnie zdefiniowany typ określony przez `typeCode`.</span><span class="sxs-lookup"><span data-stu-id="233c1-227"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`.</span></span> <span data-ttu-id="233c1-228">`value` Parametr może być dowolnego typu obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-228">The `value` parameter can be an object of any type.</span></span> <span data-ttu-id="233c1-229">Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-229">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="233c1-230">Metoda wymaga również tej konwersji `value` do `typeCode` być obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-230">The method also requires that conversion of `value` to `typeCode` be supported.</span></span>  
  
 <span data-ttu-id="233c1-231"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> Metoda nie obsługuje konwersji `value` do typu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-231">The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type.</span></span> <span data-ttu-id="233c1-232">Aby dokonać konwersji takie, należy wywołać <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-232">To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-233">Poniższy przykład przedstawia sposób użycia <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> metodę, aby zmienić <xref:System.Object> na typ określony przez <xref:System.TypeCode> parametru, jeśli to możliwe.</span><span class="sxs-lookup"><span data-stu-id="233c1-233">The following example illustrates how to use the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method to change an <xref:System.Object> to the type specified by the <xref:System.TypeCode> parameter, if possible.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype_01.cpp#2)]
 [!code-csharp[System.Convert.ChangeType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype01.cs#2)]
 [!code-vb[System.Convert.ChangeType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype01.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-234">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-234">This conversion is not supported.</span></span>  
  
 <span data-ttu-id="233c1-235">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-235">-or-</span></span>  
  
 <span data-ttu-id="233c1-236"><paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> Określa typ wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-236"><paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.</span></span>  
  
 <span data-ttu-id="233c1-237">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-237">-or-</span></span>  
  
 <span data-ttu-id="233c1-238"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-238"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-239"><paramref name="value" /> nie jest w formacie rozpoznawanym przez <paramref name="typeCode" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-239"><paramref name="value" /> is not in a format recognized by the <paramref name="typeCode" /> type.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-240"><paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="typeCode" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-240"><paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-241"><paramref name="typeCode" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-241"><paramref name="typeCode" /> is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type, provider As IFormatProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-242">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-242">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="conversionType"><span data-ttu-id="233c1-243">Typ obiektu, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="233c1-243">The type of object to return.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-244">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-244">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-245">Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-245">Returns an object of the specified type whose value is equivalent to the specified object.</span></span> <span data-ttu-id="233c1-246">Parametru zapewnia formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-246">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-247">Obiekt, którego typ jest <paramref name="conversionType" /> , którego wartość jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-247">An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-248">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-248">-or-</span></span>  
  
 <span data-ttu-id="233c1-249"><paramref name="value" />, jeśli <see cref="T:System.Type" /> z <paramref name="value" /> i <paramref name="conversionType" /> są takie same.</span><span class="sxs-lookup"><span data-stu-id="233c1-249"><paramref name="value" />, if the <see cref="T:System.Type" /> of <paramref name="value" /> and <paramref name="conversionType" /> are equal.</span></span>  
  
 <span data-ttu-id="233c1-250">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-250">-or-</span></span>  
  
 <span data-ttu-id="233c1-251">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> nie jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-251">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-252"><xref:System.Convert.ChangeType%2A> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do `conversionType`.</span><span class="sxs-lookup"><span data-stu-id="233c1-252"><xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`.</span></span> <span data-ttu-id="233c1-253">`value` Parametr może być dowolnego typu obiektu i `conversionType` można też <xref:System.Type> obiekt, który reprezentuje dowolnego typu podstawowego lub niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-253">The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type.</span></span> <span data-ttu-id="233c1-254">Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-254">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="233c1-255">Metoda, która wymaga tej konwersji `value` do `conversionType` być obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-255">The method requires that conversion of `value` to `conversionType` be supported.</span></span>  
  
 <span data-ttu-id="233c1-256">`provider` Parametr jest <xref:System.IFormatProvider> wdrożenia, który dostarcza informacje dotyczące formatowania do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-256">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion.</span></span> <span data-ttu-id="233c1-257">Czy i jak ten parametr jest używany zależy od bazowych <xref:System.IConvertible> implementacji.</span><span class="sxs-lookup"><span data-stu-id="233c1-257">Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation.</span></span> <span data-ttu-id="233c1-258">Jeśli `value` jest typem danych podstawowych `provider` jest używany tylko dla następującego konwersji:</span><span class="sxs-lookup"><span data-stu-id="233c1-258">If `value` is a base data type, `provider` is used only for the following conversions:</span></span>  
  
-   <span data-ttu-id="233c1-259">Konwersja z liczby na ciąg lub ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="233c1-259">Conversion from a number to a string, or from a string to a number.</span></span> <span data-ttu-id="233c1-260">`provider` musi być <xref:System.Globalization.CultureInfo> obiektu, <xref:System.Globalization.NumberFormatInfo> obiektu lub niestandardowy <xref:System.IFormatProvider> implementację, która zwraca <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-260">`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-261">Jednak ponieważ <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metoda przeprowadza konwersję przy użyciu domyślnego specyfikatora formatu "G", `provider` parametru nie ma efektu Jeśli `value` lub typ docelowy jest liczbą całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-261">However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.</span></span> <span data-ttu-id="233c1-262">Jeśli `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-262">If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="233c1-263">Konwersja z <xref:System.DateTime> wartość na ciąg lub ze string na <xref:System.DateTime> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-263">Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="233c1-264">`provider` musi być <xref:System.Globalization.CultureInfo> lub <xref:System.Globalization.DateTimeFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-264">`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.</span></span> <span data-ttu-id="233c1-265">Jeśli `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-265">If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
 <span data-ttu-id="233c1-266">Jeśli `value` jest typem zdefiniowanym przez aplikację jego <xref:System.IConvertible> implementacja może używać `provider` parametru.</span><span class="sxs-lookup"><span data-stu-id="233c1-266">If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-267">W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-267">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#3)]
 [!code-csharp[System.Convert.ChangeType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#3)]
 [!code-vb[System.Convert.ChangeType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#3)]  
  
 <span data-ttu-id="233c1-268">Poniższy przykład tworzy wystąpienie `Temperature` klasy i wywołania <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> metodę, aby przekonwertować go na podstawowe typy liczbowe obsługiwane przez program .NET Framework i do <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-268">The following example creates an instance of the `Temperature` class and calls the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method to convert it to the basic numeric types supported by the .NET Framework and to a <xref:System.String>.</span></span> <span data-ttu-id="233c1-269">Które zastosowano <xref:System.Convert.ChangeType%2A> metoda opakowuje wywołanie typu źródłowego <xref:System.IConvertible> implementacji.</span><span class="sxs-lookup"><span data-stu-id="233c1-269">It illustrates that the <xref:System.Convert.ChangeType%2A> method wraps a call to the source type's <xref:System.IConvertible> implementation.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#4)]
 [!code-csharp[System.Convert.ChangeType#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#4)]
 [!code-vb[System.Convert.ChangeType#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-270">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-270">This conversion is not supported.</span></span>  
  
 <span data-ttu-id="233c1-271">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-271">-or-</span></span>  
  
 <span data-ttu-id="233c1-272"><paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-272"><paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.</span></span>  
  
 <span data-ttu-id="233c1-273">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-273">-or-</span></span>  
  
 <span data-ttu-id="233c1-274"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-274"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-275"><paramref name="value" /> nie jest w formacie <paramref name="conversionType" /> rozpoznaje <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-275"><paramref name="value" /> is not in a format for <paramref name="conversionType" /> recognized by <paramref name="provider" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-276"><paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="conversionType" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-276"><paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-277"><paramref name="conversionType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-277"><paramref name="conversionType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="233c1-278"><see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> Metoda można przekonwertować wartości wyliczenia do innego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-278">The <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method can convert an enumeration value to another type.</span></span> <span data-ttu-id="233c1-279">Jednak go nie można przekonwertować typu wartością wyliczenia nawet, jeśli typ źródła jest podstawowy typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-279">However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</span></span> <span data-ttu-id="233c1-280">Aby przekonwertować typu wartości wyliczenia, użyj operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="233c1-280">To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</span></span> <span data-ttu-id="233c1-281">Poniższy przykład przedstawia konwersji do i z <c>kontynencie</c> wartości wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-281">The following example illustrates the conversion to and from a <c>Continent</c> enumeration value.</span></span>  
  
 [!code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)]
 [!code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  
  
 <span data-ttu-id="233c1-282"><see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> Metoda można przekonwertować typu dopuszczającego wartości null do innego typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-282">The <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method can convert a nullable type to another type.</span></span> <span data-ttu-id="233c1-283">Jednak go nie można przekonwertować typu do wartości typu dopuszczającego wartość null, nawet jeśli <paramref name="conversionType" /> jest typem podstawowym <see cref="T:System.Nullable`1" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-283">However, it cannot convert another type to a value of a nullable type, even if <paramref name="conversionType" /> is the underlying type of the <see cref="T:System.Nullable`1" />.</span></span> <span data-ttu-id="233c1-284">Aby dokonać konwersji, można użyć operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="233c1-284">To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</span></span> <span data-ttu-id="233c1-285">Poniższy przykład przedstawia konwersji do i z typu dopuszczającego wartość null.</span><span class="sxs-lookup"><span data-stu-id="233c1-285">The following example illustrates the conversion to and from a nullable type.</span></span>  
  
 [!code-csharp[System.Convert.ChangeType#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable_1.cs#8)]
 [!code-vb[System.Convert.ChangeType#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable_1.vb#8)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-286">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-286">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="typeCode"><span data-ttu-id="233c1-287">Typ obiektu, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="233c1-287">The type of object to return.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-288">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-288">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-289">Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-289">Returns an object of the specified type whose value is equivalent to the specified object.</span></span> <span data-ttu-id="233c1-290">Parametru zapewnia formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-290">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-291">Obiekt, którego typ podstawowy jest <paramref name="typeCode" /> , którego wartość jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-291">An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-292">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-292">-or-</span></span>  
  
 <span data-ttu-id="233c1-293">Odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> jest <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, lub <see cref="F:System.TypeCode.Object" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-293">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-294"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do wstępnie zdefiniowany typ określony przez `typeCode`.</span><span class="sxs-lookup"><span data-stu-id="233c1-294"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`.</span></span> <span data-ttu-id="233c1-295">`value` Parametr może być dowolnego typu obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-295">The `value` parameter can be an object of any type.</span></span> <span data-ttu-id="233c1-296">Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-296">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="233c1-297">Metoda wymaga również tej konwersji `value` do `typeCode` być obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-297">The method also requires that conversion of `value` to `typeCode` be supported.</span></span>  
  
 <span data-ttu-id="233c1-298"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> Metoda nie obsługuje konwersji `value` do typu niestandardowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-298">The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type.</span></span> <span data-ttu-id="233c1-299">Aby dokonać konwersji takie, należy wywołać <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-299">To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.</span></span>  
  
 <span data-ttu-id="233c1-300">`provider` Parametr jest <xref:System.IFormatProvider> wdrożenia, który dostarcza informacje dotyczące formatowania do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-300">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion.</span></span> <span data-ttu-id="233c1-301">Czy i jak ten parametr jest używany zależy od bazowych <xref:System.IConvertible> implementacji.</span><span class="sxs-lookup"><span data-stu-id="233c1-301">Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation.</span></span> <span data-ttu-id="233c1-302">Jeśli `value` jest typem danych podstawowych `provider` jest używany tylko dla następującego konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-302">If `value` is a base data type, `provider` is used only for the following conversions.</span></span> <span data-ttu-id="233c1-303">Jeśli `null` <xref:System.IFormatProvider> argument jest przekazywany do tych metod <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-303">If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="233c1-304">Konwersja z liczby na ciąg lub ciągu na liczbę.</span><span class="sxs-lookup"><span data-stu-id="233c1-304">Conversion from a number to a string, or from a string to a number.</span></span> <span data-ttu-id="233c1-305">`provider` musi być <xref:System.Globalization.CultureInfo> obiektu, <xref:System.Globalization.NumberFormatInfo> obiektu lub niestandardowy <xref:System.IFormatProvider> implementację, która zwraca <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-305">`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-306">Jednak ponieważ <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metoda przeprowadza konwersję przy użyciu domyślnego specyfikatora formatu "G", `provider` parametru nie ma efektu Jeśli `value` lub typ docelowy jest liczbą całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-306">However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.</span></span>  
  
-   <span data-ttu-id="233c1-307">Konwersja z <xref:System.DateTime> wartość na ciąg lub ze string na <xref:System.DateTime> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-307">Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="233c1-308">`provider` musi być <xref:System.Globalization.CultureInfo> lub <xref:System.Globalization.DateTimeFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-308">`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.</span></span>  
  
 <span data-ttu-id="233c1-309">Jeśli `value` jest typem zdefiniowanym przez aplikację jego <xref:System.IConvertible> implementacja może używać `provider` parametru.</span><span class="sxs-lookup"><span data-stu-id="233c1-309">If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-310">W poniższym przykładzie zdefiniowano formatu niestandardowego dostawcę o nazwie `InterceptProvider` wskazujące, gdy jego <xref:System.IFormatProvider.GetFormat%2A> metoda jest wywoływana i zwraca <xref:System.Globalization.NumberFormatInfo> dla kultury fr-FR i <xref:System.Globalization.DateTimeFormatInfo> obiektu dla kultury en US.</span><span class="sxs-lookup"><span data-stu-id="233c1-310">The following example defines a custom format provider named `InterceptProvider` that indicates when its <xref:System.IFormatProvider.GetFormat%2A> method is called and returns a <xref:System.Globalization.NumberFormatInfo> for the fr-FR culture and a <xref:System.Globalization.DateTimeFormatInfo> object for the en-US culture.</span></span> <span data-ttu-id="233c1-311">Ten dostawca format jest używany w wszystkie wywołania <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-311">This format provider is used in all calls to the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="233c1-312">Następnie tworzony tablicy o <xref:System.Double> i <xref:System.DateTime> wartości i wywołań powtarzające się <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> z każdej wartości, a każdy element członkowski <xref:System.TypeCode> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-312">The example then creates an array with a <xref:System.Double> and a <xref:System.DateTime> value and makes repeated calls to <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> with each value and each member of the <xref:System.TypeCode> enumeration.</span></span> <span data-ttu-id="233c1-313">Pokazano w przykładzie, jeśli metoda używa <xref:System.IFormatProvider> parametr, a także przedstawiono użycie `provider` parametr, aby wykonać formatowania zależne od kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-313">The example illustrates when the method uses the <xref:System.IFormatProvider> parameter and also illustrates the use of the `provider` parameter to perform culture-sensitive formatting.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype00.cpp#1)]
 [!code-csharp[System.Convert.ChangeType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype00.cs#1)]
 [!code-vb[System.Convert.ChangeType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype00.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-314">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-314">This conversion is not supported.</span></span>  
  
 <span data-ttu-id="233c1-315">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-315">-or-</span></span>  
  
 <span data-ttu-id="233c1-316"><paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> Określa typ wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-316"><paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.</span></span>  
  
 <span data-ttu-id="233c1-317">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-317">-or-</span></span>  
  
 <span data-ttu-id="233c1-318"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-318"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-319"><paramref name="value" /> nie jest w formacie <paramref name="typeCode" /> rozpoznaje typu <paramref name="provider" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-319"><paramref name="value" /> is not in a format for the <paramref name="typeCode" /> type recognized by <paramref name="provider" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-320"><paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="typeCode" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-320"><paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-321"><paramref name="typeCode" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-321"><paramref name="typeCode" /> is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DBNull">
      <MemberSignature Language="C#" Value="public static readonly object DBNull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DBNull" />
      <MemberSignature Language="DocId" Value="F:System.Convert.DBNull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DBNull As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DBNull;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="233c1-322">Stała reprezentująca kolumny bazy danych, która nie ma danych. oznacza to, że bazy danych wartości null.</span><span class="sxs-lookup"><span data-stu-id="233c1-322">A constant that represents a database column that is absent of data; that is, database null.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-323"><xref:System.Convert.DBNull> Pole jest odpowiednikiem <xref:System.DBNull.Value?displayProperty=nameWithType>, jak pokazano na poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="233c1-323">The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=nameWithType>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]
 [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
        <altmember cref="F:System.DBNull.Value" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64CharArray">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64CharArray(char[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64CharArray (inArray As Char(), offset As Integer, length As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64CharArray(cli::array &lt;char&gt; ^ inArray, int offset, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-324">Tablica znaków Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-324">A Unicode character array.</span></span></param>
        <param name="offset"><span data-ttu-id="233c1-325">Pozycja w <c>inArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-325">A position within <c>inArray</c>.</span></span></param>
        <param name="length"><span data-ttu-id="233c1-326">Liczba elementów w <c>inArray</c> do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-326">The number of elements in <c>inArray</c> to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-327">Konwertuje podzbiór tablicy znaków Unicode, który koduje dane binarne w formie cyfr w base-64, na tablicę równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-327">Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</span></span> <span data-ttu-id="233c1-328">Parametry określają podzbiór w tablicy wejściowej, a liczba elementów do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-328">Parameters specify the subset in the input array and the number of elements to convert.</span></span></summary>
        <returns><span data-ttu-id="233c1-329">Tablica 8-bitowych liczb całkowitych bez znaku odpowiednikiem <paramref name="length" /> elementy w pozycji <paramref name="offset" /> w <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-329">An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-330">`inArray` składa się z cyfr base-64, spacji i końcowe znaki wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-330">`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters.</span></span> <span data-ttu-id="233c1-331">Cyfry base-64 w kolejności rosnącej od zera są wielkie litery "A" do "Z", małe litery "a" na "z", cyfry od "0" do "9" oraz symbole "+" i "/".</span><span class="sxs-lookup"><span data-stu-id="233c1-331">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</span></span>  
  
 <span data-ttu-id="233c1-332">Białe znaki, a ich nazwy Unicode i szesnastkowe, są kartę (znak TABULACJA, U + 0009), znaków nowego wiersza (WYSUWU wiersza, U + 000A), znaków powrotu karetki (powrotu KARETKI, U + 000D), a pusty (miejsce, U + 0020).</span><span class="sxs-lookup"><span data-stu-id="233c1-332">The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</span></span> <span data-ttu-id="233c1-333">Dowolną liczbę spacji może występować w `inArray` ponieważ wszystkie białe znaki są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-333">An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.</span></span>  
  
 <span data-ttu-id="233c1-334">Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.</span><span class="sxs-lookup"><span data-stu-id="233c1-334">The valueless character, "=", is used for trailing padding.</span></span> <span data-ttu-id="233c1-335">Koniec `inArray` może składać się z zero, co najmniej dwa znaki wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-335">The end of `inArray` can consist of zero, one, or two padding characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-336"><xref:System.Convert.FromBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablicy pojedynczy znak, który zawiera wszystkie dane, które ma być zdekodowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-336">The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded.</span></span> <span data-ttu-id="233c1-337">Umożliwia zdekodowanie danych znaków base-64 ze strumienia, użyj <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-337">To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-338">W poniższym przykładzie pokazano użycie <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> sposób dekodowania danych UUencoded (base-64) i zapisz go jako dane binarne.</span><span class="sxs-lookup"><span data-stu-id="233c1-338">The following example demonstrates the use of the <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to decode UUencoded (base-64) data and save it as binary output.</span></span>  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#3)]
 [!code-csharp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#3)]
 [!code-vb[System.Convert UUEncodeDecode functions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#3)]  
  
 <span data-ttu-id="233c1-339">W poniższym przykładzie pokazano <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> i <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-339">The following example demonstrates the <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> and <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> methods.</span></span> <span data-ttu-id="233c1-340">Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda.</span><span class="sxs-lookup"><span data-stu-id="233c1-340">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="233c1-341">W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63.</span><span class="sxs-lookup"><span data-stu-id="233c1-341">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="233c1-342">W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem.</span><span class="sxs-lookup"><span data-stu-id="233c1-342">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="233c1-343">Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2.</span><span class="sxs-lookup"><span data-stu-id="233c1-343">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="233c1-344">Te cztery wartości odpowiadają cyfr base-64, "", "", "E" i "C" na początku danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-344">Those four values correspond to the base-64 digits, "A", "A", "E", and "C", at the beginning of the output.</span></span>  
  
 <span data-ttu-id="233c1-345">Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy.</span><span class="sxs-lookup"><span data-stu-id="233c1-345">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="233c1-346">W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF.</span><span class="sxs-lookup"><span data-stu-id="233c1-346">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="233c1-347">Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-347">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="233c1-348">Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.</span><span class="sxs-lookup"><span data-stu-id="233c1-348">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-349"><paramref name="inArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-349"><paramref name="inArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-350"><paramref name="offset" /> lub <paramref name="length" /> jest mniejszy niż 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-350"><paramref name="offset" /> or <paramref name="length" /> is less than 0.</span></span>  
  
 <span data-ttu-id="233c1-351">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-351">-or-</span></span>  
  
 <span data-ttu-id="233c1-352"><paramref name="offset" /> plus <paramref name="length" /> wskazuje nie jest w stanie <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-352"><paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="233c1-353">Długość <paramref name="inArray" />, ignorowanie białe znaki, nie jest zero lub jest wielokrotnością liczby 4.</span><span class="sxs-lookup"><span data-stu-id="233c1-353">The length of <paramref name="inArray" />, ignoring white-space characters, is not zero or a multiple of 4.</span></span>  
  
 <span data-ttu-id="233c1-354">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-354">-or-</span></span>  
  
 <span data-ttu-id="233c1-355">Format <paramref name="inArray" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-355">The format of <paramref name="inArray" /> is invalid.</span></span> <span data-ttu-id="233c1-356"><paramref name="inArray" /> zawiera znak z systemem innym niż base-64, więcej niż dwa znaki wypełnienia lub z systemem innym niż biały znak wśród znaków wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-356"><paramref name="inArray" /> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</span></span></exception>
        <altmember cref="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64String">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64String (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64String(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64String(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64String (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64String(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="233c1-357">Ciąg do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-357">The string to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-358">Konwertuje określony ciąg koduje dane binarne w formie cyfr w base-64, na tablicę równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-358">Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</span></span></summary>
        <returns><span data-ttu-id="233c1-359">Tablicę 8-bitowych liczb całkowitych bez znaku, który jest odpowiednikiem <paramref name="s" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-359">An array of 8-bit unsigned integers that is equivalent to <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-360">`s` składa się z cyfr base-64, spacji i końcowe znaki wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-360">`s` is composed of base-64 digits, white-space characters, and trailing padding characters.</span></span> <span data-ttu-id="233c1-361">Cyfry base-64 w kolejności rosnącej od zera są wielkie litery "A" do "Z", małe litery "a" na "z", cyfry od "0" do "9" oraz symbole "+" i "/".</span><span class="sxs-lookup"><span data-stu-id="233c1-361">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</span></span>  
  
 <span data-ttu-id="233c1-362">Białe znaki, a ich nazwy Unicode i szesnastkowe, są kartę (znak TABULACJA, U + 0009), znaków nowego wiersza (WYSUWU wiersza, U + 000A), znaków powrotu karetki (powrotu KARETKI, U + 000D), a pusty (miejsce, U + 0020).</span><span class="sxs-lookup"><span data-stu-id="233c1-362">The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</span></span> <span data-ttu-id="233c1-363">Dowolną liczbę spacji może występować w `s` ponieważ wszystkie białe znaki są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-363">An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.</span></span>  
  
 <span data-ttu-id="233c1-364">Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.</span><span class="sxs-lookup"><span data-stu-id="233c1-364">The valueless character, "=", is used for trailing padding.</span></span> <span data-ttu-id="233c1-365">Koniec `s` może składać się z zero, co najmniej dwa znaki wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-365">The end of `s` can consist of zero, one, or two padding characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-366"><xref:System.Convert.FromBase64String%2A> Metoda jest przeznaczona do przetworzenia jednego ciągu, który zawiera wszystkie dane, które ma być zdekodowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-366">The <xref:System.Convert.FromBase64String%2A> method is designed to process a single string that contains all the data to be decoded.</span></span> <span data-ttu-id="233c1-367">Umożliwia zdekodowanie danych znaków base-64 ze strumienia, użyj <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-367">To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-368">W poniższym przykładzie użyto <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> Konwertuj tablicę bajtów na ciąg UUencoded (base-64), a następnie wywołuje metodę <xref:System.Convert.FromBase64String%28System.String%29> metodę, aby przywrócić oryginalne tablicy bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-368">The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 <span data-ttu-id="233c1-369">Poniżej przedstawiono przykład bardziej skomplikowanych tworzącą 20 element tablicę 32-bitowych liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-369">The following is a more complex example that creates a 20-element array of 32-bit integers.</span></span> <span data-ttu-id="233c1-370">Następnie używa <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu do tablicy typu byte, w której są przechowywane w odpowiedniej pozycji w buforze przez wywołanie metody <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-370">It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-371">Bufor są następnie przekazywane do <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> metodę, aby utworzyć parametry UUencoded (base-64).</span><span class="sxs-lookup"><span data-stu-id="233c1-371">This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.</span></span>  <span data-ttu-id="233c1-372">Następnie wywołuje <xref:System.Convert.FromBase64String%28System.String%29> zdekodować ciągu UUencoded i wywołania metody <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> do przekonwertowania na liczbę całkowitą każdy zestaw z czterech bajtów (rozmiar całkowitą 32-bitowe).</span><span class="sxs-lookup"><span data-stu-id="233c1-372">It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</span></span> <span data-ttu-id="233c1-373">Dane wyjściowe w przykładzie przedstawiono pomyślnie przywrócił tablicy oryginalnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-373">The output from the example shows that the original array has been successfully restored.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-374"><paramref name="s" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-374"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="233c1-375">Długość <paramref name="s" />, ignorowanie białe znaki, nie jest zero lub jest wielokrotnością liczby 4.</span><span class="sxs-lookup"><span data-stu-id="233c1-375">The length of <paramref name="s" />, ignoring white-space characters, is not zero or a multiple of 4.</span></span>  
  
 <span data-ttu-id="233c1-376">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-376">-or-</span></span>  
  
 <span data-ttu-id="233c1-377">Format <paramref name="s" /> jest nieprawidłowy.</span><span class="sxs-lookup"><span data-stu-id="233c1-377">The format of <paramref name="s" /> is invalid.</span></span> <span data-ttu-id="233c1-378"><paramref name="s" /> zawiera znak z systemem innym niż base-64, więcej niż dwa znaki wypełnienia lub z systemem innym niż — biały znak — znak wśród znaków wypełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-378"><paramref name="s" /> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</span></span></exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.GetTypeCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeCode (value As Object) As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-379">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-379">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <summary><span data-ttu-id="233c1-380">Zwraca <see cref="T:System.TypeCode" /> dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-380">Returns the <see cref="T:System.TypeCode" /> for the specified object.</span></span></summary>
        <returns><span data-ttu-id="233c1-381"><see cref="T:System.TypeCode" /> Dla <paramref name="value" />, lub <see cref="F:System.TypeCode.Empty" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-381">The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDBNull (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-382">Obiekt.</span><span class="sxs-lookup"><span data-stu-id="233c1-382">An object.</span></span></param>
        <summary><span data-ttu-id="233c1-383">Zwraca wskazuje, czy określony obiekt jest typu <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-383">Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-384"><see langword="true" /> Jeśli <paramref name="value" /> jest typu <see cref="T:System.DBNull" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-384"><see langword="true" /> if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-385"><xref:System.Convert.IsDBNull%2A> Testy metody czy `value` parametr jest równy <xref:System.DBNull.Value?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-385">The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull.Value?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-386">Odpowiada to następującemu kodowi:</span><span class="sxs-lookup"><span data-stu-id="233c1-386">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]
 [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="233c1-387"><xref:System.DBNull.Value?displayProperty=nameWithType> Służy do wskazywania wartość, która nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="233c1-387"><xref:System.DBNull.Value?displayProperty=nameWithType> is used to indicate a value that is missing.</span></span> <span data-ttu-id="233c1-388">Nie jest odpowiednikiem `null` lub <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-388">It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-389">W związku z tym kodem takich jak `Convert.IsDBNull(null)` w języku C# lub `Convert.IsDBNull(Nothing)` w języku Visual Basic zwraca`false`.</span><span class="sxs-lookup"><span data-stu-id="233c1-389">Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-390">W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlDataReader> obiekt, aby pobrać ankieta danych z bazy danych.</span><span class="sxs-lookup"><span data-stu-id="233c1-390">The following example uses a <xref:System.Data.SqlClient.SqlDataReader> object to retrieve survey data from a database.</span></span> <span data-ttu-id="233c1-391">Przypisuje wartości pól w każdym wierszu do tablicy, a następnie przekazuje każdego tablicy elementu <xref:System.Convert.IsDBNull%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-391">It assigns each row's field values to an array, and then passes each array element to the <xref:System.Convert.IsDBNull%2A> method.</span></span> <span data-ttu-id="233c1-392">Jeśli metoda zwraca `true`, przykładzie przypisano ciąg "Brak" do elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="233c1-392">If the method returns `true`, the example assigns the string "NA" to the array element.</span></span> <span data-ttu-id="233c1-393">Tablica jest następnie dodawana do <xref:System.Windows.Forms.DataGridView.Rows%2A> Kolekcja <xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType> formantu.</span><span class="sxs-lookup"><span data-stu-id="233c1-393">The array is then added to the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection of a <xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType> control.</span></span>  
  
 [!code-csharp[System.Convert.IsDBNull#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#2)]
 [!code-vb[System.Convert.IsDBNull#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64CharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-394">Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-394">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span></span></summary>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-395">Tablicy wejściowej 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-395">An input array of 8-bit unsigned integers.</span></span></param>
        <param name="offsetIn"><span data-ttu-id="233c1-396">Pozycja w <c>inArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-396">A position within <c>inArray</c>.</span></span></param>
        <param name="length"><span data-ttu-id="233c1-397">Liczba elementów <c>inArray</c> do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-397">The number of elements of <c>inArray</c> to convert.</span></span></param>
        <param name="outArray"><span data-ttu-id="233c1-398">Dane wyjściowe tablicy znaków Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-398">An output array of Unicode characters.</span></span></param>
        <param name="offsetOut"><span data-ttu-id="233c1-399">Pozycja w <c>outArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-399">A position within <c>outArray</c>.</span></span></param>
        <summary><span data-ttu-id="233c1-400">Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-400">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span></span> <span data-ttu-id="233c1-401">Parametry określają podzbiorów, ponieważ powoduje przesunięcie w danych wejściowych i wyjściowych tablice i liczba elementów w tablicy wejściowej konwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-401">Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</span></span></summary>
        <returns><span data-ttu-id="233c1-402">Całkowita 32-bitowych zawierającą liczbę bajtów w <paramref name="outArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-402">A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-403">Podzbiór `length` elementy `inArray` zaczynając od pozycji `offsetIn`jako wartość liczbową i konwertowana do podzbioru elementów, `outArray` zaczynając od pozycji `offsetOut`.</span><span class="sxs-lookup"><span data-stu-id="233c1-403">The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`.</span></span> <span data-ttu-id="233c1-404">Wartości zwracanej wskazuje liczbę elementów przekonwertowane na `outArray`.</span><span class="sxs-lookup"><span data-stu-id="233c1-404">The return value indicates the number of converted elements in `outArray`.</span></span> <span data-ttu-id="233c1-405">Podzbiór `outArray` składa się z cyfr base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-405">The subset of `outArray` consists of base-64 digits.</span></span>  
  
 <span data-ttu-id="233c1-406">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-406">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-407">Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.</span><span class="sxs-lookup"><span data-stu-id="233c1-407">The valueless character, "=", is used for trailing padding.</span></span>  
  
 <span data-ttu-id="233c1-408">`offset` i `length` parametry są podpisane liczby 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-408">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="233c1-409">`offsetIn` i `offsetOut` parametry są pozycje tablicy liczony od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-409">The `offsetIn` and `offsetOut` parameters are zero-based array positions.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-410"><xref:System.Convert.ToBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-410">The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-411">Aby utworzyć tablicy znaków base-64 ze strumienia bajtów, użyj <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-411">To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-412">W poniższym przykładzie pokazano, przy użyciu <xref:System.Convert.ToBase64CharArray%2A> metodę UUencode (kodowania w base 64) strumień binarny, następnie zapisz kodowania do pliku.</span><span class="sxs-lookup"><span data-stu-id="233c1-412">The following example demonstrates using the <xref:System.Convert.ToBase64CharArray%2A> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</span></span>  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#2)]
 [!code-csharp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#2)]
 [!code-vb[System.Convert UUEncodeDecode functions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-413"><paramref name="inArray" /> lub <paramref name="outArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-413"><paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-414"><paramref name="offsetIn" />, <paramref name="offsetOut" />, lub <paramref name="length" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="233c1-414"><paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="233c1-415">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-415">-or-</span></span>  
  
 <span data-ttu-id="233c1-416"><paramref name="offsetIn" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-416"><paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span></span>  
  
 <span data-ttu-id="233c1-417">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-417">-or-</span></span>  
  
 <span data-ttu-id="233c1-418"><paramref name="offsetOut" /> i liczba elementów do zwrócenia jest większa niż długość <paramref name="outArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-418"><paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer, options As Base64FormattingOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-419">Tablicy wejściowej 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-419">An input array of 8-bit unsigned integers.</span></span></param>
        <param name="offsetIn"><span data-ttu-id="233c1-420">Pozycja w <c>inArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-420">A position within <c>inArray</c>.</span></span></param>
        <param name="length"><span data-ttu-id="233c1-421">Liczba elementów <c>inArray</c> do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-421">The number of elements of <c>inArray</c> to convert.</span></span></param>
        <param name="outArray"><span data-ttu-id="233c1-422">Dane wyjściowe tablicy znaków Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-422">An output array of Unicode characters.</span></span></param>
        <param name="offsetOut"><span data-ttu-id="233c1-423">Pozycja w <c>outArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-423">A position within <c>outArray</c>.</span></span></param>
        <param name="options">
          <span data-ttu-id="233c1-424"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</span><span class="sxs-lookup"><span data-stu-id="233c1-424"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span></span></param>
        <summary><span data-ttu-id="233c1-425">Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-425">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span></span> <span data-ttu-id="233c1-426">Parametry określają podzestawy jako przesunięcia w tablicach wejściowymi i wyjściowymi, liczba elementów w tablicy wejściowej, aby dokonać konwersji, i określa, czy wiersz podziałów tablicy danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-426">Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</span></span></summary>
        <returns><span data-ttu-id="233c1-427">Całkowita 32-bitowych zawierającą liczbę bajtów w <paramref name="outArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-427">A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-428">Podzbiór `length` elementy `inArray` parametru, zaczynając od pozycji `offsetIn`jako wartość liczbową i konwertowana do podzbioru elementów, `outArray` parametru, zaczynając od pozycji `offsetOut`.</span><span class="sxs-lookup"><span data-stu-id="233c1-428">The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`.</span></span> <span data-ttu-id="233c1-429">Wartości zwracanej wskazuje liczbę elementów przekonwertowane na `outArray`.</span><span class="sxs-lookup"><span data-stu-id="233c1-429">The return value indicates the number of converted elements in `outArray`.</span></span> <span data-ttu-id="233c1-430">Podzbiór `outArray` składa się z cyfr base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-430">The subset of `outArray` consists of base-64 digits.</span></span>  
  
 <span data-ttu-id="233c1-431">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-431">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-432">Valueless znak "=" jest używana do uzupełnienia końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-432">The valueless character "=" is used for trailing padding.</span></span>  
  
 <span data-ttu-id="233c1-433">`offset` i `length` parametry są podpisane liczby 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-433">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="233c1-434">`offsetIn` i `offsetOut` parametry są pozycje tablicy liczony od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-434">The `offsetIn` and `offsetOut` parameters are zero-based array positions.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-435"><xref:System.Convert.ToBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-435">The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-436">Aby utworzyć tablicy znaków base-64 ze strumienia bajtów, użyj <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-436">To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="233c1-437">Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków.</span><span class="sxs-lookup"><span data-stu-id="233c1-437">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="233c1-438">Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A).</span><span class="sxs-lookup"><span data-stu-id="233c1-438">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="233c1-439">Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="233c1-439">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-440">W poniższym przykładzie pokazano <xref:System.Convert.ToBase64CharArray%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-440">The following example demonstrates the <xref:System.Convert.ToBase64CharArray%2A> method.</span></span> <span data-ttu-id="233c1-441">Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda.</span><span class="sxs-lookup"><span data-stu-id="233c1-441">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="233c1-442">W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63.</span><span class="sxs-lookup"><span data-stu-id="233c1-442">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="233c1-443">W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem.</span><span class="sxs-lookup"><span data-stu-id="233c1-443">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="233c1-444">Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2.</span><span class="sxs-lookup"><span data-stu-id="233c1-444">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="233c1-445">Te cztery wartości odpowiadają cyfr base-64 "A", "", "E" i "C" na początku danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-445">Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</span></span>  
  
 <span data-ttu-id="233c1-446">Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy.</span><span class="sxs-lookup"><span data-stu-id="233c1-446">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="233c1-447">W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF.</span><span class="sxs-lookup"><span data-stu-id="233c1-447">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="233c1-448">Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-448">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="233c1-449">Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.</span><span class="sxs-lookup"><span data-stu-id="233c1-449">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-450"><paramref name="inArray" /> lub <paramref name="outArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-450"><paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-451"><paramref name="offsetIn" />, <paramref name="offsetOut" />, lub <paramref name="length" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="233c1-451"><paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="233c1-452">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-452">-or-</span></span>  
  
 <span data-ttu-id="233c1-453"><paramref name="offsetIn" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-453"><paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span></span>  
  
 <span data-ttu-id="233c1-454">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-454">-or-</span></span>  
  
 <span data-ttu-id="233c1-455"><paramref name="offsetOut" /> i liczba elementów do zwrócenia jest większa niż długość <paramref name="outArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-455"><paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-456"><paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-456"><paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64String">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-457">Konwertuje wartość na tablicę 8-bitowych liczb całkowitych bez znaku do reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-457">Converts the value of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span></span></summary>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-458">Tablica 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-458">An array of 8-bit unsigned integers.</span></span></param>
        <summary><span data-ttu-id="233c1-459">Konwertuje tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-459">Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span></span></summary>
        <returns><span data-ttu-id="233c1-460">Reprezentacja ciągu w base 64 zawartości <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-460">The string representation, in base 64, of the contents of <paramref name="inArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-461">Elementy `inArray` zarejestrowane jako wartość liczbową i konwertowana do reprezentacji w postaci ciągu jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-461">The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.</span></span>  
  
 <span data-ttu-id="233c1-462">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-462">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-463">Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.</span><span class="sxs-lookup"><span data-stu-id="233c1-463">The valueless character, "=", is used for trailing padding.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-464"><xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-464">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-465">Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-465">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="233c1-466">Zwykle <xref:System.Convert.ToBase64String%2A> metoda nie jest używany do przesyłania danych UUEncoded (algorytmem base-64) ciągu.</span><span class="sxs-lookup"><span data-stu-id="233c1-466">Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.</span></span>  <span data-ttu-id="233c1-467">Oznacza to jeśli dekodowanie ciąg przez wywołanie metody <xref:System.Convert.FromBase64String%2A> metody, następnie zakodować tablicy bajtów zwrócona przez wywołanie metody <xref:System.Convert.ToBase64String%2A> metody, wynikowy ciąg znaków nie zawsze będą takie same jak oryginalny ciąg.</span><span class="sxs-lookup"><span data-stu-id="233c1-467">That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string.</span></span> <span data-ttu-id="233c1-468">Ten ciąg zostanie wyrównana, tylko wtedy, gdy oryginalnego ciągu jest prawidłowy ciąg zakodowany base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-468">The string will round-trip only if the original string is a valid base-64 encoded string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-469">W poniższym przykładzie użyto <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> Konwertuj tablicę bajtów na ciąg UUencoded (base-64), a następnie wywołuje metodę <xref:System.Convert.FromBase64String%28System.String%29> metodę, aby przywrócić oryginalne tablicy bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-469">The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 <span data-ttu-id="233c1-470">Poniżej przedstawiono przykład bardziej skomplikowanych tworzącą 20 element tablicę 32-bitowych liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-470">The following is a more complex example that creates a 20-element array of 32-bit integers.</span></span> <span data-ttu-id="233c1-471">Następnie używa <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu do tablicy typu byte, w której są przechowywane w odpowiedniej pozycji w buforze przez wywołanie metody <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-471">It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-472">Bufor są następnie przekazywane do <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> metodę, aby utworzyć parametry UUencoded (base-64).</span><span class="sxs-lookup"><span data-stu-id="233c1-472">This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.</span></span>  <span data-ttu-id="233c1-473">Następnie wywołuje <xref:System.Convert.FromBase64String%28System.String%29> zdekodować ciągu UUencoded i wywołania metody <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> do przekonwertowania na liczbę całkowitą każdy zestaw z czterech bajtów (rozmiar całkowitą 32-bitowe).</span><span class="sxs-lookup"><span data-stu-id="233c1-473">It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</span></span> <span data-ttu-id="233c1-474">Dane wyjściowe w przykładzie przedstawiono pomyślnie przywrócił tablicy oryginalnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-474">The output from the example shows that the original array has been successfully restored.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-475"><paramref name="inArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-475"><paramref name="inArray" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, Base64FormattingOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-476">Tablica 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-476">An array of 8-bit unsigned integers.</span></span></param>
        <param name="options">
          <span data-ttu-id="233c1-477"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</span><span class="sxs-lookup"><span data-stu-id="233c1-477"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span></span></param>
        <summary><span data-ttu-id="233c1-478">Konwertuje tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-478">Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span></span> <span data-ttu-id="233c1-479">Parametr określa, czy można wstawić podziały wierszy w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="233c1-479">A parameter specifies whether to insert line breaks in the return value.</span></span></summary>
        <returns><span data-ttu-id="233c1-480">Reprezentacja ciągu w base 64 elementów w <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-480">The string representation in base 64 of the elements in <paramref name="inArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-481">Elementy `inArray` parametru są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.</span><span class="sxs-lookup"><span data-stu-id="233c1-481">The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="233c1-482">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-482">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-483">Valueless znak "=" jest używana do uzupełnienia końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-483">The valueless character "=" is used for trailing padding.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-484"><xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-484">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-485">Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-485">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="233c1-486">Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków.</span><span class="sxs-lookup"><span data-stu-id="233c1-486">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="233c1-487">Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A).</span><span class="sxs-lookup"><span data-stu-id="233c1-487">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="233c1-488">Ponieważ podziały wierszy są traktowane jako odstęp w kodowanie base-64, są ignorowane podczas konwertowania base-64 ciąg kodowany w formacie powrót do tablicy bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-488">Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array.</span></span> <span data-ttu-id="233c1-489">Podziały wierszy są po prostu wygodny podczas wyświetlania zakodowany ciąg do formantu lub urządzeniami, takimi jak okna konsoli.</span><span class="sxs-lookup"><span data-stu-id="233c1-489">The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.</span></span> <span data-ttu-id="233c1-490">Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="233c1-490">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-491">Następujące przykładowe wywołania <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType> z <xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType> argument Wstaw wiersz dzieli w ciągu, który jest generowany przez kodowania tablicy bajtów elementu 100.</span><span class="sxs-lookup"><span data-stu-id="233c1-491">The following example calls the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType> with a <xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String3.cs#3)]
 [!code-vb[System.Convert.ToBase64String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String3.vb#3)]  
  
 <span data-ttu-id="233c1-492">Jako dane wyjściowe w przykładzie pokazano <xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType> pomyślnie przywrócenie oryginalnego tablicy bajtów; znaki podziału wiersza są ignorowane podczas konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-492">As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-493"><paramref name="inArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-493"><paramref name="inArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-494"><paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-494"><paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (ReadOnlySpan&lt;byte&gt; bytes, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (bytes As ReadOnlySpan(Of Byte), Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-495">Tablica 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-495">An array of 8-bit unsigned integers.</span></span></param>
        <param name="offset"><span data-ttu-id="233c1-496">Przesunięcie w <c>inArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-496">An offset in <c>inArray</c>.</span></span></param>
        <param name="length"><span data-ttu-id="233c1-497">Liczba elementów <c>inArray</c> do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-497">The number of elements of <c>inArray</c> to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-498">Konwertuje podzbiór tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-498">Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span></span> <span data-ttu-id="233c1-499">Parametry określają podzbiór przesunięcia w tablicy wejściowej, a liczba elementów w tablicy, do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-499">Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</span></span></summary>
        <returns><span data-ttu-id="233c1-500">Reprezentacja ciągu w podstawowej 64 <paramref name="length" /> elementy <paramref name="inArray" />, zaczynając od pozycji <paramref name="offset" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-500">The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-501">Elementy `inArray` są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.</span><span class="sxs-lookup"><span data-stu-id="233c1-501">The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="233c1-502">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-502">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-503">Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.</span><span class="sxs-lookup"><span data-stu-id="233c1-503">The valueless character, "=", is used for trailing padding.</span></span>  
  
 <span data-ttu-id="233c1-504">`offset` i `length` parametry są podpisane liczby 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-504">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="233c1-505">`offset` Parametr jest liczony od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-505">The `offset` parameter is zero-based.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-506"><xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-506">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-507">Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-507">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-508"><paramref name="inArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-508"><paramref name="inArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-509"><paramref name="offset" /> lub <paramref name="length" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="233c1-509"><paramref name="offset" /> or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="233c1-510">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-510">-or-</span></span>  
  
 <span data-ttu-id="233c1-511"><paramref name="offset" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-511"><paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer, options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray"><span data-ttu-id="233c1-512">Tablica 8-bitowych liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-512">An array of 8-bit unsigned integers.</span></span></param>
        <param name="offset"><span data-ttu-id="233c1-513">Przesunięcie w <c>inArray</c>.</span><span class="sxs-lookup"><span data-stu-id="233c1-513">An offset in <c>inArray</c>.</span></span></param>
        <param name="length"><span data-ttu-id="233c1-514">Liczba elementów <c>inArray</c> do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-514">The number of elements of <c>inArray</c> to convert.</span></span></param>
        <param name="options">
          <span data-ttu-id="233c1-515"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</span><span class="sxs-lookup"><span data-stu-id="233c1-515"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span></span></param>
        <summary><span data-ttu-id="233c1-516">Konwertuje podzbiór tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</span><span class="sxs-lookup"><span data-stu-id="233c1-516">Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span></span> <span data-ttu-id="233c1-517">Parametry Określ podzbiór przesunięcia w tablicy wejściowej, liczba elementów w tablicy, tak aby przekonwertować, a dzieli opcję wstawiania wiersza w wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="233c1-517">Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</span></span></summary>
        <returns><span data-ttu-id="233c1-518">Reprezentacja ciągu w podstawowej 64 <paramref name="length" /> elementy <paramref name="inArray" />, zaczynając od pozycji <paramref name="offset" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-518">The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-519">Elementy `inArray` parametru są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.</span><span class="sxs-lookup"><span data-stu-id="233c1-519">The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="233c1-520">Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”.</span><span class="sxs-lookup"><span data-stu-id="233c1-520">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="233c1-521">Valueless znak "=" jest używana do uzupełnienia końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-521">The valueless character "=" is used for trailing padding.</span></span>  
  
 <span data-ttu-id="233c1-522">`offset` i `length` parametry są podpisane liczby 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-522">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="233c1-523">`offset` Parametr jest liczony od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-523">The `offset` parameter is zero-based.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="233c1-524"><xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-524">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="233c1-525">Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-525">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="233c1-526">Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków.</span><span class="sxs-lookup"><span data-stu-id="233c1-526">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="233c1-527">Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A).</span><span class="sxs-lookup"><span data-stu-id="233c1-527">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="233c1-528">Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="233c1-528">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-529">W poniższym przykładzie pokazano <xref:System.Convert.ToBase64String%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-529">The following example demonstrates the <xref:System.Convert.ToBase64String%2A> method.</span></span> <span data-ttu-id="233c1-530">Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda.</span><span class="sxs-lookup"><span data-stu-id="233c1-530">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="233c1-531">W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63.</span><span class="sxs-lookup"><span data-stu-id="233c1-531">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="233c1-532">W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem.</span><span class="sxs-lookup"><span data-stu-id="233c1-532">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="233c1-533">Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2.</span><span class="sxs-lookup"><span data-stu-id="233c1-533">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="233c1-534">Te cztery wartości odpowiadają cyfr base-64 "A", "", "E" i "C" na początku danych wyjściowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-534">Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</span></span>  
  
 <span data-ttu-id="233c1-535">Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy.</span><span class="sxs-lookup"><span data-stu-id="233c1-535">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="233c1-536">W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF.</span><span class="sxs-lookup"><span data-stu-id="233c1-536">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="233c1-537">Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64.</span><span class="sxs-lookup"><span data-stu-id="233c1-537">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="233c1-538">Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.</span><span class="sxs-lookup"><span data-stu-id="233c1-538">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64string#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64string/CPP/tb64s.cpp#1)]
 [!code-csharp[convert.tobase64string#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64string/CS/tb64s.cs#1)]
 [!code-vb[convert.tobase64string#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64string/VB/tb64s.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-539"><paramref name="inArray" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-539"><paramref name="inArray" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-540"><paramref name="offset" /> lub <paramref name="length" /> jest ujemna.</span><span class="sxs-lookup"><span data-stu-id="233c1-540"><paramref name="offset" /> or <paramref name="length" /> is negative.</span></span>  
  
 <span data-ttu-id="233c1-541">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-541">-or-</span></span>  
  
 <span data-ttu-id="233c1-542"><paramref name="offset" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-542"><paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-543"><paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-543"><paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBoolean">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-544">Konwertuje określoną wartość na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-544">Converts a specified value to an equivalent Boolean value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-545">Wartość logiczna do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-545">The Boolean value to return.</span></span></param>
        <summary><span data-ttu-id="233c1-546">Zwraca określoną wartość logiczną; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-546">Returns the specified Boolean value; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-547"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-547"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-548">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-548">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-549">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-549">Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-550"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-550"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-551">Poniższy przykład konwertuje tablicę <xref:System.Byte> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-551">The following example converts an array of <xref:System.Byte> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#12)]
 [!code-csharp[System.Convert.ToBoolean#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#12)]
 [!code-vb[System.Convert.ToBoolean#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-552">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-552">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-553">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-553">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-554">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-554">This conversion is not supported.</span></span> <span data-ttu-id="233c1-555">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-555">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-556">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-556">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-557">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-557">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-558">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-558">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-559">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-559">This conversion is not supported.</span></span> <span data-ttu-id="233c1-560">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-560">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-561">W poniższym przykładzie pokazano, że próba konwersji <xref:System.DateTime> zwraca wartość typu Boolean <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-561">The following example demonstrates that an attempt to convert a <xref:System.DateTime> value to a Boolean type throws <xref:System.InvalidCastException>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#20)]
 [!code-csharp[System.Convert Snippets#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#20)]
 [!code-vb[System.Convert Snippets#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-562">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-562">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-563">Liczbę do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-563">The number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-564">Konwertuje wartość określonej liczby dziesiętnej na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-564">Converts the value of the specified decimal number to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-565"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-565"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-566">Poniższy przykład konwertuje tablicę <xref:System.Decimal> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-566">The following example converts an array of <xref:System.Decimal> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#2)]
 [!code-csharp[System.Convert.ToBoolean#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#2)]
 [!code-vb[System.Convert.ToBoolean#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-567">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-567">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-568">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-568">Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-569"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-569"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-570">Poniższy przykład konwertuje wartości logicznej na <xref:System.Double> i <xref:System.Double> na wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-570">The following example converts a Boolean to a <xref:System.Double> and a <xref:System.Double> to a Boolean value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-571">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-571">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-572">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-572">Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-573"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-573"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-574">Poniższy przykład konwertuje tablicę <xref:System.Int16> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-574">The following example converts an array of <xref:System.Int16> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#3)]
 [!code-csharp[System.Convert.ToBoolean#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#3)]
 [!code-vb[System.Convert.ToBoolean#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-575">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-575">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-576">Konwertuje wartość określonego całkowita 32-bitowych równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-576">Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-577"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-577"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-578">Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-578">The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#4)]
 [!code-csharp[System.Convert.ToBoolean#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#4)]
 [!code-vb[System.Convert.ToBoolean#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-579">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-579">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-580">Konwertuje wartość określonego całkowita 64-bitowych na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-580">Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-581"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-581"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-582">Poniższy przykład konwertuje tablicę <xref:System.Int64> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-582">The following example converts an array of <xref:System.Int64> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#5)]
 [!code-csharp[System.Convert.ToBoolean#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#5)]
 [!code-vb[System.Convert.ToBoolean#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-583">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-583">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-584">Konwertuje wartość określonego obiektu na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-584">Converts the value of a specified object to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-585"><see langword="true" /> lub <see langword="false" />, co odzwierciedla wartość zwrócona przez wywołanie <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> metody dla typu źródłowego <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-585"><see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />.</span></span> <span data-ttu-id="233c1-586">Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-586">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-587">Poniższy przykład konwertuje tablicę wartości obiektu <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-587">The following example converts an array of object values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#11)]
 [!code-csharp[System.Convert.ToBoolean#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#11)]
 [!code-vb[System.Convert.ToBoolean#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-588"><paramref name="value" /> jest ciągiem, który nie jest równa <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-588"><paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-589"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-589"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-590">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-590">-or-</span></span>  
  
 <span data-ttu-id="233c1-591">Konwersja typu <paramref name="value" /> do <see cref="T:System.Boolean" /> nie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-591">The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</span></span></exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-592">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-592">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-593">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważną wartość logiczna.</span><span class="sxs-lookup"><span data-stu-id="233c1-593">Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-594"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-594"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-595">Poniższy przykład konwertuje tablicę <xref:System.SByte> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-595">The following example converts an array of <xref:System.SByte> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#6)]
 [!code-csharp[System.Convert.ToBoolean#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#6)]
 [!code-vb[System.Convert.ToBoolean#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.SByte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-596">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-596">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-597">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-597">Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-598"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-598"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-599">Poniższy przykład konwertuje tablicę <xref:System.Single> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-599">The following example converts an array of <xref:System.Single> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#7)]
 [!code-csharp[System.Convert.ToBoolean#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#7)]
 [!code-vb[System.Convert.ToBoolean#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-600">Ciąg zawierający wartość każdej <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-600">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></param>
        <summary><span data-ttu-id="233c1-601">Konwertuje określoną reprezentację ciągu wartość logiczną na jej odpowiednik Boolean.</span><span class="sxs-lookup"><span data-stu-id="233c1-601">Converts the specified string representation of a logical value to its Boolean equivalent.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-602"><see langword="true" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.TrueString" />, lub <see langword="false" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.FalseString" /> lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-602"><see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-603">Do pomyślnego konwersji występuje `value` parametru musi być równa albo <xref:System.Boolean.TrueString?displayProperty=nameWithType>, stała, którego wartość jest `True`, <xref:System.Boolean.FalseString?displayProperty=nameWithType>, stała, którego wartość jest `False`, lub musi być `null`.</span><span class="sxs-lookup"><span data-stu-id="233c1-603">For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=nameWithType>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=nameWithType>, a constant whose value is `False`, or it must be `null`.</span></span> <span data-ttu-id="233c1-604">Przy porównywaniu `value` z <xref:System.Boolean.TrueString?displayProperty=nameWithType> i <xref:System.Boolean.FalseString?displayProperty=nameWithType>, metoda ignoruje wielkość również jako wiodące i końcowe biały znak.</span><span class="sxs-lookup"><span data-stu-id="233c1-604">In comparing `value` with <xref:System.Boolean.TrueString?displayProperty=nameWithType> and <xref:System.Boolean.FalseString?displayProperty=nameWithType>, the method ignores case as well as leading and trailing white space.</span></span>  
  
 <span data-ttu-id="233c1-605">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-605">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-606">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-606">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-607">W poniższym przykładzie użyto <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> metodę, aby przekonwertować różnych ciągów na wartości logiczne.</span><span class="sxs-lookup"><span data-stu-id="233c1-607">The following example uses the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method to convert various strings to Boolean values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean1.cpp#1)]
 [!code-csharp[System.Convert.ToBoolean#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/ToBoolean1.cs#1)]
 [!code-vb[System.Convert.ToBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/ToBoolean1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-608"><paramref name="value" /> nie równa się <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-608"><paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-609">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-609">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-610">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-610">Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-611"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-611"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-612">Poniższy przykład konwertuje tablicę <xref:System.UInt16> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-612">The following example converts an array of <xref:System.UInt16> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#8)]
 [!code-csharp[System.Convert.ToBoolean#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#8)]
 [!code-vb[System.Convert.ToBoolean#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-613">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-613">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-614">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-614">Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-615"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-615"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-616">Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-616">The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#9)]
 [!code-csharp[System.Convert.ToBoolean#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#9)]
 [!code-vb[System.Convert.ToBoolean#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-617">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-617">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-618">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważną wartość logiczną.</span><span class="sxs-lookup"><span data-stu-id="233c1-618">Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-619"><see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-619"><see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-620">Poniższy przykład konwertuje tablicę <xref:System.UInt64> wartości do <xref:System.Boolean> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-620">The following example converts an array of <xref:System.UInt64> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#10)]
 [!code-csharp[System.Convert.ToBoolean#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#10)]
 [!code-vb[System.Convert.ToBoolean#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-621">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-621">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-622">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-622">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-623">Konwertuje wartość określonego obiektu na równoważną wartość logiczna, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-623">Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-624"><see langword="true" /> lub <see langword="false" />, co odzwierciedla wartość zwrócona przez wywołanie <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> metody dla typu źródłowego <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-624"><see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />.</span></span> <span data-ttu-id="233c1-625">Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-625">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-626">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-626">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-627">Typy podstawowe Ignoruj `provider` parametru; jednak parametr można użyć, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-627">The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-628">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-628">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-629">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-629">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-630">Obiekt każdej klasy jest przekazywany do <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-630">An object of each class is passed to the <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="233c1-631">Ta metoda zwraca `true` Jeśli dowolny z wartości innych niż odrzucone tablicy jest różna od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-631">This method returns `true` if any of the non-discarded array values are non-zero.</span></span> <span data-ttu-id="233c1-632"><xref:System.IFormatProvider> Obiektu określa, jak elementy zostaną odrzucone dla tego obliczenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-632">The <xref:System.IFormatProvider> object determines how elements are discarded for this calculation.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-633"><paramref name="value" /> jest ciągiem, który nie jest równa <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-633"><paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-634"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-634"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-635">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-635">-or-</span></span>  
  
 <span data-ttu-id="233c1-636">Konwersja typu <paramref name="value" /> do <see cref="T:System.Boolean" /> nie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-636">The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</span></span></exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-637">Ciąg zawierający wartość każdej <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-637">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-638">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-638">An object that supplies culture-specific formatting information.</span></span> <span data-ttu-id="233c1-639">Ten parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-639">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="233c1-640">Konwertuje określoną reprezentację ciągu wartość logiczną na jej odpowiednik Boolean, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-640">Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-641"><see langword="true" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.TrueString" />, lub <see langword="false" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.FalseString" /> lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-641"><see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-642">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-642">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-643">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-643">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-644"><paramref name="value" /> nie równa się <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-644"><paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-645">Konwertuje określoną wartość na liczbę całkowitą bez znaku 8-bitową.</span><span class="sxs-lookup"><span data-stu-id="233c1-645">Converts a specified value to an 8-bit unsigned integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Boolean) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-646">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-646">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-647">Konwertuje określoną wartość logiczną na równoważne 8-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-647">Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-648">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-648">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-649">Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-649">The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Byte> values.</span></span>  
  
 [!code-cpp[System.Convert.ToByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.tobyte/cpp/tobyte1.cpp#1)]
 [!code-csharp[System.Convert.ToByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#1)]
 [!code-vb[System.Convert.ToByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-650">8-bitowa liczba całkowita bez znaku do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-650">The 8-bit unsigned integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-651">Zwraca określony 8-bitową liczbę całkowitą bez znaku; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-651">Returns the specified 8-bit unsigned integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-652"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-652"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Char) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-653">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-653">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-654">Konwertuje wartość określonego znaku Unicode na równoważne 8-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-654">Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-655">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-655">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-656">Ta metoda zwraca wartość bajtu bez znaku, która reprezentuje kod liczbowych <xref:System.Char> obiekt przekazywany do niego.</span><span class="sxs-lookup"><span data-stu-id="233c1-656">This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it.</span></span> <span data-ttu-id="233c1-657">W programie .NET Framework <xref:System.Char> obiekt jest 16-bitową wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-657">In the .NET Framework, a <xref:System.Char> object is a 16-bit value.</span></span> <span data-ttu-id="233c1-658">Oznacza to, że metoda jest odpowiednia dla zwracanie kodów liczbowych znaków w zakresie znaków ASCII lub w zakresach kontrolek C0 Unicode i podstawowe alfabetu łacińskiego i formanty C1 i uzupełnienie Latin-1, z 0000 U + do U + 00FF.</span><span class="sxs-lookup"><span data-stu-id="233c1-658">This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-659">Poniższy przykład konwertuje tablicę <xref:System.Char> wartości do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-659">The following example converts an array of <xref:System.Char> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#2)]
 [!code-vb[System.Convert.ToByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-660"><paramref name="value" /> reprezentuje liczbę większą niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-660"><paramref name="value" /> represents a number that is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As DateTime) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-661">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-661">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-662">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-662">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-663">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-663">This conversion is not supported.</span></span> <span data-ttu-id="233c1-664">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-664">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-665">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-665">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Decimal) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-666">Liczbę do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-666">The number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-667">Konwertuje wartość określonej liczby dziesiętnej równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-667">Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-668"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-668"><paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span></span> <span data-ttu-id="233c1-669">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-669">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-670">Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Decimal> i <xref:System.Decimal> do wartości <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="233c1-670">The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-671"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-671"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Double) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-672">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-672">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-673">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-673">Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-674"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-674"><paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span></span> <span data-ttu-id="233c1-675">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-675">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-676">Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Double> i <xref:System.Double> do wartości <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="233c1-676">The following example converts a <xref:System.Byte> value to a <xref:System.Double> and a <xref:System.Double> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-677"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-677"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Short) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-678">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-678">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-679">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-679">Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-680">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-680">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-681">Poniższy przykład konwertuje tablicę <xref:System.Int16> wartości do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-681">The following example converts an array of <xref:System.Int16> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#3)]
 [!code-vb[System.Convert.ToByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-682"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-682"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-683">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-683">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-684">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-684">Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-685">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-685">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-686">Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-686">The following example converts an array of <xref:System.Int32> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#4)]
 [!code-vb[System.Convert.ToByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-687"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-687"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Long) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-688">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-688">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-689">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-689">Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-690">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-690">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-691">Poniższy przykład konwertuje tablicę <xref:System.Int64> wartości do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-691">The following example converts an array of <xref:System.Int64> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#5)]
 [!code-vb[System.Convert.ToByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-692"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-692"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-693">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-693">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-694">Konwertuje wartość określonego obiektu na liczbę całkowitą bez znaku 8-bitową.</span><span class="sxs-lookup"><span data-stu-id="233c1-694">Converts the value of the specified object to an 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-695">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-695">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-696">Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-696">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-697">W poniższym przykładzie użyto <xref:System.Convert.ToByte%28System.Object%29> do przekonwertowania na tablicę obiektów do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-697">The following example uses the <xref:System.Convert.ToByte%28System.Object%29> method to convert an array of objects to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#6)]
 [!code-vb[System.Convert.ToByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-698"><paramref name="value" /> nie jest w formacie właściwości dla <see cref="T:System.Byte" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-698"><paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-699"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-699"><paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span></span>  
  
 <span data-ttu-id="233c1-700">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-700">-or-</span></span>  
  
 <span data-ttu-id="233c1-701">Konwersja z <paramref name="value" /> do <see cref="T:System.Byte" /> typ nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="233c1-701">Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-702"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-702"><paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As SByte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-703">8-bitową liczbę całkowitą ze znakiem do skonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-703">The 8-bit signed integer to be converted.</span></span></param>
        <summary><span data-ttu-id="233c1-704">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-704">Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-705">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-705">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-706">Poniższy przykład konwertuje tablicę <xref:System.SByte> wartości do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-706">The following example converts an array of <xref:System.SByte> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#7)]
 [!code-vb[System.Convert.ToByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-707"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-707"><paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Single) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-708">Liczba zmiennoprzecinkowa pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-708">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="233c1-709">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-709">Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-710"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-710"><paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span></span> <span data-ttu-id="233c1-711">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-711">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-712">Poniższy przykład konwertuje <xref:System.Single> do wartości <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="233c1-712">The following example converts a <xref:System.Single> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#19)]
 [!code-csharp[System.Convert Snippets#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#19)]
 [!code-vb[System.Convert Snippets#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-713"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-713"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-714">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-714">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-715">Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 8-bitową.</span><span class="sxs-lookup"><span data-stu-id="233c1-715">Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-716">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-716">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-717">Przy użyciu <xref:System.Convert.ToByte%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-717">Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-718">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-718">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-719">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-719">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-720">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-720">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-721">W poniższym przykładzie definiuje tablicy ciągów i próbuje przekonwertować każdego ciągu do <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="233c1-721">The following example defines a string array and attempts to convert each string to a <xref:System.Byte>.</span></span>  <span data-ttu-id="233c1-722">Należy pamiętać, że podczas `null` analizuje ciągu na wartość 0, <xref:System.String.Empty?displayProperty=nameWithType> zgłasza <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-722">Note that while a `null` string parses to zero, <xref:System.String.Empty?displayProperty=nameWithType> throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="233c1-723">Należy również zauważyć, że podczas spacje początkowe i końcowe przeanalizować pomyślnie, formatowanie symbole, takie jak symbole waluty separatorów grup lub separatorów dziesiętnych nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-723">Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/ToByte5.cs#15)]
 [!code-vb[System.Convert.ToByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte5.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-724"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-724"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-725"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-725"><paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UShort) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-726">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-726">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-727">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-727">Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-728">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-728">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-729">Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku 16-bitowych do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-729">The following example converts an array of unsigned 16-bit integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#8)]
 [!code-vb[System.Convert.ToByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-730"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-730"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-731">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-731">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-732">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-732">Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-733">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-733">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-734">Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-734">The following example converts an array of unsigned integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#9)]
 [!code-vb[System.Convert.ToByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-735"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-735"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As ULong) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-736">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-736">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-737">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-737">Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-738">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-738">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-739">Poniższy przykład konwertuje tablicę niepodpisane długich liczb całkowitych na <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-739">The following example converts an array of unsigned long integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#10)]
 [!code-vb[System.Convert.ToByte#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-740"><paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-740"><paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-741">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-741">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-742">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-742">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-743">Konwertuje wartość określonego obiektu na liczbę całkowitą bez znaku 8-bitową przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-743">Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-744">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-744">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-745">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-745">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-746">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-746">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-747">W poniższym przykładzie zdefiniowano `ByteString` klasa implementująca <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-747">The following example defines a `ByteString` class that implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="233c1-748">Klasa przechowuje reprezentację wartości typu bajtowego wraz z polem logowania tak, aby mógł reprezentować obie wartości bajtu znakiem i bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-748">The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#12)]
 [!code-vb[System.Convert.ToByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#12)]  
  
 <span data-ttu-id="233c1-749">Poniższy przykład tworzy kilka `ByteString` obiektów i wywołania <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> metodę, aby przekonwertować je na wartości bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-749">The following example instantiates several `ByteString` objects and calls the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method to convert them to byte values.</span></span> <span data-ttu-id="233c1-750">Które zastosowano <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> metoda opakowuje wywołanie <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> metody obiektu do skonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-750">It illustrates that the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> method of the object to be converted.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#13)]
 [!code-vb[System.Convert.ToByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-751"><paramref name="value" /> nie jest w formacie właściwości dla <see cref="T:System.Byte" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-751"><paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-752"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-752"><paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span></span>  
  
 <span data-ttu-id="233c1-753">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-753">-or-</span></span>  
  
 <span data-ttu-id="233c1-754">Konwersja z <paramref name="value" /> do <see cref="T:System.Byte" /> typ nie jest obsługiwany.</span><span class="sxs-lookup"><span data-stu-id="233c1-754">Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-755"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-755"><paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-756">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-756">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-757">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-757">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-758">Konwertuje reprezentacja ciągu określonej liczby równoważne 8-bitową całkowitą bez znaku, przy użyciu określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-758">Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-759">Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-759">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-760">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-760">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-761"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-761">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-762">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-762">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-763">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-763">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-764">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-764">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-765">Poniższy przykład tworzy niestandardowy <xref:System.Globalization.NumberFormatInfo> obiektu, który definiuje dodatnią Zaloguj się jako "pos" i znaku minus jako "minus", która jest używana w wywołaniach <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-765">The following example creates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the positive sign as "pos" and the negative sign as "neg", which it uses in calls to the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="233c1-766">Następnie wywołuje <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> metody, aby przekonwertować każdego elementu w tablicy ciągów do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-766">It then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method repeatedly to convert each element in a string array to a <xref:System.Byte> value.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte4.cs#14)]
 [!code-vb[System.Convert.ToByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte4.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-767"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-767"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-768"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-768"><paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, fromBase As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-769">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-769">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-770">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-770">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-771">Konwertuje reprezentację liczby w określonej podstawy równoważne 8-bitową nieznakowaną liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-771">Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-772">Całkowitą bez znaku 8-bitową odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-772">An 8-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-773">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-773">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-774">Ponieważ <xref:System.Byte> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-774">Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="233c1-775">Innymi słowy wszystkie bity osiem są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny.</span><span class="sxs-lookup"><span data-stu-id="233c1-775">In other words, all eight bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="233c1-776">W związku z tym jest możliwość pisania kodu, w którym bajtu ze znakiem wartość, która jest poza zakresem <xref:System.Byte> — typ danych jest konwertowana na <xref:System.Byte> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-776">As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-777">Poniższy przykład konwertuje <xref:System.SByte.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-777">The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-778">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80 skonwertować 128."</span><span class="sxs-lookup"><span data-stu-id="233c1-778">Instead of throwing an exception, the method displays the message, "0x80 converts to 128."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]
 [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  
  
 <span data-ttu-id="233c1-779">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-779">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-780">Poniższy przykład przedstawia jedną technika dla zapewnienia, że metoda niewłaściwie nie używać bez znaku binarna reprezentacja podczas konwertowania reprezentację ciągu szesnastkowego do <xref:System.Byte> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-780">The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value.</span></span> <span data-ttu-id="233c1-781">W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-781">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="233c1-782">Gdy przykładzie konwertuje wartości z powrotem do <xref:System.Byte> wartości, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-782">When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="233c1-783">Jeśli tak, a jego bit znaczących jest ustawiony (który wskazuje, że wartość jest ujemna, i że używa dwóch jest dopełnienia zamiast niepodpisane binarna reprezentacja), metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="233c1-783">If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]
 [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-784">Poniższy przykład próbuje przemiennie zinterpretować tablica ciągów jako reprezentacja wartości binarnej, ósemkowe, decimal i szesnastkowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-784">The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte2.cs#11)]
 [!code-vb[System.Convert.ToByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-785"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-785"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-786">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-786">-or-</span></span>  
  
 <span data-ttu-id="233c1-787"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-787"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-788"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-788"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-789"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-789"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-790">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-790">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-791"><paramref name="value" />, reprezentuje podstawowy 10 numer bez znaku, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-791"><paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-792">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-792">-or-</span></span>  
  
 <span data-ttu-id="233c1-793"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-793"><paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToChar">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-794">Konwertuje określoną wartość na znak Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-794">Converts a specified value to a Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Boolean) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-795">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-795">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-796">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-796">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-797">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-797">This conversion is not supported.</span></span> <span data-ttu-id="233c1-798">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-798">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-799">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-799">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Byte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-800">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-800">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-801">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku do jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-801">Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-802">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-802">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-803">Poniższy przykład konwertuje tablicę bajtów bez znaku do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-803">The following example converts an array of unsigned bytes to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#1)]
 [!code-vb[System.Convert.ToChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-804">Znak Unicode do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-804">The Unicode character to return.</span></span></param>
        <summary><span data-ttu-id="233c1-805">Zwraca określoną wartość znaku Unicode; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-805">Returns the specified Unicode character value; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-806"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-806"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As DateTime) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-807">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-807">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-808">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-808">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-809">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-809">This conversion is not supported.</span></span> <span data-ttu-id="233c1-810">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-810">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-811">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-811">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Decimal) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-812">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-812">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-813">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-813">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-814">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-814">This conversion is not supported.</span></span> <span data-ttu-id="233c1-815">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-815">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-816">Poniższy przykład próbuje przekonwertować <xref:System.Decimal> do <xref:System.Char>i zgłasza <xref:System.InvalidCastException> w przypadku awarii.</span><span class="sxs-lookup"><span data-stu-id="233c1-816">The following example attempts to convert a <xref:System.Decimal> to <xref:System.Char>, and throws <xref:System.InvalidCastException> on failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-817">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-817">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Double) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-818">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-818">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-819">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-819">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-820">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-820">This conversion is not supported.</span></span> <span data-ttu-id="233c1-821">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-821">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-822">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-822">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Short) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-823">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-823">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-824">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na jej odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-824">Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-825">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-825">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-826">Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych ze znakiem do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-826">The following example converts an array of signed 16-bit integers to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#2)]
 [!code-vb[System.Convert.ToChar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-827"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-827"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-828">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-828">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-829">Konwertuje wartość określonego całkowita 32-bitowej do jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-829">Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-830">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-830">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-831">Poniższy przykład konwertuje tablicę liczb całkowitych ze znakiem do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-831">The following example converts an array of signed integers to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#3)]
 [!code-vb[System.Convert.ToChar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-832"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-832"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Long) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-833">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-833">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-834">Konwertuje wartość określonego całkowita 64-bitowych na jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-834">Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-835">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-835">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-836">Poniższy przykład próbuje przekonwertować długich liczb całkowitych do <xref:System.Char>i zgłasza <xref:System.OverflowException> w przypadku awarii.</span><span class="sxs-lookup"><span data-stu-id="233c1-836">The following example attempts to convert a long integer to a <xref:System.Char>, and throws a <xref:System.OverflowException> on failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#8)]
 [!code-csharp[System.Convert Snippets#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#8)]
 [!code-vb[System.Convert Snippets#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-837"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-837"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-838">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-838">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <summary><span data-ttu-id="233c1-839">Konwertuje wartość określonego obiektu na znak Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-839">Converts the value of the specified object to a Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-840">Znak Unicode, który jest odpowiednikiem wartości, lub <see cref="F:System.Char.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-840">A Unicode character that is equivalent to value, or <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-841">Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-841">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-842">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-842">The following example attempts to convert each element in an object array to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#9)]
 [!code-vb[System.Convert.ToChar#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-843"><paramref name="value" /> jest pustym ciągiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-843"><paramref name="value" /> is a null string.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-844"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-844"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-845">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-845">-or-</span></span>  
  
 <span data-ttu-id="233c1-846">Konwersja typu <paramref name="value" /> do <see cref="T:System.Char" /> nie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-846">The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-847"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-847"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As SByte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-848">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-848">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-849">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na jej odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-849">Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-850">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-850">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-851">Poniższy przykład konwertuje tablicę bajtów podpisem do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-851">The following example converts an array of signed bytes to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#4)]
 [!code-vb[System.Convert.ToChar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-852"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-852"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Single) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-853">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-853">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-854">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-854">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-855">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-855">This conversion is not supported.</span></span> <span data-ttu-id="233c1-856">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-856">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-857">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-857">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-858">Ciąg o długości 1.</span><span class="sxs-lookup"><span data-stu-id="233c1-858">A string of length 1.</span></span></param>
        <summary><span data-ttu-id="233c1-859">Konwertuje pierwszy znak określony ciąg znaków Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-859">Converts the first character of a specified string to a Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-860">Znak Unicode, który jest odpowiednikiem pierwszy i tylko znak w <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-860">A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-861">`value` musi być ciągiem o długości jednego znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-861">`value` must be a string that contains a single character.</span></span>  
  
 <span data-ttu-id="233c1-862">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Char.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-862">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-863">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-863">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-864">Poniższy przykład konwertuje każdego elementu w tablicy ciągów do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-864">The following example converts each element in a string array to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#5)]
 [!code-vb[System.Convert.ToChar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-865"><paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-865"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="233c1-866">Długość <paramref name="value" /> nie jest 1.</span><span class="sxs-lookup"><span data-stu-id="233c1-866">The length of <paramref name="value" /> is not 1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UShort) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-867">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-867">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-868">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku do jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-868">Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-869">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-869">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-870">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych na <xref:System.Char> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-870">The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#6)]
 [!code-vb[System.Convert.ToChar#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UInteger) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-871">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-871">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-872">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku do jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-872">Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-873">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-873">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-874">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku do <xref:System.Char> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-874">The following example converts each element in an array of unsigned integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#7)]
 [!code-vb[System.Convert.ToChar#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-875"><paramref name="value" /> jest większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-875"><paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As ULong) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-876">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-876">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-877">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku do jego odpowiednik znaku Unicode.</span><span class="sxs-lookup"><span data-stu-id="233c1-877">Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="233c1-878">Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-878">A Unicode character that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-879">Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych na <xref:System.Char> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-879">The following example converts each element in an array of unsigned long integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#8)]
 [!code-vb[System.Convert.ToChar#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-880"><paramref name="value" /> jest większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-880"><paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-881">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-881">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-882">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-882">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-883">Konwertuje wartość określonego obiektu na jej odpowiednik znaków Unicode, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-883">Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-884">Znak Unicode, który jest odpowiednikiem <paramref name="value" />, lub <see cref="F:System.Char.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-884">A Unicode character that is equivalent to <paramref name="value" />, or <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-885">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-885">The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-886">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-886">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-887">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-887">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-888">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-888">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-889">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-889">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-890">Obiekt każdej klasy jest przekazywany do `ToChar` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-890">An object of each class is passed to the `ToChar` method.</span></span> <span data-ttu-id="233c1-891">Ta metoda zwraca znak Unicode, którego wartość jest średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="233c1-891">This method returns a character whose Unicode value is the average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-892"><paramref name="value" /> jest pustym ciągiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-892"><paramref name="value" /> is a null string.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-893"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-893"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-894">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-894">-or-</span></span>  
  
 <span data-ttu-id="233c1-895">Konwersja typu <paramref name="value" /> do <see cref="T:System.Char" /> nie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="233c1-895">The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-896"><paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-896"><paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-897">Ciąg o długości 1 lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-897">A string of length 1 or <see langword="null" />.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-898">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-898">An object that supplies culture-specific formatting information.</span></span> <span data-ttu-id="233c1-899">Ten parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-899">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="233c1-900">Konwertuje pierwszy znak określony ciąg znaków Unicode, przy użyciu określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-900">Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-901">Znak Unicode, który jest odpowiednikiem pierwszy i tylko znak w <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-901">A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-902">`value` musi być ciągiem o długości jednego znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-902">`value` must be a string that contains a single character.</span></span>  
  
 <span data-ttu-id="233c1-903">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Char.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-903">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-904">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-904">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-905">Poniższy przykład konwertuje reprezentację ciągu <xref:System.Char> wartości z `ToChar` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="233c1-905">The following example converts a string representation of a <xref:System.Char> value with the `ToChar` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="233c1-906">W przykładzie pokazano, że dostawca formatu nie odwołuje się.</span><span class="sxs-lookup"><span data-stu-id="233c1-906">The example shows that the format provider is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToNonNum_String#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CPP/stringnonnum.cpp#2)]
 [!code-csharp[System.Convert.ToNonNum_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CS/stringnonnum.cs#2)]
 [!code-vb[System.Convert.ToNonNum_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/VB/stringnonnum.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-907"><paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-907"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="233c1-908">Długość <paramref name="value" /> nie jest 1.</span><span class="sxs-lookup"><span data-stu-id="233c1-908">The length of <paramref name="value" /> is not 1.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDateTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-909">Konwertuje określoną wartość do <see cref="T:System.DateTime" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-909">Converts a specified value to a <see cref="T:System.DateTime" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Boolean) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-910">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-910">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-911">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-911">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-912">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-912">This conversion is not supported.</span></span> <span data-ttu-id="233c1-913">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-913">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-914">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-914">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Byte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-915">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-915">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-916">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-916">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-917">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-917">This conversion is not supported.</span></span> <span data-ttu-id="233c1-918">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-918">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-919">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-919">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Char) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-920">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-920">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-921">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-921">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-922">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-922">This conversion is not supported.</span></span> <span data-ttu-id="233c1-923">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-923">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-924">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-924">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-925">Wartość daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-925">A date and time value.</span></span></param>
        <summary><span data-ttu-id="233c1-926">Zwraca określony <see cref="T:System.DateTime" /> obiekt; nie jest wykonywana.</span><span class="sxs-lookup"><span data-stu-id="233c1-926">Returns the specified <see cref="T:System.DateTime" /> object; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-927"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-927"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Decimal) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-928">Liczbę do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-928">The number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-929">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-929">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-930">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-930">This conversion is not supported.</span></span> <span data-ttu-id="233c1-931">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-931">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-932">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-932">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-933">Wartość zmiennoprzecinkowe podwójnej precyzji do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-933">The double-precision floating-point value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-934">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-934">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-935">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-935">This conversion is not supported.</span></span> <span data-ttu-id="233c1-936">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-936">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-937">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-937">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Short) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-938">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-938">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-939">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-939">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-940">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-940">This conversion is not supported.</span></span> <span data-ttu-id="233c1-941">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-941">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-942">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-942">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-943">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-943">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-944">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-944">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-945">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-945">This conversion is not supported.</span></span> <span data-ttu-id="233c1-946">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-946">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-947">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-947">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-948">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-948">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-949">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-949">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-950">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-950">This conversion is not supported.</span></span> <span data-ttu-id="233c1-951">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-951">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-952">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-952">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-953">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-953">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-954">Konwertuje wartość określonego obiektu do <see cref="T:System.DateTime" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-954">Converts the value of the specified object to a <see cref="T:System.DateTime" /> object.</span></span></summary>
        <returns><span data-ttu-id="233c1-955">Data i godzina równoważne wartości <paramref name="value" />, lub datę i godzinę odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-955">The date and time equivalent of the value of <paramref name="value" />, or a date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-956">Do konwersji zakończyła się powodzeniem, typ środowiska uruchomieniowego `value` parametru musi być równa albo <xref:System.DateTime> lub <xref:System.String>, lub `value` musi być `null`.</span><span class="sxs-lookup"><span data-stu-id="233c1-956">For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`.</span></span> <span data-ttu-id="233c1-957">W przeciwnym razie metoda zgłasza <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-957">Otherwise, the method throws an <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="233c1-958">Ponadto jeśli `value` ciągiem i musi zawierać prawidłową reprezentację wartości daty i godziny w bieżącej kultury lub <xref:System.FormatException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-958">In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.</span></span>  
  
 <span data-ttu-id="233c1-959">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-959">The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-960">Następujące przykładowe wywołania <xref:System.Convert.ToDateTime%28System.Object%29> metody z różnymi <xref:System.Object> zmiennych.</span><span class="sxs-lookup"><span data-stu-id="233c1-960">The following example calls the <xref:System.Convert.ToDateTime%28System.Object%29> method with a variety of <xref:System.Object> variables.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime1.cs#1)]
 [!code-vb[System.Convert.ToDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-961"><paramref name="value" /> nie jest prawidłową datę i godzinę.</span><span class="sxs-lookup"><span data-stu-id="233c1-961"><paramref name="value" /> is not a valid date and time value.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-962"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-962"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-963">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-963">-or-</span></span>  
  
 <span data-ttu-id="233c1-964">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-964">The conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As SByte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-965">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-965">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-966">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-966">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-967">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-967">This conversion is not supported.</span></span> <span data-ttu-id="233c1-968">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-968">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-969">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-969">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Single) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-970">Wartość zmiennoprzecinkowa pojedynczej precyzji do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-970">The single-precision floating-point value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-971">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-971">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-972">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-972">This conversion is not supported.</span></span> <span data-ttu-id="233c1-973">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-973">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-974">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-974">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-975">Reprezentacja ciągu daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-975">The string representation of a date and time.</span></span></param>
        <summary><span data-ttu-id="233c1-976">Konwertuje określoną reprezentację ciągu daty i godziny na równoważną wartość daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-976">Converts the specified string representation of a date and time to an equivalent date and time value.</span></span></summary>
        <returns><span data-ttu-id="233c1-977">Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-977">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-978">Jeśli `value` nie jest `null`, wartość zwracana jest wynik wywołania <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> metoda `value` przy użyciu formatowania informacji w <xref:System.Globalization.DateTimeFormatInfo> obiekt, który został zainicjowany dla bieżącej kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-978">If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture.</span></span> <span data-ttu-id="233c1-979">`value` Argument musi zawierać reprezentację Data i godzina w jednym z formatów opisanych w <xref:System.Globalization.DateTimeFormatInfo> tematu.</span><span class="sxs-lookup"><span data-stu-id="233c1-979">The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic.</span></span> <span data-ttu-id="233c1-980">Jeśli `value` jest `null`, metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-980">If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="233c1-981">Ta metoda próbuje przeanalizować `value` całkowicie i uniknąć zgłaszanie <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-981">This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>.</span></span> <span data-ttu-id="233c1-982">Ukończy dzień, brak miesiąc i rok informacji z bieżącą datą.</span><span class="sxs-lookup"><span data-stu-id="233c1-982">It completes missing month, day, and year information with the current date.</span></span> <span data-ttu-id="233c1-983">Jeśli `value` zawiera wyłącznie data i czas bez, ta metoda zakłada czas północy.</span><span class="sxs-lookup"><span data-stu-id="233c1-983">If `value` contains only a date and no time, this method assumes a time of midnight.</span></span> <span data-ttu-id="233c1-984">Początkowe wewnętrznego, ani końcowych znaków spacji w `value` są ignorowane.</span><span class="sxs-lookup"><span data-stu-id="233c1-984">Any leading, inner, or trailing white-space characters in `value` are ignored.</span></span>  
  
 <span data-ttu-id="233c1-985">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-985">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-986">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-986">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-987">W poniższym przykładzie użyto <xref:System.Convert.ToDateTime%2A> metodę, aby przekonwertować różnych reprezentacji ciągu daty i godziny do <xref:System.DateTime> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-987">The following example uses the <xref:System.Convert.ToDateTime%2A> method to convert various string representations of dates and times to <xref:System.DateTime> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime2.cs#2)]
 [!code-vb[System.Convert.ToDateTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-988"><paramref name="value" /> nie jest poprawnie sformatowana daty i czasu ciągu.</span><span class="sxs-lookup"><span data-stu-id="233c1-988"><paramref name="value" /> is not a properly formatted date and time string.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UShort) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-989">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-989">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-990">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-990">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-991">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-991">This conversion is not supported.</span></span> <span data-ttu-id="233c1-992">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-992">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-993">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-993">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UInteger) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-994">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-994">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-995">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-995">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-996">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-996">This conversion is not supported.</span></span> <span data-ttu-id="233c1-997">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-997">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-998">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-998">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As ULong) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-999">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-999">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1000">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1000">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1001">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1001">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1002">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1002">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1003">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1003">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1004">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1004">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1005">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1005">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1006">Konwertuje wartość określonego obiektu do <see cref="T:System.DateTime" /> obiekt, za pomocą określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1006">Converts the value of the specified object to a <see cref="T:System.DateTime" /> object, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1007">Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1007">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1008">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1008">The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1009">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1009">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1010">Na przykład jeśli `value` jest <xref:System.String> reprezentujący datę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej daty.</span><span class="sxs-lookup"><span data-stu-id="233c1-1010">For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date.</span></span> <span data-ttu-id="233c1-1011">`provider` związane z konwersji `value` Jeśli typ środowiska uruchomieniowego `value` jest <xref:System.String>, lub jeśli `value` jest typ zdefiniowany przez użytkownika, którego <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> implementacji sprawia, że użycie `provider`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1011">`provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> implementation makes use of `provider`.</span></span> <span data-ttu-id="233c1-1012">Jeśli typ środowiska uruchomieniowego `value` jest <xref:System.String> i `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1012">If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1013">W poniższym przykładzie zdefiniowano formatu niestandardowego dostawcy, `CustomProvider`, których <xref:System.IFormatProvider.GetFormat%2A> metoda wysyła komunikat do konsoli, która została wywołana, a następnie zwraca <xref:System.Globalization.DateTimeFormatInfo> obiektu kultury, którego nazwa została przekazana jako parametr do swojej klasy Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="233c1-1013">The following example defines a custom format provider, `CustomProvider`, whose <xref:System.IFormatProvider.GetFormat%2A> method outputs a message to the console that it has been invoked, and then returns the <xref:System.Globalization.DateTimeFormatInfo> object of the culture whose name was passed as a parameter to its class constructor.</span></span> <span data-ttu-id="233c1-1014">Każdy z tych `CustomProvider` obiektów służy do konwertowania elementów w tablicy obiektów do wartości daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="233c1-1014">Each of these `CustomProvider` objects is used to convert the elements in an object array to date and time values.</span></span> <span data-ttu-id="233c1-1015">Dane wyjściowe wskazuje, że `CustomProvider` obiekt jest używany podczas konwersji tylko wtedy, gdy typ `value` parametr jest <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1015">The output indicates that the `CustomProvider` object is used in the conversion only when the type of the `value` parameter is a <xref:System.String>.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/todatetime4.cs#4)]
 [!code-vb[System.Convert.ToDateTime#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/todatetime4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1016"><paramref name="value" /> nie jest prawidłową datę i godzinę.</span><span class="sxs-lookup"><span data-stu-id="233c1-1016"><paramref name="value" /> is not a valid date and time value.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1017"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1017"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1018">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1018">-or-</span></span>  
  
 <span data-ttu-id="233c1-1019">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1019">The conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1020">Ciąg zawierający datę i godzinę, które należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1020">A string that contains a date and time to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1021">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1021">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1022">Konwertuje reprezentacja ciągu określonej liczby równoważne datę i godzinę, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1022">Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1023">Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1023">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1024">Wartość zwracana jest wynik wywołania <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1024">The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1025">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.DateTimeFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1025">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object.</span></span> <span data-ttu-id="233c1-1026"><xref:System.Globalization.DateTimeFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1026">The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1027">Jeśli `provider` jest `null`, <xref:System.Globalization.DateTimeFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1027">If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1028">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1028">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1029">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1029">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1030">Poniższy przykład konwertuje wartości daty z reprezentacji ciągu `ToDateTime` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1030">The following example converts string representations of date values with the `ToDateTime` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime3.cs#3)]
 [!code-vb[System.Convert.ToDateTime#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1031"><paramref name="value" /> nie jest poprawnie sformatowana daty i czasu ciągu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1031"><paramref name="value" /> is not a properly formatted date and time string.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDecimal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1032">Konwertuje określoną wartość na liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1032">Converts a specified value to a decimal number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Boolean) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1033">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1033">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1034">Konwertuje określoną wartość logiczna równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1034">Converts the specified Boolean value to the equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1035">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1035">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1036">Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1036">The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Byte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1037">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1037">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1038">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1038">Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1039">Liczba dziesiętna, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1039">The decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1040">Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Decimal> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1040">The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Char) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1041">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1041">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1042">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1042">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1043">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1043">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1044">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1044">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1045">Poniższy przykład próbuje przekonwertować <xref:System.Char> do wartości <xref:System.Decimal>i zgłasza <xref:System.InvalidCastException> w przypadku awarii.</span><span class="sxs-lookup"><span data-stu-id="233c1-1045">The following example attempts to convert a <xref:System.Char> value to <xref:System.Decimal>, and throws <xref:System.InvalidCastException> upon failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1046">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1046">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As DateTime) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1047">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1047">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1048">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1048">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1049">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1049">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1050">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1050">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1051">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1051">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1052">Liczba dziesiętna.</span><span class="sxs-lookup"><span data-stu-id="233c1-1052">A decimal number.</span></span></param>
        <summary><span data-ttu-id="233c1-1053">Zwraca określoną liczbą dziesiętną; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1053">Returns the specified decimal number; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1054"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1054"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Double) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1055">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1055">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1056">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1056">Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1057">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1057">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1058"><xref:System.Decimal> Wartość zwrócona przez tę metodę zawiera maksymalnie 15 cyfr znaczących.</span><span class="sxs-lookup"><span data-stu-id="233c1-1058">The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits.</span></span> <span data-ttu-id="233c1-1059">Jeśli `value` parametr zawiera więcej niż 15 cyfr znaczących, jest zaokrąglana, przy użyciu zaokrąglenie do najbliższej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1059">If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest.</span></span> <span data-ttu-id="233c1-1060">Poniższy przykład przedstawia sposób <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> metoda używa zaokrąglania do najbliższego powrotu <xref:System.Decimal> wartości z 15 cyfr znaczących.</span><span class="sxs-lookup"><span data-stu-id="233c1-1060">The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1061">Poniższy przykład konwertuje <xref:System.Double> do wartości <xref:System.Decimal> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1061">The following example converts a <xref:System.Double> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1062"><paramref name="value" /> jest większa niż <see cref="F:System.Decimal.MaxValue" /> lub mniej niż <see cref="F:System.Decimal.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1062"><paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Short) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1063">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1063">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1064">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1064">Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1065">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1065">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1066">Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych ze znakiem do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1066">The following example converts an array of 16-bit signed integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1067">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1067">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1068">Konwertuje wartość określonego całkowita 32-bitowych na równoważne dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1068">Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1069">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1069">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1070">Poniższy przykład konwertuje tablicę liczb całkowitych ze znakiem do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1070">The following example converts an array of signed integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#3)]
 [!code-vb[System.Convert.ToDecimal2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Long) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1071">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1071">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1072">Konwertuje wartość określonego całkowita 64-bitowych na równoważne dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1072">Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1073">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1073">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1074">Poniższy przykład konwertuje <xref:System.Int64> do wartości <xref:System.Decimal> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1074">The following example converts an <xref:System.Int64> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#10)]
 [!code-csharp[System.Convert Snippets#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#10)]
 [!code-vb[System.Convert Snippets#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1075">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1075">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1076">Konwertuje wartość określonego obiektu na równoważne dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1076">Converts the value of the specified object to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1077">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1077">A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1078">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1078">The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1079">Poniższy przykład podejmuje próbę przekonwertowania każdego elementu w tablicy obiektów do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1079">The following example tries to convert each element in an object array to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#4)]
 [!code-vb[System.Convert.ToDecimal2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1080"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Decimal" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1080"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1081"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1081"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1082">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1082">-or-</span></span>  
  
 <span data-ttu-id="233c1-1083">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1083">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1084"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1084"><paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As SByte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1085">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1085">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1086">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1086">Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1087">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1087">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1088">Poniższy przykład konwertuje każdego elementu w tablicy bajtów podpisem <xref:System.Decimal> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1088">The following example converts each element in an array of signed bytes to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#5)]
 [!code-vb[System.Convert.ToDecimal2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Single) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1089">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1089">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1090">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1090">Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1091">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1091">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1092"><xref:System.Decimal> Wartość zwrócona przez tę metodę zawiera maksymalnie 7 cyfr znaczących.</span><span class="sxs-lookup"><span data-stu-id="233c1-1092">The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits.</span></span> <span data-ttu-id="233c1-1093">Jeśli `value` parametr zawiera więcej niż siedmiu cyfr znaczących, jest zaokrąglana, przy użyciu zaokrąglenie do najbliższej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1093">If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest.</span></span> <span data-ttu-id="233c1-1094">Poniższy przykład przedstawia sposób <xref:System.Convert.ToDecimal%28System.Single%29> metoda używa zaokrąglania do najbliższego powrotu <xref:System.Decimal> wartości z siedmiu cyfr znaczących.</span><span class="sxs-lookup"><span data-stu-id="233c1-1094">The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1095">Poniższy przykład podejmuje próbę przekonwertowania każdego elementu w tablicy <xref:System.Single> wartości do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1095">The following example tries to convert each element in an array of <xref:System.Single> values to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#6)]
 [!code-vb[System.Convert.ToDecimal2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1096"><paramref name="value" /> jest większa niż <see cref="F:System.Decimal.MaxValue" /> lub mniej niż <see cref="F:System.Decimal.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1096"><paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1097">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1097">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1098">Konwertuje reprezentacja ciągu określonej liczby równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1098">Converts the specified string representation of a number to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1099">Odpowiadającą liczbie dziesiętnej <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1099">A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1100">Przy użyciu <xref:System.Convert.ToDecimal%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1100">Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1101">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1101">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1102">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1102">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1103">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1103">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1104">Poniższy przykład przedstawia użycie `ToDecimal`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1104">The following example illustrates the use of `ToDecimal`.</span></span> <span data-ttu-id="233c1-1105">Próbuje przekonwertować <xref:System.String> do <xref:System.Decimal>i zgłasza możliwych wyjątków, które mogą wystąpić podczas konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1105">It attempts to convert a <xref:System.String> to a <xref:System.Decimal>, and throws the possible exceptions that may arise during the conversion.</span></span>  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1106"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1106"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1107"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1107"><paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UShort) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1108">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1108">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1109">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1109">Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1110">Liczba dziesiętna, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1110">The decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1111">Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych bez znaku do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1111">The following example converts an array of 16-bit unsigned integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#7)]
 [!code-vb[System.Convert.ToDecimal2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1112">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1112">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1113">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1113">Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1114">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1114">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1115">Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku do <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1115">The following example converts an array of unsigned integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#8)]
 [!code-vb[System.Convert.ToDecimal2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As ULong) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1116">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1116">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1117">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważną liczbę dziesiętną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1117">Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1118">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1118">A decimal number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1119">Poniższy przykład konwertuje tablicę niepodpisane długich liczb całkowitych na <xref:System.Decimal> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1119">The following example converts an array of unsigned long integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#9)]
 [!code-vb[System.Convert.ToDecimal2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1120">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1120">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1121">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1121">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1122">Konwertuje wartość określonego obiektu na równoważną liczbę dziesiętną przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1122">Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1123">Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1123">A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1124">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1124">The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1125">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1125">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1126">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1126">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1127">W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1127">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#10)]
 [!code-vb[System.Convert.ToDecimal2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#10)]  
  
 <span data-ttu-id="233c1-1128">W poniższym przykładzie pokazano, że podczas `Temperature` obiekt został przekazany jako parametr <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> metody <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> implementacja `Temperature` klasy jest wywoływana w celu wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1128">The following example shows that when a `Temperature` object is passed as a parameter to the <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> method, the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> implementation of the `Temperature` class is called to perform the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#11)]
 [!code-vb[System.Convert.ToDecimal2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1129"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Decimal" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1129"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1130"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1130"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1131">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1131">-or-</span></span>  
  
 <span data-ttu-id="233c1-1132">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1132">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1133"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1133"><paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1134">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1134">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1135">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1135">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1136">Konwertuje reprezentacja ciągu określonej liczby równoważną liczbę dziesiętną przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1136">Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1137">Odpowiadającą liczbie dziesiętnej <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1137">A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1138">Wartość zwracana jest wynik wywołania <xref:System.Decimal.Parse%2A?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1138">The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1139">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1139">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1140"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1140">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1141">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1141">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1142">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1142">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1143">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1143">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1144">Poniższy przykład próbuje przekonwertować tablicy ciągów <xref:System.Decimal> wartości przy użyciu <xref:System.Globalization.NumberFormatInfo> obiektów, które reprezentują dwóch różnych kultur.</span><span class="sxs-lookup"><span data-stu-id="233c1-1144">The following example attempts to convert an array of strings to <xref:System.Decimal> values by using <xref:System.Globalization.NumberFormatInfo> objects that represent two different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal3.cs#12)]
 [!code-vb[System.Convert.ToDecimal2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal3.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1145"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1145"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1146"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1146"><paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDouble">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1147">Konwertuje określoną wartość na liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1147">Converts a specified value to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1148">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1148">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1149">Konwertuje określoną wartość logiczną na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1149">Converts the specified Boolean value to the equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1150">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1150">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1151">Poniższy przykład konwertuje <xref:System.Boolean> do wartości <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1151">The following example converts a <xref:System.Boolean> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Byte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1152">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1152">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1153">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1153">Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1154">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1154">The double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1155">Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1155">The following example converts a <xref:System.Byte> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1156">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1156">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1157">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1157">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1158">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1158">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1159">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1159">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1160">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1160">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As DateTime) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1161">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1161">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1162">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1162">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1163">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1163">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1164">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1164">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1165">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1165">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Decimal) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1166">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1166">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1167">Konwertuje wartość określonej liczby dziesiętnej równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1167">Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1168">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1168">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1169">Poniższy przykład konwertuje <xref:System.Decimal> do wartości <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1169">The following example converts a <xref:System.Decimal> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1170">Liczby zmiennoprzecinkowe podwójnej precyzji do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1170">The double-precision floating-point number to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1171">Zwraca podanej liczbie zmiennoprzecinkowej podwójnej precyzji; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1171">Returns the specified double-precision floating-point number; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1172"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1172"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Short) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1173">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1173">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1174">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1174">Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1175">Liczba zmiennoprzecinkowa podwójnej precyzji odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1175">A double-precision floating-point number equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1176">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1176">The following example converts each element in an array of 16-bit signed integers to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#1)]
 [!code-vb[System.Convert.ToDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1177">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1177">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1178">Konwertuje wartość określonego całkowita 32-bitowych na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1178">Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1179">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1179">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1180">Poniższy przykład konwertuje <xref:System.Int32> do wartości <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1180">The following example converts an <xref:System.Int32> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#3)]
 [!code-csharp[System.Convert Snippets#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#3)]
 [!code-vb[System.Convert Snippets#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Long) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1181">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1181">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1182">Konwertuje wartość określonego całkowita 64-bitowych na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1182">Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1183">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1183">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1184">Poniższy przykład konwertuje każdego elementu w tablicy długich liczb całkowitych ze znakiem do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1184">The following example converts each element in an array of signed long integers to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#2)]
 [!code-vb[System.Convert.ToDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1185">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1185">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1186">Konwertuje wartość określonego obiektu na liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1186">Converts the value of the specified object to a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1187">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1187">A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1188">Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1188">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1189">Poniższy przykład próbuje przekonwertować każdej wartości w tablicy obiektów do <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1189">The following example attempts to convert each value in an object array to a <xref:System.Double>.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#3)]
 [!code-vb[System.Convert.ToDouble#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1190"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Double" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1190"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1191"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1191"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1192">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1192">-or-</span></span>  
  
 <span data-ttu-id="233c1-1193">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1193">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1194"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1194"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As SByte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1195">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1195">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1196">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1196">Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1197">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1197">The 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1198">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.SByte> wartości do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1198">The following example converts each element in an array of <xref:System.SByte> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#4)]
 [!code-vb[System.Convert.ToDouble#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Single) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1199">Liczba zmiennoprzecinkowa pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1199">The single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="233c1-1200">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1200">Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1201">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1201">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1202">Poniższy przykład konwertuje <xref:System.Single> do wartości <xref:System.Double> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1202">The following example converts a <xref:System.Single> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#6)]
 [!code-csharp[System.Convert Snippets#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#6)]
 [!code-vb[System.Convert Snippets#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1203">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1203">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1204">Konwertuje reprezentacja ciągu określonej liczby równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1204">Converts the specified string representation of a number to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1205">Liczby zmiennoprzecinkowe podwójnej precyzji odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1205">A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1206">Przy użyciu <xref:System.Convert.ToDouble%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1206">Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1207">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1207">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1208">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1208">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1209">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1209">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1210">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1210">The following example attempts to convert each element in an array of numeric strings to a <xref:System.Double>.</span></span> <span data-ttu-id="233c1-1211">To przykładowe dane wyjściowe z systemu, w których bieżącej kultury jest en US.</span><span class="sxs-lookup"><span data-stu-id="233c1-1211">The example's output is from a system whose current culture is en-US.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/example8.cs#8)]
 [!code-vb[System.Convert.ToDouble#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/example8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1212"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1212"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1213"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1213"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UShort) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1214">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1214">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1215">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1215">Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1216">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1216">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1217">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt16> wartości do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1217">The following example converts each element in an array of <xref:System.UInt16> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#5)]
 [!code-vb[System.Convert.ToDouble#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1218">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1218">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1219">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1219">Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1220">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1220">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1221">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt32> wartości do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1221">The following example converts each element in an array of <xref:System.UInt32> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#6)]
 [!code-vb[System.Convert.ToDouble#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As ULong) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1222">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1222">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1223">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1223">Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1224">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1224">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1225">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt64> wartości do <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1225">The following example converts each element in an array of <xref:System.UInt64> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#7)]
 [!code-vb[System.Convert.ToDouble#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1226">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1226">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1227">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1227">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1228">Konwertuje wartość określonego obiektu do liczby zmiennoprzecinkowe podwójnej precyzji, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1228">Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1229">Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1229">A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1230">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1230">The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1231">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1231">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1232">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1232">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1233">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1233">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1234">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1234">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-1235">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1235">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-1236">Obiekt każdej klasy jest przekazywany do `ToDouble` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1236">An object of each class is passed to the `ToDouble` method.</span></span> <span data-ttu-id="233c1-1237">Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1237">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1238"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Double" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1238"><paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1239"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1239"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1240"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1240"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1241">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1241">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1242">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1242">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1243">Konwertuje reprezentacja ciągu określonej liczby równoważne podwójnej precyzji liczbie zmiennoprzecinkowej, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1243">Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1244">Liczby zmiennoprzecinkowe podwójnej precyzji odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1244">A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1245">Wartość zwracana jest wynik wywołania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1245">The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1246">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1246">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1247"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1247">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1248">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1248">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1249">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1249">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1250">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1250">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1251">Poniższy przykład konwertuje reprezentacji ciągu <xref:System.Double> wartości z `ToDouble` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1251">The following example converts string representations of <xref:System.Double> values with the `ToDouble` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-csharp[System.Convert.ToReals_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToReals_String/CS/todouble.cs#2)]
 [!code-vb[System.Convert.ToReals_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToReals_String/VB/todouble.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1252"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1252"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1253"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1253"><paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1254">Konwertuje określoną wartość do 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1254">Converts a specified value to a 16-bit signed integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Boolean) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1255">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1255">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1256">Konwertuje określoną wartość logiczną na równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1256">Converts the specified Boolean value to the equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1257">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1257">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1258">Poniższy przykład konwertuje wartości logiczne `true` i `false` do <xref:System.Int16> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1258">The following example converts the Boolean values `true` and `false` to <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#1)]
 [!code-vb[System.Convert.ToInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Byte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1259">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1259">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1260">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1260">Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1261">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1261">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1262">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Byte> wartości 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1262">The following example converts each element in an array of <xref:System.Byte> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#2)]
 [!code-vb[System.Convert.ToInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Char) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1263">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1263">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1264">Konwertuje wartość określonego znaku Unicode na równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1264">Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1265">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1265">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1266">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Char> wartości 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1266">The following example attempts to convert each element in an array of <xref:System.Char> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#3)]
 [!code-vb[System.Convert.ToInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1267"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1267"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As DateTime) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1268">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1268">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1269">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1269">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1270">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1270">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1271">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1271">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1272">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1272">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Decimal) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1273">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1273">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1274">Konwertuje wartość określonej liczby dziesiętnej równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1274">Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1275"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1275"><paramref name="value" />, rounded to the nearest 16-bit signed integer.</span></span> <span data-ttu-id="233c1-1276">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1276">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1277">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1277">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a 16-bit signed integer.</span></span> <span data-ttu-id="233c1-1278">Które pokazano w przykładzie dowolnej ułamkowych części <xref:System.Decimal> wartość jest zaokrąglana podczas wykonywania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1278">The example illustrates that any fractional part of a <xref:System.Decimal> value is rounded when performing the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#4)]
 [!code-vb[System.Convert.ToInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1279"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1279"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Double) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1280">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1280">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1281">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1281">Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1282"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1282"><paramref name="value" />, rounded to the nearest 16-bit signed integer.</span></span> <span data-ttu-id="233c1-1283">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1283">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1284">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1284">The following example converts each element in an array of <xref:System.Double> values to a 16-bit signed integer.</span></span> <span data-ttu-id="233c1-1285">Które pokazano w przykładzie dowolnej ułamkowych części <xref:System.Double> wartość jest zaokrąglana przed przeprowadzeniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1285">The example illustrates that any fractional part of a <xref:System.Double> value is rounded before performing the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#5)]
 [!code-vb[System.Convert.ToInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1286"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1286"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1287">16-bitową liczbę całkowitą ze znakiem do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1287">The 16-bit signed integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1288">Zwraca określony 16-bitową liczbę całkowitą ze znakiem; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1288">Returns the specified 16-bit signed integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1289"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1289"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1290">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1290">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1291">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1291">Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1292">Odpowiednik 16-bitową liczbę całkowitą ze znakiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1292">The 16-bit signed integer equivalent of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1293">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1293">The following example attempts to convert each element in an array of integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#6)]
 [!code-vb[System.Convert.ToInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1294"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1294"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Long) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1295">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1295">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1296">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1296">Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1297">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1297">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1298">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1298">The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#7)]
 [!code-vb[System.Convert.ToInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1299"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1299"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1300">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1300">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1301">Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1301">Converts the value of the specified object to a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1302">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1302">A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1303">Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1303">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1304">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1304">The following example attempts to convert each element in an object array to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#8)]
 [!code-vb[System.Convert.ToInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1305"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Int16" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1305"><paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1306"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1306"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1307">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1307">-or-</span></span>  
  
 <span data-ttu-id="233c1-1308">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1308">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1309"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1309"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As SByte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1310">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1310">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1311">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1311">Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1312">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1312">A 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1313">Poniższy przykład konwertuje każdy element tablicy bajtów podpisem 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1313">The following example converts each element in an array of signed bytes to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#9)]
 [!code-vb[System.Convert.ToInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Single) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1314">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1314">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1315">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1315">Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1316"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1316"><paramref name="value" />, rounded to the nearest 16-bit signed integer.</span></span> <span data-ttu-id="233c1-1317">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1317">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1318">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1318">The following example attempts to convert each element in an array of <xref:System.Single> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#10)]
 [!code-vb[System.Convert.ToInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1319"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1319"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1320">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1320">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1321">Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1321">Converts the specified string representation of a number to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1322">16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1322">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1323">Przy użyciu <xref:System.Convert.ToInt16%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1323">Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1324">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1324">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1325">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1325">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1326">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1326">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1327">Poniższy przykład konwertuje 16-bitowych liczb całkowitych z reprezentacji ciągu `ToInt16` metodę, przy użyciu domyślnego formatowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-1327">The following example converts string representations of 16-bit integers with the `ToInt16` method, using default formatting.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1328"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1328"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1329"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1329"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UShort) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1330">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1330">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1331">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1331">Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1332">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1332">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1333">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1333">The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#11)]
 [!code-vb[System.Convert.ToInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1334"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1334"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1335">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1335">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1336">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1336">Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1337">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1337">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1338">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1338">The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#12)]
 [!code-vb[System.Convert.ToInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1339"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1339"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As ULong) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1340">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1340">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1341">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1341">Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1342">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1342">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1343">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1343">The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#13)]
 [!code-vb[System.Convert.ToInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1344"><paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1344"><paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1345">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1345">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1346">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1346">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1347">Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1347">Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1348">16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1348">A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1349">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1349">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1350">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1350">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1351">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1351">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1352">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1352">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-1353">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1353">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-1354">Obiekt każdej klasy jest przekazywany do `ToInt16` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1354">An object of each class is passed to the `ToInt16` method.</span></span> <span data-ttu-id="233c1-1355">Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1355">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1356"><paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Int16" /> typu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1356"><paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1357"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1357"><paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1358"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1358"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1359">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1359">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1360">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1360">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1361">Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1361">Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1362">16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1362">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1363">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1363">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1364"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1364">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1365">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1365">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1366">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1366">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1367">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1367">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1368">Poniższy przykład konwertuje 16-bitowych liczb całkowitych z reprezentacji ciągu `ToInt16` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1368">The following example converts string representations of 16-bit integers with the `ToInt16` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1369"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1369"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1370"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1370"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, fromBase As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1371">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1371">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-1372">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1372">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-1373">Konwertuje reprezentację liczby w określonej podstawy równoważne 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1373">Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1374">16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1374">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1375">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-1375">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-1376">Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1376">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="233c1-1377">Innymi słowy metoda zawsze interpretuje bit binarne najwyższej kolejności liczby całkowitej (bit 15) jako jego bitu znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1377">In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit.</span></span> <span data-ttu-id="233c1-1378">W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int16> — typ danych jest konwertowana na <xref:System.Int16> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1378">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-1379">Następujących zwiększa przykład <xref:System.Int16.MaxValue?displayProperty=nameWithType> przez jedną, konwertuje wynikowa liczba na jej reprezentację ciągu szesnastkowego, a następnie wywołuje <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1379">The following example increments <xref:System.Int16.MaxValue?displayProperty=nameWithType> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-1380">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000 skonwertować -32768."</span><span class="sxs-lookup"><span data-stu-id="233c1-1380">Instead of throwing an exception, the method displays the message, "0x8000 converts to -32768."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]
 [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  
  
 <span data-ttu-id="233c1-1381">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1381">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-1382">Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio pobierając pierwszy znak wartości liczbowej przed przekonwertowaniem go na jej reprezentację ciągu szesnastkowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1382">As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="233c1-1383">Zgłoś wyjątek, jeśli został dodatnią oryginalnej wartości, ale konwersji do typu integer daje wartość ujemną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1383">Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]
 [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1384">Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów jako ciąg szesnastkowy i przekonwertować go do 16-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1384">The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_2.cs#14)]
 [!code-vb[System.Convert.ToInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_2.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-1385"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1385"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-1386">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1386">-or-</span></span>  
  
 <span data-ttu-id="233c1-1387"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1387"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-1388"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1388"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1389"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1389"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-1390">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-1390">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1391"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1391"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-1392">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1392">-or-</span></span>  
  
 <span data-ttu-id="233c1-1393"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1393"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1394">Konwertuje określoną wartość całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1394">Converts a specified value to a 32-bit signed integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1395">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1395">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1396">Konwertuje określoną wartość logiczną na równoważne całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1396">Converts the specified Boolean value to the equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1397">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1397">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1398">Poniższy przykład konwertuje <xref:System.Boolean> wartości `true` i `false` do liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1398">The following example converts the <xref:System.Boolean> values `true` and `false` to integers.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#1)]
 [!code-vb[System.Convert.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1399">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1399">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1400">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1400">Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1401">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1401">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1402">Poniższy przykład konwertuje każdy element tablicy bajtów na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1402">The following example converts each element in an array of bytes to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#2)]
 [!code-vb[System.Convert.ToInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1403">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1403">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1404">Konwertuje wartość określonego znaku Unicode na równoważne całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1404">Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1405">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1405">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1406"><xref:System.Convert.ToInt32%28System.Char%29> Metoda zwraca 32-bitowe liczby całkowite ze znakiem reprezentuje jednostkę zakodowanego kodu UTF-16 `value` argumentu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1406">The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument.</span></span> <span data-ttu-id="233c1-1407">Jeśli `value` nie jest dwuskładnikowego lub znakiem zastępczym wysokiego poziomu, zwrócona wartość reprezentuje również punkt kodu Unicode o wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1407">If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1408">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Char> wartości na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1408">The following example converts each element in an array of <xref:System.Char> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#3)]
 [!code-vb[System.Convert.ToInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1409">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1409">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1410">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1410">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1411">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1411">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1412">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1412">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1413">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1413">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1414">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1414">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1415">Konwertuje wartość określonej liczby dziesiętnej równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1415">Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1416"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1416"><paramref name="value" />, rounded to the nearest 32-bit signed integer.</span></span> <span data-ttu-id="233c1-1417">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1417">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1418">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1418">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]
 [!code-vb[System.Convert.ToInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1419"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1419"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1420">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1420">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1421">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1421">Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1422"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1422"><paramref name="value" />, rounded to the nearest 32-bit signed integer.</span></span> <span data-ttu-id="233c1-1423">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1423">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1424">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości aninteger.</span><span class="sxs-lookup"><span data-stu-id="233c1-1424">The following example attempts to convert each element in an array of <xref:System.Double> values to aninteger.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#5)]
 [!code-vb[System.Convert.ToInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1425"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1425"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1426">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1426">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1427">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1427">Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1428">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1428">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1429">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1429">The following example converts each element in an array of 16-bit signed integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#6)]
 [!code-vb[System.Convert.ToInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1430">32-bitowe całkowita do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1430">The 32-bit signed integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1431">Zwraca określony całkowita 32-bitowy; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1431">Returns the specified 32-bit signed integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1432"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1432"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1433">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1433">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1434">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1434">Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1435">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1435">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1436">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1436">The following example attempts to convert each element in an array of long integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#7)]
 [!code-vb[System.Convert.ToInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1437"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1437"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1438">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1438">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1439">Konwertuje wartość określonego obiektu całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1439">Converts the value of the specified object to a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1440">32-bitowe całkowita odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1440">A 32-bit signed integer equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1441">Jeśli`value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1441">If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1442">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1442">The following example attempts to convert each element in an object array to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#8)]
 [!code-vb[System.Convert.ToInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1443"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1443"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1444"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1444"><paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1445">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1445">-or-</span></span>  
  
 <span data-ttu-id="233c1-1446">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1446">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1447"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1447"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1448">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1448">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1449">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1449">Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1450">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1450">A 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1451">Poniższy przykład konwertuje każdy element tablicy bajtów podpisem na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1451">The following example converts each element in an array of signed bytes to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#9)]
 [!code-vb[System.Convert.ToInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1452">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1452">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1453">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1453">Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1454"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1454"><paramref name="value" />, rounded to the nearest 32-bit signed integer.</span></span> <span data-ttu-id="233c1-1455">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1455">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1456">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1456">The following example attempts to convert each element in an array of <xref:System.Single> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#10)]
 [!code-vb[System.Convert.ToInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1457"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1457"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1458">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1458">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1459">Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1459">Converts the specified string representation of a number to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1460">32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1460">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1461">Przy użyciu <xref:System.Convert.ToInt32%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType> metody.`value`</span><span class="sxs-lookup"><span data-stu-id="233c1-1461">Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType> method.`value`</span></span> <span data-ttu-id="233c1-1462">jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1462">is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1463">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1463">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1464">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1464">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1465">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1465">The following example attempts to convert each element in a numeric string array to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#11)]
 [!code-vb[System.Convert.ToInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1466"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1466"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1467"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1467"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1468">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1468">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1469">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne całkowita 32-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1469">Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1470">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1470">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1471">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-1471">The following example converts each element in an array of 16-bit unsigned integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#12)]
 [!code-vb[System.Convert.ToInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1472">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1472">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1473">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1473">Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1474">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1474">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1475">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku na liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1475">The following example attempts to convert each element in an array of unsigned integers to a signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#13)]
 [!code-vb[System.Convert.ToInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1476"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1476"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1477">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1477">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1478">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1478">Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1479">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1479">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1480">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku na liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1480">The following example attempts to convert each element in an array of unsigned long integers to a signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#14)]
 [!code-vb[System.Convert.ToInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1481"><paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1481"><paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1482">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1482">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1483">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1483">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1484">Konwertuje wartość określonego obiektu całkowita 32-bitowy, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1484">Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1485">32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1485">A 32-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1486">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1486">The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1487">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1487">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1488">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1488">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1489">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1489">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1490">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1490">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-1491">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1491">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-1492">Obiekt każdej klasy jest przekazywany do `ToInt32` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1492">An object of each class is passed to the `ToInt32` method.</span></span> <span data-ttu-id="233c1-1493">Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1493">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1494"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1494"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1495"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1495"><paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1496"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1496"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1497">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1497">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1498">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1498">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1499">Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1499">Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1500">32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1500">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1501">Wartość zwracana jest wynik wywołania <xref:System.Int32.Parse%2A?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1501">The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1502">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1502">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1503"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1503">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1504">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1504">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1505">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1505">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1506">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1506">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1507">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1507">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="233c1-1508">Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="233c1-1508">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_2.cs#15)]
 [!code-vb[System.Convert.ToInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1509"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1509"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1510"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1510"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, fromBase As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1511">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1511">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-1512">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1512">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-1513">Konwertuje reprezentację liczby w określonej podstawy równoważne 32-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1513">Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1514">32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1514">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1515">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-1515">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-1516">Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1516">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="233c1-1517">Innymi słowy metoda zawsze interpretuje bit binarne najwyższej kolejności liczby całkowitej (bit 31) jako jego bitu znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1517">In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit.</span></span> <span data-ttu-id="233c1-1518">W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int32> — typ danych jest konwertowana na <xref:System.Int32> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1518">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-1519">Następujących zwiększa przykład <xref:System.Int32.MaxValue?displayProperty=nameWithType> przez jedną, konwertuje wynikowa liczba na jej reprezentację ciągu szesnastkowego, a następnie wywołuje <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1519">The following example increments <xref:System.Int32.MaxValue?displayProperty=nameWithType> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-1520">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80000000 skonwertować -2147483648."</span><span class="sxs-lookup"><span data-stu-id="233c1-1520">Instead of throwing an exception, the method displays the message, "0x80000000 converts to -2147483648."</span></span>  
  
 [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]
 [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]
 [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  
  
 <span data-ttu-id="233c1-1521">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1521">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-1522">Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio pobierając pierwszy znak wartości liczbowej przed przekonwertowaniem go na jej reprezentację ciągu szesnastkowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1522">As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="233c1-1523">Zgłoś wyjątek, jeśli został dodatnią oryginalnej wartości, ale konwersji do typu integer daje wartość ujemną.</span><span class="sxs-lookup"><span data-stu-id="233c1-1523">Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</span></span>  
  
 [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]
 [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]
 [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-1524"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1524"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-1525">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1525">-or-</span></span>  
  
 <span data-ttu-id="233c1-1526"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1526"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-1527"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1527"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1528"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1528"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-1529">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-1529">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1530"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1530"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-1531">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1531">-or-</span></span>  
  
 <span data-ttu-id="233c1-1532"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1532"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1533">Konwertuje określoną wartość całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1533">Converts a specified value to a 64-bit signed integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1534">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1534">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1535">Konwertuje określoną wartość logiczną na równoważne całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1535">Converts the specified Boolean value to the equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1536">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1536">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1537">Poniższy przykład konwertuje <xref:System.Boolean> wartości `true` i `false` długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1537">The following example converts the <xref:System.Boolean> values `true` and `false` to long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#1)]
 [!code-vb[System.Convert.ToInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Byte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1538">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1538">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1539">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1539">Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1540">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1540">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1541">Poniższy przykład konwertuje każdy element tablicy bajtów długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1541">The following example converts each element in an array of bytes to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#2)]
 [!code-vb[System.Convert.ToInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Char) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1542">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1542">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1543">Konwertuje wartość określonego znaku Unicode na równoważne całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1543">Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1544">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1544">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1545">Poniższy przykład konwertuje każdy element <xref:System.Char> tablicy, tak aby długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1545">The following example converts each element in a <xref:System.Char> array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#3)]
 [!code-vb[System.Convert.ToInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As DateTime) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1546">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1546">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1547">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1547">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1548">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1548">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1549">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1549">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1550">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1550">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Decimal) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1551">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1551">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1552">Konwertuje wartość określonej liczby dziesiętnej równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1552">Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1553"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1553"><paramref name="value" />, rounded to the nearest 64-bit signed integer.</span></span> <span data-ttu-id="233c1-1554">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1554">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1555">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1555">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]
 [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1556"><paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1556"><paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Double) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1557">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1557">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1558">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1558">Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1559"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1559"><paramref name="value" />, rounded to the nearest 64-bit signed integer.</span></span> <span data-ttu-id="233c1-1560">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1560">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1561">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1561">The following example attempts to convert each element in an array of <xref:System.Double> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#5)]
 [!code-vb[System.Convert.ToInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1562"><paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1562"><paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Short) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1563">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1563">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1564">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1564">Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1565">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1565">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1566">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1566">The following example converts each element in an array of 16-bit integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#6)]
 [!code-vb[System.Convert.ToInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1567">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1567">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1568">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1568">Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1569">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1569">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1570">Całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1570">A 64-bit signed integer.</span></span></param>
        <summary><span data-ttu-id="233c1-1571">Zwraca określony całkowita 64-bitowy; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1571">Returns the specified 64-bit signed integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1572"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1572"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1573">Poniższy przykład konwertuje każdy element tablicy liczb całkowitych długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1573">The following example converts each element in an array of integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#7)]
 [!code-vb[System.Convert.ToInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1574">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1574">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1575">Konwertuje wartość określonego obiektu na 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1575">Converts the value of the specified object to a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1576">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1576">A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1577">Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1577">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1578">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1578">The following example attempts to convert each element in an object array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#8)]
 [!code-vb[System.Convert.ToInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1579"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1579"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1580"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1580"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1581">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1581">-or-</span></span>  
  
 <span data-ttu-id="233c1-1582">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1582">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1583"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1583"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As SByte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1584">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1584">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1585">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1585">Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1586">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1586">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1587">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1587">The following example converts each element in a signed byte array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#9)]
 [!code-vb[System.Convert.ToInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Single) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1588">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1588">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1589">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1589">Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1590"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1590"><paramref name="value" />, rounded to the nearest 64-bit signed integer.</span></span> <span data-ttu-id="233c1-1591">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1591">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1592">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1592">The following example attempts to convert each element in an array of <xref:System.Single> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#10)]
 [!code-vb[System.Convert.ToInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1593"><paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1593"><paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1594">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1594">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1595">Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1595">Converts the specified string representation of a number to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1596">64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1596">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1597">Przy użyciu <xref:System.Convert.ToInt64%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1597">Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1598">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1598">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1599">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1599">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1600">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1600">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1601">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1601">The following example attempts to convert each element in an array of numeric strings to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#11)]
 [!code-vb[System.Convert.ToInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1602"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1602"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1603"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1603"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UShort) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1604">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1604">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1605">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne całkowita 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1605">Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1606">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1606">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1607">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1607">The following example converts each element in an array of 16-bit unsigned integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#12)]
 [!code-vb[System.Convert.ToInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1608">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1608">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1609">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1609">Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1610">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1610">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1611">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1611">The following example converts each element in an array of unsigned integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#13)]
 [!code-vb[System.Convert.ToInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As ULong) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1612">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1612">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1613">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1613">Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1614">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1614">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1615">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1615">The following example attempts to convert each element in an array of unsigned long integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#14)]
 [!code-vb[System.Convert.ToInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1616"><paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1616"><paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1617">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1617">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1618">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1618">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1619">Konwertuje wartość określonego obiektu na 64-bitowych podpisane liczby całkowite, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1619">Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1620">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1620">A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1621">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1621">The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1622">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1622">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1623">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1623">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1624">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1624">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1625">W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1625">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="233c1-1626">Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1626">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="233c1-1627">Obiekt każdej klasy jest przekazywany do `ToInt64` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1627">An object of each class is passed to the `ToInt64` method.</span></span> <span data-ttu-id="233c1-1628">Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1628">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1629"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1629"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1630"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1630"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1631">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1631">-or-</span></span>  
  
 <span data-ttu-id="233c1-1632">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1632">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1633"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1633"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1634">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1634">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1635">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1635">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1636">Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1636">Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1637">64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1637">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1638">Wartość zwracana jest wynik wywołania <xref:System.Int64.Parse%2A?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1638">The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1639">`provider` jest `IFormatProvider` wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1639">`provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1640">`NumberFormatInfo` Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1640">The `NumberFormatInfo` object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1641">Jeśli `provider` jest `null`, `NumberFormatInfo` dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1641">If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1642">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1642">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1643">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1643">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1644">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1644">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="233c1-1645">Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="233c1-1645">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_3.cs#16)]
 [!code-vb[System.Convert.ToInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1646"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1646"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1647"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1647"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, fromBase As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1648">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1648">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-1649">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1649">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-1650">Konwertuje reprezentację liczby w określonej podstawy równoważne 64-bitowych liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1650">Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1651">64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1651">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1652">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-1652">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-1653">Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1653">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="233c1-1654">Innymi słowy metoda zawsze interpretuje bitem binarne najwyższej kolejności długich liczb całkowitych (bit 63) jako jego bitu znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1654">In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit.</span></span> <span data-ttu-id="233c1-1655">W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int64> — typ danych jest konwertowana na <xref:System.Int64> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1655">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-1656">Poniższy przykład konwertuje <xref:System.UInt64.MaxValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1656">The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-1657">Zamiast generowania wyjątku, metoda wyświetla komunikat "0xFFFFFFFFFFFFFFFF skonwertować -1."</span><span class="sxs-lookup"><span data-stu-id="233c1-1657">Instead of throwing an exception, the method displays the message, "0xFFFFFFFFFFFFFFFF converts to -1."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]
 [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  
  
 <span data-ttu-id="233c1-1658">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1658">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-1659">Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio określając pierwszy Określa, czy wartość reprezentuje niepodpisany lub poziomu typu ze znakiem podczas konwertowania go na jej reprezentację ciągu szesnastkowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1659">As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="233c1-1660">Zgłoś wyjątek, jeśli oryginalnej wartości był typem unsigned, ale konwersji do typu integer wyznaczające wartość, której bitem znajduje się na.</span><span class="sxs-lookup"><span data-stu-id="233c1-1660">Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]
 [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  
  
 <span data-ttu-id="233c1-1661">Poniższy przykład próbuje interpretacji każdego elementu w tablicy ciągów jako ciąg szesnastkowy i przekonwertować go na długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-1661">The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]
 [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-1662"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1662"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-1663">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1663">-or-</span></span>  
  
 <span data-ttu-id="233c1-1664"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1664"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-1665"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1665"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1666"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1666"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-1667">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-1667">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1668"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1668"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-1669">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1669">-or-</span></span>  
  
 <span data-ttu-id="233c1-1670"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1670"><paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1671">Konwertuje określoną wartość na 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1671">Converts a specified value to an 8-bit signed integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Boolean) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1672">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1672">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1673">Konwertuje określoną wartość logiczną na równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1673">Converts the specified Boolean value to the equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1674">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1674">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1675">Poniższy przykład konwertuje wartości logiczne `true` i `false` do podpisana wartości bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-1675">The following example converts the Boolean values `true` and `false` to signed byte values.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#1)]
 [!code-vb[System.Convert.ToSByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Byte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1676">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1676">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1677">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1677">Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1678">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1678">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1679">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1679">The following example attempts to convert each element in a byte array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#2)]
 [!code-vb[System.Convert.ToSByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1680"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1680"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Char) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1681">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1681">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1682">Konwertuje wartość określonego znaku Unicode na równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1682">Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1683">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1683">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1684">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Char> wartości bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1684">The following example attempts to convert each element in an array of <xref:System.Char> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#3)]
 [!code-vb[System.Convert.ToSByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1685"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1685"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As DateTime) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1686">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1686">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1687">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1687">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1688">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1688">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1689">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1689">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1690">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1690">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Decimal) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1691">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1691">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1692">Konwertuje wartość określonej liczby dziesiętnej równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1692">Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1693"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1693"><paramref name="value" />, rounded to the nearest 8-bit signed integer.</span></span> <span data-ttu-id="233c1-1694">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1694">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1695">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1695">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#4)]
 [!code-vb[System.Convert.ToSByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1696"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1696"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Double) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1697">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1697">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1698">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1698">Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1699"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1699"><paramref name="value" />, rounded to the nearest 8-bit signed integer.</span></span> <span data-ttu-id="233c1-1700">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1700">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1701">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1701">The following example attempts to convert each element in an array of <xref:System.Double> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#5)]
 [!code-vb[System.Convert.ToSByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1702"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1702"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Short) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1703">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1703">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1704">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1704">Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1705">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1705">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1706">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych ze znakiem 16-bitowych bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1706">The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#6)]
 [!code-vb[System.Convert.ToSByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1707"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1707"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1708">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1708">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1709">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1709">Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1710">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1710">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1711">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych ze znakiem bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1711">The following example attempts to convert each element in an array of signed integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#7)]
 [!code-vb[System.Convert.ToSByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1712"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1712"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Long) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1713">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1713">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1714">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1714">Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1715">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1715">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1716">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1716">The following example attempts to convert each element in an array of long integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#8)]
 [!code-vb[System.Convert.ToSByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1717"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1717"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1718">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1718">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1719">Konwertuje wartość określonego obiektu na 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1719">Converts the value of the specified object to an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1720">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1720">An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1721">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1721">The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1722">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1722">The following example attempts to convert each element in an object array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1723"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1723"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1724"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1724"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1725">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1725">-or-</span></span>  
  
 <span data-ttu-id="233c1-1726">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1726">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1727"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1727"><paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1728">8-bitową liczbę całkowitą ze znakiem do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1728">The 8-bit signed integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1729">Zwraca określony 8-bitową liczbę całkowitą ze znakiem; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1729">Returns the specified 8-bit signed integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1730"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1730"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Single) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1731">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1731">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1732">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1732">Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1733"><paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1733"><paramref name="value" />, rounded to the nearest 8-bit signed integer.</span></span> <span data-ttu-id="233c1-1734">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-1734">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1735">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1735">The following example attempts to convert each element in an array of <xref:System.Single> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1736"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1736"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1737">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1737">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1738">Konwertuje określoną reprezentację ciągu liczbą równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1738">Converts the specified string representation of a number to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1739">8-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub wartość 0 (zero), jeśli wartość jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1739">An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1740">Przy użyciu <xref:System.Convert.ToSByte%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1740">Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1741">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1741">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1742">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1742">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1743">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1743">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1744">Poniższy przykład konwertuje reprezentacji ciągu <xref:System.SByte> wartości z `ToSByte` metodę, przy użyciu domyślnego formatowania.</span><span class="sxs-lookup"><span data-stu-id="233c1-1744">The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using default formatting.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1745"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1745"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1746"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1746"><paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UShort) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1747">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1747">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1748">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1748">Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1749">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1749">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1750">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1750">The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#11)]
 [!code-vb[System.Convert.ToSByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1751"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1751"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1752">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1752">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1753">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1753">Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1754">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1754">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1755">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy całkowitą bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1755">The following example attempts to convert each element in an integer array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#12)]
 [!code-vb[System.Convert.ToSByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1756"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1756"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As ULong) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1757">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1757">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1758">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1758">Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1759">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1759">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1760">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bajtu ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1760">The following example attempts to convert each element in an array of long integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#13)]
 [!code-vb[System.Convert.ToSByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1761"><paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1761"><paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1762">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1762">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1763">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1763">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1764">Konwertuje wartość określonego obiektu na 8-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1764">Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1765">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1765">An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1766">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1766">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1767">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1767">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1768">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1768">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1769">W poniższym przykładzie zdefiniowano `ByteString` klasy, która przechowuje zarówno podpisane i niepodpisane bajtów jako ciągi szesnastkowe wraz z polem wskazuje znak liczby bajtów.</span><span class="sxs-lookup"><span data-stu-id="233c1-1769">The following example defines a `ByteString` class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte.</span></span> <span data-ttu-id="233c1-1770">`ByteString` Klasa implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1770">The `ByteString` class implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="233c1-1771">Jego <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> wywołania metody <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> metodę w celu konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1771">Its <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> method calls the <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> method to perform the conversion.</span></span> <span data-ttu-id="233c1-1772">W przypadku niepowodzenia zgłasza <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1772">If it fails, it throws an <xref:System.OverflowException>.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#14)]
 [!code-vb[System.Convert.ToSByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#14)]  
  
 <span data-ttu-id="233c1-1773">W poniższym przykładzie przedstawiono sposób <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> implementacja `ByteString` klasy jest wywoływana przez <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1773">The following example shows how the <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> implementation of the `ByteString` class is called by the <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#15)]
 [!code-vb[System.Convert.ToSByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1774"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1774"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1775"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1775"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1776">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1776">-or-</span></span>  
  
 <span data-ttu-id="233c1-1777">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1777">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1778"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1778"><paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1779">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1779">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1780">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1780">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1781">Konwertuje reprezentacja ciągu określonej liczby równoważne 8-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1781">Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1782">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1782">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1783">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1783">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1784"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1784">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1785">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1785">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1786">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1786">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1787">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1787">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1788">Poniższy przykład konwertuje reprezentacji ciągu <xref:System.SByte> wartości z `ToSByte` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1788">The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="233c1-1789"><paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1789"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1790"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-1790"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1791"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1791"><paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, fromBase As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1792">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1792">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-1793">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1793">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-1794">Konwertuje reprezentację liczby w określonej podstawy równoważne 8-bitową liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-1794">Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-1795">8-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1795">An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1796">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-1796">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-1797">Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1797">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="233c1-1798">Innymi słowy metoda zawsze interpretuje bit znaczących bajtów (bit 7) jako jego bitu znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1798">In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit.</span></span> <span data-ttu-id="233c1-1799">W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.SByte> — typ danych jest konwertowana na <xref:System.SByte> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1799">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-1800">Poniższy przykład konwertuje <xref:System.Byte.MaxValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1800">The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-1801">Zamiast generowania wyjątku, metoda wyświetla komunikat "0xff skonwertować -1."</span><span class="sxs-lookup"><span data-stu-id="233c1-1801">Instead of throwing an exception, the method displays the message, "0xff converts to -1."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]
 [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  
  
 <span data-ttu-id="233c1-1802">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1802">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-1803">Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio określając pierwszy Określa, czy wartość reprezentuje niepodpisany lub poziomu typu ze znakiem podczas konwertowania go na jej reprezentację ciągu szesnastkowego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1803">As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="233c1-1804">Zgłoś wyjątek, jeśli oryginalnej wartości był typem unsigned, ale konwersja z powrotem do bajtu ze znakiem wyznaczające wartość, której bitem znajduje się na.</span><span class="sxs-lookup"><span data-stu-id="233c1-1804">Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]
 [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1805">Poniższy przykład próbuje interpretować elementów w tablicy ciągów jako wartość binarną, ósemkowego i szesnastkową reprezentację wartości liczbowe w celu ich konwersji do bajtów bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1805">The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte3.cs#16)]
 [!code-vb[System.Convert.ToSByte#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-1806"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-1806"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-1807">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1807">-or-</span></span>  
  
 <span data-ttu-id="233c1-1808"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1808"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-1809"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1809"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1810"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1810"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-1811">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-1811">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1812"><paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1812"><paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-1813">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1813">-or-</span></span>  
  
 <span data-ttu-id="233c1-1814"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1814"><paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSingle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1815">Konwertuje określoną wartość do liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1815">Converts a specified value to a single-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Boolean) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1816">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1816">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1817">Konwertuje określoną wartość logiczna równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1817">Converts the specified Boolean value to the equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1818">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-1818">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1819">Poniższy przykład konwertuje wartości logiczne `true` i `false` do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1819">The following example converts the Boolean values `true` and `false` to <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#1)]
 [!code-vb[System.Convert.ToSingle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Byte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1820">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1820">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1821">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1821">Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1822">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1822">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1823">Poniższy przykład konwertuje każdego elementu w tablicy wartości bajtu <xref:System.Single> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1823">The following example converts each element in an array of byte values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#2)]
 [!code-vb[System.Convert.ToSingle#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Char) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1824">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1824">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1825">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1825">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1826">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1826">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1827">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1827">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1828">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1828">This conversion is not supported.</span></span></exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As DateTime) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1829">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1829">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1830">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1830">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-1831">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1831">This conversion is not supported.</span></span> <span data-ttu-id="233c1-1832">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1832">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-1833">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1833">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Decimal) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1834">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1834">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1835">Konwertuje wartość określonej liczby dziesiętnej równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1835">Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1836">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1836">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-1837"><paramref name="value" /> jest zaokrąglana przy użyciu zaokrąglenie do najbliższej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1837"><paramref name="value" /> is rounded using rounding to nearest.</span></span> <span data-ttu-id="233c1-1838">Na przykład gdy zaokrąglona do dwóch miejsc po przecinku, wartość 2.345 staje się 2.34 i wartość 2.355 staje się 2,36.</span><span class="sxs-lookup"><span data-stu-id="233c1-1838">For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1839">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1839">The following example converts each element in an array of <xref:System.Decimal> values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#3)]
 [!code-vb[System.Convert.ToSingle#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Double) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1840">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1840">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1841">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1841">Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1842">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1842">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="233c1-1843"><paramref name="value" /> jest zaokrąglana przy użyciu zaokrąglenie do najbliższej.</span><span class="sxs-lookup"><span data-stu-id="233c1-1843"><paramref name="value" /> is rounded using rounding to nearest.</span></span> <span data-ttu-id="233c1-1844">Na przykład gdy zaokrąglona do dwóch miejsc po przecinku, wartość 2.345 staje się 2.34 i wartość 2.355 staje się 2,36.</span><span class="sxs-lookup"><span data-stu-id="233c1-1844">For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1845">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1845">The following example converts each element in an array of <xref:System.Double> values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#4)]
 [!code-vb[System.Convert.ToSingle#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Short) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1846">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1846">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1847">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1847">Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1848">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1848">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1849">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1849">The following example converts each element in an array of 16-bit integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#5)]
 [!code-vb[System.Convert.ToSingle#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1850">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1850">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1851">Konwertuje wartość określonego całkowita 32-bitowych równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1851">Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1852">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1852">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1853">Poniższy przykład konwertuje każdego elementu w tablicy całkowitą do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1853">The following example converts each element in an integer array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#6)]
 [!code-vb[System.Convert.ToSingle#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Long) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1854">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1854">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1855">Konwertuje wartość określonego całkowita 64-bitowych równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1855">Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1856">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1856">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1857">Poniższy przykład konwertuje każdego elementu w tablicy długich liczb całkowitych na <xref:System.Single> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1857">The following example converts each element in an array of long integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#7)]
 [!code-vb[System.Convert.ToSingle#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1858">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1858">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1859">Konwertuje wartość określonego obiektu do liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1859">Converts the value of the specified object to a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1860">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1860">A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1861">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1861">The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1862">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1862">The following example attempts to convert each element in an object array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#8)]
 [!code-vb[System.Convert.ToSingle#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1863"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1863"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1864"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1864"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-1865">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-1865">-or-</span></span>  
  
 <span data-ttu-id="233c1-1866">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-1866">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1867"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1867"><paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As SByte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1868">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1868">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1869">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1869">Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1870">8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1870">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1871">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1871">The following example converts each element in a signed byte array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#9)]
 [!code-vb[System.Convert.ToSingle#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1872">Liczba zmiennoprzecinkowych pojedynczej precyzji do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1872">The single-precision floating-point number to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1873">Zwraca podanej liczbie zmiennoprzecinkowej pojedynczej precyzji; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1873">Returns the specified single-precision floating-point number; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1874"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1874"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1875">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1875">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1876">Konwertuje określoną reprezentację ciągu liczbą równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1876">Converts the specified string representation of a number to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1877">Liczbie zmiennoprzecinkowej pojedynczej precyzji, odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1877">A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1878">Przy użyciu <xref:System.Convert.ToSingle%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1878">Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-1879">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1879">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-1880">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Single.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1880">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1881">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1881">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1882">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych <xref:System.Single> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1882">The following example attempts to convert each element in an array of numeric strings to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#10)]
 [!code-vb[System.Convert.ToSingle#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1883"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1883"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1884"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1884"><paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UShort) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1885">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1885">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1886">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1886">Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1887">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1887">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1888">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych na <xref:System.Single> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1888">The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#11)]
 [!code-vb[System.Convert.ToSingle#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1889">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1889">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1890">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1890">Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1891">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1891">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1892">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku do <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1892">The following example converts each element in an array of unsigned integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#12)]
 [!code-vb[System.Convert.ToSingle#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As ULong) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1893">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1893">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1894">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1894">Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="233c1-1895">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1895">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1896">Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych na <xref:System.Single> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1896">The following example converts each element in an array of unsigned long integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#13)]
 [!code-vb[System.Convert.ToSingle#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1897">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1897">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1898">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1898">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1899">Konwertuje wartość określonego obiektu na numer zmiennoprzecinkowych pojedynczej precyzji, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1899">Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1900">Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1900">A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1901">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1901">The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-1902">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1902">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-1903">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-1903">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-1904">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1904">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1905">W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1905">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="233c1-1906">Implementacja <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metoda zwraca wartość wewnętrznego prywatnej <xref:System.Single> zmienna, która reprezentuje temperatury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1906">Its implementation of the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method returns the internal value of a private <xref:System.Single> variable that represents the temperature.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#14)]
 [!code-vb[System.Convert.ToSingle#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#14)]  
  
 <span data-ttu-id="233c1-1907">Poniższy przykład przedstawia sposób wywołania <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> z kolei wywołuje metody <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> implementacja `Temperature` klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-1907">The following example illustrates how a call to the <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method, in turn, calls the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> implementation of the `Temperature` class.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#15)]
 [!code-vb[System.Convert.ToSingle#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1908"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1908"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-1909"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1909"><paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1910"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1910"><paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1911">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-1911">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-1912">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1912">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-1913">Konwertuje reprezentacja ciągu określonej liczby równoważne pojedynczej precyzji liczbie zmiennoprzecinkowej, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-1913">Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-1914">Liczbie zmiennoprzecinkowej pojedynczej precyzji, odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1914">A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1915">Wartość zwracana jest wynik wywołania <xref:System.Single.Parse%2A?displayProperty=nameWithType> metoda `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1915">The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="233c1-1916">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1916">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-1917"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1917">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-1918">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-1918">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-1919">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Single.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-1919">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-1920">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1920">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1921">W poniższym przykładzie użyto <xref:System.IFormatProvider> obiekty reprezentujące kultur en US i fr-FR, podczas konwertowania elementów w tablicy ciągów liczbowych <xref:System.Single> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1921">The following example uses <xref:System.IFormatProvider> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle3.cs#16)]
 [!code-vb[System.Convert.ToSingle#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-1922"><paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-1922"><paramref name="value" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-1923"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1923"><paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-1924">Konwertuje określoną wartość do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1924">Converts the specified value to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1925">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1925">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1926">Konwertuje określoną wartość logiczną do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1926">Converts the specified Boolean value to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1927">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1927">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1928">Ta implementacja jest taki sam jak <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1928">This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-1929">Zwraca <xref:System.Boolean.TrueString?displayProperty=nameWithType> dla `true` wartości i <xref:System.Boolean.FalseString?displayProperty=nameWithType> dla `false` wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-1929">It returns <xref:System.Boolean.TrueString?displayProperty=nameWithType> for `true` values and <xref:System.Boolean.FalseString?displayProperty=nameWithType> for `false` values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1930">Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.String>za pomocą `ToString`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1930">The following example illustrates the conversion of a <xref:System.Boolean> to a <xref:System.String>, using `ToString`.</span></span> <span data-ttu-id="233c1-1931">Również pokazuje, czy ciąg zwrócony przez konwersję równa <xref:System.Boolean.TrueString?displayProperty=nameWithType> lub <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1931">It also illustrates that the string returned by the conversion equals either <xref:System.Boolean.TrueString?displayProperty=nameWithType> or <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Convert.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString_Bool1.cs#1)]
 [!code-vb[System.Convert.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString_Bool1.vb#1)]  
 [!code-fsharp[System.Convert.ToString#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Bool1.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1932">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1932">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1933">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1933">Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1934">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1934">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1935">Ta implementacja jest taki sam jak <xref:System.Byte.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1935">This implementation is identical to <xref:System.Byte.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1936">Poniższy przykład konwertuje każdej wartości w <xref:System.Byte> tablicy na ciąg.</span><span class="sxs-lookup"><span data-stu-id="233c1-1936">The following example converts each value in a <xref:System.Byte> array to a string.</span></span>  
  
 [!code-csharp[System.Convert.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString.Byte1.cs#3)]
 [!code-vb[System.Convert.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString.Byte1.vb#3)]
 [!code-fsharp[System.Convert.ToString#3](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Byte1.fs#3)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1937">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-1937">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1938">Konwertuje wartość określonego znaku Unicode do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1938">Converts the value of the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1939">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1939">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1940">Ta implementacja jest taki sam jak <xref:System.Char.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1940">This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1941">Poniższy przykład konwertuje <xref:System.Char> do <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1941">The following example converts a <xref:System.Char> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#14)]
 [!code-csharp[System.Convert Snippets#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#14)]
 [!code-vb[System.Convert Snippets#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1942">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1942">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1943">Konwertuje wartość określonego <see cref="T:System.DateTime" /> do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1943">Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1944">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1944">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1945">Ta implementacja jest taki sam jak <xref:System.DateTime.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1945">This implementation is identical to <xref:System.DateTime.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-1946">Używa konwencji formatowania bieżącej kultury i specyfikator formatu "G", aby przekonwertować <xref:System.DateTime> wartość do reprezentacji ciągu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1946">It uses the formatting conventions of the current culture and the "G" format specifier to convert a <xref:System.DateTime> value to its string representation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1947">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.DateTime> do wartości <xref:System.String> wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-1947">The following example converts each element in an array of a <xref:System.DateTime> value to a <xref:System.String> value.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#1)]
 [!code-vb[System.Convert.ToString2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1948">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1948">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1949">Konwertuje wartość określonej liczby dziesiętnej reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1949">Converts the value of the specified decimal number to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1950">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1950">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1951">Ta implementacja jest taki sam jak <xref:System.Decimal.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1951">This implementation is identical to <xref:System.Decimal.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1952">Poniższy przykład konwertuje <xref:System.Decimal> do <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1952">The following example converts a <xref:System.Decimal> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1953">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1953">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1954">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1954">Converts the value of the specified double-precision floating-point number to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1955">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1955">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1956">Ta implementacja jest taki sam jak <xref:System.Double.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1956">This implementation is identical to <xref:System.Double.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1957">Poniższy przykład konwertuje <xref:System.Double> do <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1957">The following example converts a <xref:System.Double> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#7)]
 [!code-csharp[System.Convert Snippets#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#7)]
 [!code-vb[System.Convert Snippets#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1958">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1958">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1959">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1959">Converts the value of the specified 16-bit signed integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1960">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1960">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1961">Ta implementacja jest taki sam jak <xref:System.Int16.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1961">This implementation is identical to <xref:System.Int16.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1962">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1962">The following example converts each element in an array of 16-bit integers to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#2)]
 [!code-vb[System.Convert.ToString2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1963">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1963">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1964">Konwertuje wartość określonego całkowita 32-bitowej do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1964">Converts the value of the specified 32-bit signed integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1965">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1965">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1966">Ta implementacja jest taki sam jak <xref:System.Int32.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1966">This implementation is identical to <xref:System.Int32.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-1967">Formatuje go `value` przy użyciu konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-1967">It formats `value` by using the formatting conventions of the current thread culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1968">Poniższy przykład porównuje <xref:System.Convert.ToString%28System.Int32%29> metody z <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-1968">The following example compares the <xref:System.Convert.ToString%28System.Int32%29> method with the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="233c1-1969">Definiuje niestandardowe <xref:System.Globalization.NumberFormatInfo> obiekt, który używa ciągu "minus" do reprezentowania znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-1969">It defines a custom <xref:System.Globalization.NumberFormatInfo> object that uses the sting "minus" to represent the negative sign.</span></span> <span data-ttu-id="233c1-1970">Każdy element tablicy całkowitą są konwertowane na jego odpowiednik reprezentację przy użyciu domyślnego formatowania (Konwencji formatowania bieżącej kultury) i formatu niestandardowego dostawcy.</span><span class="sxs-lookup"><span data-stu-id="233c1-1970">It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring7.cs#27)]
 [!code-vb[System.Convert.ToString2#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring7.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1971">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1971">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1972">Konwertuje wartość określonego całkowita 64-bitowych reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1972">Converts the value of the specified 64-bit signed integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1973">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1973">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1974">Ta implementacja jest taki sam jak <xref:System.Int64.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1974">This implementation is identical to <xref:System.Int64.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1975">Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1975">The following example converts each element in a long integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring6.cs#28)]
 [!code-vb[System.Convert.ToString2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring6.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1976">Obiekt, który dostarcza wartości do konwersji, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1976">An object that supplies the value to convert, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-1977">Konwertuje wartość określonego obiektu do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1977">Converts the value of the specified object to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1978">Reprezentacja ciągu <paramref name="value" />, lub <see cref="F:System.String.Empty" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1978">The string representation of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1979">Aby przekonwertować `value` do reprezentacji ciągu próba wywołania metody <xref:System.IConvertible.ToString%2A?displayProperty=nameWithType> implementacja `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1979">To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="233c1-1980">Jeśli `value` nie implementuje <xref:System.IConvertible> interfejsu, metoda próba wywołania <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementacja `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1980">If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="233c1-1981">Jeśli wartość nie implementuje <xref:System.IFormattable> interfejs wywołania metody `ToString` metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-1981">If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1982">Poniższy przykład konwertuje każdego elementu w tablicy obiektów do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1982">The following example converts each element in an object array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#3)]
 [!code-vb[System.Convert.ToString2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1983">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-1983">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1984">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1984">Converts the value of the specified 8-bit signed integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1985">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1985">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1986">Ta implementacja jest taki sam jak <xref:System.SByte.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1986">This implementation is identical to <xref:System.SByte.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1987">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1987">The following example converts each element in a signed byte array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#4)]
 [!code-vb[System.Convert.ToString2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1988">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1988">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1989">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1989">Converts the value of the specified single-precision floating-point number to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-1990">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-1990">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-1991">Ta implementacja jest taki sam jak <xref:System.Single.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-1991">This implementation is identical to <xref:System.Single.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-1992">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Single> wartości do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1992">The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#5)]
 [!code-vb[System.Convert.ToString2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1993">Ciąg do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-1993">The string to return.</span></span></param>
        <summary><span data-ttu-id="233c1-1994">Zwraca wystąpienie określonego ciągu; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-1994">Returns the specified string instance; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-1995"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-1995"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-1996">Poniższy przykład przekazuje ciąg do <xref:System.Convert.ToString%28System.String%29> — metoda i wywołania <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> metody, aby upewnić się, że ta metoda zwraca ciąg oryginalny.</span><span class="sxs-lookup"><span data-stu-id="233c1-1996">The following example passes a string to the <xref:System.Convert.ToString%28System.String%29> method and calls the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to confirm that the method returns the original string.</span></span> <span data-ttu-id="233c1-1997">Przykład również wywołuje <xref:System.String.IsInterned%2A?displayProperty=nameWithType> metody, aby upewnić się, że dwa ciągi nie są identyczne, ponieważ jest interned oryginalnego ciągu.</span><span class="sxs-lookup"><span data-stu-id="233c1-1997">The example also calls the <xref:System.String.IsInterned%2A?displayProperty=nameWithType> method to ensure that the two strings are not identical because the original string is interned.</span></span>  
  
 [!code-csharp[System.Convert.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/tostring_string1.cs#2)]
 [!code-vb[System.Convert.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/tostring_string1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-1998">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-1998">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-1999">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-1999">Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-2000">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2000">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2001">Ta implementacja jest taki sam jak <xref:System.UInt16.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2001">This implementation is identical to <xref:System.UInt16.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2002">Poniższy przykład konwertuje reprezentacji ciągu równoważne każdego elementu w tablicy wartości bez znaku 16-bitową liczbą całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-2002">The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#6)]
 [!code-vb[System.Convert.ToString2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2003">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2003">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2004">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2004">Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-2005">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2005">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2006">Ta implementacja jest taki sam jak <xref:System.UInt32.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2006">This implementation is identical to <xref:System.UInt32.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2007">Poniższy przykład konwertuje reprezentacji ciągu równoważne każdego elementu w tablicy liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2007">The following example converts each element in an unsigned integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#7)]
 [!code-vb[System.Convert.ToString2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2008">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2008">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2009">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2009">Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-2010">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2010">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2011">Ta implementacja jest taki sam jak <xref:System.UInt64.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2011">This implementation is identical to <xref:System.UInt64.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2012">Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2012">The following example converts each element in an unsigned long integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#8)]
 [!code-vb[System.Convert.ToString2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2013">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2013">The Boolean value to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2014">Wystąpienie obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2014">An instance of an object.</span></span> <span data-ttu-id="233c1-2015">Ten parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2015">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="233c1-2016">Konwertuje określoną wartość logiczną do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2016">Converts the specified Boolean value to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-2017">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2017">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2018">Ta implementacja jest taki sam jak <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2018">This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-2019">Zwraca <xref:System.Boolean.TrueString?displayProperty=nameWithType> dla `true` wartości i <xref:System.Boolean.FalseString?displayProperty=nameWithType> dla `false` wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2019">It returns <xref:System.Boolean.TrueString?displayProperty=nameWithType> for `true` values and <xref:System.Boolean.FalseString?displayProperty=nameWithType> for `false` values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2020">Poniższy przykład konwertuje <xref:System.Boolean> do wartości <xref:System.String> z `ToString` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2020">The following example converts a <xref:System.Boolean> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="233c1-2021">W przykładzie pokazano, że <xref:System.IFormatProvider> nie odwołuje się obiekt.</span><span class="sxs-lookup"><span data-stu-id="233c1-2021">The example shows that the <xref:System.IFormatProvider> object is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2022">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2022">The 8-bit unsigned integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2023">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2023">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2024">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2024">Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2025">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2025">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2026">Ta implementacja jest taki sam jak <xref:System.Byte.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2026">This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2027">Poniższy przykład konwertuje reprezentacji równoważne ciągu przy użyciu konwencji formatowania kultur en US i fr-FR każdego elementu w tablicy bajtu bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2027">The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures.</span></span> <span data-ttu-id="233c1-2028">Ponieważ specyfikator "G" domyślnie wyświetla tylko cyfr dziesiętnych w reprezentacji ciągu wartość bajtu `provider` parametru nie wpływa na formatowanie zwracany ciąg.</span><span class="sxs-lookup"><span data-stu-id="233c1-2028">Because the "G" specifier by default outputs only decimal digits in a byte value's string representation, the `provider` parameter does not affect the formatting of the returned string.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#16)]
 [!code-vb[System.Convert.ToString2#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, int toBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2029">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2029">The 8-bit unsigned integer to convert.</span></span></param>
        <param name="toBase"><span data-ttu-id="233c1-2030">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2030">The base of the return value, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2031">Konwertuje wartość całkowitą bez znaku 8-bitową reprezentacji ciągu odpowiednik w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2031">Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</span></span></summary>
        <returns><span data-ttu-id="233c1-2032">Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2032">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2033">Jeśli `toBase` nie jest równy 10, ciąg, który jest zwracany przez <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType> reprezentuje metodę `value` przez jego tylko wielkością.</span><span class="sxs-lookup"><span data-stu-id="233c1-2033">If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType> method represents `value` by its magnitude only.</span></span> <span data-ttu-id="233c1-2034">Jeśli metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje tylko wielkością reprezentacji liczbowej powinna być wywoływana do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2034">If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="233c1-2035">Tych metod uwzględnić <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> lub <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2035">Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2036">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2036">The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#9)]
 [!code-vb[System.Convert.ToString2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#9)]
 [!code-fsharp[System.Convert.ToString2#9](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2037"><paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2037"><paramref name="toBase" /> is not 2, 8, 10, or 16.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2038">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-2038">The Unicode character to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2039">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2039">An object that supplies culture-specific formatting information.</span></span> <span data-ttu-id="233c1-2040">Ten parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2040">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="233c1-2041">Konwertuje wartość określonego znaku Unicode do reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2041">Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2042">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2042">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2043">Ta implementacja jest taki sam jak <xref:System.Char.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2043">This implementation is identical to <xref:System.Char.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="233c1-2044">`provider` Parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2044">The `provider` parameter is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2045">Poniższy przykład konwertuje <xref:System.Char> do wartości <xref:System.String> z `ToString` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2045">The following example converts a <xref:System.Char> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="233c1-2046">W przykładzie pokazano, że <xref:System.IFormatProvider> nie odwołuje się obiekt.</span><span class="sxs-lookup"><span data-stu-id="233c1-2046">The example shows that the <xref:System.IFormatProvider> object is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2047">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2047">The date and time value to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2048">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2048">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2049">Konwertuje wartość określonego <see cref="T:System.DateTime" /> do reprezentacji ciągu równoważne przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2049">Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2050">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2050">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2051">Ta implementacja jest taki sam jak <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2051">This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2052">Poniższy przykład konwertuje <xref:System.DateTime> wartość do reprezentacji ciągu odpowiednik w ośmiu różnych kultur.</span><span class="sxs-lookup"><span data-stu-id="233c1-2052">The following example converts a <xref:System.DateTime> value to its equivalent string representation in eight different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#13)]
 [!code-vb[System.Convert.ToString2#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2053">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2053">The decimal number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2054">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2054">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2055">Konwertuje wartość określonej liczby dziesiętnej reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2055">Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2056">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2056">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2057">Ta implementacja jest taki sam jak <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2057">This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2058">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.</span><span class="sxs-lookup"><span data-stu-id="233c1-2058">The following example converts each element in an array of <xref:System.Decimal> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#14)]
 [!code-vb[System.Convert.ToString2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2059">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2059">The double-precision floating-point number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2060">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2060">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2061">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2061">Converts the value of the specified double-precision floating-point number to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="233c1-2062">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2062">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2063">Ta implementacja jest taki sam jak <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="233c1-2063">This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2064">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.</span><span class="sxs-lookup"><span data-stu-id="233c1-2064">The following example converts each element in an array of <xref:System.Double> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#15)]
 [!code-vb[System.Convert.ToString2#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2065">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2065">The 16-bit signed integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2066">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2066">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2067">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2067">Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2068">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2068">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2069">Ta implementacja jest taki sam jak <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2069">This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2070">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2070">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2071">Następnie wywołuje <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy 16-bitowych liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2071">It then calls the <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> method to convert each element in an array of 16-bit integers to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2072">Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2072">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#19)]
 [!code-vb[System.Convert.ToString2#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, int toBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2073">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2073">The 16-bit signed integer to convert.</span></span></param>
        <param name="toBase"><span data-ttu-id="233c1-2074">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2074">The base of the return value, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2075">Konwertuje wartość 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu odpowiednik w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2075">Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</span></span></summary>
        <returns><span data-ttu-id="233c1-2076">Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2076">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2077">Jeśli `value` jest dodatnia i `toBase` 2, 8 lub 16, zwracany ciąg używa reprezentacja logowania i wielkości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2077">If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="233c1-2078">Jeśli `value` jest ujemny i `toBase` 2, 8 lub 16, zwracany ciąg używa dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2078">If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation.</span></span> <span data-ttu-id="233c1-2079">Oznacza to, że bit znaczących bajtu znaczących (bit 15) jest interpretowana jako bitem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2079">This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit.</span></span> <span data-ttu-id="233c1-2080">Jeśli <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2080">If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="233c1-2081">Tych metod uwzględnić <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2081">Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2082">Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem oświadczeń równoważne ciąg binarny, ósemkowe, decimal i szesnastkowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-2082">The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#10)]
 [!code-vb[System.Convert.ToString2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#10)]
 [!code-fsharp[System.Convert.ToString2#10](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2083"><paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2083"><paramref name="toBase" /> is not 2, 8, 10, or 16.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2084">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2084">The 32-bit signed integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2085">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2085">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2086">Konwertuje wartość określonego całkowita 32-bitowej do reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2086">Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2087">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2087">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2088">Ta implementacja jest taki sam jak <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2088">This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2089">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2089">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2090">Następnie wywołuje <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2090">It then calls the <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> method to convert each element in an array of integers to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2091">Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2091">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#20)]
 [!code-vb[System.Convert.ToString2#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, int toBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2092">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2092">The 32-bit signed integer to convert.</span></span></param>
        <param name="toBase"><span data-ttu-id="233c1-2093">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2093">The base of the return value, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2094">Konwertuje wartość całkowita 32-bitowej do reprezentacji ciągu odpowiednik w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2094">Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</span></span></summary>
        <returns><span data-ttu-id="233c1-2095">Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2095">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2096">Jeśli `value` jest dodatnia i `toBase` 2, 8 lub 16, zwracany ciąg używa reprezentacja logowania i wielkości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2096">If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="233c1-2097">Jeśli `value` jest ujemny i `toBase` 2, 8 lub 16, zwracany ciąg używa dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2097">If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation.</span></span> <span data-ttu-id="233c1-2098">Oznacza to, że bit znaczących najwyższej kolejności bajtów (bit 31) jest interpretowana jako bitem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2098">This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit.</span></span> <span data-ttu-id="233c1-2099">Jeśli <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2099">If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="233c1-2100">Tych metod uwzględnić <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2100">Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2101">Poniższy przykład konwertuje każdego elementu w tablicy liczby całkowitej oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2101">The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#11)]
 [!code-vb[System.Convert.ToString2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#11)]
 [!code-fsharp[System.Convert.ToString2#11](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2102"><paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2102"><paramref name="toBase" /> is not 2, 8, 10, or 16.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2103">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2103">The 64-bit signed integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2104">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2104">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2105">Konwertuje wartość określonego całkowita 64-bitowych reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2105">Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2106">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2106">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2107">Ta implementacja jest taki sam jak <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2107">This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2108">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2108">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2109">Następnie wywołuje <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy długich liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2109">It then calls the <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> method to convert each element in a long integer array to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2110">Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2110">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#21)]
 [!code-vb[System.Convert.ToString2#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, int toBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2111">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2111">The 64-bit signed integer to convert.</span></span></param>
        <param name="toBase"><span data-ttu-id="233c1-2112">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2112">The base of the return value, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2113">Konwertuje wartość całkowita 64-bitowych reprezentacji ciągu odpowiednik w określonej podstawy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2113">Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</span></span></summary>
        <returns><span data-ttu-id="233c1-2114">Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2114">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2115">Jeśli `value` jest dodatnia i `toBase` nie jest 10, zwracany ciąg używa reprezentacja logowania i wielkości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2115">If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="233c1-2116">Jeśli `value` jest ujemny i `toBase` nie jest 10, zwracany ciąg używa dwóch jego reprezentacja dopełnienia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2116">If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation.</span></span> <span data-ttu-id="233c1-2117">Oznacza to, że bit znaczących najwyższej kolejności bajtów (bit 63) jest interpretowana jako bitem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2117">This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit.</span></span> <span data-ttu-id="233c1-2118">Jeśli <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2118">If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="233c1-2119">Tych metod uwzględnić <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2119">Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2120">Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2120">The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#12)]
 [!code-vb[System.Convert.ToString2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#12)]  
 [!code-fsharp[System.Convert.ToString2#12](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#12)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2121"><paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2121"><paramref name="toBase" /> is not 2, 8, 10, or 16.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2122">Obiekt, który dostarcza wartości do konwersji, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2122">An object that supplies the value to convert, or <see langword="null" />.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2123">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2123">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2124">Konwertuje wartość określonego obiektu na jego odpowiednik reprezentację przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2124">Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2125">Reprezentacja ciągu <paramref name="value" />, lub <see cref="F:System.String.Empty" /> Jeśli <paramref name="value" /> jest obiektem, którego wartość jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2125">The string representation of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is an object whose value is <see langword="null" />.</span></span> <span data-ttu-id="233c1-2126">Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2126">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2127">Jeśli `value` implementuje parametru <xref:System.IConvertible> interfejs wywołania metody <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> implementacja `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2127">If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="233c1-2128">W przeciwnym razie, jeśli `value` implementuje parametru <xref:System.IFormattable> interfejs wywołania metody jej <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> implementacji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2128">Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="233c1-2129">Jeśli `value` implementuje ani interfejs wywołania metody `value` parametru `ToString()` metody i `provider` parametru jest ignorowana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2129">If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.</span></span>  
  
 <span data-ttu-id="233c1-2130">`provider` Parametr jest używany, jeśli `value` implementuje parametru <xref:System.IConvertible> lub <xref:System.IFormattable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2130">The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="233c1-2131">Najczęściej używane `provider` jest określenie informacje specyficzne dla kultury używane podczas konwersji parametru `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2131">The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`.</span></span> <span data-ttu-id="233c1-2132">Na przykład jeśli `value` parametr jest liczbą dziesiętną ujemna `provider` parametrów można podać informacje specyficzne dla kultury o notacji znakiem minus i separator dziesiętny.</span><span class="sxs-lookup"><span data-stu-id="233c1-2132">For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.</span></span> <span data-ttu-id="233c1-2133">Drugi przykład w następnej sekcji przedstawiono dostawcy formatu, który dostarcza informacje dotyczące formatowania zależne od kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2133">The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2134">W poniższym przykładzie zdefiniowano `Temperature` klasy, która zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType> metody, ale nie implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2134">The following example defines a `Temperature` class that overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method but does not implement the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="233c1-2135">Pokazano w przykładzie jak wywołań <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> z kolei wywołanie metody, `Temperature.ToString` metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2135">The example illustrates how calls to the <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method, in turn, call the `Temperature.ToString` method.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring5.cs#26)]
 [!code-vb[System.Convert.ToString2#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring5.vb#26)]  
  
 <span data-ttu-id="233c1-2136">W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IFormattable> interfejsu, ale nie implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2136">The following example defines a `Temperature` class that implements the <xref:System.IFormattable> interface but does not implement the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="233c1-2137">Jego <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> reprezentuje implementacji `Temperature` wartość c, f lub kelvin —, w zależności od ciągu formatu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2137">Its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation represents the `Temperature` value in Celsius, Fahrenheit, or Kelvin, depending on the format  string.</span></span> <span data-ttu-id="233c1-2138">Definiuje również przykładzie `TemperatureProvider` klasa implementująca <xref:System.IFormatProvider> i zawiera ciąg formatu losowo generowany, który jest używany przez <xref:System.IFormattable> implementacja `Temperature` klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2138">The example also defines a `TemperatureProvider` class that implements <xref:System.IFormatProvider> and provides a randomly generated format string that is used by the <xref:System.IFormattable> implementation of the `Temperature` class.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring_obj30.cs#30)]
 [!code-vb[System.Convert.ToString2#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring_obj30.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2139">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2139">The 8-bit signed integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2140">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2140">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2141">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2141">Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2142">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2142">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2143">Ta implementacja jest taki sam jak <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2143">This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2144">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2144">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2145">Następnie wywołuje <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu w tablicy bajtowej podpisem do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2145">It then calls the <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to convert each element in signed byte array to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2146">Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2146">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#17)]
 [!code-vb[System.Convert.ToString2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2147">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2147">The single-precision floating-point number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2148">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2148">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2149">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2149">Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2150">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2150">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2151">Ta implementacja jest taki sam jak <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2151">This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2152">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Single> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.</span><span class="sxs-lookup"><span data-stu-id="233c1-2152">The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#18)]
 [!code-vb[System.Convert.ToString2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2153">Ciąg do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2153">The string to return.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2154">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2154">An object that supplies culture-specific formatting information.</span></span> <span data-ttu-id="233c1-2155">Ten parametr jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2155">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="233c1-2156">Zwraca wystąpienie określonego ciągu; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-2156">Returns the specified string instance; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2157"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-2157"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2158">Następujące przykładowe wywołania `ToString` metody z <xref:System.String> parametru.</span><span class="sxs-lookup"><span data-stu-id="233c1-2158">The following example calls the `ToString` method with a <xref:System.String> parameter.</span></span> <span data-ttu-id="233c1-2159">Metoda zwraca niemodyfikowana <xref:System.String> bez odwołania do <xref:System.IFormatProvider> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2159">The method returns the unmodified <xref:System.String> without referencing the <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2160">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2160">The 16-bit unsigned integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2161">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2161">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2162">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2162">Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2163">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2163">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2164">Ta implementacja jest taki sam jak <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2164">This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2165">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2165">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2166">Następnie wywołuje <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> metodę, aby przekonwertować reprezentacji ciągu równoważne wartości 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2166">It then calls the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method to convert a 16-bit unsigned integer value to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2167">Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2167">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2168">Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2168">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#22)]
 [!code-vb[System.Convert.ToString2#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2169">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2169">The 32-bit unsigned integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2170">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2170">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2171">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2171">Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2172">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2172">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2173">Ta implementacja jest taki sam jak <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2173">This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2174">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2174">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2175">Następnie wywołuje <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> metodę, aby przekonwertować wartość całkowitą bez znaku do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2175">It then calls the <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> method to convert an unsigned integer value to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2176">Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2176">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2177">Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2177">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#23)]
 [!code-vb[System.Convert.ToString2#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2178">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2178">The 64-bit unsigned integer to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2179">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2179">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2180">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2180">Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2181">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2181">The string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2182">Ta implementacja jest taki sam jak <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="233c1-2182">This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2183">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!".</span><span class="sxs-lookup"><span data-stu-id="233c1-2183">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="233c1-2184">Następnie wywołuje <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> metody można przekonwertować wartości bez znaku długich liczb całkowitych do reprezentacji ciągu równoważne.</span><span class="sxs-lookup"><span data-stu-id="233c1-2184">It then calls the <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> method to convert an unsigned long integer value to its equivalent string representation.</span></span> <span data-ttu-id="233c1-2185">Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2185">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2186">Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2186">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#24)]
 [!code-vb[System.Convert.ToString2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-2187">Konwertuje określoną wartość do 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2187">Converts a specified value to a 16-bit unsigned integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Boolean) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2188">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2188">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2189">Konwertuje określoną wartość logiczną na równoważne 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2189">Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2190">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-2190">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2191">Poniższy przykład konwertuje wartości logiczne `true` i `false` do liczb całkowitych bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2191">The following example converts the Boolean values `true` and `false` to unsigned 16-bit integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#1)]
 [!code-vb[System.Convert.ToUInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Byte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2192">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2192">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2193">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2193">Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2194">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2194">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2195">Poniższy przykład konwertuje każdy element tablicy typu byte na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2195">The following example converts each element in a byte array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#2)]
 [!code-vb[System.Convert.ToUInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Char) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2196">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-2196">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2197">Konwertuje wartość określonego znaku Unicode na równoważne 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2197">Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2198">16-bitową liczbę całkowitą bez znaku odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2198">The 16-bit unsigned integer equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2199">Poniższy przykład konwertuje każdy element tablicy znaków na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2199">The following example converts each element in a character array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#3)]
 [!code-vb[System.Convert.ToUInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As DateTime) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2200">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2200">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2201">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2201">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-2202">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2202">This conversion is not supported.</span></span> <span data-ttu-id="233c1-2203">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-2203">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-2204">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2204">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Decimal) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2205">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2205">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2206">Konwertuje wartość określonej liczby dziesiętnej na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2206">Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2207"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2207"><paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2208">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2208">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2209">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2209">The following example converts each element in an array of <xref:System.Decimal> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#4)]
 [!code-vb[System.Convert.ToUInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2210"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2210"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Double) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2211">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2211">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2212">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2212">Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2213"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2213"><paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2214">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2214">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2215">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2215">The following example converts each element in an array of <xref:System.Double> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#5)]
 [!code-vb[System.Convert.ToUInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2216"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2216"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Short) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2217">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2217">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2218">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2218">Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2219">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2219">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2220">Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy 16-bitową liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-2220">The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#6)]
 [!code-vb[System.Convert.ToUInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2221"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2221"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2222">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2222">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2223">Konwertuje wartość określonego całkowita 32-bitowych na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2223">Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2224">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2224">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2225">Poniższy przykład konwertuje każdego elementu w tablicy całkowitą liczbą całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2225">The following example converts each element in an integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#7)]
 [!code-vb[System.Convert.ToUInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2226"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2226"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Long) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2227">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2227">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2228">Konwertuje wartość określonego całkowita 64-bitowych na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2228">Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2229">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2229">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2230">Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2230">The following example converts each element in a long integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#8)]
 [!code-vb[System.Convert.ToUInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2231"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2231"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2232">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2232">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-2233">Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2233">Converts the value of the specified object to a 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2234">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2234">A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2235">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2235">The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2236">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2236">The following example attempts to convert each element in an object array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#9)]
 [!code-vb[System.Convert.ToUInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2237"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2237"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2238"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2238"><paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2239">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2239">-or-</span></span>  
  
 <span data-ttu-id="233c1-2240">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2240">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2241"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2241"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As SByte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2242">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2242">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2243">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2243">Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2244">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2244">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2245">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2245">The following example converts each element in a signed byte array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#10)]
 [!code-vb[System.Convert.ToUInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2246"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2246"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Single) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2247">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2247">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2248">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2248">Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2249"><paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2249"><paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2250">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2250">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2251">Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.String> wartości na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2251">The following example converts each element in an array of <xref:System.String> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#11)]
 [!code-vb[System.Convert.ToUInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2252"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2252"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2253">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2253">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2254">Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2254">Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2255">16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2255">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2256">Przy użyciu <xref:System.Convert.ToUInt16%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2256">Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-2257">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2257">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-2258">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2258">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2259">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2259">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2260">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych 16-bitową liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2260">The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#12)]
 [!code-vb[System.Convert.ToUInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2261"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2261"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2262"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2262"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2263">16-bitowych całkowitą bez znaku do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2263">The 16-bit unsigned integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-2264">Zwraca określony 16-bitową liczbę całkowitą bez znaku; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-2264">Returns the specified 16-bit unsigned integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2265"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-2265"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2266">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2266">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2267">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2267">Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2268">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2268">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2269">Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2269">The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#13)]
 [!code-vb[System.Convert.ToUInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2270"><paramref name="value" /> jest większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2270"><paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As ULong) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2271">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2271">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2272">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2272">Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2273">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2273">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2274">Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy długich liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2274">The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#14)]
 [!code-vb[System.Convert.ToUInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2275"><paramref name="value" /> jest większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2275"><paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2276">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2276">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2277">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2277">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2278">Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2278">Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2279">16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2279">A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2280">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2280">The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-2281">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2281">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-2282">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-2282">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-2283">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2283">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2284">W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu obie wartości 16-bitowych podpisane i 16-bitowych unsigned.</span><span class="sxs-lookup"><span data-stu-id="233c1-2284">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values.</span></span> <span data-ttu-id="233c1-2285">Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2285">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#16)]
 [!code-vb[System.Convert.ToUInt16#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#16)]  
  
 <span data-ttu-id="233c1-2286">W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> implementacja `HexString` klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2286">The following example shows that a call to the <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#17)]
 [!code-vb[System.Convert.ToUInt16#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2287"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2287"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2288"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2288"><paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2289">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2289">-or-</span></span>  
  
 <span data-ttu-id="233c1-2290">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2290">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2291"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2291"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2292">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2292">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2293">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2293">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2294">Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2294">Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2295">16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2295">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2296">Wartość zwracana jest wynik wywołania <xref:System.UInt16.Parse%2A?displayProperty=nameWithType> na `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2296">The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="233c1-2297">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2297">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2298"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2298">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-2299">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2299">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-2300">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2300">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2301">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2301">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2302">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-2302">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="233c1-2303">Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="233c1-2303">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_4.cs#18)]
 [!code-vb[System.Convert.ToUInt16#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2304"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2304"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2305"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2305"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, fromBase As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2306">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2306">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-2307">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2307">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2308">Konwertuje numer w określonej podstawy reprezentację ciągu na liczbę całkowitą bez znaku równoważne 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2308">Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2309">16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2309">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2310">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-2310">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-2311">Ponieważ <xref:System.UInt16> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2311">Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="233c1-2312">Innymi słowy wszystkie 16 bitów są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny.</span><span class="sxs-lookup"><span data-stu-id="233c1-2312">In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="233c1-2313">W związku z tym jest możliwość pisania kodu, w którym całkowita wartość, która jest poza zakresem <xref:System.UInt16> — typ danych jest konwertowana na <xref:System.UInt16> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2313">As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-2314">Poniższy przykład konwertuje <xref:System.Int16.MinValue?displayProperty=nameWithType> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2314">The following example converts <xref:System.Int16.MinValue?displayProperty=nameWithType> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-2315">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000 skonwertować 32768."</span><span class="sxs-lookup"><span data-stu-id="233c1-2315">Instead of throwing an exception, the method displays the message, "0x8000 converts to 32768."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]
 [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  
  
 <span data-ttu-id="233c1-2316">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2316">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-2317">Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt16> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2317">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value.</span></span> <span data-ttu-id="233c1-2318">W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2318">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="233c1-2319">Gdy przykładzie konwertuje wartość na <xref:System.UInt16> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2319">When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="233c1-2320">Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="233c1-2320">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]
 [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2321">Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i przekonwertować go na liczbę całkowitą bez znaku 16-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2321">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_2.cs#15)]
 [!code-vb[System.Convert.ToUInt16#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2322"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2322"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-2323">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2323">-or-</span></span>  
  
 <span data-ttu-id="233c1-2324"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2324"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-2325"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2325"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2326"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2326"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-2327">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-2327">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2328"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2328"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-2329">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2329">-or-</span></span>  
  
 <span data-ttu-id="233c1-2330"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2330"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-2331">Konwertuje określoną wartość na 32-bitowej liczby całkowitej bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2331">Converts a specified value to a 32-bit unsigned integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Boolean) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2332">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2332">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2333">Konwertuje określoną wartość logiczną na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2333">Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2334">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-2334">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2335">Poniższy przykład konwertuje wartości logiczne `true` i `false` do liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2335">The following example converts the Boolean values `true` and `false` to unsigned integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#1)]
 [!code-vb[System.Convert.ToUInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Byte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2336">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2336">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2337">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2337">Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2338">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2338">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2339">Poniższy przykład konwertuje każdy element tablicy typu byte na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2339">The following example converts each element in a byte array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#2)]
 [!code-vb[System.Convert.ToUInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Char) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2340">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-2340">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2341">Konwertuje wartość określonego znaku Unicode na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2341">Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2342">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2342">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2343">Poniższy przykład konwertuje każdy element tablicy znaków na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2343">The following example converts each element in a character array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#3)]
 [!code-vb[System.Convert.ToUInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As DateTime) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2344">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2344">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2345">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2345">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-2346">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2346">This conversion is not supported.</span></span> <span data-ttu-id="233c1-2347">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-2347">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-2348">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2348">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Decimal) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2349">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2349">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2350">Konwertuje wartość określonej liczby dziesiętnej równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2350">Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2351"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2351"><paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2352">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2352">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2353">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2353">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#4)]
 [!code-vb[System.Convert.ToUInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2354"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2354"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Double) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2355">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2355">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2356">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2356">Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2357"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2357"><paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2358">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2358">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2359">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2359">The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#5)]
 [!code-vb[System.Convert.ToUInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2360"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2360"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Short) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2361">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2361">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2362">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2362">Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2363">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2363">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2364">Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku każdego elementu w tablicy 16-bitową liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="233c1-2364">The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#6)]
 [!code-vb[System.Convert.ToUInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2365"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2365"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2366">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2366">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2367">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2367">Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2368">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2368">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2369">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy całkowitą liczbą całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2369">The following example attempts to convert each element in an integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#7)]
 [!code-vb[System.Convert.ToUInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2370"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2370"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Long) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2371">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2371">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2372">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2372">Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2373">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2373">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2374">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2374">The following example attempts to convert each element in a long integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#8)]
 [!code-vb[System.Convert.ToUInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2375"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2375"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2376">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2376">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-2377">Konwertuje wartość określonego obiektu na 32-bitowej liczby całkowitej bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2377">Converts the value of the specified object to a 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2378">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2378">A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2379">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2379">The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2380">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2380">The following example attempts to convert each element in an object array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#9)]
 [!code-vb[System.Convert.ToUInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2381"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2381"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2382"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2382"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2383">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2383">-or-</span></span>  
  
 <span data-ttu-id="233c1-2384">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2384">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2385"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2385"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As SByte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2386">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2386">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2387">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2387">Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2388">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2388">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2389">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej podpisem na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2389">The following example attempts to convert each element in a signed byte array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#10)]
 [!code-vb[System.Convert.ToUInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2390"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2390"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Single) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2391">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2391">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2392">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2392">Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2393"><paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2393"><paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2394">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2394">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2395">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2395">The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#11)]
 [!code-vb[System.Convert.ToUInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2396"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2396"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2397">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2397">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2398">Konwertuje określoną reprezentację ciągu liczbą równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2398">Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2399">32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2399">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2400">Przy użyciu <xref:System.Convert.ToUInt32%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2400">Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-2401">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2401">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-2402">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2402">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2403">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2403">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2404">W poniższym przykładzie interpretuje elementów w tablicy ciągów jako ciągi numeryczne i próbuje przekonwertować je na liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2404">The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#12)]
 [!code-vb[System.Convert.ToUInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2405"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2405"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2406"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2406"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UShort) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2407">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2407">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2408">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2408">Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2409">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2409">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2410">Poniższy przykład konwertuje każdego elementu w tablicy liczbę całkowitą bez znaku 16-bitową wartość będącą liczbą całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2410">The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#13)]
 [!code-vb[System.Convert.ToUInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2411">32-bitowa liczba całkowita bez znaku do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2411">The 32-bit unsigned integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-2412">Zwraca określony 32-bitowa liczba całkowita bez znaku; nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-2412">Returns the specified 32-bit unsigned integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2413"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-2413"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As ULong) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2414">64-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2414">The 64-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2415">Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2415">Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2416">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2416">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2417">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy niepodpisane długich liczb całkowitych na wartość całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2417">The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#14)]
 [!code-vb[System.Convert.ToUInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2418"><paramref name="value" /> jest większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2418"><paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2419">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2419">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2420">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2420">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2421">Konwertuje wartość określonego obiektu na 32-bitowa liczba całkowita bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2421">Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2422">32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2422">A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2423">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2423">The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-2424">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2424">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-2425">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-2425">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-2426">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2426">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2427">W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu obu wartości 32-bitowe podpisane i 32-bitowych unsigned.</span><span class="sxs-lookup"><span data-stu-id="233c1-2427">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values.</span></span> <span data-ttu-id="233c1-2428">Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2428">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#17)]
 [!code-vb[System.Convert.ToUInt32#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#17)]  
  
 <span data-ttu-id="233c1-2429">W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> implementacja `HexString` klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2429">The following example shows that a call to the <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#18)]
 [!code-vb[System.Convert.ToUInt32#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2430"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2430"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2431"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2431"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2432">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2432">-or-</span></span>  
  
 <span data-ttu-id="233c1-2433">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2433">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2434"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2434"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2435">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2435">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2436">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2436">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2437">Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2437">Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2438">32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2438">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2439">Wartość zwracana jest wynik wywołania <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> na `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2439">The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="233c1-2440">`provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2440">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2441"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2441">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-2442">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2442">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-2443">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2443">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2444">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2444">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2445">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-2445">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="233c1-2446">Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="233c1-2446">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_2.cs#15)]
 [!code-vb[System.Convert.ToUInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2447"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2447"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2448"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2448"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, fromBase As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2449">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2449">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-2450">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2450">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2451">Konwertuje reprezentację liczby w określonej podstawy równoważne 32-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2451">Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2452">32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2452">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2453">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-2453">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-2454">Ponieważ <xref:System.UInt32> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2454">Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="233c1-2455">Innymi słowy wszystkie 32-bitowy są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny.</span><span class="sxs-lookup"><span data-stu-id="233c1-2455">In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="233c1-2456">W związku z tym jest możliwość pisania kodu, w którym całkowita wartość, która jest poza zakresem <xref:System.UInt32> — typ danych jest konwertowana na <xref:System.UInt32> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2456">As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-2457">Poniższy przykład konwertuje <xref:System.Int32.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2457">The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-2458">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80000000 skonwertować 2147483648."</span><span class="sxs-lookup"><span data-stu-id="233c1-2458">Instead of throwing an exception, the method displays the message, "0x80000000 converts to 2147483648."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]
 [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  
  
 <span data-ttu-id="233c1-2459">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2459">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-2460">Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt32> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2460">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value.</span></span> <span data-ttu-id="233c1-2461">W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2461">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="233c1-2462">Gdy przykładzie konwertuje wartość na <xref:System.UInt32> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2462">When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="233c1-2463">Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="233c1-2463">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]
 [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2464">Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i można go przekonwertować na liczbę całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2464">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_3.cs#16)]
 [!code-vb[System.Convert.ToUInt32#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2465"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2465"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-2466">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2466">-or-</span></span>  
  
 <span data-ttu-id="233c1-2467"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2467"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-2468"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2468"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2469"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2469"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-2470">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-2470">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2471"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2471"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-2472">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2472">-or-</span></span>  
  
 <span data-ttu-id="233c1-2473"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2473"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="233c1-2474">Konwertuje określoną wartość na 64-bitowej liczby całkowitej bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2474">Converts a specified value to a 64-bit unsigned integer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Boolean) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2475">Wartość logiczna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2475">The Boolean value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2476">Konwertuje określoną wartość logiczną na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2476">Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2477">Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</span><span class="sxs-lookup"><span data-stu-id="233c1-2477">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2478">Poniższy przykład konwertuje wartość logiczna `true` i `false` wartości długich liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2478">The following example converts Boolean `true` and `false` values to unsigned long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#1)]
 [!code-vb[System.Convert.ToUInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Byte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2479">8-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2479">The 8-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2480">Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2480">Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2481">64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2481">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2482">Poniższy przykład konwertuje każdego elementu w tablicy bajtowej niepodpisane długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2482">The following example converts each element in a byte array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#2)]
 [!code-vb[System.Convert.ToUInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Char) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2483">Znak Unicode, który ma zostać przekształcony.</span><span class="sxs-lookup"><span data-stu-id="233c1-2483">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2484">Konwertuje wartość określonego znaku Unicode na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2484">Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2485">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2485">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2486">Poniższy przykład konwertuje każdy element tablicy znaków długie całkowitą bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2486">The following example converts each element in a character array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#3)]
 [!code-vb[System.Convert.ToUInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As DateTime) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2487">Wartość daty i godziny, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2487">The date and time value to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2488">Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2488">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="233c1-2489">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2489">This conversion is not supported.</span></span> <span data-ttu-id="233c1-2490">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="233c1-2490">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="233c1-2491">Ta konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2491">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Decimal) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2492">Liczba dziesiętna, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2492">The decimal number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2493">Konwertuje wartość określonej liczby dziesiętnej równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2493">Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2494"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2494"><paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2495">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2495">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2496">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2496">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#4)]
 [!code-vb[System.Convert.ToUInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2497"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2497"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Double) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2498">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2498">The double-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2499">Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2499">Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2500"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2500"><paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2501">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2501">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2502">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2502">The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#5)]
 [!code-vb[System.Convert.ToUInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2503"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2503"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Short) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2504">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2504">The 16-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2505">Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2505">Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2506">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2506">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2507">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2507">The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#6)]
 [!code-vb[System.Convert.ToUInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2508"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2508"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2509">32-bitowe całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2509">The 32-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2510">Konwertuje wartość określonego całkowita 32-bitowych na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2510">Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2511">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2511">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2512">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2512">The following example attempts to convert each element in an array of integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#7)]
 [!code-vb[System.Convert.ToUInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2513"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2513"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Long) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2514">64-bitowych całkowita do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2514">The 64-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2515">Konwertuje wartość określonego całkowita 64-bitowych na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2515">Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2516">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2516">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2517">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2517">The following example attempts to convert each element in an array of long integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#8)]
 [!code-vb[System.Convert.ToUInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2518"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2518"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2519">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2519">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="233c1-2520">Konwertuje wartość określonego obiektu na 64-bitowej liczby całkowitej bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2520">Converts the value of the specified object to a 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2521">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2521">A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2522">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2522">The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2523">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2523">The following example attempts to convert each element in an object array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#9)]
 [!code-vb[System.Convert.ToUInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2524"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2524"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2525"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2525"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2526">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2526">-or-</span></span>  
  
 <span data-ttu-id="233c1-2527">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2527">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2528"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2528"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As SByte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2529">8-bitową liczbę całkowitą ze znakiem do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2529">The 8-bit signed integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2530">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2530">Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2531">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2531">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2532">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej podpisem niepodpisane długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2532">The following example attempts to convert each element in a signed byte array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#10)]
 [!code-vb[System.Convert.ToUInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2533"><paramref name="value" /> jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="233c1-2533"><paramref name="value" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Single) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2534">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2534">The single-precision floating-point number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2535">Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2535">Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2536"><paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2536"><paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span></span> <span data-ttu-id="233c1-2537">Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</span><span class="sxs-lookup"><span data-stu-id="233c1-2537">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2538">Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości bez znaku długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2538">The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned long integer.</span></span> <span data-ttu-id="233c1-2539">Dane wyjściowe pokazuje, że ułamkowych wartości są zaokrąglane przed wykonaniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2539">The output shows that fractional values are rounded before the conversion is performed.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#11)]
 [!code-vb[System.Convert.ToUInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2540"><paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2540"><paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2541">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2541">A string that contains the number to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2542">Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 64-bitowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2542">Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2543">64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2543">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2544">Przy użyciu <xref:System.Convert.ToInt64%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2544">Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="233c1-2545">`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2545">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="233c1-2546">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2546">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2547">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2547">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2548">W poniższym przykładzie interpretuje elementy tablicy ciągów jako ciągi numeryczne i próbuje przekonwertować je na długich liczb całkowitych bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2548">The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#12)]
 [!code-vb[System.Convert.ToUInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2549"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2549"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2550"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2550"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UShort) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2551">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="233c1-2551">The 16-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2552">Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2552">Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2553">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2553">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2554">Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych unsigned długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2554">The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#13)]
 [!code-vb[System.Convert.ToUInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2555">32-bitowa liczba całkowita bez znaku do konwersji.</span><span class="sxs-lookup"><span data-stu-id="233c1-2555">The 32-bit unsigned integer to convert.</span></span></param>
        <summary><span data-ttu-id="233c1-2556">Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2556">Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2557">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2557">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="233c1-2558">Poniższy przykład konwertuje każdego elementu w tablicy liczbę całkowitą bez znaku niepodpisane długich liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2558">The following example converts each element in an unsigned integer array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#14)]
 [!code-vb[System.Convert.ToUInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2559">64-bitowa liczba całkowita bez znaku do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="233c1-2559">The 64-bit unsigned integer to return.</span></span></param>
        <summary><span data-ttu-id="233c1-2560">Zwraca określony 64-bitowych całkowitą bez znaku. nie jest wykonywane.</span><span class="sxs-lookup"><span data-stu-id="233c1-2560">Returns the specified 64-bit unsigned integer; no actual conversion is performed.</span></span></summary>
        <returns>
          <span data-ttu-id="233c1-2561"><paramref name="value" /> jest zwracany bez zmian.</span><span class="sxs-lookup"><span data-stu-id="233c1-2561"><paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2562">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2562">An object that implements the <see cref="T:System.IConvertible" /> interface.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2563">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2563">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2564">Konwertuje wartość określonego obiektu na 64-bitowa liczba całkowita bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2564">Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2565">64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2565">A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2566">Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2566">The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="233c1-2567">`provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2567">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="233c1-2568">Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.</span><span class="sxs-lookup"><span data-stu-id="233c1-2568">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="233c1-2569">Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2569">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2570">W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu zarówno 64-bitowych podpisem i 64-bitowych unsigned wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2570">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values.</span></span> <span data-ttu-id="233c1-2571">Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.</span><span class="sxs-lookup"><span data-stu-id="233c1-2571">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#17)]
 [!code-vb[System.Convert.ToUInt64#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#17)]  
  
 <span data-ttu-id="233c1-2572">W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> implementacja `HexString` klasy.</span><span class="sxs-lookup"><span data-stu-id="233c1-2572">The following example shows that a call to the <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#18)]
 [!code-vb[System.Convert.ToUInt64#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2573"><paramref name="value" /> nie jest w odpowiednim formacie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2573"><paramref name="value" /> is not in an appropriate format.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="233c1-2574"><paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2574"><paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span></span>  
  
 <span data-ttu-id="233c1-2575">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2575">-or-</span></span>  
  
 <span data-ttu-id="233c1-2576">Konwersja nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="233c1-2576">The conversion is not supported.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2577"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2577"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2578">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2578">A string that contains the number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="233c1-2579">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2579">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="233c1-2580">Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="233c1-2580">Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="233c1-2581">64-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2581">A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2582">Wartość zwracana jest wynik wywołania <xref:System.UInt64.Parse%2A?displayProperty=nameWithType> na `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2582">The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="233c1-2583">`provider` jest <xref:System.IFormatProvider> implementację, która uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu.</span><span class="sxs-lookup"><span data-stu-id="233c1-2583">`provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="233c1-2584"><xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`.</span><span class="sxs-lookup"><span data-stu-id="233c1-2584">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="233c1-2585">Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury jest używany.</span><span class="sxs-lookup"><span data-stu-id="233c1-2585">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="233c1-2586">Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="233c1-2586">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="233c1-2587">Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.</span><span class="sxs-lookup"><span data-stu-id="233c1-2587">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2588">W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej.</span><span class="sxs-lookup"><span data-stu-id="233c1-2588">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="233c1-2589">Następnie próbuje przekonwertować na liczbę całkowitą bez znaku długo każdy element tablicy ciągów liczbowych.</span><span class="sxs-lookup"><span data-stu-id="233c1-2589">It then attempts to convert each element of a numeric string array to an unsigned long integer.</span></span> <span data-ttu-id="233c1-2590">Konwersja używa dostawcy niestandardowego i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.</span><span class="sxs-lookup"><span data-stu-id="233c1-2590">The conversion uses both the custom provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_2.cs#15)]
 [!code-vb[System.Convert.ToUInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2591"><paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</span><span class="sxs-lookup"><span data-stu-id="233c1-2591"><paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2592"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2592"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, fromBase As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, int fromBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="233c1-2593">Ciąg zawierający liczbę, którą należy przekształcić.</span><span class="sxs-lookup"><span data-stu-id="233c1-2593">A string that contains the number to convert.</span></span></param>
        <param name="fromBase"><span data-ttu-id="233c1-2594">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2594">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span></span></param>
        <summary><span data-ttu-id="233c1-2595">Konwertuje reprezentację liczby w określonej podstawy równoważne 64-bitowa liczba całkowita bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2595">Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</span></span></summary>
        <returns><span data-ttu-id="233c1-2596">64-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2596">A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="233c1-2597">Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".</span><span class="sxs-lookup"><span data-stu-id="233c1-2597">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="233c1-2598">Ponieważ <xref:System.UInt64> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2598">Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="233c1-2599">Innymi słowy wszystkie 64-bitowy są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny.</span><span class="sxs-lookup"><span data-stu-id="233c1-2599">In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="233c1-2600">W związku z tym jest możliwość pisania kodu, w którym podpisem długich liczb całkowitych wartość jest spoza zakresu <xref:System.UInt64> — typ danych jest konwertowana na <xref:System.UInt64> wartość bez metody generowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2600">As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception.</span></span> <span data-ttu-id="233c1-2601">Poniższy przykład konwertuje <xref:System.Int64.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> metody.</span><span class="sxs-lookup"><span data-stu-id="233c1-2601">The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="233c1-2602">Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000000000000000 skonwertować 9223372036854775808."</span><span class="sxs-lookup"><span data-stu-id="233c1-2602">Instead of throwing an exception, the method displays the message, "0x8000000000000000 converts to 9223372036854775808."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]
 [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  
  
 <span data-ttu-id="233c1-2603">Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2603">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="233c1-2604">Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt64> wartości.</span><span class="sxs-lookup"><span data-stu-id="233c1-2604">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value.</span></span> <span data-ttu-id="233c1-2605">W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku.</span><span class="sxs-lookup"><span data-stu-id="233c1-2605">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="233c1-2606">Gdy przykładzie konwertuje wartość na <xref:System.UInt64> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="233c1-2606">When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="233c1-2607">Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="233c1-2607">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]
 [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]  
  
   
  
## Examples  
 <span data-ttu-id="233c1-2608">Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i przekonwertować go na liczbę całkowitą bez znaku długo.</span><span class="sxs-lookup"><span data-stu-id="233c1-2608">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_3.cs#16)]
 [!code-vb[System.Convert.ToUInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="233c1-2609"><paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.</span><span class="sxs-lookup"><span data-stu-id="233c1-2609"><paramref name="fromBase" /> is not 2, 8, 10, or 16.</span></span>  
  
 <span data-ttu-id="233c1-2610">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2610">-or-</span></span>  
  
 <span data-ttu-id="233c1-2611"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2611"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="233c1-2612"><paramref name="value" /> jest <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2612"><paramref name="value" /> is <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="233c1-2613"><paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2613"><paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span></span> <span data-ttu-id="233c1-2614">Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</span><span class="sxs-lookup"><span data-stu-id="233c1-2614">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="233c1-2615"><paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.</span><span class="sxs-lookup"><span data-stu-id="233c1-2615"><paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span></span>  
  
 <span data-ttu-id="233c1-2616">—lub—</span><span class="sxs-lookup"><span data-stu-id="233c1-2616">-or-</span></span>  
  
 <span data-ttu-id="233c1-2617"><paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="233c1-2617"><paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64Chars (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64Chars(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64Chars (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64Chars(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64String">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64String (string s, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64String(string s, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64String (s As String, bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64String(System::String ^ s, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryToBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryToBase64Chars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars, out int charsWritten, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryToBase64Chars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars, [out] int32&amp; charsWritten, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryToBase64Chars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char), ByRef charsWritten As Integer, Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>