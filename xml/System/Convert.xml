<Type Name="Convert" FullName="System.Convert">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a9b8afa0d7f3bbd644b151836b5d74ce9bf54a6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434423" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Convert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Convert extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Convert" />
  <TypeSignature Language="VB.NET" Value="Public Class Convert" />
  <TypeSignature Language="C++ CLI" Value="public ref class Convert abstract sealed" />
  <TypeSignature Language="F#" Value="type Convert = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konwertuje podstawowy typ danych na inny typ danych podstawowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metod statycznych <xref:System.Convert> klasy są głównie używane do obsługi konwersji do i z podstawowe typy danych w programie .NET Framework. Obsługiwane typy podstawowe są <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> i <xref:System.String>. Ponadto <xref:System.Convert> klasa zawiera metody służące do obsługi innych rodzajów konwersji.  
  
 Ten temat składa się z następujących sekcji:  
  
 [Konwersje do i z typów podstawowych](#Base)   
 [Podawać numery](#NonDecimal)   
 [Konwersje z niestandardowych obiektów na typy podstawowe](#Custom)   
 [Informacje dotyczące formatowania specyficzne dla kultury](#Culture)   
 [Kodowania Base64](#Base64)   
 [Inne typowe konwersje](#Other)  
  
<a name="Base"></a>   
## <a name="conversions-to-and-from-base-types"></a>Konwersja z i na typy podstawowe  
 Istnieje metoda konwersji do przekonwertowania na każdy typ podstawowy co typ podstawowy. Jednak rzeczywiste wywołanie do metody określonej konwersji może utworzyć jednej z pięciu wartości, w zależności od wartości typu podstawowego w czasie wykonywania i docelowy typ podstawowy. Te pięć wyniki są:  
  
-   Brak konwersji. Ten błąd występuje podczas próby konwertować z typu do samego siebie (na przykład wywołując <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType> z argumentem typu <xref:System.Int32>). W tym przypadku metoda po prostu zwraca wystąpienie oryginalnego typu.  
  
-   <xref:System.InvalidCastException>. Dzieje się tak, gdy określonego konwersja nie jest obsługiwana. <xref:System.InvalidCastException> Jest zgłaszany w przypadku konwersji następujące:  
  
    -   Konwersje z <xref:System.Char> do <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, lub <xref:System.DateTime>.  
  
    -   Konwersje z <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, lub <xref:System.DateTime> do <xref:System.Char>.  
  
    -   Konwersje z <xref:System.DateTime> do żadnego innego typu, z wyjątkiem <xref:System.String>.  
  
    -   Konwersje z innych typów, z wyjątkiem <xref:System.String>, do <xref:System.DateTime>.  
  
-   A <xref:System.FormatException>. Dzieje się tak, jeśli można przekonwertować wartości ciągu na inne typu podstawowego próba nie powiedzie się, ponieważ ciąg nie jest w nieprawidłowym formacie. Wyjątek podczas konwersji następujące:  
  
    -   Ciąg do przekonwertowania na <xref:System.Boolean> wartość nie jest równa <xref:System.Boolean.TrueString?displayProperty=nameWithType> lub <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
    -   Ciąg do przekonwertowania na <xref:System.Char> wartość składa się z wielu znaków.  
  
    -   Ciąg do przekonwertowania do dowolnego typu liczbowego nie został rozpoznany jako prawidłowy numer.  
  
    -   Ciąg do przekonwertowania na <xref:System.DateTime> nie został rozpoznany jako prawidłowy wartość daty i godziny.  
  
-   Konwersja powiodło się. Podczas konwersji między dwa różne typy podstawowe nie są wymienione w poprzedniej wyników powiedzie się wszystkie konwersje rozszerzającą, a także wszystkich konwersji zawężającej, które nie powoduje utraty danych i metoda zwróci wartość docelowego typu podstawowego.  
  
-   <xref:System.OverflowException>. Dzieje się tak, gdy zawężającej wyniki konwersji doprowadzi do utraty danych. Na przykład próby konwersji <xref:System.Int32> wystąpienie, którego wartość to 10 000 do <xref:System.Byte> wpisz zgłasza <xref:System.OverflowException> ponieważ 10000 jest poza zakresem <xref:System.Byte> — typ danych.  
  
 Wystąpił wyjątek nie zostanie wygenerowany, jeśli konwersja typu liczbowego powoduje utratę dokładności (oznacza to, utratę niektórych co najmniej cyfr znaczących). Jednak zostanie wygenerowany wyjątek, jeśli wynik jest większy niż mogą być reprezentowane przez typ zwracanej wartości metody określonej konwersji.  
  
 Na przykład, jeśli <xref:System.Double> jest konwertowana na <xref:System.Single>, może wystąpić utrata dokładności, ale nie jest wyjątek. Jednak jeśli wielkość <xref:System.Double> jest zbyt duży, aby mogły być reprezentowane przez <xref:System.Single>, jest zgłaszany wyjątek przepełnienia.  
  
<a name="NonDecimal"></a>   
## <a name="non-decimal-numbers"></a>Podawać numery  
 <xref:System.Convert> Klasa zawiera metody statyczne wywołujące do konwersji wartości całkowitych na ciąg podawać oświadczenia, a do konwertowania ciągów tej liczby podawać reprezentują do wartości całkowitej. Każda z tych metod konwersji obejmuje `base` argumentu, co pozwala określić układzie; binarny (podstawa 2), ósemkowy (podstawa 8) i szesnastkowym (podstawa 16), a także dziesiętnych (o podstawie 10). Istnieje zestaw metod do konwertowania każdego zgodne ze specyfikacją CLS pierwotne typy całkowite ciąg, a druga do przekonwertowania ciągu na każdy pierwotne typy całkowite:  
  
-   <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> i <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, można przekonwertować wartości typu byte do i z ciągu w określonej podstawy.  
  
-   <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> i <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, aby przekonwertować 16-bitową liczbę całkowitą ze znakiem do i z ciągu w określonej podstawy.  
  
-   <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> i <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, aby przekonwertować całkowita 32-bitowej do i z ciągu w określonej podstawy.  
  
-   <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> i <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, o konwersję całkowita 64-bitowej do i z ciągu w określonej podstawy.  
  
-   <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, aby przekonwertować reprezentacja ciągu wartości bajtu w określonym formacie bajtu ze znakiem.  
  
-   <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, aby przekonwertować na liczbę całkowitą bez znaku 16-bitowych reprezentację liczby całkowitej w określonym formacie.  
  
-   <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, można przekonwertować na liczbę całkowitą bez znaku 32-bitowych reprezentację liczby całkowitej w określonym formacie.  
  
-   <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, aby przekonwertować na liczbę całkowitą bez znaku 64-bitowych reprezentację liczby całkowitej w określonym formacie.  
  
 Poniższy przykład konwertuje wartość <xref:System.Int16.MaxValue?displayProperty=nameWithType> na ciąg w wszystkie obsługiwane formaty liczbowe. Następnie konwertuje wartość ciągu z powrotem do <xref:System.Int16> wartości.  
  
 [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]
 [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]
 [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  
  
<a name="Custom"></a>   
## <a name="conversions-from-custom-objects-to-base-types"></a>Konwersja niestandardowych obiektów na typy podstawowe  
 Oprócz obsługi konwersji między typami podstawowej <xref:System.Convert> metoda obsługuje konwersję dowolnego typu niestandardowego do dowolnego typu podstawowego. Aby to zrobić, niestandardowy typ musi implementować <xref:System.IConvertible> interfejs, który definiuje metody do konwersji na typ implementujący do każdego z typów podstawowych. Konwersje, które nie są obsługiwane przez określonego typu powinien zgłosić <xref:System.InvalidCastException>.  
  
 Gdy <xref:System.Convert.ChangeType%2A> metody jest przekazywany typu niestandardowego jako pierwszy parametr, lub gdy `Convert.To` *typu* — metoda (takich jak <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType> lub <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> jest nazywane i jako jego pierwszego przekazano wystąpienia typu niestandardowego Parametr <xref:System.Convert> metoda z kolei wywołuje typu niestandardowego <xref:System.IConvertible> implementacji, aby dokonać konwersji. Aby uzyskać więcej informacji, zobacz [typ konwersji w programie .NET Framework](~/docs/standard/base-types/type-conversion.md).  
  
<a name="Culture"></a>   
## <a name="culture-specific-formatting-information"></a>Informacje o formatowaniu specyficzne dla kultury  
 Wszystkie metody konwersji typu podstawowego i <xref:System.Convert.ChangeType%2A> metoda zawierać przeciążenia, które ma parametr typu <xref:System.IFormatProvider>. Na przykład <xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType> metoda ma następujące dwa przeciążenia:  
  
-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
 <xref:System.IFormatProvider> Parametrów można podać formatowania informacje specyficzne dla kultury w celu ułatwienia procesu konwersji. Jednak jest ignorowana przez większość metody konwersji typu podstawowego. Jest używany tylko za pomocą następujących metod konwersji typu podstawowego. Jeśli `null` <xref:System.IFormatProvider> argument jest przekazywany do tych metod <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.  
  
-   Za pomocą metod, które przekonwertować wartości typu liczbowego. <xref:System.IFormatProvider> Parametr jest używany przez przeciążenie, które ma parametry typu <xref:System.String> i <xref:System.IFormatProvider>. Jest również używany przez przeciążenie, które ma parametry typu <xref:System.Object> i <xref:System.IFormatProvider> Jeśli obiektu środowiska wykonawczego typu jest <xref:System.String>.  
  
-   Za pomocą metod, które przekonwertować wartości daty i godziny. <xref:System.IFormatProvider> Parametr jest używany przez przeciążenie, które ma parametry typu <xref:System.String> i <xref:System.IFormatProvider>. Jest również używany przez przeciążenie, które ma parametry typu <xref:System.Object> i <xref:System.IFormatProvider> Jeśli obiektu środowiska wykonawczego typu jest <xref:System.String>.  
  
-   Przez <xref:System.Convert.ToString%2A?displayProperty=nameWithType> przeciążenia, które obejmują <xref:System.IFormatProvider> parametr i przekonwertować liczbowa wartość na ciąg lub <xref:System.DateTime> wartość na ciąg.  
  
 Jednak dowolny typ zdefiniowany przez użytkownika, który zawiera <xref:System.IConvertible> ułatwia użycie <xref:System.IFormatProvider> parametru.  
  
<a name="Base64"></a>   
## <a name="base64-encoding"></a>Kodowania Base64  
 Kodowanie Base64 konwertuje dane binarne na ciąg. Dane wyrażonej w postaci cyfr base-64 można łatwo przekazywane za pośrednictwem kanałów danych, które mogą przesyłać tylko 7-bitowe znaki. <xref:System.Convert> Klasa zawiera następujące metody umożliwiające obsługuje kodowania base64: zestaw metod obsługi Konwertowanie tablicy bajtów do i z <xref:System.String> lub do i z tablicy znaków Unicode zawierającego cyfrę base-64 znaków.  
  
-   <xref:System.Convert.ToBase64String%2A>, który konwertuje tablicę bajtów na ciąg kodowany w formacie base64.  
  
-   <xref:System.Convert.ToBase64CharArray%2A>, który konwertuje tablicę bajtów do tablicy znaków z kodowaniem base64.  
  
-   <xref:System.Convert.FromBase64String%2A>, który konwertuje ciąg kodowany w formacie base64 na tablicę bajtów.  
  
-   <xref:System.Convert.FromBase64CharArray%2A>, który konwertuje tablicę znaków z kodowaniem base64 na tablicę bajtów.  
  
<a name="Other"></a>   
## <a name="other-common-conversions"></a>Inne typowe konwersje  
 Inne klasy w NET Framework służy do wykonywania niektórych konwersji, które nie są obsługiwane przez metody statycznej <xref:System.Convert> klasy.  Należą do nich następujące elementy:  
  
 Konwersja na tablice typu byte  
 <xref:System.BitConverter> Klasa udostępnia metody, które konwertują pierwotne typy liczbowe (w tym <xref:System.Boolean>) z bajt i tablice typu byte tablic z powrotem do typów danych pierwotnych.  
  
 Znak kodowania i dekodowania  
 <xref:System.Text.Encoding> Klasy i jej klas pochodnych (takich jak <xref:System.Text.UnicodeEncoding> i <xref:System.Text.UTF8Encoding>) podania metod do kodowania tablicy znaków lub ciąg (oznacza to, aby przekonwertować je na tablicę bajtów przy użyciu określonego kodowania) i zdekodować zakodowanego bajtów tablicy (oznacza to, że przekonwertować Tablica bajtowa znaków UTF16 zakodowane w formacie Unicode. Aby uzyskać więcej informacji, zobacz [kodowania znaków w programie .NET Framework](~/docs/standard/base-types/character-encoding.md)  
  
   
  
## Examples  
 W poniższym przykładzie pokazano niektórych metod konwersji w <xref:System.Convert> klasy, w tym <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, i <xref:System.Convert.ToString%2A>.  
  
 [!code-cpp[System.Convert#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/converter.cpp#1)]
 [!code-csharp[System.Convert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/converter.cs#1)]
 [!code-vb[System.Convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/converter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.SByte" />
    <altmember cref="T:System.Int16" />
    <altmember cref="T:System.Int32" />
    <altmember cref="T:System.Int64" />
    <altmember cref="T:System.Byte" />
    <altmember cref="T:System.UInt16" />
    <altmember cref="T:System.UInt32" />
    <altmember cref="T:System.UInt64" />
    <altmember cref="T:System.Single" />
    <altmember cref="T:System.Double" />
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Boolean" />
    <altmember cref="T:System.Char" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="ChangeType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt, którego wartość jest odpowiednikiem określonego obiektu określonego typu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * Type -&gt; obj" Usage="System.Convert.ChangeType (value, conversionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="conversionType">Typ obiektu, który będzie zwracany.</param>
        <summary>Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</summary>
        <returns>Obiekt, którego typ jest <paramref name="conversionType" /> , którego wartość jest odpowiednikiem <paramref name="value" />.  - lub - odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> nie jest typem wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%2A> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do `conversionType`. `value` Parametr może być dowolnego typu obiektu i `conversionType` można też <xref:System.Type> obiekt, który reprezentuje dowolnego typu podstawowego lub niestandardowego. Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody. Metoda, która wymaga tej konwersji `value` do `conversionType` być obsługiwane.  
  
 Ta metoda używa kultury bieżącej wątku do konwersji.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Convert.ChangeType%2A> metody.  
  
 [!code-cpp[convertchangetype#1](~/samples/snippets/cpp/VS_Snippets_CLR/convertchangetype/CPP/convertchangetype.cpp#1)]
 [!code-csharp[convertchangetype#1](~/samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/CS/convertchangetype.cs#1)]
 [!code-vb[convertchangetype#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convertchangetype/VB/convertchangetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.  - lub - <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> jest typem wartości.  - lub - <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie rozpoznawanym przez <paramref name="conversionType" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="conversionType" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="conversionType" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> Metoda można przekonwertować wartości wyliczenia do innego typu. Jednak go nie można przekonwertować typu wartością wyliczenia nawet, jeśli typ źródła jest podstawowy typ wyliczenia. Aby przekonwertować typu wartości wyliczenia, użyj operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic). Poniższy przykład przedstawia konwersji do i z <c>kontynencie</c> wartości wyliczenia.  [! code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [! code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> Metoda można przekonwertować typu dopuszczającego wartości null do innego typu. Jednak go nie można przekonwertować typu do wartości typu dopuszczającego wartość null, nawet jeśli <paramref name="conversionType" /> jest typem podstawowym <see cref="T:System.Nullable`1" />. Aby dokonać konwersji, można użyć operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic). Poniższy przykład przedstawia konwersji do i z typu dopuszczającego wartość null.  [! code-csharp[System.Convert.ChangeType#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable.cs#7)] [! code-vb[System.Convert.ChangeType#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable.vb#7)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * TypeCode -&gt; obj" Usage="System.Convert.ChangeType (value, typeCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="typeCode">Typ obiektu, który będzie zwracany.</param>
        <summary>Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu.</summary>
        <returns>Obiekt, którego typ podstawowy jest <paramref name="typeCode" /> , którego wartość jest odpowiednikiem <paramref name="value" />.  - lub - odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> jest <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, lub <see cref="F:System.TypeCode.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do wstępnie zdefiniowany typ określony przez `typeCode`. `value` Parametr może być dowolnego typu obiektu. Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody. Metoda wymaga również tej konwersji `value` do `typeCode` być obsługiwane.  
  
 <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> Metoda nie obsługuje konwersji `value` do typu niestandardowego. Aby dokonać konwersji takie, należy wywołać <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> metody.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób użycia <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> metodę, aby zmienić <xref:System.Object> na typ określony przez <xref:System.TypeCode> parametru, jeśli to możliwe.  
  
 [!code-cpp[System.Convert.ChangeType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype_01.cpp#2)]
 [!code-csharp[System.Convert.ChangeType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype01.cs#2)]
 [!code-vb[System.Convert.ChangeType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype01.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.  - lub - <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> Określa typ wartości.  - lub - <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie rozpoznawanym przez <paramref name="typeCode" /> typu.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="typeCode" /> typu.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeCode" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type, provider As IFormatProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * Type * IFormatProvider -&gt; obj" Usage="System.Convert.ChangeType (value, conversionType, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="conversionType">Typ obiektu, który będzie zwracany.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu. Parametru zapewnia formatowania informacje specyficzne dla kultury.</summary>
        <returns>Obiekt, którego typ jest <paramref name="conversionType" /> , którego wartość jest odpowiednikiem <paramref name="value" />.  - lub - <paramref name="value" />, jeśli <see cref="T:System.Type" /> z <paramref name="value" /> i <paramref name="conversionType" /> są takie same.  - lub - odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> nie jest typem wartości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%2A> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do `conversionType`. `value` Parametr może być dowolnego typu obiektu i `conversionType` można też <xref:System.Type> obiekt, który reprezentuje dowolnego typu podstawowego lub niestandardowego. Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody. Metoda, która wymaga tej konwersji `value` do `conversionType` być obsługiwane.  
  
 `provider` Parametr jest <xref:System.IFormatProvider> wdrożenia, który dostarcza informacje dotyczące formatowania do konwersji. Czy i jak ten parametr jest używany zależy od bazowych <xref:System.IConvertible> implementacji. Jeśli `value` jest typem danych podstawowych `provider` jest używany tylko dla następującego konwersji:  
  
-   Konwersja z liczby na ciąg lub ciągu na liczbę. `provider` musi być <xref:System.Globalization.CultureInfo> obiektu, <xref:System.Globalization.NumberFormatInfo> obiektu lub niestandardowy <xref:System.IFormatProvider> implementację, która zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Jednak ponieważ <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metoda przeprowadza konwersję przy użyciu domyślnego specyfikatora formatu "G", `provider` parametru nie ma efektu Jeśli `value` lub typ docelowy jest liczbą całkowitą bez znaku. Jeśli `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.  
  
-   Konwersja z <xref:System.DateTime> wartość na ciąg lub ze string na <xref:System.DateTime> wartość. `provider` musi być <xref:System.Globalization.CultureInfo> lub <xref:System.Globalization.DateTimeFormatInfo> obiektu. Jeśli `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.  
  
 Jeśli `value` jest typem zdefiniowanym przez aplikację jego <xref:System.IConvertible> implementacja może używać `provider` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu.  
  
 [!code-cpp[System.Convert.ChangeType#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#3)]
 [!code-csharp[System.Convert.ChangeType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#3)]
 [!code-vb[System.Convert.ChangeType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#3)]  
  
 Poniższy przykład tworzy wystąpienie `Temperature` klasy i wywołania <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> metodę, aby przekonwertować go na podstawowe typy liczbowe obsługiwane przez program .NET Framework i do <xref:System.String>. Które zastosowano <xref:System.Convert.ChangeType%2A> metoda opakowuje wywołanie typu źródłowego <xref:System.IConvertible> implementacji.  
  
 [!code-cpp[System.Convert.ChangeType#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#4)]
 [!code-csharp[System.Convert.ChangeType#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#4)]
 [!code-vb[System.Convert.ChangeType#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.  - lub - <paramref name="value" /> jest <see langword="null" /> i <paramref name="conversionType" /> jest typem wartości.  - lub - <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie <paramref name="conversionType" /> rozpoznaje <paramref name="provider" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="conversionType" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="conversionType" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> Metoda można przekonwertować wartości wyliczenia do innego typu. Jednak go nie można przekonwertować typu wartością wyliczenia nawet, jeśli typ źródła jest podstawowy typ wyliczenia. Aby przekonwertować typu wartości wyliczenia, użyj operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic). Poniższy przykład przedstawia konwersji do i z <c>kontynencie</c> wartości wyliczenia.  [! code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [! code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> Metoda można przekonwertować typu dopuszczającego wartości null do innego typu. Jednak go nie można przekonwertować typu do wartości typu dopuszczającego wartość null, nawet jeśli <paramref name="conversionType" /> jest typem podstawowym <see cref="T:System.Nullable`1" />. Aby dokonać konwersji, można użyć operatora rzutowania (w języku C#) lub funkcji konwersji (w języku Visual Basic). Poniższy przykład przedstawia konwersji do i z typu dopuszczającego wartość null.  [! code-csharp[System.Convert.ChangeType#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable_1.cs#8)] [! code-vb[System.Convert.ChangeType#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable_1.vb#8)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * TypeCode * IFormatProvider -&gt; obj" Usage="System.Convert.ChangeType (value, typeCode, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="typeCode">Typ obiektu, który będzie zwracany.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Zwraca obiekt określonego typu, którego wartość jest odpowiednikiem określonego obiektu. Parametru zapewnia formatowania informacje specyficzne dla kultury.</summary>
        <returns>Obiekt, którego typ podstawowy jest <paramref name="typeCode" /> , którego wartość jest odpowiednikiem <paramref name="value" />.  - lub - odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), jeśli <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> jest <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, lub <see cref="F:System.TypeCode.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> jest to metoda konwersji ogólnego przeznaczenia, która konwertuje obiekt określony przez `value` do wstępnie zdefiniowany typ określony przez `typeCode`. `value` Parametr może być dowolnego typu obiektu. Do konwersji zakończyła się powodzeniem `value` musi implementować <xref:System.IConvertible> interfejsu, ponieważ metoda opakowuje po prostu wywołania do odpowiedniej <xref:System.IConvertible> metody. Metoda wymaga również tej konwersji `value` do `typeCode` być obsługiwane.  
  
 <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> Metoda nie obsługuje konwersji `value` do typu niestandardowego. Aby dokonać konwersji takie, należy wywołać <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> metody.  
  
 `provider` Parametr jest <xref:System.IFormatProvider> wdrożenia, który dostarcza informacje dotyczące formatowania do konwersji. Czy i jak ten parametr jest używany zależy od bazowych <xref:System.IConvertible> implementacji. Jeśli `value` jest typem danych podstawowych `provider` jest używany tylko dla następującego konwersji. Jeśli `null` <xref:System.IFormatProvider> argument jest przekazywany do tych metod <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.  
  
-   Konwersja z liczby na ciąg lub ciągu na liczbę. `provider` musi być <xref:System.Globalization.CultureInfo> obiektu, <xref:System.Globalization.NumberFormatInfo> obiektu lub niestandardowy <xref:System.IFormatProvider> implementację, która zwraca <xref:System.Globalization.NumberFormatInfo> obiektu. Jednak ponieważ <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metoda przeprowadza konwersję przy użyciu domyślnego specyfikatora formatu "G", `provider` parametru nie ma efektu Jeśli `value` lub typ docelowy jest liczbą całkowitą bez znaku.  
  
-   Konwersja z <xref:System.DateTime> wartość na ciąg lub ze string na <xref:System.DateTime> wartość. `provider` musi być <xref:System.Globalization.CultureInfo> lub <xref:System.Globalization.DateTimeFormatInfo> obiektu.  
  
 Jeśli `value` jest typem zdefiniowanym przez aplikację jego <xref:System.IConvertible> implementacja może używać `provider` parametru.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano formatu niestandardowego dostawcę o nazwie `InterceptProvider` wskazujące, gdy jego <xref:System.IFormatProvider.GetFormat%2A> metoda jest wywoływana i zwraca <xref:System.Globalization.NumberFormatInfo> dla kultury fr-FR i <xref:System.Globalization.DateTimeFormatInfo> obiektu dla kultury en US. Ten dostawca format jest używany w wszystkie wywołania <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> metody. Następnie tworzony tablicy o <xref:System.Double> i <xref:System.DateTime> wartości i wywołań powtarzające się <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> z każdej wartości, a każdy element członkowski <xref:System.TypeCode> wyliczenia. Pokazano w przykładzie, jeśli metoda używa <xref:System.IFormatProvider> parametr, a także przedstawiono użycie `provider` parametr, aby wykonać formatowania zależne od kultury.  
  
 [!code-cpp[System.Convert.ChangeType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype00.cpp#1)]
 [!code-csharp[System.Convert.ChangeType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype00.cs#1)]
 [!code-vb[System.Convert.ChangeType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype00.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.  - lub - <paramref name="value" /> jest <see langword="null" /> i <paramref name="typeCode" /> Określa typ wartości.  - lub - <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie <paramref name="typeCode" /> rozpoznaje typu <paramref name="provider" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> Liczba, która wykracza poza zakres <paramref name="typeCode" /> typu.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeCode" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
    <Member MemberName="DBNull">
      <MemberSignature Language="C#" Value="public static readonly object DBNull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DBNull" />
      <MemberSignature Language="DocId" Value="F:System.Convert.DBNull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DBNull As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DBNull;" />
      <MemberSignature Language="F#" Value=" staticval mutable DBNull : obj" Usage="System.Convert.DBNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stała reprezentująca kolumny bazy danych, która nie ma danych. oznacza to, że bazy danych wartości null.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.DBNull> Pole jest odpowiednikiem <xref:System.DBNull.Value?displayProperty=nameWithType>, jak pokazano na poniższym przykładzie.  
  
 [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]
 [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
        <altmember cref="F:System.DBNull.Value" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64CharArray">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64CharArray(char[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64CharArray (inArray As Char(), offset As Integer, length As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64CharArray(cli::array &lt;char&gt; ^ inArray, int offset, int length);" />
      <MemberSignature Language="F#" Value="static member FromBase64CharArray : char[] * int * int -&gt; byte[]" Usage="System.Convert.FromBase64CharArray (inArray, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablica znaków Unicode.</param>
        <param name="offset">Pozycja w <c>inArray</c>.</param>
        <param name="length">Liczba elementów w <c>inArray</c> do przekonwertowania.</param>
        <summary>Konwertuje podzbiór tablicy znaków Unicode, który koduje dane binarne w formie cyfr w base-64, na tablicę równoważne 8-bitową nieznakowaną liczbą całkowitą. Parametry określają podzbiór w tablicy wejściowej, a liczba elementów do konwersji.</summary>
        <returns>Tablica 8-bitowych liczb całkowitych bez znaku odpowiednikiem <paramref name="length" /> elementy w pozycji <paramref name="offset" /> w <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `inArray` składa się z cyfr base-64, spacji i końcowe znaki wypełnienia. Cyfry base-64 w kolejności rosnącej od zera są wielkie litery "A" do "Z", małe litery "a" na "z", cyfry od "0" do "9" oraz symbole "+" i "/".  
  
 Białe znaki, a ich nazwy Unicode i szesnastkowe, są kartę (znak TABULACJA, U + 0009), znaków nowego wiersza (WYSUWU wiersza, U + 000A), znaków powrotu karetki (powrotu KARETKI, U + 000D), a pusty (miejsce, U + 0020). Dowolną liczbę spacji może występować w `inArray` ponieważ wszystkie białe znaki są ignorowane.  
  
 Bezwartościowy znak „=” jest używany w celu dopełniania na końcu. Koniec `inArray` może składać się z zero, co najmniej dwa znaki wypełnienia.  
  
> [!IMPORTANT]
>  <xref:System.Convert.FromBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablicy pojedynczy znak, który zawiera wszystkie dane, które ma być zdekodowany. Umożliwia zdekodowanie danych znaków base-64 ze strumienia, użyj <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> sposób dekodowania danych UUencoded (base-64) i zapisz go jako dane binarne.  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#3)]
 [!code-csharp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#3)]
 [!code-vb[System.Convert UUEncodeDecode functions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#3)]  
  
 W poniższym przykładzie pokazano <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> i <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> metody. Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda. W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63. W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem. Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2. Te cztery wartości odpowiadają cyfr base-64, "", "", "E" i "C" na początku danych wyjściowych.  
  
 Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy. W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF. Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64. Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> lub <paramref name="length" /> jest mniejszy niż 0.  - lub - <paramref name="offset" /> plus <paramref name="length" /> wskazuje nie jest w stanie <paramref name="inArray" />.</exception>
        <exception cref="T:System.FormatException">Długość <paramref name="inArray" />, ignorowanie białe znaki, nie jest zero lub jest wielokrotnością liczby 4.  - lub - format <paramref name="inArray" /> jest nieprawidłowy. <paramref name="inArray" /> zawiera znak z systemem innym niż base-64, więcej niż dwa znaki wypełnienia lub z systemem innym niż biały znak wśród znaków wypełnienia.</exception>
        <altmember cref="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64String">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64String (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64String(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64String(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64String (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64String(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member FromBase64String : string -&gt; byte[]" Usage="System.Convert.FromBase64String s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do konwersji.</param>
        <summary>Konwertuje określony ciąg koduje dane binarne w formie cyfr w base-64, na tablicę równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Tablicę 8-bitowych liczb całkowitych bez znaku, który jest odpowiednikiem <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` składa się z cyfr base-64, spacji i końcowe znaki wypełnienia. Cyfry base-64 w kolejności rosnącej od zera są wielkie litery "A" do "Z", małe litery "a" na "z", cyfry od "0" do "9" oraz symbole "+" i "/".  
  
 Białe znaki, a ich nazwy Unicode i szesnastkowe, są kartę (znak TABULACJA, U + 0009), znaków nowego wiersza (WYSUWU wiersza, U + 000A), znaków powrotu karetki (powrotu KARETKI, U + 000D), a pusty (miejsce, U + 0020). Dowolną liczbę spacji może występować w `s` ponieważ wszystkie białe znaki są ignorowane.  
  
 Bezwartościowy znak „=” jest używany w celu dopełniania na końcu. Koniec `s` może składać się z zero, co najmniej dwa znaki wypełnienia.  
  
> [!IMPORTANT]
>  <xref:System.Convert.FromBase64String%2A> Metoda jest przeznaczona do przetworzenia jednego ciągu, który zawiera wszystkie dane, które ma być zdekodowany. Umożliwia zdekodowanie danych znaków base-64 ze strumienia, użyj <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> Konwertuj tablicę bajtów na ciąg UUencoded (base-64), a następnie wywołuje metodę <xref:System.Convert.FromBase64String%28System.String%29> metodę, aby przywrócić oryginalne tablicy bajtów.  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 Poniżej przedstawiono przykład bardziej skomplikowanych tworzącą 20 element tablicę 32-bitowych liczb całkowitych. Następnie używa <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu do tablicy typu byte, w której są przechowywane w odpowiedniej pozycji w buforze przez wywołanie metody <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metody. Bufor są następnie przekazywane do <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> metodę, aby utworzyć parametry UUencoded (base-64).  Następnie wywołuje <xref:System.Convert.FromBase64String%28System.String%29> zdekodować ciągu UUencoded i wywołania metody <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> do przekonwertowania na liczbę całkowitą każdy zestaw z czterech bajtów (rozmiar całkowitą 32-bitowe). Dane wyjściowe w przykładzie przedstawiono pomyślnie przywrócił tablicy oryginalnej.  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Długość <paramref name="s" />, ignorowanie białe znaki, nie jest zero lub jest wielokrotnością liczby 4.  - lub - format <paramref name="s" /> jest nieprawidłowy. <paramref name="s" /> zawiera znak z systemem innym niż base-64, więcej niż dwa znaki wypełnienia lub z systemem innym niż — biały znak — znak wśród znaków wypełnienia.</exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.GetTypeCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeCode (value As Object) As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : obj -&gt; TypeCode" Usage="System.Convert.GetTypeCode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <summary>Zwraca <see cref="T:System.TypeCode" /> dla określonego obiektu.</summary>
        <returns>
          <see cref="T:System.TypeCode" /> Dla <paramref name="value" />, lub <see cref="F:System.TypeCode.Empty" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDBNull (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="System.Convert.IsDBNull value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt.</param>
        <summary>Zwraca wskazuje, czy określony obiekt jest typu <see cref="T:System.DBNull" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> jest typu <see cref="T:System.DBNull" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.IsDBNull%2A> Testy metody czy `value` parametr jest równy <xref:System.DBNull.Value?displayProperty=nameWithType>. Odpowiada to następującemu kodowi:  
  
 [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]
 [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  
  
> [!NOTE]
>  <xref:System.DBNull.Value?displayProperty=nameWithType> Służy do wskazywania wartość, która nie istnieje. Nie jest odpowiednikiem `null` lub <xref:System.String.Empty?displayProperty=nameWithType>. W związku z tym kodem takich jak `Convert.IsDBNull(null)` w języku C# lub `Convert.IsDBNull(Nothing)` w języku Visual Basic zwraca`false`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.SqlClient.SqlDataReader> obiekt, aby pobrać ankieta danych z bazy danych. Przypisuje wartości pól w każdym wierszu do tablicy, a następnie przekazuje każdego tablicy elementu <xref:System.Convert.IsDBNull%2A> metody. Jeśli metoda zwraca `true`, przykładzie przypisano ciąg "Brak" do elementu tablicy. Tablica jest następnie dodawana do <xref:System.Windows.Forms.DataGridView.Rows%2A> Kolekcja <xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType> formantu.  
  
 [!code-csharp[System.Convert.IsDBNull#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#2)]
 [!code-vb[System.Convert.IsDBNull#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64CharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64.</summary>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut);" />
      <MemberSignature Language="F#" Value="static member ToBase64CharArray : byte[] * int * int * char[] * int -&gt; int" Usage="System.Convert.ToBase64CharArray (inArray, offsetIn, length, outArray, offsetOut)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablicy wejściowej 8-bitowych liczb całkowitych bez znaku.</param>
        <param name="offsetIn">Pozycja w <c>inArray</c>.</param>
        <param name="length">Liczba elementów <c>inArray</c> do przekonwertowania.</param>
        <param name="outArray">Dane wyjściowe tablicy znaków Unicode.</param>
        <param name="offsetOut">Pozycja w <c>outArray</c>.</param>
        <summary>Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64. Parametry określają podzbiorów, ponieważ powoduje przesunięcie w danych wejściowych i wyjściowych tablice i liczba elementów w tablicy wejściowej konwertowania.</summary>
        <returns>Całkowita 32-bitowych zawierającą liczbę bajtów w <paramref name="outArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podzbiór `length` elementy `inArray` zaczynając od pozycji `offsetIn`jako wartość liczbową i konwertowana do podzbioru elementów, `outArray` zaczynając od pozycji `offsetOut`. Wartości zwracanej wskazuje liczbę elementów przekonwertowane na `outArray`. Podzbiór `outArray` składa się z cyfr base-64.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.  
  
 `offset` i `length` parametry są podpisane liczby 32-bitowych. `offsetIn` i `offsetOut` parametry są pozycje tablicy liczony od zera.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby utworzyć tablicy znaków base-64 ze strumienia bajtów, użyj <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, przy użyciu <xref:System.Convert.ToBase64CharArray%2A> metodę UUencode (kodowania w base 64) strumień binarny, następnie zapisz kodowania do pliku.  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#2)]
 [!code-csharp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#2)]
 [!code-vb[System.Convert UUEncodeDecode functions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> lub <paramref name="outArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offsetIn" />, <paramref name="offsetOut" />, lub <paramref name="length" /> jest ujemna.  - lub - <paramref name="offsetIn" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.  - lub - <paramref name="offsetOut" /> i liczba elementów do zwrócenia jest większa niż długość <paramref name="outArray" />.</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer, options As Base64FormattingOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64CharArray : byte[] * int * int * char[] * int * Base64FormattingOptions -&gt; int" Usage="System.Convert.ToBase64CharArray (inArray, offsetIn, length, outArray, offsetOut, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablicy wejściowej 8-bitowych liczb całkowitych bez znaku.</param>
        <param name="offsetIn">Pozycja w <c>inArray</c>.</param>
        <param name="length">Liczba elementów <c>inArray</c> do przekonwertowania.</param>
        <param name="outArray">Dane wyjściowe tablicy znaków Unicode.</param>
        <param name="offsetOut">Pozycja w <c>outArray</c>.</param>
        <param name="options">
          <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</param>
        <summary>Konwertuje podzbiór tablicy 8-bitowych liczb całkowitych bez znaku na równoważny podzbiór tablicy znaków Unicode zakodowanych przy użyciu cyfr base-64. Parametry określają podzestawy jako przesunięcia w tablicach wejściowymi i wyjściowymi, liczba elementów w tablicy wejściowej, aby dokonać konwersji, i określa, czy wiersz podziałów tablicy danych wyjściowych.</summary>
        <returns>Całkowita 32-bitowych zawierającą liczbę bajtów w <paramref name="outArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podzbiór `length` elementy `inArray` parametru, zaczynając od pozycji `offsetIn`jako wartość liczbową i konwertowana do podzbioru elementów, `outArray` parametru, zaczynając od pozycji `offsetOut`. Wartości zwracanej wskazuje liczbę elementów przekonwertowane na `outArray`. Podzbiór `outArray` składa się z cyfr base-64.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Valueless znak "=" jest używana do uzupełnienia końcowe.  
  
 `offset` i `length` parametry są podpisane liczby 32-bitowych. `offsetIn` i `offsetOut` parametry są pozycje tablicy liczony od zera.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64CharArray%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby utworzyć tablicy znaków base-64 ze strumienia bajtów, użyj <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
 Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków. Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A). Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Convert.ToBase64CharArray%2A> metody. Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda. W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63. W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem. Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2. Te cztery wartości odpowiadają cyfr base-64 "A", "", "E" i "C" na początku danych wyjściowych.  
  
 Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy. W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF. Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64. Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> lub <paramref name="outArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offsetIn" />, <paramref name="offsetOut" />, lub <paramref name="length" /> jest ujemna.  - lub - <paramref name="offsetIn" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.  - lub - <paramref name="offsetOut" /> i liczba elementów do zwrócenia jest większa niż długość <paramref name="outArray" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64String">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość na tablicę 8-bitowych liczb całkowitych bez znaku do reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</summary>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] -&gt; string" Usage="System.Convert.ToBase64String inArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablica 8-bitowych liczb całkowitych bez znaku.</param>
        <summary>Konwertuje tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr.</summary>
        <returns>Reprezentacja ciągu w base 64 zawartości <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy `inArray` zarejestrowane jako wartość liczbową i konwertowana do reprezentacji w postaci ciągu jest algorytmem base-64 cyfr.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
 Zwykle <xref:System.Convert.ToBase64String%2A> metoda nie jest używany do przesyłania danych UUEncoded (algorytmem base-64) ciągu.  Oznacza to jeśli dekodowanie ciąg przez wywołanie metody <xref:System.Convert.FromBase64String%2A> metody, następnie zakodować tablicy bajtów zwrócona przez wywołanie metody <xref:System.Convert.ToBase64String%2A> metody, wynikowy ciąg znaków nie zawsze będą takie same jak oryginalny ciąg. Ten ciąg zostanie wyrównana, tylko wtedy, gdy oryginalnego ciągu jest prawidłowy ciąg zakodowany base-64.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> Konwertuj tablicę bajtów na ciąg UUencoded (base-64), a następnie wywołuje metodę <xref:System.Convert.FromBase64String%28System.String%29> metodę, aby przywrócić oryginalne tablicy bajtów.  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 Poniżej przedstawiono przykład bardziej skomplikowanych tworzącą 20 element tablicę 32-bitowych liczb całkowitych. Następnie używa <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu do tablicy typu byte, w której są przechowywane w odpowiedniej pozycji w buforze przez wywołanie metody <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metody. Bufor są następnie przekazywane do <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> metodę, aby utworzyć parametry UUencoded (base-64).  Następnie wywołuje <xref:System.Convert.FromBase64String%28System.String%29> zdekodować ciągu UUencoded i wywołania metody <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> do przekonwertowania na liczbę całkowitą każdy zestaw z czterech bajtów (rozmiar całkowitą 32-bitowe). Dane wyjściowe w przykładzie przedstawiono pomyślnie przywrócił tablicy oryginalnej.  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (inArray, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablica 8-bitowych liczb całkowitych bez znaku.</param>
        <param name="options">
          <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</param>
        <summary>Konwertuje tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr. Parametr określa, czy można wstawić podziały wierszy w wartości zwracanej.</summary>
        <returns>Reprezentacja ciągu w base 64 elementów w <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy `inArray` parametru są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Valueless znak "=" jest używana do uzupełnienia końcowe.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
 Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków. Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A). Ponieważ podziały wierszy są traktowane jako odstęp w kodowanie base-64, są ignorowane podczas konwertowania base-64 ciąg kodowany w formacie powrót do tablicy bajtów. Podziały wierszy są po prostu wygodny podczas wyświetlania zakodowany ciąg do formantu lub urządzeniami, takimi jak okna konsoli. Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).  
  
   
  
## Examples  
 Następujące przykładowe wywołania <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType> z <xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType> argument Wstaw wiersz dzieli w ciągu, który jest generowany przez kodowania tablicy bajtów elementu 100.  
  
 [!code-csharp[System.Convert.ToBase64String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String3.cs#3)]
 [!code-vb[System.Convert.ToBase64String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String3.vb#3)]  
  
 Jako dane wyjściowe w przykładzie pokazano <xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType> pomyślnie przywrócenie oryginalnego tablicy bajtów; znaki podziału wiersza są ignorowane podczas konwersji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (ReadOnlySpan&lt;byte&gt; bytes, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (bytes As ReadOnlySpan(Of Byte), Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As String" />
      <MemberSignature Language="F#" Value="static member ToBase64String : ReadOnlySpan&lt;byte&gt; * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (bytes, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * int * int -&gt; string" Usage="System.Convert.ToBase64String (inArray, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablica 8-bitowych liczb całkowitych bez znaku.</param>
        <param name="offset">Przesunięcie w <c>inArray</c>.</param>
        <param name="length">Liczba elementów <c>inArray</c> do przekonwertowania.</param>
        <summary>Konwertuje podzbiór tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr. Parametry określają podzbiór przesunięcia w tablicy wejściowej, a liczba elementów w tablicy, do konwersji.</summary>
        <returns>Reprezentacja ciągu w podstawowej 64 <paramref name="length" /> elementy <paramref name="inArray" />, zaczynając od pozycji <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy `inArray` są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Bezwartościowy znak „=” jest używany w celu dopełniania na końcu.  
  
 `offset` i `length` parametry są podpisane liczby 32-bitowych. `offset` Parametr jest liczony od zera.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> lub <paramref name="length" /> jest ujemna.  - lub - <paramref name="offset" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer, options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * int * int * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (inArray, offset, length, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">Tablica 8-bitowych liczb całkowitych bez znaku.</param>
        <param name="offset">Przesunięcie w <c>inArray</c>.</param>
        <param name="length">Liczba elementów <c>inArray</c> do przekonwertowania.</param>
        <param name="options">
          <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> Aby wstawić co 76 znaków podziału wiersza lub <see cref="F:System.Base64FormattingOptions.None" /> do wstawienia nie podziały wiersza.</param>
        <summary>Konwertuje podzbiór tablicę 8-bitowych liczb całkowitych bez znaku reprezentacji ciągu równoważne, który jest algorytmem base-64 cyfr. Parametry Określ podzbiór przesunięcia w tablicy wejściowej, liczba elementów w tablicy, tak aby przekonwertować, a dzieli opcję wstawiania wiersza w wartości zwracanej.</summary>
        <returns>Reprezentacja ciągu w podstawowej 64 <paramref name="length" /> elementy <paramref name="inArray" />, zaczynając od pozycji <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy `inArray` parametru są traktowane jako wartość liczbową i przekonwertowane na reprezentację ciągu w base 64.  
  
 Cyframi typu base-64 uporządkowanymi rosnąco od zera są wielkie litery od „A” do „Z”, małe litery od „a” do „z”, cyfry od „0” do „9” oraz symbole „+” i „/”. Valueless znak "=" jest używana do uzupełnienia końcowe.  
  
 `offset` i `length` parametry są podpisane liczby 32-bitowych. `offset` Parametr jest liczony od zera.  
  
> [!IMPORTANT]
>  <xref:System.Convert.ToBase64String%2A> Metoda jest przeznaczona do przetworzenia tablica pojedynczy bajt, która zawiera wszystkie dane, które mają być kodowane. Aby zakodować dane ze strumienia, należy użyć <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> klasy.  
  
 Jeśli `options` ustawiono parametr <xref:System.Base64FormattingOptions.InsertLineBreaks> i dane wyjściowe z konwersji jest dłuższa niż 76 znaków, podział wiersza jest wstawiany co 76 znaków. Podział wiersza jest zdefiniowany jako znak powrotu karetki (U + 000D) znak wiersza źródła znaku (U + 000A). Aby uzyskać więcej informacji, zobacz RFC 2045, "Multipurpose Internet Mail Extensions", w [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Convert.ToBase64String%2A> metody. Dane wejściowe są podzielone na grupy po 3 bajty (24 bity) każda. W związku z tym każda grupa składa się z czterech liczb 6-bitowych mieszczących się w zakresie dziesiętnym od 0 do 63. W tym przykładzie istnieje 85 grup 3-bajtowych z pozostałym jednym bajtem. Pierwsza grupa składa się z wartości szesnastkowych 00, 01 i 02, które dają cztery wartości 6-bitowe odpowiadające wartościom dziesiętnym 0, 0, 4 i 2. Te cztery wartości odpowiadają cyfr base-64 "A", "", "E" i "C" na początku danych wyjściowych.  
  
 Jeśli liczba całkowita składająca się z 3-bajtowych grup nie istnieje, pozostałe bajty są dopełniane zerami w celu utworzenia kompletnej grupy. W tym przykładzie wartością ostatniego bajtu jest szesnastkowe FF. Pierwszych 6 bitów odpowiada dziesiętnej liczbie 63, co odpowiada cyfrze „/” w formacie base-64 na końcu danych wyjściowych. Kolejne 2 bity są dopełniane zerami, dając w efekcie dziesiętną liczbę 48, co odpowiada cyfrze „w” w formacie base-64. Ostatnie dwie wartości 6-bitowe służą dopełnieniu i odpowiadają bezwartościowemu znakowi dopełniającemu „=”.  
  
 [!code-cpp[convert.tobase64string#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64string/CPP/tb64s.cpp#1)]
 [!code-csharp[convert.tobase64string#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64string/CS/tb64s.cs#1)]
 [!code-vb[convert.tobase64string#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64string/VB/tb64s.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> lub <paramref name="length" /> jest ujemna.  - lub - <paramref name="offset" /> plus <paramref name="length" /> jest większa niż długość <paramref name="inArray" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> nie jest prawidłową <see cref="T:System.Base64FormattingOptions" /> wartość.</exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBoolean">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na równoważną wartość logiczna.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(bool value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : bool -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna do zwrócenia.</param>
        <summary>Zwraca określoną wartość logiczną; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : byte -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Byte> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#12)]
 [!code-csharp[System.Convert.ToBoolean#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#12)]
 [!code-vb[System.Convert.ToBoolean#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(char value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : char -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : DateTime -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, że próba konwersji <xref:System.DateTime> zwraca wartość typu Boolean <xref:System.InvalidCastException>.  
  
 [!code-cpp[System.Convert Snippets#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#20)]
 [!code-csharp[System.Convert Snippets#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#20)]
 [!code-vb[System.Convert Snippets#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : decimal -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczbę do przekonwertowania.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej na równoważną wartość logiczna.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Decimal> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#2)]
 [!code-csharp[System.Convert.ToBoolean#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#2)]
 [!code-vb[System.Convert.ToBoolean#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(double value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : double -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logicznej na <xref:System.Double> i <xref:System.Double> na wartość logiczną.  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(short value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int16 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważną wartość logiczna.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int16> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#3)]
 [!code-csharp[System.Convert.ToBoolean#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#3)]
 [!code-vb[System.Convert.ToBoolean#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(int value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#4)]
 [!code-csharp[System.Convert.ToBoolean#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#4)]
 [!code-vb[System.Convert.ToBoolean#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(long value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int64 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważną wartość logiczna.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int64> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#5)]
 [!code-csharp[System.Convert.ToBoolean#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#5)]
 [!code-vb[System.Convert.ToBoolean#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : obj -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważną wartość logiczna.</summary>
        <returns>
          <see langword="true" /> lub <see langword="false" />, co odzwierciedla wartość zwrócona przez wywołanie <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> metody dla typu źródłowego <paramref name="value" />. Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę wartości obiektu <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#11)]
 [!code-csharp[System.Convert.ToBoolean#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#11)]
 [!code-vb[System.Convert.ToBoolean#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> jest ciągiem, który nie jest równa <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersji <paramref name="value" /> do <see cref="T:System.Boolean" /> nie jest obsługiwane.</exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : sbyte -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważną wartość logiczna.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.SByte> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#6)]
 [!code-csharp[System.Convert.ToBoolean#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#6)]
 [!code-vb[System.Convert.ToBoolean#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.SByte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(float value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : single -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Single> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#7)]
 [!code-csharp[System.Convert.ToBoolean#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#7)]
 [!code-vb[System.Convert.ToBoolean#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : string -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający wartość każdej <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</param>
        <summary>Konwertuje określoną reprezentację ciągu wartość logiczną na jej odpowiednik Boolean.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.TrueString" />, lub <see langword="false" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.FalseString" /> lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do pomyślnego konwersji występuje `value` parametru musi być równa albo <xref:System.Boolean.TrueString?displayProperty=nameWithType>, stała, którego wartość jest `True`, <xref:System.Boolean.FalseString?displayProperty=nameWithType>, stała, którego wartość jest `False`, lub musi być `null`. Przy porównywaniu `value` z <xref:System.Boolean.TrueString?displayProperty=nameWithType> i <xref:System.Boolean.FalseString?displayProperty=nameWithType>, metoda ignoruje wielkość również jako wiodące i końcowe biały znak.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> metodę, aby przekonwertować różnych ciągów na wartości logiczne.  
  
 [!code-cpp[System.Convert.ToBoolean#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean1.cpp#1)]
 [!code-csharp[System.Convert.ToBoolean#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/ToBoolean1.cs#1)]
 [!code-vb[System.Convert.ToBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/ToBoolean1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie równa się <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint16 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.UInt16> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#8)]
 [!code-csharp[System.Convert.ToBoolean#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#8)]
 [!code-vb[System.Convert.ToBoolean#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint32 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#9)]
 [!code-csharp[System.Convert.ToBoolean#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#9)]
 [!code-vb[System.Convert.ToBoolean#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint64 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważną wartość logiczną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> nie jest równa zero; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.UInt64> wartości do <xref:System.Boolean> wartości.  
  
 [!code-cpp[System.Convert.ToBoolean#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#10)]
 [!code-csharp[System.Convert.ToBoolean#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#10)]
 [!code-vb[System.Convert.ToBoolean#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : obj * IFormatProvider -&gt; bool" Usage="System.Convert.ToBoolean (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważną wartość logiczna, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>
          <see langword="true" /> lub <see langword="false" />, co odzwierciedla wartość zwrócona przez wywołanie <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> metody dla typu źródłowego <paramref name="value" />. Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Typy podstawowe Ignoruj `provider` parametru; jednak parametr można użyć, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> metody. Ta metoda zwraca `true` Jeśli dowolny z wartości innych niż odrzucone tablicy jest różna od zera. <xref:System.IFormatProvider> Obiektu określa, jak elementy zostaną odrzucone dla tego obliczenia.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> jest ciągiem, który nie jest równa <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersji <paramref name="value" /> do <see cref="T:System.Boolean" /> nie jest obsługiwane.</exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : string * IFormatProvider -&gt; bool" Usage="System.Convert.ToBoolean (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający wartość każdej <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Ten parametr jest ignorowany.</param>
        <summary>Konwertuje określoną reprezentację ciągu wartość logiczną na jej odpowiednik Boolean, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.TrueString" />, lub <see langword="false" /> Jeśli <paramref name="value" /> jest równe <see cref="F:System.Boolean.FalseString" /> lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie równa się <see cref="F:System.Boolean.TrueString" /> lub <see cref="F:System.Boolean.FalseString" />.</exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na liczbę całkowitą bez znaku 8-bitową.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Boolean) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(bool value);" />
      <MemberSignature Language="F#" Value="static member ToByte : bool -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 8-bitową liczbę całkowitą bez znaku.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.Byte> wartości.  
  
 [!code-cpp[System.Convert.ToByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.tobyte/cpp/tobyte1.cpp#1)]
 [!code-csharp[System.Convert.ToByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#1)]
 [!code-vb[System.Convert.ToByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToByte : byte -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do zwrócenia.</param>
        <summary>Zwraca określony 8-bitową liczbę całkowitą bez znaku; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Char) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(char value);" />
      <MemberSignature Language="F#" Value="static member ToByte : char -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 8-bitową liczbę całkowitą bez znaku.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca wartość bajtu bez znaku, która reprezentuje kod liczbowych <xref:System.Char> obiekt przekazywany do niego. W programie .NET Framework <xref:System.Char> obiekt jest 16-bitową wartość. Oznacza to, że metoda jest odpowiednia dla zwracanie kodów liczbowych znaków w zakresie znaków ASCII lub w zakresach kontrolek C0 Unicode i podstawowe alfabetu łacińskiego i formanty C1 i uzupełnienie Latin-1, z 0000 U + do U + 00FF.  
  
   
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Char> wartości do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#2)]
 [!code-vb[System.Convert.ToByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę większą niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As DateTime) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToByte : DateTime -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Decimal) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToByte : decimal -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczbę do przekonwertowania.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Decimal> i <xref:System.Decimal> do wartości <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Double) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(double value);" />
      <MemberSignature Language="F#" Value="static member ToByte : double -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Double> i <xref:System.Double> do wartości <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Short) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(short value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int16 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int16> wartości do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#3)]
 [!code-vb[System.Convert.ToByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(int value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int32> wartości do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#4)]
 [!code-vb[System.Convert.ToByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Long) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(long value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int64 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.Int64> wartości do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#5)]
 [!code-vb[System.Convert.ToByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToByte : obj -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na liczbę całkowitą bez znaku 8-bitową.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Convert.ToByte%28System.Object%29> do przekonwertowania na tablicę obiektów do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#6)]
 [!code-vb[System.Convert.ToByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie właściwości dla <see cref="T:System.Byte" /> wartość.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.  - lub - konwersja z <paramref name="value" /> do <see cref="T:System.Byte" /> typ nie jest obsługiwany.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As SByte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToByte : sbyte -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do skonwertowania.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę <xref:System.SByte> wartości do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#7)]
 [!code-vb[System.Convert.ToByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Byte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Single) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(float value);" />
      <MemberSignature Language="F#" Value="static member ToByte : single -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Single> do wartości <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#19)]
 [!code-csharp[System.Convert Snippets#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#19)]
 [!code-vb[System.Convert Snippets#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" /> lub mniej niż <see cref="F:System.Byte.MinValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToByte : string -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 8-bitową.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToByte%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie definiuje tablicy ciągów i próbuje przekonwertować każdego ciągu do <xref:System.Byte>.  Należy pamiętać, że podczas `null` analizuje ciągu na wartość 0, <xref:System.String.Empty?displayProperty=nameWithType> zgłasza <xref:System.FormatException>. Należy również zauważyć, że podczas spacje początkowe i końcowe przeanalizować pomyślnie, formatowanie symbole, takie jak symbole waluty separatorów grup lub separatorów dziesiętnych nie.  
  
 [!code-csharp[System.Convert.ToByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/ToByte5.cs#15)]
 [!code-vb[System.Convert.ToByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte5.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UShort) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint16 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku 16-bitowych do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#8)]
 [!code-vb[System.Convert.ToByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint32 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#9)]
 [!code-vb[System.Convert.ToByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As ULong) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint64 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę niepodpisane długich liczb całkowitych na <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#10)]
 [!code-vb[System.Convert.ToByte#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToByte : obj * IFormatProvider -&gt; byte" Usage="System.Convert.ToByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na liczbę całkowitą bez znaku 8-bitową przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `ByteString` klasa implementująca <xref:System.IConvertible> interfejsu. Klasa przechowuje reprezentację wartości typu bajtowego wraz z polem logowania tak, aby mógł reprezentować obie wartości bajtu znakiem i bez znaku.  
  
 [!code-csharp[System.Convert.ToByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#12)]
 [!code-vb[System.Convert.ToByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#12)]  
  
 Poniższy przykład tworzy kilka `ByteString` obiektów i wywołania <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> metodę, aby przekonwertować je na wartości bajtów. Które zastosowano <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> metoda opakowuje wywołanie <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> metody obiektu do skonwertowania.  
  
 [!code-csharp[System.Convert.ToByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#13)]
 [!code-vb[System.Convert.ToByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w formacie właściwości dla <see cref="T:System.Byte" /> wartość.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.  - lub - konwersja z <paramref name="value" /> do <see cref="T:System.Byte" /> typ nie jest obsługiwany.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToByte : string * IFormatProvider -&gt; byte" Usage="System.Convert.ToByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 8-bitową całkowitą bez znaku, przy użyciu określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Całkowitą bez znaku 8-bitową, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład tworzy niestandardowy <xref:System.Globalization.NumberFormatInfo> obiektu, który definiuje dodatnią Zaloguj się jako "pos" i znaku minus jako "minus", która jest używana w wywołaniach <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> metody. Następnie wywołuje <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> metody, aby przekonwertować każdego elementu w tablicy ciągów do <xref:System.Byte> wartości.  
  
 [!code-csharp[System.Convert.ToByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte4.cs#14)]
 [!code-vb[System.Convert.ToByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte4.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, fromBase As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToByte : string * int -&gt; byte" Usage="System.Convert.ToByte (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 8-bitową nieznakowaną liczbą całkowitą.</summary>
        <returns>Całkowitą bez znaku 8-bitową odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ <xref:System.Byte> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku. Innymi słowy wszystkie bity osiem są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny. W związku z tym jest możliwość pisania kodu, w którym bajtu ze znakiem wartość, która jest poza zakresem <xref:System.Byte> — typ danych jest konwertowana na <xref:System.Byte> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.SByte.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80 skonwertować 128."  
  
 [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]
 [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Poniższy przykład przedstawia jedną technika dla zapewnienia, że metoda niewłaściwie nie używać bez znaku binarna reprezentacja podczas konwertowania reprezentację ciągu szesnastkowego do <xref:System.Byte> wartości. W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku. Gdy przykładzie konwertuje wartości z powrotem do <xref:System.Byte> wartości, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem. Jeśli tak, a jego bit znaczących jest ustawiony (który wskazuje, że wartość jest ujemna, i że używa dwóch jest dopełnienia zamiast niepodpisane binarna reprezentacja), metoda zgłasza wyjątek.  
  
 [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]
 [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład próbuje przemiennie zinterpretować tablica ciągów jako reprezentacja wartości binarnej, ósemkowe, decimal i szesnastkowe.  
  
 [!code-csharp[System.Convert.ToByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte2.cs#11)]
 [!code-vb[System.Convert.ToByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje numer innej niż podstawowa 10 bez znaku, jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje podstawowy 10 numer bez znaku, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Byte.MinValue" /> lub większa niż <see cref="F:System.Byte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToChar">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na znak Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Boolean) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(bool value);" />
      <MemberSignature Language="F#" Value="static member ToChar : bool -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Byte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToChar : byte -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku do jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę bajtów bez znaku do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#1)]
 [!code-vb[System.Convert.ToChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(char value);" />
      <MemberSignature Language="F#" Value="static member ToChar : char -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode do zwrócenia.</param>
        <summary>Zwraca określoną wartość znaku Unicode; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As DateTime) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToChar : DateTime -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Decimal) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToChar : decimal -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować <xref:System.Decimal> do <xref:System.Char>i zgłasza <xref:System.InvalidCastException> w przypadku awarii.  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Double) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(double value);" />
      <MemberSignature Language="F#" Value="static member ToChar : double -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Short) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(short value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int16 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na jej odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych ze znakiem do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#2)]
 [!code-vb[System.Convert.ToChar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(int value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowej do jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę liczb całkowitych ze znakiem do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#3)]
 [!code-vb[System.Convert.ToChar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Long) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(long value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int64 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować długich liczb całkowitych do <xref:System.Char>i zgłasza <xref:System.OverflowException> w przypadku awarii.  
  
 [!code-cpp[System.Convert Snippets#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#8)]
 [!code-csharp[System.Convert Snippets#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#8)]
 [!code-vb[System.Convert Snippets#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToChar : obj -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <summary>Konwertuje wartość określonego obiektu na znak Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem wartości, lub <see cref="F:System.Char.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#9)]
 [!code-vb[System.Convert.ToChar#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest pustym ciągiem.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersji <paramref name="value" /> do <see cref="T:System.Char" /> nie jest obsługiwane.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As SByte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToChar : sbyte -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na jej odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę bajtów podpisem do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#4)]
 [!code-vb[System.Convert.ToChar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Single) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(float value);" />
      <MemberSignature Language="F#" Value="static member ToChar : single -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToChar : string -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg o długości 1.</param>
        <summary>Konwertuje pierwszy znak określony ciąg znaków Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem pierwszy i tylko znak w <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` musi być ciągiem o długości jednego znaku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Char.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy ciągów do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#5)]
 [!code-vb[System.Convert.ToChar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Długość <paramref name="value" /> nie jest 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UShort) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint16 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku do jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych na <xref:System.Char> wartość.  
  
 [!code-csharp[System.Convert.ToChar#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#6)]
 [!code-vb[System.Convert.ToChar#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UInteger) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint32 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku do jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku do <xref:System.Char> wartości.  
  
 [!code-csharp[System.Convert.ToChar#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#7)]
 [!code-vb[System.Convert.ToChar#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As ULong) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint64 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku do jego odpowiednik znaku Unicode.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych na <xref:System.Char> wartość.  
  
 [!code-csharp[System.Convert.ToChar#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#8)]
 [!code-vb[System.Convert.ToChar#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToChar : obj * IFormatProvider -&gt; char" Usage="System.Convert.ToChar (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na jej odpowiednik znaków Unicode, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem <paramref name="value" />, lub <see cref="F:System.Char.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do `ToChar` metody. Ta metoda zwraca znak Unicode, którego wartość jest średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest pustym ciągiem.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersji <paramref name="value" /> do <see cref="T:System.Char" /> nie jest obsługiwane.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż <see cref="F:System.Char.MinValue" /> lub większa niż <see cref="F:System.Char.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToChar : string * IFormatProvider -&gt; char" Usage="System.Convert.ToChar (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg o długości 1 lub <see langword="null" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Ten parametr jest ignorowany.</param>
        <summary>Konwertuje pierwszy znak określony ciąg znaków Unicode, przy użyciu określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Znak Unicode, który jest odpowiednikiem pierwszy i tylko znak w <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` musi być ciągiem o długości jednego znaku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Char.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentację ciągu <xref:System.Char> wartości z `ToChar` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana. W przykładzie pokazano, że dostawca formatu nie odwołuje się.  
  
 [!code-cpp[System.Convert.ToNonNum_String#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CPP/stringnonnum.cpp#2)]
 [!code-csharp[System.Convert.ToNonNum_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CS/stringnonnum.cs#2)]
 [!code-vb[System.Convert.ToNonNum_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/VB/stringnonnum.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Długość <paramref name="value" /> nie jest 1.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDateTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość do <see cref="T:System.DateTime" /> wartości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Boolean) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : bool -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Byte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : byte -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Char) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(char value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : char -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : DateTime -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny.</param>
        <summary>Zwraca określony <see cref="T:System.DateTime" /> obiekt; nie jest wykonywana.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Decimal) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : decimal -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczbę do przekonwertowania.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(double value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : double -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Wartość zmiennoprzecinkowe podwójnej precyzji do przekonwertowania.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Short) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(short value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int16 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(int value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(long value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int64 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : obj -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu do <see cref="T:System.DateTime" /> obiektu.</summary>
        <returns>Data i godzina równoważne wartości <paramref name="value" />, lub datę i godzinę odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do konwersji zakończyła się powodzeniem, typ środowiska uruchomieniowego `value` parametru musi być równa albo <xref:System.DateTime> lub <xref:System.String>, lub `value` musi być `null`. W przeciwnym razie metoda zgłasza <xref:System.InvalidCastException>. Ponadto jeśli `value` ciągiem i musi zawierać prawidłową reprezentację wartości daty i godziny w bieżącej kultury lub <xref:System.FormatException> jest generowany.  
  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Następujące przykładowe wywołania <xref:System.Convert.ToDateTime%28System.Object%29> metody z różnymi <xref:System.Object> zmiennych.  
  
 [!code-csharp[System.Convert.ToDateTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime1.cs#1)]
 [!code-vb[System.Convert.ToDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest prawidłową datę i godzinę.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As SByte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : sbyte -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Single) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(float value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : single -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Wartość zmiennoprzecinkowa pojedynczej precyzji do przekonwertowania.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : string -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Reprezentacja ciągu daty i godziny.</param>
        <summary>Konwertuje określoną reprezentację ciągu daty i godziny na równoważną wartość daty i godziny.</summary>
        <returns>Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, wartość zwracana jest wynik wywołania <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> metoda `value` przy użyciu formatowania informacji w <xref:System.Globalization.DateTimeFormatInfo> obiekt, który został zainicjowany dla bieżącej kultury. `value` Argument musi zawierać reprezentację Data i godzina w jednym z formatów opisanych w <xref:System.Globalization.DateTimeFormatInfo> tematu. Jeśli `value` jest `null`, metoda zwraca <xref:System.DateTime.MinValue?displayProperty=nameWithType>.  
  
 Ta metoda próbuje przeanalizować `value` całkowicie i uniknąć zgłaszanie <xref:System.FormatException>. Ukończy dzień, brak miesiąc i rok informacji z bieżącą datą. Jeśli `value` zawiera wyłącznie data i czas bez, ta metoda zakłada czas północy. Początkowe wewnętrznego, ani końcowych znaków spacji w `value` są ignorowane.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Convert.ToDateTime%2A> metodę, aby przekonwertować różnych reprezentacji ciągu daty i godziny do <xref:System.DateTime> wartości.  
  
 [!code-csharp[System.Convert.ToDateTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime2.cs#2)]
 [!code-vb[System.Convert.ToDateTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest poprawnie sformatowana daty i czasu ciągu.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UShort) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint16 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UInteger) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint32 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As ULong) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint64 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : obj * IFormatProvider -&gt; DateTime" Usage="System.Convert.ToDateTime (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu do <see cref="T:System.DateTime" /> obiekt, za pomocą określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący datę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej daty. `provider` związane z konwersji `value` Jeśli typ środowiska uruchomieniowego `value` jest <xref:System.String>, lub jeśli `value` jest typ zdefiniowany przez użytkownika, którego <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> implementacji sprawia, że użycie `provider`. Jeśli typ środowiska uruchomieniowego `value` jest <xref:System.String> i `provider` jest `null`, <xref:System.Globalization.CultureInfo> jest używany obiekt, który reprezentuje bieżącej kultury wątku.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano formatu niestandardowego dostawcy, `CustomProvider`, których <xref:System.IFormatProvider.GetFormat%2A> metoda wysyła komunikat do konsoli, która została wywołana, a następnie zwraca <xref:System.Globalization.DateTimeFormatInfo> obiektu kultury, którego nazwa została przekazana jako parametr do swojej klasy Konstruktor. Każdy z tych `CustomProvider` obiektów służy do konwertowania elementów w tablicy obiektów do wartości daty i godziny. Dane wyjściowe wskazuje, że `CustomProvider` obiekt jest używany podczas konwersji tylko wtedy, gdy typ `value` parametr jest <xref:System.String>.  
  
 [!code-csharp[System.Convert.ToDateTime#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/todatetime4.cs#4)]
 [!code-vb[System.Convert.ToDateTime#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/todatetime4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest prawidłową datę i godzinę.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : string * IFormatProvider -&gt; DateTime" Usage="System.Convert.ToDateTime (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne datę i godzinę, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Data i godzina równoważne wartości <paramref name="value" />, lub Data i godzina odpowiednik <see cref="F:System.DateTime.MinValue" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.DateTimeFormatInfo> obiektu. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.DateTimeFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje wartości daty z reprezentacji ciągu `ToDateTime` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.  
  
 [!code-csharp[System.Convert.ToDateTime#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime3.cs#3)]
 [!code-vb[System.Convert.ToDateTime#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest poprawnie sformatowana daty i czasu ciągu.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDecimal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na liczbę dziesiętną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Boolean) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : bool -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczna równoważną liczbę dziesiętną.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Byte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : byte -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważną liczbę dziesiętną.</summary>
        <returns>Liczba dziesiętna, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Decimal> wartość.  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Char) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(char value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : char -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować <xref:System.Char> do wartości <xref:System.Decimal>i zgłasza <xref:System.InvalidCastException> w przypadku awarii.  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As DateTime) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : DateTime -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : decimal -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna.</param>
        <summary>Zwraca określoną liczbą dziesiętną; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Double) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(double value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : double -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Decimal> Wartość zwrócona przez tę metodę zawiera maksymalnie 15 cyfr znaczących. Jeśli `value` parametr zawiera więcej niż 15 cyfr znaczących, jest zaokrąglana, przy użyciu zaokrąglenie do najbliższej. Poniższy przykład przedstawia sposób <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> metoda używa zaokrąglania do najbliższego powrotu <xref:System.Decimal> wartości z 15 cyfr znaczących.  
  
 [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Double> do wartości <xref:System.Decimal> wartość.  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Decimal.MaxValue" /> lub mniej niż <see cref="F:System.Decimal.MinValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Short) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(short value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int16 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych ze znakiem do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(int value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę liczb całkowitych ze znakiem do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#3)]
 [!code-vb[System.Convert.ToDecimal2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Long) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(long value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int64 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Int64> do wartości <xref:System.Decimal> wartość.  
  
 [!code-cpp[System.Convert Snippets#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#10)]
 [!code-csharp[System.Convert Snippets#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#10)]
 [!code-vb[System.Convert Snippets#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : obj -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważne dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład podejmuje próbę przekonwertowania każdego elementu w tablicy obiektów do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#4)]
 [!code-vb[System.Convert.ToDecimal2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Decimal" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As SByte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : sbyte -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtów podpisem <xref:System.Decimal> wartość.  
  
 [!code-csharp[System.Convert.ToDecimal2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#5)]
 [!code-vb[System.Convert.ToDecimal2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Single) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(float value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : single -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Decimal> Wartość zwrócona przez tę metodę zawiera maksymalnie 7 cyfr znaczących. Jeśli `value` parametr zawiera więcej niż siedmiu cyfr znaczących, jest zaokrąglana, przy użyciu zaokrąglenie do najbliższej. Poniższy przykład przedstawia sposób <xref:System.Convert.ToDecimal%28System.Single%29> metoda używa zaokrąglania do najbliższego powrotu <xref:System.Decimal> wartości z siedmiu cyfr znaczących.  
  
 [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład podejmuje próbę przekonwertowania każdego elementu w tablicy <xref:System.Single> wartości do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#6)]
 [!code-vb[System.Convert.ToDecimal2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Decimal.MaxValue" /> lub mniej niż <see cref="F:System.Decimal.MinValue" />.</exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : string -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważną liczbę dziesiętną.</summary>
        <returns>Odpowiadającą liczbie dziesiętnej <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToDecimal%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie `ToDecimal`. Próbuje przekonwertować <xref:System.String> do <xref:System.Decimal>i zgłasza możliwych wyjątków, które mogą wystąpić podczas konwersji.  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UShort) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint16 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważną liczbę dziesiętną.</summary>
        <returns>Liczba dziesiętna, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę 16-bitowych liczb całkowitych bez znaku do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#7)]
 [!code-vb[System.Convert.ToDecimal2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint32 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę liczb całkowitych bez znaku do <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#8)]
 [!code-vb[System.Convert.ToDecimal2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As ULong) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint64 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważną liczbę dziesiętną.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje tablicę niepodpisane długich liczb całkowitych na <xref:System.Decimal> wartości.  
  
 [!code-csharp[System.Convert.ToDecimal2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#9)]
 [!code-vb[System.Convert.ToDecimal2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : obj * IFormatProvider -&gt; decimal" Usage="System.Convert.ToDecimal (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na równoważną liczbę dziesiętną przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Liczbą dziesiętną, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu.  
  
 [!code-csharp[System.Convert.ToDecimal2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#10)]
 [!code-vb[System.Convert.ToDecimal2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#10)]  
  
 W poniższym przykładzie pokazano, że podczas `Temperature` obiekt został przekazany jako parametr <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> metody <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> implementacja `Temperature` klasy jest wywoływana w celu wykonania konwersji.  
  
 [!code-csharp[System.Convert.ToDecimal2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#11)]
 [!code-vb[System.Convert.ToDecimal2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Decimal" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : string * IFormatProvider -&gt; decimal" Usage="System.Convert.ToDecimal (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważną liczbę dziesiętną przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Odpowiadającą liczbie dziesiętnej <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.Decimal.Parse%2A?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować tablicy ciągów <xref:System.Decimal> wartości przy użyciu <xref:System.Globalization.NumberFormatInfo> obiektów, które reprezentują dwóch różnych kultur.  
  
 [!code-csharp[System.Convert.ToDecimal2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal3.cs#12)]
 [!code-vb[System.Convert.ToDecimal2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal3.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Decimal.MinValue" /> lub większa niż <see cref="F:System.Decimal.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDouble">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : bool -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Boolean> do wartości <xref:System.Double> wartość.  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Byte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : byte -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Byte> do wartości <xref:System.Double> wartość.  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(char value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : char -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As DateTime) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : DateTime -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Decimal) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : decimal -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Decimal> do wartości <xref:System.Double> wartość.  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(double value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : double -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczby zmiennoprzecinkowe podwójnej precyzji do zwrócenia.</param>
        <summary>Zwraca podanej liczbie zmiennoprzecinkowej podwójnej precyzji; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Short) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(short value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int16 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczba zmiennoprzecinkowa podwójnej precyzji odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#1)]
 [!code-vb[System.Convert.ToDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(int value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Int32> do wartości <xref:System.Double> wartość.  
  
 [!code-cpp[System.Convert Snippets#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#3)]
 [!code-csharp[System.Convert Snippets#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#3)]
 [!code-vb[System.Convert Snippets#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Long) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(long value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int64 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy długich liczb całkowitych ze znakiem do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#2)]
 [!code-vb[System.Convert.ToDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : obj -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdej wartości w tablicy obiektów do <xref:System.Double>.  
  
 [!code-csharp[System.Convert.ToDouble#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#3)]
 [!code-vb[System.Convert.ToDouble#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Double" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As SByte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : sbyte -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.SByte> wartości do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#4)]
 [!code-vb[System.Convert.ToDouble#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Single) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(float value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : single -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Single> do wartości <xref:System.Double> wartość.  
  
 [!code-cpp[System.Convert Snippets#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#6)]
 [!code-csharp[System.Convert Snippets#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#6)]
 [!code-vb[System.Convert Snippets#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : string -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczby zmiennoprzecinkowe podwójnej precyzji odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToDouble%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych <xref:System.Double>. To przykładowe dane wyjściowe z systemu, w których bieżącej kultury jest en US.  
  
 [!code-csharp[System.Convert.ToDouble#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/example8.cs#8)]
 [!code-vb[System.Convert.ToDouble#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/example8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UShort) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint16 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt16> wartości do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#5)]
 [!code-vb[System.Convert.ToDouble#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint32 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt32> wartości do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#6)]
 [!code-vb[System.Convert.ToDouble#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As ULong) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint64 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne liczbie zmiennoprzecinkowej podwójnej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.UInt64> wartości do <xref:System.Double> wartości.  
  
 [!code-csharp[System.Convert.ToDouble#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#7)]
 [!code-vb[System.Convert.ToDouble#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDouble : obj * IFormatProvider -&gt; double" Usage="System.Convert.ToDouble (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu do liczby zmiennoprzecinkowe podwójnej precyzji, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Liczbie zmiennoprzecinkowej podwójnej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do `ToDouble` metody. Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Double" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDouble : string * IFormatProvider -&gt; double" Usage="System.Convert.ToDouble (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne podwójnej precyzji liczbie zmiennoprzecinkowej, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Liczby zmiennoprzecinkowe podwójnej precyzji odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.Double.Parse%2A?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Double.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji ciągu <xref:System.Double> wartości z `ToDouble` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.  
  
 [!code-csharp[System.Convert.ToReals_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToReals_String/CS/todouble.cs#2)]
 [!code-vb[System.Convert.ToReals_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToReals_String/VB/todouble.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Double.MinValue" /> lub większa niż <see cref="F:System.Double.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość do 16-bitową liczbę całkowitą ze znakiem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Boolean) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : bool -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logiczne `true` i `false` do <xref:System.Int16> wartości.  
  
 [!code-csharp[System.Convert.ToInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#1)]
 [!code-vb[System.Convert.ToInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Byte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : byte -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Byte> wartości 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#2)]
 [!code-vb[System.Convert.ToInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Char) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : char -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Char> wartości 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#3)]
 [!code-vb[System.Convert.ToInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As DateTime) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : DateTime -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Decimal) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : decimal -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości 16-bitową liczbę całkowitą ze znakiem. Które pokazano w przykładzie dowolnej ułamkowych części <xref:System.Decimal> wartość jest zaokrąglana podczas wykonywania konwersji.  
  
 [!code-csharp[System.Convert.ToInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#4)]
 [!code-vb[System.Convert.ToInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Double) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : double -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości 16-bitową liczbę całkowitą ze znakiem. Które pokazano w przykładzie dowolnej ułamkowych części <xref:System.Double> wartość jest zaokrąglana przed przeprowadzeniem konwersji.  
  
 [!code-csharp[System.Convert.ToInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#5)]
 [!code-vb[System.Convert.ToInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int16 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitową liczbę całkowitą ze znakiem do zwrócenia.</param>
        <summary>Zwraca określony 16-bitową liczbę całkowitą ze znakiem; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>Odpowiednik 16-bitową liczbę całkowitą ze znakiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#6)]
 [!code-vb[System.Convert.ToInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Long) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int64 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#7)]
 [!code-vb[System.Convert.ToInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : obj -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#8)]
 [!code-vb[System.Convert.ToInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Int16" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As SByte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : sbyte -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy bajtów podpisem 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#9)]
 [!code-vb[System.Convert.ToInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Single) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : single -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#10)]
 [!code-vb[System.Convert.ToInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" /> lub mniej niż <see cref="F:System.Int16.MinValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToInt16%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje 16-bitowych liczb całkowitych z reprezentacji ciągu `ToInt16` metodę, przy użyciu domyślnego formatowania.  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UShort) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint16 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#11)]
 [!code-vb[System.Convert.ToInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint32 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#12)]
 [!code-vb[System.Convert.ToInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As ULong) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint64 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#13)]
 [!code-vb[System.Convert.ToInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : obj * IFormatProvider -&gt; int16" Usage="System.Convert.ToInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do `ToInt16` metody. Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie dla <see cref="T:System.Int16" /> typu.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string * IFormatProvider -&gt; int16" Usage="System.Convert.ToInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje 16-bitowych liczb całkowitych z reprezentacji ciągu `ToInt16` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, fromBase As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string * int -&gt; int16" Usage="System.Convert.ToInt16 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 16-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>16-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia. Innymi słowy metoda zawsze interpretuje bit binarne najwyższej kolejności liczby całkowitej (bit 15) jako jego bitu znaku. W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int16> — typ danych jest konwertowana na <xref:System.Int16> wartość bez metody generowania wyjątku. Następujących zwiększa przykład <xref:System.Int16.MaxValue?displayProperty=nameWithType> przez jedną, konwertuje wynikowa liczba na jej reprezentację ciągu szesnastkowego, a następnie wywołuje <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000 skonwertować -32768."  
  
 [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]
 [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio pobierając pierwszy znak wartości liczbowej przed przekonwertowaniem go na jej reprezentację ciągu szesnastkowego. Zgłoś wyjątek, jeśli został dodatnią oryginalnej wartości, ale konwersji do typu integer daje wartość ujemną.  
  
 [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]
 [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]  
  
   
  
## Examples  
 Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów jako ciąg szesnastkowy i przekonwertować go do 16-bitową liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_2.cs#14)]
 [!code-vb[System.Convert.ToInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_2.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje liczbą innej niż podstawowa 10 podpisany jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int16.MinValue" /> lub większa niż <see cref="F:System.Int16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość całkowita 32-bitowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : bool -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne całkowita 32-bitowych.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Boolean> wartości `true` i `false` do liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#1)]
 [!code-vb[System.Convert.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : byte -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne całkowita 32-bitowych.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy bajtów na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#2)]
 [!code-vb[System.Convert.ToInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : char -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne całkowita 32-bitowych.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ToInt32%28System.Char%29> Metoda zwraca 32-bitowe liczby całkowite ze znakiem reprezentuje jednostkę zakodowanego kodu UTF-16 `value` argumentu. Jeśli `value` nie jest dwuskładnikowego lub znakiem zastępczym wysokiego poziomu, zwrócona wartość reprezentuje również punkt kodu Unicode o wartości.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Char> wartości na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#3)]
 [!code-vb[System.Convert.ToInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : DateTime -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : decimal -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]
 [!code-vb[System.Convert.ToInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : double -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości aninteger.  
  
 [!code-csharp[System.Convert.ToInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#5)]
 [!code-vb[System.Convert.ToInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int16 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#6)]
 [!code-vb[System.Convert.ToInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do zwrócenia.</param>
        <summary>Zwraca określony całkowita 32-bitowy; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int64 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#7)]
 [!code-vb[System.Convert.ToInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : obj -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu całkowita 32-bitowych.</summary>
        <returns>32-bitowe całkowita odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli`value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#8)]
 [!code-vb[System.Convert.ToInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : sbyte -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne całkowita 32-bitowych.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy bajtów podpisem na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#9)]
 [!code-vb[System.Convert.ToInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : single -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#10)]
 [!code-vb[System.Convert.ToInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> lub mniej niż <see cref="F:System.Int32.MinValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToInt32%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType> metody.`value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#11)]
 [!code-vb[System.Convert.ToInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint16 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne całkowita 32-bitowych.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku na liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#12)]
 [!code-vb[System.Convert.ToInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint32 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku na liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#13)]
 [!code-vb[System.Convert.ToInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint64 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku na liczbę całkowitą ze znakiem.  
  
 [!code-csharp[System.Convert.ToInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#14)]
 [!code-vb[System.Convert.ToInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : obj * IFormatProvider -&gt; int" Usage="System.Convert.ToInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu całkowita 32-bitowy, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do `ToInt32` metody. Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string * IFormatProvider -&gt; int" Usage="System.Convert.ToInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.Int32.Parse%2A?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej. Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.  
  
 [!code-csharp[System.Convert.ToInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_2.cs#15)]
 [!code-vb[System.Convert.ToInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, fromBase As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string * int -&gt; int" Usage="System.Convert.ToInt32 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 32-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>32-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia. Innymi słowy metoda zawsze interpretuje bit binarne najwyższej kolejności liczby całkowitej (bit 31) jako jego bitu znaku. W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int32> — typ danych jest konwertowana na <xref:System.Int32> wartość bez metody generowania wyjątku. Następujących zwiększa przykład <xref:System.Int32.MaxValue?displayProperty=nameWithType> przez jedną, konwertuje wynikowa liczba na jej reprezentację ciągu szesnastkowego, a następnie wywołuje <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80000000 skonwertować -2147483648."  
  
 [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]
 [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]
 [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio pobierając pierwszy znak wartości liczbowej przed przekonwertowaniem go na jej reprezentację ciągu szesnastkowego. Zgłoś wyjątek, jeśli został dodatnią oryginalnej wartości, ale konwersji do typu integer daje wartość ujemną.  
  
 [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]
 [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]
 [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje liczbą innej niż podstawowa 10 podpisany jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int32.MinValue" /> lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość całkowita 64-bitowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : bool -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne całkowita 64-bitowych.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Boolean> wartości `true` i `false` długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#1)]
 [!code-vb[System.Convert.ToInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Byte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : byte -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne całkowita 64-bitowych.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy bajtów długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#2)]
 [!code-vb[System.Convert.ToInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Char) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : char -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne całkowita 64-bitowych.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element <xref:System.Char> tablicy, tak aby długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#3)]
 [!code-vb[System.Convert.ToInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As DateTime) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : DateTime -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Decimal) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : decimal -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]
 [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Double) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : double -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#5)]
 [!code-vb[System.Convert.ToInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Short) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int16 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#6)]
 [!code-vb[System.Convert.ToInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int64 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Całkowita 64-bitowych.</param>
        <summary>Zwraca określony całkowita 64-bitowy; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy liczb całkowitych długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#7)]
 [!code-vb[System.Convert.ToInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : obj -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na 64-bitowej podpisanej liczby całkowitej.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` nie jest `null`, ta metoda opakowuje wywołanie <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> implementacji typ podstawowy elementu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#8)]
 [!code-vb[System.Convert.ToInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As SByte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : sbyte -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne całkowita 64-bitowych.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#9)]
 [!code-vb[System.Convert.ToInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Single) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : single -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowej podpisanej liczby całkowitej. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#10)]
 [!code-vb[System.Convert.ToInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" /> lub mniej niż <see cref="F:System.Int64.MinValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToInt64%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#11)]
 [!code-vb[System.Convert.ToInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UShort) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint16 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne całkowita 64-bitowych.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#12)]
 [!code-vb[System.Convert.ToInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint32 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#13)]
 [!code-vb[System.Convert.ToInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As ULong) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint64 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#14)]
 [!code-vb[System.Convert.ToInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : obj * IFormatProvider -&gt; int64" Usage="System.Convert.ToInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na 64-bitowych podpisane liczby całkowite, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano klasę, która implementuje <xref:System.IConvertible> i klasy, która implementuje <xref:System.IFormatProvider>. Obiekty klasy, która implementuje <xref:System.IConvertible> przechowywania tablicę <xref:System.Double> wartości. Obiekt każdej klasy jest przekazywany do `ToInt64` metody. Ta metoda zwraca wartość średnią tablica <xref:System.Double> wartości, przy użyciu obiektu, który implementuje <xref:System.IFormatProvider> do określania, jak do obliczenia średniej.  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string * IFormatProvider -&gt; int64" Usage="System.Convert.ToInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.Int64.Parse%2A?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest `IFormatProvider` wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. `NumberFormatInfo` Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, `NumberFormatInfo` dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej. Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.  
  
 [!code-csharp[System.Convert.ToInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_3.cs#16)]
 [!code-vb[System.Convert.ToInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, fromBase As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string * int -&gt; int64" Usage="System.Convert.ToInt64 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 64-bitowych liczbę całkowitą ze znakiem.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia. Innymi słowy metoda zawsze interpretuje bitem binarne najwyższej kolejności długich liczb całkowitych (bit 63) jako jego bitu znaku. W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.Int64> — typ danych jest konwertowana na <xref:System.Int64> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.UInt64.MaxValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0xFFFFFFFFFFFFFFFF skonwertować -1."  
  
 [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]
 [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio określając pierwszy Określa, czy wartość reprezentuje niepodpisany lub poziomu typu ze znakiem podczas konwertowania go na jej reprezentację ciągu szesnastkowego. Zgłoś wyjątek, jeśli oryginalnej wartości był typem unsigned, ale konwersji do typu integer wyznaczające wartość, której bitem znajduje się na.  
  
 [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]
 [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  
  
 Poniższy przykład próbuje interpretacji każdego elementu w tablicy ciągów jako ciąg szesnastkowy i przekonwertować go na długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]
 [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje liczbą innej niż podstawowa 10 podpisany jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Int64.MinValue" /> lub większa niż <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na 8-bitową liczbę całkowitą ze znakiem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Boolean) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(bool value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : bool -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logiczne `true` i `false` do podpisana wartości bajtów.  
  
 [!code-csharp[System.Convert.ToSByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#1)]
 [!code-vb[System.Convert.ToSByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Byte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : byte -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#2)]
 [!code-vb[System.Convert.ToSByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Char) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(char value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : char -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Char> wartości bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#3)]
 [!code-vb[System.Convert.ToSByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As DateTime) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : DateTime -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Decimal) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : decimal -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#4)]
 [!code-vb[System.Convert.ToSByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Double) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(double value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : double -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#5)]
 [!code-vb[System.Convert.ToSByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Short) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(short value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int16 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych ze znakiem 16-bitowych bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#6)]
 [!code-vb[System.Convert.ToSByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(int value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych ze znakiem bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#7)]
 [!code-vb[System.Convert.ToSByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Long) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(long value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int64 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#8)]
 [!code-vb[System.Convert.ToSByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : obj -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : sbyte -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do zwrócenia.</param>
        <summary>Zwraca określony 8-bitową liczbę całkowitą ze znakiem; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Single) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(float value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : single -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 8-bitową liczbę całkowitą ze znakiem. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje określoną reprezentację ciągu liczbą równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub wartość 0 (zero), jeśli wartość jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToSByte%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji ciągu <xref:System.SByte> wartości z `ToSByte` metodę, przy użyciu domyślnego formatowania.  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UShort) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint16 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#11)]
 [!code-vb[System.Convert.ToSByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint32 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy całkowitą bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#12)]
 [!code-vb[System.Convert.ToSByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As ULong) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint64 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bajtu ze znakiem.  
  
 [!code-csharp[System.Convert.ToSByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#13)]
 [!code-vb[System.Convert.ToSByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.SByte.MaxValue" /> lub mniej niż <see cref="F:System.SByte.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSByte : obj * IFormatProvider -&gt; sbyte" Usage="System.Convert.ToSByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na 8-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `ByteString` klasy, która przechowuje zarówno podpisane i niepodpisane bajtów jako ciągi szesnastkowe wraz z polem wskazuje znak liczby bajtów. `ByteString` Klasa implementuje <xref:System.IConvertible> interfejsu. Jego <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> wywołania metody <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> metodę w celu konwersji. W przypadku niepowodzenia zgłasza <xref:System.OverflowException>.  
  
 [!code-csharp[System.Convert.ToSByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#14)]
 [!code-vb[System.Convert.ToSByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#14)]  
  
 W poniższym przykładzie przedstawiono sposób <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> implementacja `ByteString` klasy jest wywoływana przez <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.Convert.ToSByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#15)]
 [!code-vb[System.Convert.ToSByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string * IFormatProvider -&gt; sbyte" Usage="System.Convert.ToSByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 8-bitową liczbę całkowitą ze znakiem, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji ciągu <xref:System.SByte> wartości z `ToSByte` — metoda, za pomocą <xref:System.IFormatProvider> obiektu.  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, fromBase As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string * int -&gt; sbyte" Usage="System.Convert.ToSByte (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 8-bitową liczbę całkowitą ze znakiem.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ znakiem minus nie jest obsługiwana dla innej niż 10 reprezentacje liczbowych <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> metody zakłada, że wartości ujemne używać dwóch jego reprezentacja dopełnienia. Innymi słowy metoda zawsze interpretuje bit znaczących bajtów (bit 7) jako jego bitu znaku. W związku z tym jest możliwość pisania kodu, w którym 10 innych niż podstawowe liczbą, która jest poza zakresem <xref:System.SByte> — typ danych jest konwertowana na <xref:System.SByte> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.Byte.MaxValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0xff skonwertować -1."  
  
 [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]
 [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Jak pokazano w poniższym przykładzie, można zapewnić dojścia metody przepełnienia odpowiednio określając pierwszy Określa, czy wartość reprezentuje niepodpisany lub poziomu typu ze znakiem podczas konwertowania go na jej reprezentację ciągu szesnastkowego. Zgłoś wyjątek, jeśli oryginalnej wartości był typem unsigned, ale konwersja z powrotem do bajtu ze znakiem wyznaczające wartość, której bitem znajduje się na.  
  
 [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]
 [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]  
  
   
  
## Examples  
 Poniższy przykład próbuje interpretować elementów w tablicy ciągów jako wartość binarną, ósemkowego i szesnastkową reprezentację wartości liczbowe w celu ich konwersji do bajtów bez znaku.  
  
 [!code-csharp[System.Convert.ToSByte#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte3.cs#16)]
 [!code-vb[System.Convert.ToSByte#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje liczbą innej niż podstawowa 10 podpisany jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 innych niż podstawowe podpisany liczba, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.SByte.MinValue" /> lub większa niż <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSingle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość do liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Boolean) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(bool value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : bool -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczna równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logiczne `true` i `false` do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#1)]
 [!code-vb[System.Convert.ToSingle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Byte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : byte -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy wartości bajtu <xref:System.Single> wartość.  
  
 [!code-csharp[System.Convert.ToSingle#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#2)]
 [!code-vb[System.Convert.ToSingle#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Char) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(char value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : char -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As DateTime) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : DateTime -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Decimal) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : decimal -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.  
  
 <paramref name="value" /> jest zaokrąglana przy użyciu zaokrąglenie do najbliższej. Na przykład gdy zaokrąglona do dwóch miejsc po przecinku, wartość 2.345 staje się 2.34 i wartość 2.355 staje się 2,36.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#3)]
 [!code-vb[System.Convert.ToSingle#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Double) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(double value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : double -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.  
  
 <paramref name="value" /> jest zaokrąglana przy użyciu zaokrąglenie do najbliższej. Na przykład gdy zaokrąglona do dwóch miejsc po przecinku, wartość 2.345 staje się 2.34 i wartość 2.355 staje się 2,36.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#4)]
 [!code-vb[System.Convert.ToSingle#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Short) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(short value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int16 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#5)]
 [!code-vb[System.Convert.ToSingle#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(int value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy całkowitą do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#6)]
 [!code-vb[System.Convert.ToSingle#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Long) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(long value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int64 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy długich liczb całkowitych na <xref:System.Single> wartość.  
  
 [!code-csharp[System.Convert.ToSingle#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#7)]
 [!code-vb[System.Convert.ToSingle#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : obj -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu do liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#8)]
 [!code-vb[System.Convert.ToSingle#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As SByte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : sbyte -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>8-bitową liczbę całkowitą ze znakiem odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#9)]
 [!code-vb[System.Convert.ToSingle#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(float value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : single -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowych pojedynczej precyzji do zwrócenia.</param>
        <summary>Zwraca podanej liczbie zmiennoprzecinkowej pojedynczej precyzji; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : string -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje określoną reprezentację ciągu liczbą równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToSingle%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Single.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych <xref:System.Single> wartość.  
  
 [!code-csharp[System.Convert.ToSingle#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#10)]
 [!code-vb[System.Convert.ToSingle#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UShort) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint16 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych na <xref:System.Single> wartość.  
  
 [!code-csharp[System.Convert.ToSingle#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#11)]
 [!code-vb[System.Convert.ToSingle#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint32 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku do <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#12)]
 [!code-vb[System.Convert.ToSingle#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As ULong) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint64 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważnej liczby zmiennoprzecinkowej pojedynczej precyzji.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych na <xref:System.Single> wartość.  
  
 [!code-csharp[System.Convert.ToSingle#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#13)]
 [!code-vb[System.Convert.ToSingle#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSingle : obj * IFormatProvider -&gt; single" Usage="System.Convert.ToSingle (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na numer zmiennoprzecinkowych pojedynczej precyzji, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IConvertible> interfejsu. Implementacja <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> metoda zwraca wartość wewnętrznego prywatnej <xref:System.Single> zmienna, która reprezentuje temperatury.  
  
 [!code-csharp[System.Convert.ToSingle#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#14)]
 [!code-vb[System.Convert.ToSingle#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#14)]  
  
 Poniższy przykład przedstawia sposób wywołania <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> z kolei wywołuje metody <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> implementacja `Temperature` klasy.  
  
 [!code-csharp[System.Convert.ToSingle#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#15)]
 [!code-vb[System.Convert.ToSingle#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSingle : string * IFormatProvider -&gt; single" Usage="System.Convert.ToSingle (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne pojedynczej precyzji liczbie zmiennoprzecinkowej, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Liczbie zmiennoprzecinkowej pojedynczej precyzji, odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.Single.Parse%2A?displayProperty=nameWithType> metoda `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.Single.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.IFormatProvider> obiekty reprezentujące kultur en US i fr-FR, podczas konwertowania elementów w tablicy ciągów liczbowych <xref:System.Single> wartości.  
  
 [!code-csharp[System.Convert.ToSingle#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle3.cs#16)]
 [!code-vb[System.Convert.ToSingle#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest liczbą w nieprawidłowym formacie.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.Single.MinValue" /> lub większa niż <see cref="F:System.Single.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość do reprezentacji ciągu równoważne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value);" />
      <MemberSignature Language="F#" Value="static member ToString : bool -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>. Zwraca <xref:System.Boolean.TrueString?displayProperty=nameWithType> dla `true` wartości i <xref:System.Boolean.FalseString?displayProperty=nameWithType> dla `false` wartości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia konwersji <xref:System.Boolean> do <xref:System.String>za pomocą `ToString`. Również pokazuje, czy ciąg zwrócony przez konwersję równa <xref:System.Boolean.TrueString?displayProperty=nameWithType> lub <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Convert.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString_Bool1.cs#1)]
 [!code-vb[System.Convert.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString_Bool1.vb#1)]  
 [!code-fsharp[System.Convert.ToString#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Bool1.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToString : byte -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Byte.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdej wartości w <xref:System.Byte> tablicy na ciąg.  
  
 [!code-csharp[System.Convert.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString.Byte1.cs#3)]
 [!code-vb[System.Convert.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString.Byte1.vb#3)]
 [!code-fsharp[System.Convert.ToString#3](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Byte1.fs#3)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Char.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Char> do <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#14)]
 [!code-csharp[System.Convert Snippets#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#14)]
 [!code-vb[System.Convert Snippets#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToString : DateTime -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego <see cref="T:System.DateTime" /> do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.DateTime.ToString?displayProperty=nameWithType>. Używa konwencji formatowania bieżącej kultury i specyfikator formatu "G", aby przekonwertować <xref:System.DateTime> wartość do reprezentacji ciągu.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.DateTime> do wartości <xref:System.String> wartość.  
  
 [!code-csharp[System.Convert.ToString2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#1)]
 [!code-vb[System.Convert.ToString2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToString : decimal -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Decimal.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Decimal> do <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value);" />
      <MemberSignature Language="F#" Value="static member ToString : double -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Double.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Double> do <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#7)]
 [!code-csharp[System.Convert Snippets#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#7)]
 [!code-vb[System.Convert Snippets#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int16.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych do reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#2)]
 [!code-vb[System.Convert.ToString2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value);" />
      <MemberSignature Language="F#" Value="static member ToString : int -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowej do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int32.ToString?displayProperty=nameWithType>. Formatuje go `value` przy użyciu konwencji formatowania bieżącej kultury wątku.  
  
   
  
## Examples  
 Poniższy przykład porównuje <xref:System.Convert.ToString%28System.Int32%29> metody z <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> metody. Definiuje niestandardowe <xref:System.Globalization.NumberFormatInfo> obiekt, który używa ciągu "minus" do reprezentowania znakiem minus. Każdy element tablicy całkowitą są konwertowane na jego odpowiednik reprezentację przy użyciu domyślnego formatowania (Konwencji formatowania bieżącej kultury) i formatu niestandardowego dostawcy.  
  
 [!code-csharp[System.Convert.ToString2#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring7.cs#27)]
 [!code-vb[System.Convert.ToString2#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring7.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int64.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych do reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring6.cs#28)]
 [!code-vb[System.Convert.ToString2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring6.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToString : obj -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który dostarcza wartości do konwersji, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />, lub <see cref="F:System.String.Empty" /> Jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby przekonwertować `value` do reprezentacji ciągu próba wywołania metody <xref:System.IConvertible.ToString%2A?displayProperty=nameWithType> implementacja `value`. Jeśli `value` nie implementuje <xref:System.IConvertible> interfejsu, metoda próba wywołania <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementacja `value`. Jeśli wartość nie implementuje <xref:System.IFormattable> interfejs wywołania metody `ToString` metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy obiektów do reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#3)]
 [!code-vb[System.Convert.ToString2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToString : sbyte -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.SByte.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#4)]
 [!code-vb[System.Convert.ToString2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value);" />
      <MemberSignature Language="F#" Value="static member ToString : single -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Single.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Single> wartości do reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#5)]
 [!code-vb[System.Convert.ToString2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToString : string -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zwrócenia.</param>
        <summary>Zwraca wystąpienie określonego ciągu; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład przekazuje ciąg do <xref:System.Convert.ToString%28System.String%29> — metoda i wywołania <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> metody, aby upewnić się, że ta metoda zwraca ciąg oryginalny. Przykład również wywołuje <xref:System.String.IsInterned%2A?displayProperty=nameWithType> metody, aby upewnić się, że dwa ciągi nie są identyczne, ponieważ jest interned oryginalnego ciągu.  
  
 [!code-csharp[System.Convert.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/tostring_string1.cs#2)]
 [!code-vb[System.Convert.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/tostring_string1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint16 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt16.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji ciągu równoważne każdego elementu w tablicy wartości bez znaku 16-bitową liczbą całkowitą.  
  
 [!code-csharp[System.Convert.ToString2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#6)]
 [!code-vb[System.Convert.ToString2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint32 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt32.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji ciągu równoważne każdego elementu w tablicy liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToString2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#7)]
 [!code-vb[System.Convert.ToString2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint64 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt64.ToString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy niepodpisane długich liczb całkowitych do reprezentacji ciągu równoważne.  
  
 [!code-csharp[System.Convert.ToString2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#8)]
 [!code-vb[System.Convert.ToString2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : bool * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <param name="provider">Wystąpienie obiektu. Ten parametr jest ignorowany.</param>
        <summary>Konwertuje określoną wartość logiczną do reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>. Zwraca <xref:System.Boolean.TrueString?displayProperty=nameWithType> dla `true` wartości i <xref:System.Boolean.FalseString?displayProperty=nameWithType> dla `false` wartości.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Boolean> do wartości <xref:System.String> z `ToString` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana. W przykładzie pokazano, że <xref:System.IFormatProvider> nie odwołuje się obiekt.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : byte * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Byte.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje reprezentacji równoważne ciągu przy użyciu konwencji formatowania kultur en US i fr-FR każdego elementu w tablicy bajtu bez znaku. Ponieważ specyfikator "G" domyślnie wyświetla tylko cyfr dziesiętnych w reprezentacji ciągu wartość bajtu `provider` parametru nie wpływa na formatowanie zwracany ciąg.  
  
 [!code-csharp[System.Convert.ToString2#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#16)]
 [!code-vb[System.Convert.ToString2#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : byte * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <param name="toBase">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</param>
        <summary>Konwertuje wartość całkowitą bez znaku 8-bitową reprezentacji ciągu odpowiednik w określonej podstawy.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `toBase` nie jest równy 10, ciąg, który jest zwracany przez <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType> reprezentuje metodę `value` przez jego tylko wielkością. Jeśli metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje tylko wielkością reprezentacji liczbowej powinna być wywoływana do wykonania konwersji. Tych metod uwzględnić <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> lub <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.  
  
 [!code-csharp[System.Convert.ToString2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#9)]
 [!code-vb[System.Convert.ToString2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#9)]
 [!code-fsharp[System.Convert.ToString2#9](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : char * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Ten parametr jest ignorowany.</param>
        <summary>Konwertuje wartość określonego znaku Unicode do reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Char.ToString?displayProperty=nameWithType>. `provider` Parametr jest ignorowany.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.Char> do wartości <xref:System.String> z `ToString` — metoda, za pomocą <xref:System.IFormatProvider> obiekt, który wyświetla typ dostawcy formatu, dla którego jest wywoływana. W przykładzie pokazano, że <xref:System.IFormatProvider> nie odwołuje się obiekt.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : DateTime * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego <see cref="T:System.DateTime" /> do reprezentacji ciągu równoważne przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje <xref:System.DateTime> wartość do reprezentacji ciągu odpowiednik w ośmiu różnych kultur.  
  
 [!code-csharp[System.Convert.ToString2#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#13)]
 [!code-vb[System.Convert.ToString2#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : decimal * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.  
  
 [!code-csharp[System.Convert.ToString2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#14)]
 [!code-vb[System.Convert.ToString2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : double * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji reprezentacji ciągu równoważne.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.  
  
 [!code-csharp[System.Convert.ToString2#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#15)]
 [!code-vb[System.Convert.ToString2#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy 16-bitowych liczb całkowitych do reprezentacji ciągu równoważne. Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.  
  
 [!code-csharp[System.Convert.ToString2#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#19)]
 [!code-vb[System.Convert.ToString2#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <param name="toBase">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</param>
        <summary>Konwertuje wartość 16-bitową liczbę całkowitą ze znakiem reprezentacji ciągu odpowiednik w określonej podstawy.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` jest dodatnia i `toBase` 2, 8 lub 16, zwracany ciąg używa reprezentacja logowania i wielkości. Jeśli `value` jest ujemny i `toBase` 2, 8 lub 16, zwracany ciąg używa dwóch jego reprezentacja dopełnienia. Oznacza to, że bit znaczących bajtu znaczących (bit 15) jest interpretowana jako bitem. Jeśli <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji. Tych metod uwzględnić <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy 16-bitowych liczb całkowitych ze znakiem oświadczeń równoważne ciąg binarny, ósemkowe, decimal i szesnastkowe.  
  
 [!code-csharp[System.Convert.ToString2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#10)]
 [!code-vb[System.Convert.ToString2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#10)]
 [!code-fsharp[System.Convert.ToString2#10](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowej do reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy liczb całkowitych do reprezentacji ciągu równoważne. Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.  
  
 [!code-csharp[System.Convert.ToString2#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#20)]
 [!code-vb[System.Convert.ToString2#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <param name="toBase">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</param>
        <summary>Konwertuje wartość całkowita 32-bitowej do reprezentacji ciągu odpowiednik w określonej podstawy.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` jest dodatnia i `toBase` 2, 8 lub 16, zwracany ciąg używa reprezentacja logowania i wielkości. Jeśli `value` jest ujemny i `toBase` 2, 8 lub 16, zwracany ciąg używa dwóch jego reprezentacja dopełnienia. Oznacza to, że bit znaczących najwyższej kolejności bajtów (bit 31) jest interpretowana jako bitem. Jeśli <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji. Tych metod uwzględnić <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczby całkowitej oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.  
  
 [!code-csharp[System.Convert.ToString2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#11)]
 [!code-vb[System.Convert.ToString2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#11)]
 [!code-fsharp[System.Convert.ToString2#11](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> metodę, aby przekonwertować każdego elementu w tablicy długich liczb całkowitych do reprezentacji ciągu równoważne. Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.  
  
 [!code-csharp[System.Convert.ToString2#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#21)]
 [!code-vb[System.Convert.ToString2#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <param name="toBase">Podstawa zwracanej wartości. Musi wynosić 2, 8, 10 lub 16.</param>
        <summary>Konwertuje wartość całkowita 64-bitowych reprezentacji ciągu odpowiednik w określonej podstawy.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" /> w podstawowym <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` jest dodatnia i `toBase` nie jest 10, zwracany ciąg używa reprezentacja logowania i wielkości. Jeśli `value` jest ujemny i `toBase` nie jest 10, zwracany ciąg używa dwóch jego reprezentacja dopełnienia. Oznacza to, że bit znaczących najwyższej kolejności bajtów (bit 63) jest interpretowana jako bitem. Jeśli <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> metoda jest wywoływana w celu utworzenia ciąg, który zostanie później przekonwertowany do numeru, odpowiedniej metody, która przyjmuje podobne reprezentacji liczbowej powinna być wywoływana w celu wykonania konwersji. Tych metod uwzględnić <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych oświadczeń równoważne ciąg binarny, szesnastkowe, decimal i szesnastkową.  
  
 [!code-csharp[System.Convert.ToString2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#12)]
 [!code-vb[System.Convert.ToString2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#12)]  
 [!code-fsharp[System.Convert.ToString2#12](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#12)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> nie jest 2, 8, 10 lub 16.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : obj * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który dostarcza wartości do konwersji, lub <see langword="null" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na jego odpowiednik reprezentację przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />, lub <see cref="F:System.String.Empty" /> Jeśli <paramref name="value" /> jest obiektem, którego wartość jest <see langword="null" />. Jeśli <paramref name="value" /> jest <see langword="null" />, metoda zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `value` implementuje parametru <xref:System.IConvertible> interfejs wywołania metody <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> implementacja `value`. W przeciwnym razie, jeśli `value` implementuje parametru <xref:System.IFormattable> interfejs wywołania metody jej <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> implementacji. Jeśli `value` implementuje ani interfejs wywołania metody `value` parametru `ToString()` metody i `provider` parametru jest ignorowana.  
  
 `provider` Parametr jest używany, jeśli `value` implementuje parametru <xref:System.IConvertible> lub <xref:System.IFormattable> interfejsu. Najczęściej używane `provider` jest określenie informacje specyficzne dla kultury używane podczas konwersji parametru `value`. Na przykład jeśli `value` parametr jest liczbą dziesiętną ujemna `provider` parametrów można podać informacje specyficzne dla kultury o notacji znakiem minus i separator dziesiętny. Drugi przykład w następnej sekcji przedstawiono dostawcy formatu, który dostarcza informacje dotyczące formatowania zależne od kultury.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Temperature` klasy, która zastępuje <xref:System.Object.ToString%2A?displayProperty=nameWithType> metody, ale nie implementuje <xref:System.IConvertible> interfejsu. Pokazano w przykładzie jak wywołań <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> z kolei wywołanie metody, `Temperature.ToString` metody.  
  
 [!code-csharp[System.Convert.ToString2#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring5.cs#26)]
 [!code-vb[System.Convert.ToString2#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring5.vb#26)]  
  
 W poniższym przykładzie zdefiniowano `Temperature` klasa implementująca <xref:System.IFormattable> interfejsu, ale nie implementuje <xref:System.IConvertible> interfejsu. Jego <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> reprezentuje implementacji `Temperature` wartość c, f lub kelvin —, w zależności od ciągu formatu. Definiuje również przykładzie `TemperatureProvider` klasa implementująca <xref:System.IFormatProvider> i zawiera ciąg formatu losowo generowany, który jest używany przez <xref:System.IFormattable> implementacja `Temperature` klasy.  
  
 [!code-csharp[System.Convert.ToString2#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring_obj30.cs#30)]
 [!code-vb[System.Convert.ToString2#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring_obj30.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : sbyte * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodę, aby przekonwertować każdego elementu w tablicy bajtowej podpisem do reprezentacji ciągu równoważne. Konwersja używa Niezmienna kultura, a także niestandardowego <xref:System.Globalization.NumberFormatInfo> obiektu.  
  
 [!code-csharp[System.Convert.ToString2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#17)]
 [!code-vb[System.Convert.ToString2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : single * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Single> wartości do reprezentacji ciągu odpowiednik w czterech różnych kultur.  
  
 [!code-csharp[System.Convert.ToString2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#18)]
 [!code-vb[System.Convert.ToString2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : string * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg do zwrócenia.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury. Ten parametr jest ignorowany.</param>
        <summary>Zwraca wystąpienie określonego ciągu; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujące przykładowe wywołania `ToString` metody z <xref:System.String> parametru. Metoda zwraca niemodyfikowana <xref:System.String> bez odwołania do <xref:System.IFormatProvider> obiektu.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint16 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> metodę, aby przekonwertować reprezentacji ciągu równoważne wartości 16-bitową liczbę całkowitą bez znaku. Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu. Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.  
  
 [!code-csharp[System.Convert.ToString2#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#22)]
 [!code-vb[System.Convert.ToString2#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint32 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> metodę, aby przekonwertować wartość całkowitą bez znaku do reprezentacji ciągu równoważne. Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu. Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.  
  
 [!code-csharp[System.Convert.ToString2#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#23)]
 [!code-vb[System.Convert.ToString2#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint64 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku reprezentacji ciągu równoważny, korzystając z określonych informacji formatowania specyficzne dla kultury.</summary>
        <returns>Reprezentacja ciągu <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja jest taki sam jak <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> klasy definiującej jej znakiem minus jako ciąg "~"i znaku dodatnią jako ciąg"!". Następnie wywołuje <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> metody można przekonwertować wartości bez znaku długich liczb całkowitych do reprezentacji ciągu równoważne. Konwersja używa zarówno Niezmienna kultura, jak i niestandardowe <xref:System.Globalization.NumberFormatInfo> obiektu. Dane wyjściowe wskazuje, czy te informacje formatowania nie jest używany, ponieważ domyślnie specyfikator formatu "G" nie zawiera znaku dodatnią z wartości dodatnie.  
  
 [!code-csharp[System.Convert.ToString2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#24)]
 [!code-vb[System.Convert.ToString2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość do 16-bitową liczbę całkowitą bez znaku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Boolean) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : bool -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logiczne `true` i `false` do liczb całkowitych bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#1)]
 [!code-vb[System.Convert.ToUInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Byte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : byte -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy typu byte na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#2)]
 [!code-vb[System.Convert.ToUInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Char) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : char -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy znaków na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#3)]
 [!code-vb[System.Convert.ToUInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As DateTime) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : DateTime -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Decimal) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : decimal -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#4)]
 [!code-vb[System.Convert.ToUInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Double) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : double -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.Double> wartości na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#5)]
 [!code-vb[System.Convert.ToUInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Short) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int16 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy 16-bitową liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToUInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#6)]
 [!code-vb[System.Convert.ToUInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy całkowitą liczbą całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#7)]
 [!code-vb[System.Convert.ToUInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Long) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int64 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy długich liczb całkowitych na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#8)]
 [!code-vb[System.Convert.ToUInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : obj -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#9)]
 [!code-vb[System.Convert.ToUInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As SByte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : sbyte -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 16-bitową liczbę całkowitą bez znaku.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej podpisem na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#10)]
 [!code-vb[System.Convert.ToUInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Single) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : single -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 16-bitową liczbę całkowitą bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy <xref:System.String> wartości na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#11)]
 [!code-vb[System.Convert.ToUInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToUInt16%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy ciągów liczbowych 16-bitową liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#12)]
 [!code-vb[System.Convert.ToUInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint16 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowych całkowitą bez znaku do zwrócenia.</param>
        <summary>Zwraca określony 16-bitową liczbę całkowitą bez znaku; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint32 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#13)]
 [!code-vb[System.Convert.ToUInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As ULong) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint64 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku 16-bitowych każdego elementu w tablicy długich liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#14)]
 [!code-vb[System.Convert.ToUInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : obj * IFormatProvider -&gt; uint16" Usage="System.Convert.ToUInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu do 16-bitową liczbę całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu obie wartości 16-bitowych podpisane i 16-bitowych unsigned. Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.  
  
 [!code-csharp[System.Convert.ToUInt16#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#16)]
 [!code-vb[System.Convert.ToUInt16#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#16)]  
  
 W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> implementacja `HexString` klasy.  
  
 [!code-csharp[System.Convert.ToUInt16#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#17)]
 [!code-vb[System.Convert.ToUInt16#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string * IFormatProvider -&gt; uint16" Usage="System.Convert.ToUInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 16-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.UInt16.Parse%2A?displayProperty=nameWithType> na `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej. Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.  
  
 [!code-csharp[System.Convert.ToUInt16#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_4.cs#18)]
 [!code-vb[System.Convert.ToUInt16#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, fromBase As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string * int -&gt; uint16" Usage="System.Convert.ToUInt16 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje numer w określonej podstawy reprezentację ciągu na liczbę całkowitą bez znaku równoważne 16-bitowych.</summary>
        <returns>16-bitową liczbę całkowitą bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ <xref:System.UInt16> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku. Innymi słowy wszystkie 16 bitów są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny. W związku z tym jest możliwość pisania kodu, w którym całkowita wartość, która jest poza zakresem <xref:System.UInt16> — typ danych jest konwertowana na <xref:System.UInt16> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.Int16.MinValue?displayProperty=nameWithType> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000 skonwertować 32768."  
  
 [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]
 [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt16> wartości. W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku. Gdy przykładzie konwertuje wartość na <xref:System.UInt16> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem. Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.  
  
 [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]
 [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]  
  
   
  
## Examples  
 Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i przekonwertować go na liczbę całkowitą bez znaku 16-bitowych.  
  
 [!code-csharp[System.Convert.ToUInt16#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_2.cs#15)]
 [!code-vb[System.Convert.ToUInt16#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje numer innej niż podstawowa 10 bez znaku, jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt16.MinValue" /> lub większa niż <see cref="F:System.UInt16.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na 32-bitowej liczby całkowitej bez znaku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Boolean) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : bool -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartości logiczne `true` i `false` do liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#1)]
 [!code-vb[System.Convert.ToUInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Byte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : byte -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy typu byte na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#2)]
 [!code-vb[System.Convert.ToUInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Char) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : char -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy znaków na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#3)]
 [!code-vb[System.Convert.ToUInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As DateTime) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : DateTime -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Decimal) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : decimal -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#4)]
 [!code-vb[System.Convert.ToUInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Double) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : double -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#5)]
 [!code-vb[System.Convert.ToUInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Short) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int16 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować na liczbę całkowitą bez znaku każdego elementu w tablicy 16-bitową liczbę całkowitą.  
  
 [!code-csharp[System.Convert.ToUInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#6)]
 [!code-vb[System.Convert.ToUInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy całkowitą liczbą całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#7)]
 [!code-vb[System.Convert.ToUInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Long) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int64 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#8)]
 [!code-vb[System.Convert.ToUInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : obj -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na 32-bitowej liczby całkowitej bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#9)]
 [!code-vb[System.Convert.ToUInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As SByte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : sbyte -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej podpisem na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#10)]
 [!code-vb[System.Convert.ToUInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Single) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : single -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 32-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#11)]
 [!code-vb[System.Convert.ToUInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje określoną reprezentację ciągu liczbą równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToUInt32%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie interpretuje elementów w tablicy ciągów jako ciągi numeryczne i próbuje przekonwertować je na liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#12)]
 [!code-vb[System.Convert.ToUInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UShort) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint16 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczbę całkowitą bez znaku 16-bitową wartość będącą liczbą całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#13)]
 [!code-vb[System.Convert.ToUInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint32 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do zwrócenia.</param>
        <summary>Zwraca określony 32-bitowa liczba całkowita bez znaku; nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As ULong) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint64 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 64-bitowa liczba całkowita bez znaku równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy niepodpisane długich liczb całkowitych na wartość całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#14)]
 [!code-vb[System.Convert.ToUInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : obj * IFormatProvider -&gt; uint32" Usage="System.Convert.ToUInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na 32-bitowa liczba całkowita bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>32-bitowa liczba całkowita bez znaku, który jest odpowiednikiem <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu obu wartości 32-bitowe podpisane i 32-bitowych unsigned. Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.  
  
 [!code-csharp[System.Convert.ToUInt32#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#17)]
 [!code-vb[System.Convert.ToUInt32#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#17)]  
  
 W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> implementacja `HexString` klasy.  
  
 [!code-csharp[System.Convert.ToUInt32#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#18)]
 [!code-vb[System.Convert.ToUInt32#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string * IFormatProvider -&gt; uint32" Usage="System.Convert.ToUInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 32-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> na `value`.  
  
 `provider` jest <xref:System.IFormatProvider> wystąpienie, które uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej. Następnie próbuje przekonwertować na liczbę całkowitą przy użyciu obu ten dostawca każdy element tablicy ciągów liczbowych i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.  
  
 [!code-csharp[System.Convert.ToUInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_2.cs#15)]
 [!code-vb[System.Convert.ToUInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, fromBase As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string * int -&gt; uint32" Usage="System.Convert.ToUInt32 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 32-bitowa liczba całkowita bez znaku.</summary>
        <returns>32-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ <xref:System.UInt32> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku. Innymi słowy wszystkie 32-bitowy są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny. W związku z tym jest możliwość pisania kodu, w którym całkowita wartość, która jest poza zakresem <xref:System.UInt32> — typ danych jest konwertowana na <xref:System.UInt32> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.Int32.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x80000000 skonwertować 2147483648."  
  
 [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]
 [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt32> wartości. W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku. Gdy przykładzie konwertuje wartość na <xref:System.UInt32> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem. Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.  
  
 [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]
 [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]  
  
   
  
## Examples  
 Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i można go przekonwertować na liczbę całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt32#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_3.cs#16)]
 [!code-vb[System.Convert.ToUInt32#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje numer innej niż podstawowa 10 bez znaku, jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt32.MinValue" /> lub większa niż <see cref="F:System.UInt32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określoną wartość na 64-bitowej liczby całkowitej bez znaku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Boolean) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : bool -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, która ma zostać przekształcona.</param>
        <summary>Konwertuje określoną wartość logiczną na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>Numer 1, gdy <paramref name="value" /> jest <see langword="true" />; w przeciwnym razie wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje wartość logiczna `true` i `false` wartości długich liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#1)]
 [!code-vb[System.Convert.ToUInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Byte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : byte -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem jest odpowiednikiem <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy bajtowej niepodpisane długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#2)]
 [!code-vb[System.Convert.ToUInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Char) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : char -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode, który ma zostać przekształcony.</param>
        <summary>Konwertuje wartość określonego znaku Unicode na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdy element tablicy znaków długie całkowitą bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#3)]
 [!code-vb[System.Convert.ToUInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As DateTime) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : DateTime -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny, która ma zostać przekształcona.</param>
        <summary>Wywołanie tej metody zawsze zwraca <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Ta konwersja nie jest obsługiwana. Nie jest zwracana żadna wartość.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Decimal) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : decimal -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Liczba dziesiętna, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonej liczby dziesiętnej równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Decimal> wartości bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#4)]
 [!code-vb[System.Convert.ToUInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Double) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : double -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej podwójnej precyzji równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Double> wartości bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#5)]
 [!code-vb[System.Convert.ToUInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Short) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int16 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita ze znakiem, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy 16-bitowych liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#6)]
 [!code-vb[System.Convert.ToUInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowe całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 32-bitowych na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#7)]
 [!code-vb[System.Convert.ToUInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Long) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int64 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowych całkowita do konwersji.</param>
        <summary>Konwertuje wartość określonego całkowita 64-bitowych na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy długich liczb całkowitych bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#8)]
 [!code-vb[System.Convert.ToUInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : obj -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu, lub <see langword="null" />.</param>
        <summary>Konwertuje wartość określonego obiektu na 64-bitowej liczby całkowitej bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
   
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy obiektów bez znaku długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#9)]
 [!code-vb[System.Convert.ToUInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As SByte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : sbyte -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">8-bitową liczbę całkowitą ze znakiem do konwersji.</param>
        <summary>Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem na równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy bajtowej podpisem niepodpisane długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#10)]
 [!code-vb[System.Convert.ToUInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza od zera.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Single) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : single -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość podanej liczbie zmiennoprzecinkowej pojedynczej precyzji równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>
          <paramref name="value" />, zaokrąglona do najbliższej 64-bitowa liczba całkowita bez znaku. Jeśli <paramref name="value" /> jest w połowie między dwie liczb całkowitych, zwracany jest parzystą liczbą; oznacza to, 4.5 jest konwertowana na 4, i 5.5 jest konwertowana na 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład próbuje przekonwertować każdego elementu w tablicy <xref:System.Single> wartości bez znaku długich liczb całkowitych. Dane wyjściowe pokazuje, że ułamkowych wartości są zaokrąglane przed wykonaniem konwersji.  
  
 [!code-csharp[System.Convert.ToUInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#11)]
 [!code-vb[System.Convert.ToUInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> jest mniejsza niż zero lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <summary>Konwertuje reprezentujący określony ciąg, liczbę całkowitą bez znaku równoważne 64-bitowych.</summary>
        <returns>64-bitowe liczby całkowite ze znakiem odpowiada numerowi <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu <xref:System.Convert.ToInt64%28System.String%29> metoda jest odpowiednikiem przekazywanie `value` do <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> metody. `value` jest interpretowany za pomocą Konwencji formatowania bieżącej kultury wątku.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie interpretuje elementy tablicy ciągów jako ciągi numeryczne i próbuje przekonwertować je na długich liczb całkowitych bez znaku.  
  
 [!code-csharp[System.Convert.ToUInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#12)]
 [!code-vb[System.Convert.ToUInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UShort) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint16 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">16-bitowa liczba całkowita bez znaku, która ma zostać przekształcona.</param>
        <summary>Konwertuje wartość określonego 16-bitową liczbę całkowitą bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczb całkowitych bez znaku 16-bitowych unsigned długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#13)]
 [!code-vb[System.Convert.ToUInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint32 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">32-bitowa liczba całkowita bez znaku do konwersji.</param>
        <summary>Konwertuje wartość określonego 32-bitowa liczba całkowita bez znaku równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład konwertuje każdego elementu w tablicy liczbę całkowitą bez znaku niepodpisane długich liczb całkowitych.  
  
 [!code-csharp[System.Convert.ToUInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#14)]
 [!code-vb[System.Convert.ToUInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint64 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">64-bitowa liczba całkowita bez znaku do zwrócenia.</param>
        <summary>Zwraca określony 64-bitowych całkowitą bez znaku. nie jest wykonywane.</summary>
        <returns>
          <paramref name="value" /> jest zwracany bez zmian.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : obj * IFormatProvider -&gt; uint64" Usage="System.Convert.ToUInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który implementuje <see cref="T:System.IConvertible" /> interfejsu.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość określonego obiektu na 64-bitowa liczba całkowita bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiada <paramref name="value" />, lub zero, jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> metod z typem podstawowym typu `value`.  
  
 `provider` Umożliwia użytkownikowi określenie konwersji specyficzne dla kultury informacji o zawartości `value`. Na przykład jeśli `value` jest <xref:System.String> reprezentujący liczbę, `provider` można podać informacje specyficzne dla kultury o notacji używany do reprezentowania tej liczby.  
  
 Typy podstawowe Ignoruj `provider`, jednak można użyć parametru, jeśli `value` jest zdefiniowane przez użytkownika typu, który implementuje <xref:System.IConvertible> interfejsu.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `HexString` klasa implementująca <xref:System.IConvertible> interfejsu i który jest przeznaczony do przechowywania reprezentację ciągu zarówno 64-bitowych podpisem i 64-bitowych unsigned wartości. Zawiera klasy `Sign` właściwość, która wskazuje znak jego wartość szesnastkową.  
  
 [!code-csharp[System.Convert.ToUInt64#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#17)]
 [!code-vb[System.Convert.ToUInt64#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#17)]  
  
 W poniższym przykładzie pokazano, że wywołanie <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> metodę, która przekazuje `HexString` z kolei wywołuje obiekt jako parametr <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> implementacja `HexString` klasy.  
  
 [!code-csharp[System.Convert.ToUInt64#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#18)]
 [!code-vb[System.Convert.ToUInt64#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie jest w odpowiednim formacie.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> nie implementuje <see cref="T:System.IConvertible" /> interfejsu.  - lub - konwersja nie jest obsługiwana.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string * IFormatProvider -&gt; uint64" Usage="System.Convert.ToUInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje reprezentacja ciągu określonej liczby równoważne 64-bitowych całkowitą bez znaku, przy użyciu określonego formatowania informacje specyficzne dla kultury.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana jest wynik wywołania <xref:System.UInt64.Parse%2A?displayProperty=nameWithType> na `value`.  
  
 `provider` jest <xref:System.IFormatProvider> implementację, która uzyskuje <xref:System.Globalization.NumberFormatInfo> obiektu. <xref:System.Globalization.NumberFormatInfo> Obiektu zawiera informacje specyficzne dla kultury o format `value`. Jeśli `provider` jest `null`, <xref:System.Globalization.NumberFormatInfo> obiektu dla bieżącej kultury jest używany.  
  
 Jeśli nie chcesz obsługi wyjątku, jeśli konwersja nie powiedzie się, można wywołać <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> metody zamiast tego. Zwraca <xref:System.Boolean> wartość wskazującą, czy konwersja powiodła się czy nie.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano niestandardowego <xref:System.Globalization.NumberFormatInfo> obiekt, który rozpoznaje ciąg "pos" jako znak dodatnią, a następnie ciąg "minus" jako wartości ujemnej. Następnie próbuje przekonwertować na liczbę całkowitą bez znaku długo każdy element tablicy ciągów liczbowych. Konwersja używa dostawcy niestandardowego i <xref:System.Globalization.NumberFormatInfo> dostawcy dla Niezmienna kultura.  
  
 [!code-csharp[System.Convert.ToUInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_2.cs#15)]
 [!code-vb[System.Convert.ToUInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> nie zawiera znaku opcjonalne następuje sekwencję cyfry (od 0 do 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, fromBase As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string * int -&gt; uint64" Usage="System.Convert.ToUInt64 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający liczbę, którą należy przekształcić.</param>
        <param name="fromBase">Podstawa numer w <c>wartość</c>, która musi być 2, 8, 10 lub 16.</param>
        <summary>Konwertuje reprezentację liczby w określonej podstawy równoważne 64-bitowa liczba całkowita bez znaku.</summary>
        <returns>64-bitowa liczba całkowita bez znaku odpowiadającą liczbie <paramref name="value" />, lub równa 0 (zero), jeśli <paramref name="value" /> jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `fromBase` 16, można prefiksu liczbie określonej przez `value` parametru "0 x" lub "0 X".  
  
 Ponieważ <xref:System.UInt64> — typ danych obsługuje tylko wartości bez znaku <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> metody, przy założeniu, że `value` jest wyrażona za pomocą reprezentacja binarna bez znaku. Innymi słowy wszystkie 64-bitowy są używane do reprezentowania wartości liczbowej i bitu znaku jest nieobecny. W związku z tym jest możliwość pisania kodu, w którym podpisem długich liczb całkowitych wartość jest spoza zakresu <xref:System.UInt64> — typ danych jest konwertowana na <xref:System.UInt64> wartość bez metody generowania wyjątku. Poniższy przykład konwertuje <xref:System.Int64.MinValue> jej reprezentacji ciągu szesnastkowego, a następnie wywołania <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> metody. Zamiast generowania wyjątku, metoda wyświetla komunikat "0x8000000000000000 skonwertować 9223372036854775808."  
  
 [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]
 [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  
  
 Podczas wykonywania operacji binarnych lub przeliczeń liczbowych programista ma obowiązek sprawdzić, czy metoda lub operator używa reprezentacji liczbowej odpowiedniej do zinterpretowania określonej wartości. Poniższy przykład przedstawia jedną technika za zapewnienie, że metoda nie niewłaściwie korzysta binarna reprezentacja aby zinterpretować wartość, która używa dwóch jego reprezentacja dopełnienia podczas konwertowania ciągu szesnastkowego do <xref:System.UInt64> wartości. W przykładzie następuje określenie, czy podczas konwertowania wartości na reprezentujący ją ciąg wartość ma być traktowana jako liczba całkowita ze znakiem czy bez znaku. Gdy przykładzie konwertuje wartość na <xref:System.UInt64> wartość, sprawdza, czy oryginalna wartość została liczbę całkowitą ze znakiem. Jeśli tak, a jego bit znaczących jest ustawiony (co oznacza, że oryginalna wartość była ujemna), metoda zgłasza wyjątek.  
  
 [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]
 [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]  
  
   
  
## Examples  
 Poniższy przykład próbuje interpretować każdego elementu w tablicy ciągów liczbowych jako wartość szesnastkowa i przekonwertować go na liczbę całkowitą bez znaku długo.  
  
 [!code-csharp[System.Convert.ToUInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_3.cs#16)]
 [!code-vb[System.Convert.ToUInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> nie jest 2, 8, 10 lub 16.  - lub - <paramref name="value" />, reprezentuje numer innej niż podstawowa 10 bez znaku, jest poprzedzony znakiem minus.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> zawiera znak, który nie jest prawidłową cyfrą w podstawowym określony przez <paramref name="fromBase" />. Komunikat o wyjątku wskazuje, że nie istnieją żadne cyfr można konwertować, jeśli pierwszy znak w <paramref name="value" /> jest nieprawidłowy; w przeciwnym razie komunikat wskazuje, że <paramref name="value" /> zawiera nieprawidłowe znaki końcowe.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, reprezentuje 10 numer bez znaku z systemem innym niż podstawowy, jest poprzedzony znakiem minus.  - lub - <paramref name="value" /> reprezentuje liczbę, która jest mniejsza niż <see cref="F:System.UInt64.MinValue" /> lub większa niż <see cref="F:System.UInt64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64Chars (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64Chars(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64Chars (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64Chars(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member TryFromBase64Chars : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; *  -&gt; bool" Usage="System.Convert.TryFromBase64Chars (chars, bytes, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64String">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64String (string s, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64String(string s, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64String (s As String, bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64String(System::String ^ s, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member TryFromBase64String : string * Span&lt;byte&gt; *  -&gt; bool" Usage="System.Convert.TryFromBase64String (s, bytes, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryToBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryToBase64Chars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars, out int charsWritten, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryToBase64Chars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars, [out] int32&amp; charsWritten, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryToBase64Chars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char), ByRef charsWritten As Integer, Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryToBase64Chars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; *  * Base64FormattingOptions -&gt; bool" Usage="System.Convert.TryToBase64Chars (bytes, chars, charsWritten, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>