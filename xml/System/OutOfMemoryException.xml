<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e0d154ed3713f9eed87803b5bebf263a2ac09ac" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727717" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyjątek, który jest generowany, gdy nie ma wystarczającej ilości pamięci dla kontynuowania wykonywania programu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.OutOfMemoryException> Wyjątek ma dwie główne przyczyny:  
  
-   Podjęto próbę rozwiń <xref:System.Text.StringBuilder> obiektów poza długość zdefiniowaną przez jego <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> właściwości.  
  
-   Środowisko uruchomieniowe języka wspólnego nie może przydzielić wystarczającej ilości pamięci ciągłej do pomyślnego przeprowadzenia operacji. Ten wyjątek może zostać wygenerowany przez wszystkie właściwości przypisania lub wywołanie metody wymagającego alokacji pamięci. Aby uzyskać więcej informacji na temat przyczyny <xref:System.OutOfMemoryException> wyjątków, zobacz ["związanych z brakiem pamięci" nie odwołuje się do pamięci fizycznej](http://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx).  
  
     Tego rodzaju <xref:System.OutOfMemoryException> wyjątek reprezentuje poważnej awarii. Jeśli zdecydujesz się obsłużyć wyjątek, należy dołączyć `catch` blok, który wywołuje <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> metodę, aby zakończyć aplikację i dodać odpowiedni wpis w dzienniku zdarzeń systemowych, tak jak w poniższym przykładzie.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Niektóre warunki wyjątku i akcje, które można wykonać w celu usunięcia go są następujące:  
  
 Wywołujesz <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> metody.  
 Podjęto próbę zwiększenia długości <xref:System.Text.StringBuilder> obiektów poza rozmiar określony przez jego <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> właściwości. W poniższym przykładzie pokazano <xref:System.OutOfMemoryException> wyjątek zgłoszony przez wywołanie <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> metoda przykład próba wstawienia ciąg, który może powodować, że obiekt <xref:System.Text.StringBuilder.Length%2A> właściwość przekroczy maksymalną pojemność.  
  
 [!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
 [!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
 Możesz wykonać jedną z następujących czynności, aby rozwiązać błąd:  
  
-   Zastąp wywołanie <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Konstruktor wywołaniem innych <xref:System.Text.StringBuilder> przeciążenia konstruktora. Maksymalna pojemność usługi <xref:System.Text.StringBuilder> obiektu zostanie ustawiona na wartość domyślną, czyli <xref:System.Int32.MaxValue?displayProperty=nameWithType>.  
  
-   Wywołaj <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> konstruktora z `maxCapacity` wartość, która jest wystarczająco duża, aby pomieścić wszystkie rozszerzenia, aby <xref:System.Text.StringBuilder> obiektu.  
  
 Twoja aplikacja jest uruchamiana jako proces 32-bitowy.  
 32-bitowych procesów można przydzielić maksymalnie 2GB pamięci wirtualnej trybu użytkownika w systemach 32-bitowych i 4GB pamięci wirtualnej trybu użytkownika w systemach 64-bitowych. To może utrudnić dla środowiska uruchomieniowego języka wspólnego przydzielić wystarczającej ilości pamięci ciągłej w przypadku, gdy jest potrzebna duża alokacji. Z kolei procesów 64-bitowych można przydzielić do 8TB pamięci wirtualnej. Aby rozwiązać ten wyjątek, należy ponownie skompilować aplikację pod kątem platformy 64-bitowej. Aby uzyskać informacje o przeznaczonych dla określonych platform w programie Visual Studio, zobacz [porady: Konfigurowanie projektów do platform docelowych](http://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
 Aplikacja jest wyciek zasobów niezarządzanych  
 Mimo iż moduł odśmiecania pamięci jest w stanie zwolnić pamięć przydzielona programowi typami zarządzanymi, nie będzie zarządzała pamięć przydzielona programowi niezarządzane zasoby, takie jak system operacyjny obsługuje (w tym dojścia do plików, pliki mapowane w pamięci, potoki, klucze rejestru i uchwytami oczekiwania) a bloki pamięci przydzielane bezpośrednio przez wywołania interfejsu API Windows lub wywołania funkcji alokacji pamięci, takich jak `malloc`. Typy używające niezarządzanych zasobów implementują <xref:System.IDisposable> interfejsu.  
  
 Jeśli korzystanie z typu, który używa niezarządzane zasoby, należy upewnić się wywołać jego <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metoda po zakończeniu korzystania z niego. (Niektóre typy także implementować `Close` metodę, która jest taka sama w funkcji `Dispose` metody.) Aby uzyskać więcej informacji, zobacz [przy użyciu obiektów, zaimplementuj interfejs IDisposable](~/docs/standard/garbage-collection/using-objects.md) tematu.  
  
 Jeśli po utworzeniu typu, który wykorzystuje zasoby niezarządzane, upewnij się, że zaimplementować wzorzec usuwania i, jeśli to konieczne, podane finalizatora. Aby uzyskać więcej informacji, zobacz [wzorzec Dispose](~/docs/standard/design-guidelines/dispose-pattern.md), [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md), i <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tematów.  
  
 Próbujesz utworzyć duże tablice w procesie 64-bitowym.  
 Domyślnie środowisko uruchomieniowe języka wspólnego nie zezwala na pojedynczych obiektów, których rozmiar przekracza 2GB. Aby zastąpić to ustawienie domyślne, ustawienia pliku konfiguracyjnego służy również do włączenia tablic, których łączny rozmiar przekracza 2 GB.  
  
 Pracujesz z bardzo dużymi zestawami danych (np. tablic, kolekcje lub zestawy danych bazy danych) w pamięci.  
 Struktury danych lub zestawów danych, które znajdują się w pamięci stają się tak dużych, środowisko uruchomieniowe języka wspólnego i nie można przydzielić wystarczającej ilości pamięci ciągłej dla nich <xref:System.OutOfMemoryException> wynikiem będzie wyjątek.  
  
 Aby zapobiec <xref:System.OutOfMemoryException> wyjątki, należy zmodyfikować aplikację tak, aby znajdujących się w pamięci jest mniejsza ilość danych lub dane są dzielone na segmenty, które wymagają mniejszych alokacji pamięci. Na przykład:  
  
-   Jeśli pobierania wszystkich danych z bazy danych, a następnie filtrować w swojej aplikacji, aby zminimalizować przesłania do serwera, należy zmodyfikować zapytania w taki sposób, aby zwrócić tylko podzestaw danych, które Twoja aplikacja wymaga. Podczas pracy z dużych tabel, wielu zapytań jest prawie zawsze większa wydajne niż pobieranie wszystkich danych w jednej tabeli, a następnie manipulując go.  
  
-   Jeśli są wykonywane zapytania, które są tworzone dynamicznie, należy upewnić się, że liczbę rekordów zwróconych przez zapytanie jest ograniczony.  
  
-   Jeśli używane są duże tablice lub inna kolekcja obiektów, których rozmiar skutkuje <xref:System.OutOfMemoryException> wyjątek, należy zmodyfikować aplikację do danych służbowych w formie plików, a nie w całości z nią pracować.  
  
 Poniższy przykład pobiera tablicę, która obejmuje 200 milionów wartości zmiennoprzecinkowych, a następnie oblicza ich średniej. Dane wyjściowe z przykładu wskazują, że ponieważ przykład przechowuje macierz w całości w pamięci, zanim ją oblicza średnią, <xref:System.OutOfMemoryException> jest zgłaszany.  
  
 [!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
 [!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
 Poniższy przykład pozwala wyeliminować <xref:System.OutOfMemoryException> wyjątku przez przetwarzanie przychodzących danych bez przechowywania całego zestawu danych w pamięci, serializacji danych do pliku, jeśli to konieczne umożliwić dalsze przetwarzanie (te wiersze są ujęte na zewnątrz w tym przykładzie ponieważ w tym przypadku produkują pliku, którego rozmiar jest większy niż 1 GB), a oddaje obliczona średnia liczba przypadków wywołanie procedury.  
  
 [!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
 [!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
 Są wielokrotnie łączenia dużych ciągów.  
 Ponieważ ciągów są niezmienne, operacja łączenia każdego ciągu tworzy nowy ciąg. Wpływ małych ciągów lub niewielkiej liczby operacje łączenia jest niewielki. Jednak dla dużych ciągów lub bardzo dużej liczby operacji łączenia ciągów może prowadzić do dużej liczby alokacji pamięci i fragmentacja pamięci, niską wydajnością i ewentualnie <xref:System.OutOfMemoryException> wyjątków.  
  
 Podczas łączenia dużych ciągów lub wykonywanie dużej liczby operacji łączenia, należy używać <xref:System.Text.StringBuilder> klasy zamiast <xref:System.String> klasy. Po zakończeniu manipulowanie ciąg przekonwertować <xref:System.Text.StringBuilder> wystąpienia na ciąg przez wywołanie metody <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> metody.  
  
 Możesz przypiąć dużą liczbę obiektów w pamięci.  
 Przypinanie dużą liczbę obiektów w pamięci przez długie okresy może utrudnić dla modułu odśmiecania pamięci do przydzielenia ciągłych bloków pamięci. Jeśli został przypięty dużą liczbę obiektów w pamięci, na przykład za pomocą `fixed` instrukcji w języku C# lub przez wywołanie metody <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> metody z typem dojścia <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, można wykonać następujące polecenie, aby adres <xref:System.OutOfMemoryException> wyjątku.  
  
-   Ocenę, czy każdy obiekt naprawdę potrzebuje do można przypiąć  
  
-   Upewnij się, że każdy obiekt nieprzypięte tak szybko, jak to możliwe.  
  
-   Upewnij się, że każdy wywołanie <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> metoda pamięci numeru pin ma odpowiedniego wywołania <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> metoda odpiąć pamięci.  
  
 Firmy Microsoft pośredni (MSIL) instrukcji throw <xref:System.OutOfMemoryException> wyjątek:  
  
-   [box](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
  
-   [newarr](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  
  
-   [newobj](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  
  
 <xref:System.OutOfMemoryException> używa HRESULT `COR_E_OUTOFMEMORY`, który ma wartość 0x8007000E.  
  
 Aby uzyskać listę początkowe wartości właściwości wystąpienia <xref:System.OutOfMemoryException>, zobacz <xref:System.OutOfMemoryException.%23ctor%2A> konstruktorów.  
  
> [!NOTE]
>  Wartość dziedziczonego <xref:System.Exception.Data%2A> właściwość jest zawsze `null`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.OutOfMemoryException" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.OutOfMemoryException" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Exception.Message%2A> właściwości nowego wystąpienia dostarczane przez system komunikatu, który opisuje błąd, takie jak "Było wystarczającej ilości pamięci dla kontynuowania wykonywania programu." Ten komunikat uwzględnia bieżącą kulturę systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.OutOfMemoryException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Zlokalizowany ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który opisuje błąd.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.OutOfMemoryException" /> klasy przy użyciu określonego komunikatu o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawartość `message` powinna być zrozumiała dla ludzi. Obiekt wywołujący tego konstruktora jest wymagany w celu zagwarantowania, że ten ciąg został zlokalizowany w bieżącej kulturze systemu.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.OutOfMemoryException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt zawierający dane serializowanego obiektu.</param>
        <param name="context">Informacje kontekstowe o źródłowego lub miejscu docelowym.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.OutOfMemoryException" /> klasy z serializowanych danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływana podczas deserializacji do odtworzenia obiektu wyjątku przesyłanego za pomocą strumienia. Aby uzyskać więcej informacji, zobacz [XML oraz serializacji protokołu SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie wyjaśniający przyczynę wyjątku.</param>
        <param name="innerException">Wyjątek, który jest przyczyną bieżącego wyjątku. Jeśli <c>innerException</c> parametr nie jest odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic), bieżący wyjątek jest zgłaszany w <see langword="catch" /> blok, który obsługuje wyjątek wewnętrzny.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.OutOfMemoryException" /> klasy przy użyciu określonego komunikatu o błędzie i odwołania do wewnętrznego wyjątku, który jest przyczyną tego wyjątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek generowany jako bezpośredni wynik poprzedniego wyjątku może zawierać odwołanie do poprzedniego wyjątku we <xref:System.Exception.InnerException%2A> właściwości. <xref:System.Exception.InnerException%2A> Właściwość zwraca taką samą wartość, która jest przekazywana do konstruktora, lub odwołanie o wartości null (`Nothing` w języku Visual Basic) jeżeli <xref:System.Exception.InnerException%2A> nie dostarcza wartości wewnętrznego wyjątku do konstruktora.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.OutOfMemoryException>.  
  
|Właściwość|Wartość|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Odwołanie do wewnętrznego wyjątku.|  
|<xref:System.Exception.Message%2A>|Ciąg komunikatu o błędzie.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>