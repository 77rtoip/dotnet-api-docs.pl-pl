<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e5b6cdff1b612ac2adc40e982b75d2afd346a2d" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52917047" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje punkt w czasie, zwykle wyrażona jako datę i godzinę dnia, względem uniwersalnego czasu koordynowanego (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset> Struktura zawiera <xref:System.DateTime> wartość, wraz z <xref:System.DateTimeOffset.Offset%2A> właściwość, która określa różnicę między bieżącą <xref:System.DateTimeOffset> wystąpienia Data i godzina oraz uniwersalny czas koordynowany (UTC). Ponieważ dokładnie określa datę i godzinę względem czasu UTC, <xref:System.DateTimeOffset> nie ma struktury `Kind` elementu członkowskiego, jako <xref:System.DateTime> jest struktura. Reprezentuje daty i godziny z wartościami, których UTC zakresu od 12:00:00 północy 1 stycznia 0001 Anno Domini (typowe Era), do 11:59:59 PM, 31 grudnia 9999 r. (C.E.).  
  
 Składnik godziny <xref:System.DateTimeOffset> jest mierzona w jednostkach 100-nanosekundowych o nazwie taktów i określonej daty jest liczbę znaczników, od momentu 12:00 w dniu, stycznia 1, 0001 (R). w <xref:System.Globalization.GregorianCalendar> kalendarza. A <xref:System.DateTimeOffset> wartość zawsze jest wyrażona w ramach jawnego lub domyślnego kalendarza. Znaczniki, które są przypisane do leap sekund nie są objęte łączną liczbę taktów.  
  
> [!NOTE]
>  Jeśli pracujesz z wartość impulsów, że chcesz przekonwertować niektórych innych interwał czasu, takich jak minut i sekund, należy użyć <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, lub <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> stała w celu wykonania konwersji. Na przykład, aby dodać liczbę sekund, reprezentowane przez określoną liczbę taktów do <xref:System.DateTimeOffset.Second%2A> składnika <xref:System.DateTimeOffset> wartości, można użyć wyrażenia `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  
 Mimo że <xref:System.DateTimeOffset> wartość zawiera przesunięcie, nie jest to struktura danych pełni uwzględniających strefy czasowe. Przesunięcie względem czasu UTC jest pojedynczy parametr strefy czasowej, go nie jednoznacznie identyfikuje strefy czasowej. Nie tylko w wielu strefach czasowych korzystają z tego samego przesunięcie względem czasu UTC, ale zmienia przesunięcie jednej strefie czasowej, jeśli jego obowiązuje czas letni. Oznacza to, że jak tylko <xref:System.DateTimeOffset> wartość są oddzielone od strefy czasowej, nie mogą już być jednoznacznie połączony do jego oryginalnej strefy czasowej.  
  
 Ponieważ <xref:System.DateTimeOffset> jest strukturą, <xref:System.DateTimeOffset> obiekt, który została zadeklarowana, ale nie w przeciwnym razie zainicjowane zawiera wartości domyślne dla każdego z jego pól elementu członkowskiego. Oznacza to, że jego <xref:System.DateTimeOffset.DateTime%2A> właściwość jest ustawiona na <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> i jego <xref:System.DateTimeOffset.Offset%2A> właściwość jest ustawiona na <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Można utworzyć nową <xref:System.DateTimeOffset> wartość przez wywołanie metody żadnego przeciążenia jej konstruktora, które są podobne do przeciążenia konstruktorów dla <xref:System.DateTime> struktury. Można również utworzyć nową <xref:System.DateTimeOffset> wartość przez przypisanie <xref:System.DateTime> wartość. Jest to niejawna konwersja; nie wymaga operatora rzutowania (w języku C#) lub wywołać metodę konwersji (w języku Visual Basic). Można również zainicjować <xref:System.DateTimeOffset> wartości z reprezentacji w postaci ciągu daty i godziny, wywołując szereg statyczny ciąg analizowania metody, które obejmują <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, i <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Elementy członkowskie <xref:System.DateTimeOffset> struktury udostępniają funkcje, w następujących obszarach:  
  
-   Arytmetyka daty i godziny.  
  
     Możesz dodawać lub odejmować daty lub odstępach czasu z określonego <xref:System.DateTimeOffset> wartość. Operacji arytmetycznych na wartościach <xref:System.DateTimeOffset> wartości, w przeciwieństwie do tych z <xref:System.DateTime> wartości, dostosować pod względem różnic w przesunięcia czasowego, zwracając wynik. Na przykład, poniższy kod używa <xref:System.DateTime> zmiennych na potrzeby odejmowania bieżący czas lokalny od bieżącego czasu UTC. W kodzie następnie użyto <xref:System.DateTimeOffset> zmienne, aby wykonać operację. Odejmowanie z <xref:System.DateTime> wartości zwraca różnicę lokalnej strefy czasowej względem czasu UTC, podczas odejmowania z <xref:System.DateTimeOffset> wartości zwraca <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Wpisz operacje konwersji.  
  
     Możesz przekonwertować <xref:System.DateTimeOffset> wartości <xref:System.DateTimeOffset.DateTime%2A> wartości i na odwrót.  
  
-   Czas operacji manipulacji i wyodrębniania.  
  
     Można wyodrębnić daty lub godziny z <xref:System.DateTimeOffset> wartości. Możesz również pobrać wartość określonego <xref:System.DateTimeOffset> składnika, takie jak jego roku lub jego miesiąca.  
  
-   Konwersja na datę i godzinę.  
  
     Można przekonwertować którekolwiek <xref:System.DateTimeOffset> wartość do innego <xref:System.DateTimeOffset> wartość, która reprezentuje tego samego punktu w czasie w innej strefie czasowej. Jednak reguły korekty strefy czasowej są stosowane tylko w przypadku właściwości <xref:System.DateTimeOffset.ToLocalTime%2A> metody, która konwertuje <xref:System.DateTimeOffset> wartość daty i godziny w strefie systemu lokalnego.  
  
-   Porównanie daty i godziny.  
  
     Można określić, czy którekolwiek określonego <xref:System.DateTimeOffset> wartość jest wcześniejsza niż takie same jak lub nowszej niż innego <xref:System.DateTimeOffset> wartość. Zanim porównanie jest wykonywane, wszystkie wartości są konwertowane na czas UTC.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Wybieranie pomiędzy elementem DateTime, DateTimeOffset, TimeSpan i TimeZoneInfo</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: .NET Framework 4 formatowanie narzędzia</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury, korzystając z określonego <see cref="T:System.DateTime" /> wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zachowanie zależy od wartości <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość `dateTime` parametru:  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeOffset.DateTime%2A> właściwość nowe wystąpienie jest równe `dateTime`i <xref:System.DateTimeOffset.Offset%2A> właściwość ma wartość równą <xref:System.TimeSpan.Zero>.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, <xref:System.DateTimeOffset.DateTime%2A> właściwość nowe wystąpienie jest równe `dateTime`i <xref:System.DateTimeOffset.Offset%2A> właściwość ma wartość równą przesunięcie bieżącej strefy czasowej systemu lokalnego.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość `dateTime` parametr ma wpływ na wartości daty i godziny, który jest zwracany przez tego konstruktora.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uniwersalny czas koordynowany (UTC), Data i godzina, będącą wynikiem zastosowania przesunięcie jest starsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Data i Godzina UTC będącą wynikiem zastosowania przesunięcie jest późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury, korzystając z określonego <see cref="T:System.DateTime" /> wartość i przesunięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zachowanie zależy od częściowo wartość <xref:System.DateTime.Kind%2A> właściwość `dateTime` parametru:  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A> jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, wartość `offset` parametru musi być równa 0 lub <xref:System.ArgumentException> zgłaszany.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A> jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, wartość `offset` parametru musi być równa przesunięcie lokalnej strefy czasowej z uniwersalnego czasu koordynowanego (UTC) dla tej konkretnej daty lub <xref:System.ArgumentException> zgłaszany.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A> jest <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, `offset` parametr może mieć dowolną prawidłową wartość.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zainicjować <xref:System.DateTimeOffset> obiektu z daty i godziny oraz przesunięcie lokalnej strefy czasowej po tej strefy czasowej nie jest znana z wyprzedzeniem.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> równa się <see cref="F:System.DateTimeKind.Utc" /> i <paramref name="offset" /> nie jest równa zero.  
  
—lub— 
 <paramref name="dateTime.Kind" /> równa się <see cref="F:System.DateTimeKind.Local" /> i <paramref name="offset" /> nie jest równa przesunięcie strefy czasu lokalnego systemu.  
  
—lub— 
 <paramref name="offset" /> nie jest określony w całe minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> jest mniejsza niż-14 godzin lub większy niż 14 godzin.  
  
—lub— 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Daty i godziny, wyrażone jako liczba 100-nanosekundowych interwałów, które upłynęły od północy 12:00:00 w dniu 1 stycznia 0001.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonej liczby taktów i przesunięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj próby wywołania <xref:System.DateTimeOffset.%23ctor%2A> Konstruktor do tworzenia wystąpienia <xref:System.DateTimeOffset> wartością czasu lokalnego, przesunięcie innych niż, od lokalnego czasu strefy zgłasza <xref:System.ArgumentException>. Umożliwia to przeciążenie <xref:System.DateTimeOffset> konstruktora w celu obejścia tego ograniczenia. W poniższym przykładzie użyto lokalnego czasu na liczbę znaczników do utworzenia wystąpienia <xref:System.DateTimeOffset> wartość przesunięcia, których nie musi to oznaczać, czas lokalny:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.DateTimeOffset> obiektu za pomocą liczby taktów dowolną datę (w tym przypadku 16 lipca 2007 o 13:32) z przesunięciem od -5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> nie jest określony w całe minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.DateTimeOffset.UtcDateTime" /> Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
—lub— 
 <paramref name="ticks" /> jest mniejsza niż <see langword="DateTimeOffset.MinValue.Ticks" /> lub większa niż <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
—lub— 
 <paramref name="Offset" /> s mniejsze niż-14 godzin lub większy niż 14 godzin.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 przez liczbę dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury za pomocą określonego roku, miesiąca, dnia, godziny, minuty, sekundy i przesunięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje parametry `year`, `month`, i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTimeOffset> wartości za pomocą rok, miesiąc i dzień w kalendarzu innym, wywołanie <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTimeOffset> obiektu za pomocą <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> przeciążenia konstruktora.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> nie reprezentuje całe minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> jest mniejsza niż jeden lub większa niż 9999.  
  
—lub— 
 <paramref name="month" /> jest mniejsza niż jeden lub większa niż 12.  
  
—lub— 
 <paramref name="day" /> jest mniejsza niż jeden lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" /> jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="second" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="offset" /> jest mniejsza niż-14 godzin lub większy niż 14 godzin.  
  
—lub— 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 przez liczbę dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury za pomocą określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i przesunięcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje parametry `year`, `month`, i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTimeOffset> wartości za pomocą rok, miesiąc i dzień w kalendarzu innym, wywołanie <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTimeOffset> obiektu za pomocą <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> przeciążenia konstruktora.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> nie reprezentuje całe minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> jest mniejsza niż jeden lub większa niż 9999.  
  
—lub— 
 <paramref name="month" /> jest mniejsza niż jeden lub większa niż 12.  
  
—lub— 
 <paramref name="day" /> jest mniejsza niż jeden lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" /> jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="second" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="millisecond" /> jest mniejsza niż 0 lub większa od 999.  
  
—lub— 
 <paramref name="offset" /> jest mniejsza niż -14 lub większy niż 14.  
  
—lub— 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Rok.</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 przez liczbę dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="calendar">Kalendarza, który jest używany do interpretacji <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.DateTimeOffset" /> struktury za pomocą określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i przesunięcie określony kalendarz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`, `month`, `day`, `hour`, `minute`, `second`, I `millisecond` wszystkie parametry odzwierciedlają wartości wyrażone w kalendarzu określonej przez `calendar` parametru. Wyjątek jest generowany, jeśli te wartości tworzą daty i godziny, których nie można wyrazić za pomocą tego kalendarza.  
  
   
  
## Examples  
 W poniższym przykładzie użyto obu wystąpień <xref:System.Globalization.HebrewCalendar> klasy i <xref:System.Globalization.HijriCalendar> klasy w celu utworzenia wystąpienia <xref:System.DateTimeOffset> wartość. Czy data jest następnie wyświetlana w konsoli przy użyciu odpowiednich kalendarze i kalendarz gregoriański.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> nie reprezentuje całe minuty.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> nie może być <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> jest mniejsza niż <paramref name="calendar" /> parametru <see langword="MinSupportedDateTime.Year" /> lub większa niż <see langword="MaxSupportedDateTime.Year" />.  
  
—lub— 
 <paramref name="month" /> jest mniejsze lub większe niż liczba miesięcy w <paramref name="year" /> w <paramref name="calendar" />.  
  
—lub— 
 <paramref name="day" /> jest mniejsza niż jeden lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" /> jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="second" /> jest mniejszy niż 0 lub większą niż 59.  
  
—lub— 
 <paramref name="millisecond" /> jest mniejsza niż 0 lub większa od 999.  
  
—lub— 
 <paramref name="offset" /> jest mniejsza niż-14 godzin lub większy niż 14 godzin.  
  
—lub— 
<paramref name="year" />, <paramref name="month" />, I <paramref name="day" /> parametrów nie może być reprezentowana jako wartości daty i godziny.  
  
—lub— 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">A <see cref="T:System.TimeSpan" /> obiekt, który reprezentuje dodatni lub fałszywie ujemny przedział czasu.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiektu, który dodaje określony przedział czasu na wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i przedział czasu, reprezentowane przez <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.DateTimeOffset.Add%2A> metodę, aby dodać więcej niż jeden rodzaj przedział czasu (dni, godziny, minuty, sekundy lub milisekund) w ramach jednej operacji. Zachowanie tej metody jest taka sama jak operator dodawania. <xref:System.DateTimeOffset> Struktury obsługuje również metody dodawania specjalne (takie jak <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, i <xref:System.DateTimeOffset.AddMinutes%2A>) dla każdego interwału czasu.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `timeSpan` jego datę i godzinę.  
  
 <xref:System.DateTimeOffset.Add%2A> Metoda nie wpływa na wartość bieżącej <xref:System.DateTimeOffset> obiektu <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.Add%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 Jeśli `timeSpan` parametr jest `null`, ta metoda zwraca wartość z oryginalnym <xref:System.DateTimeOffset> obiektu bez zmian.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.TimeSpan> obiektów, które reprezentują godziny lotów między miejscami docelowymi. <xref:System.DateTimeOffset.Add%2A> Metoda następnie dodaje te czasy <xref:System.DateTimeOffset> obiektu, który reprezentuje czas początkowej startowania lotu. Wynik odzwierciedla czas nadejścia zaplanowane w każdej lokalizacji docelowej.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Liczba dni całość lub część. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę dni całość lub część wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę dni, reprezentowane przez <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `days` parametr jest ułamkową część dnia. Na przykład 4.5 jest odpowiednikiem 4 dni, 12 godzin, 0 minut 0 sekund, 0 milisekund. `days` Parametru jest zaokrąglana do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `days` jego datę i godzinę.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddDays%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 Konwertowanie odstępami czasowymi krótszej niż jeden dzień na ułamek może pociągać za sobą utratę dokładności. Jeśli jest to problemem, możesz użyć <xref:System.DateTimeOffset.Add%2A> metody, która pozwala na określenie więcej niż jeden rodzaj przedział czasu w pojedynczym wywołaniu metody oraz eliminuje potrzebę można przekonwertować interwałów czasu na części ułamkowe dziennie.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.AddDays%2A> metody, aby wyświetlić listę dat, które mieszczą się w poniedziałek, początek tygodnia pracy w marcu 2008 roku.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Liczba godzin całość lub część. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę godzin całość lub część wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę godzin, reprezentowane przez <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `hours` parametr ma część ułamkową parametru godzinę. Na przykład 4.5 jest odpowiednikiem 4 godziny, 30 minut, 0 sekund, 0 milisekund. `hours` Parametru jest zaokrąglana do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `hours` jego datę i godzinę.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddHours%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 Konwertowanie odstępami czasowymi krócej niż godzinę na ułamek może pociągać za sobą utratę dokładności. (Na przykład jedna minuta jest 0.01666 godzinę). Jeśli jest to problemem, możesz użyć <xref:System.DateTimeOffset.Add%2A> metody, która pozwala na określenie więcej niż jeden rodzaj przedział czasu w pojedynczym wywołaniu metody oraz eliminuje potrzebę można przekonwertować interwałów czasu na części ułamkowe godzinę.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.AddHours%2A> metody, aby wyświetlić listę godziny rozpoczęcia pracy przenosi się na dany tydzień w urzędzie, który ma dwie zmiany ośmiu godzin dziennie.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Liczba milisekund całość lub część. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę milisekund do wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę milisekund całego reprezentowany przez <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `milliseconds` parametr ma część ułamkową milisekundy. Na przykład 4.5 jest odpowiednikiem 4 milisekund, a 5000 znaczników, gdzie jeden milisekund jest równa 10 000 taktów. Jednak `milliseconds` jest zaokrąglana do najbliższej milisekundy; wszystkie wartości.5 lub większe są zaokrąglane w górę.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `milliseconds` jego datę i godzinę.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddMilliseconds%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Liczba minut całość lub część. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę minut całość lub część wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę minut, reprezentowane przez <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `minutes` parametr ma część ułamkową minuty. Na przykład 4.5 jest odpowiednikiem 4 minut, 30 sekundach, 0 milisekund. `minutes` Parametru jest zaokrąglana do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` jego datę i godzinę.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddMinutes%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 Konwertowanie odstępach czasu z mniej niż minutę na ułamek może pociągać za sobą utratę dokładności. (Na przykład jedna sekunda jest 0.01666 minutę). Jeśli jest to problemem, możesz użyć <xref:System.DateTimeOffset.Add%2A> metody, która pozwala na określenie więcej niż jeden rodzaj przedział czasu w pojedynczym wywołaniu metody oraz eliminuje potrzebę można przekonwertować interwałów czasu na części ułamkowe minutę.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Liczby całkowitej. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę miesięcy do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę miesięcy, reprezentowane przez <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do większości innych metod, które Dodaj jednostkę interwału jeden raz (np. minuty lub dni) na wartość daty i godziny <xref:System.DateTimeOffset.AddMonths%2A> nie umożliwiają dodawanie części ułamkowych miesiąca. Aby dodać czas, który składa się inne jednostki czasu, oprócz miesięcy do <xref:System.DateTimeOffset> obiektu, należy użyć <xref:System.DateTimeOffset.Add%2A> metody.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `months` jego datę i godzinę.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.AddMonths%2A> metodę, aby wyświetlić datę rozpoczęcia każdego kwartału roku 2007.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Liczba sekund całość lub część. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę całkowitą od ułamków sekund do wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę sekund, reprezentowane przez <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `seconds` parametr ma część ułamkową sekund. Wartość części ułamkowych części sekundy są wyświetlane w poniższej tabeli.  
  
|Druga wartość|Odpowiednik|  
|------------------|----------------|  
|drugi.1|100 MS|  
|drugi.01|10 milisekund|  
|drugi.001|1 milisekundy|  
  
 `seconds` Parametru jest zaokrąglana do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` jego datę i godzinę.  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddSeconds%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Liczba taktów 100-nanosekundowych. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę taktów do wartość tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczby taktów reprezentowany przez <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znacznik reprezentuje 100 nanosekund lub co dziesięć milionowych części sekundy. Ponieważ znacznik jest przedziałem czasu bardzo małe i dokładne, żadnych większych jednostkę czasu może być wyrażona jako liczba taktów bez utraty precyzji.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` jego datę i godzinę.  
  
 Poniższa lista zawiera liczbę znaczników w określonym interwale.  
  
|Przedział czasu|Liczba impulsów|  
|-------------------|---------------------|  
|Sekunda|10 000 000|  
|Minuta|600,000,000|  
|Godzina|36,000,000,000|  
|Dzień|864,000,000,000|  
|Tydzień|6,048,000,000,000|  
|Miesiąc|Zależy od liczby dni w miesiącu.|  
|Rok przestępny inne niż|315,360,000,000,000|  
|Rok przestępny|316,224,000,000,000|  
  
 Ponieważ <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.AddTicks%2A> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania arytmetyka daty i godziny.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Kilka lat temu. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę lat do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą Data i godzina reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i liczbę lat, reprezentowane przez <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do większości innych metod, które Dodaj jednostkę interwału jeden raz (np. minuty lub dni) na wartość daty i godziny <xref:System.DateTimeOffset.AddYears%2A> nie umożliwiają dodawanie części ułamkowych w roku. Czas, który składa się inne jednostki czasu, oprócz lat, aby dodać <xref:System.DateTimeOffset> obiektu, należy użyć <xref:System.DateTimeOffset.Add%2A> metody.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `months` jego datę i godzinę.  
  
   
  
## Examples  
 W Stanach Zjednoczonych licencji sterownika nie można wystawić osobom 16 lat. Poniższy przykład wyświetla Najpóźniejsza data to możliwe, na którym osoba musi zaprojektowanych w celu prawnie wydawane prawa jazdy.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="second">Drugi obiekt, który będzie porównywany.</param>
        <summary>Porównuje dwa <see cref="T:System.DateTimeOffset" /> obiektów i wskazuje, czy pierwszy jest wcześniejsza niż drugi, równe drugiemu lub nowsze od drugiego.</summary>
        <returns>Liczby całkowitej ze znakiem, która wskazuje, czy wartość <paramref name="first" /> parametr jest wcześniejsza niż późniejsza niż, lub tym samym czasie jako wartość <paramref name="second" /> parametru, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Znaczenie 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="first" /> jest starsza niż <paramref name="second" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="first" /> jest równa <paramref name="second" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="first" /> jest późniejsza niż <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wykonywanie porównania, Metoda ta konwertuje zarówno `first` i `second` parametrów do uniwersalnego czasu koordynowanego (UTC) przed przesłaniem porównania. Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 Innymi słowy <xref:System.DateTimeOffset.Compare%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób wywołania <xref:System.DateTimeOffset.Compare%2A> metodę, aby porównać <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektu.</param>
        <summary>Porównuje bieżącego <see cref="T:System.DateTimeOffset" /> określonego obiektu <see cref="T:System.DateTimeOffset" /> obiektu i wskazuje, czy bieżący obiekt jest wcześniejsza niż takie same jak lub nowszej niż drugi <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Liczba całkowita wskazująca relację między bieżącą <see cref="T:System.DateTimeOffset" /> obiektu i <paramref name="other" />, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest wcześniejsza niż <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest taki sam jak <paramref name="other" />.  
  
 </description></item><item><term> Większa niż zero.  
  
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest późniejsza niż <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda porównuje <xref:System.DateTimeOffset> obiektów przez porównanie ich <xref:System.DateTimeOffset.UtcDateTime%2A> wartości; oznacza to, ustala, czy dwa obiekty reprezentują pojedynczy punkt w czasie i wskazuje, czy bieżący obiekt jest wcześniejsza niż późniejsza niż lub takie same jak `other`parametru.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób wywołania <xref:System.DateTimeOffset.CompareTo%2A> metodę, aby porównać <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTime" /> wartość, która reprezentuje składnik daty z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>A <see cref="T:System.DateTime" /> wartość, która reprezentuje składnik daty z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości spowoduje usunięcie wszelkich znaczną część składnik godziny z <xref:System.DateTimeOffset> obiektu i zwraca jego składnik daty znaczące. Na przykład jeśli <xref:System.DateTimeOffset> obiektu ma wartość daty i godziny "1/12/07 16:01:00 + 7:30", zwraca właściwości <xref:System.DateTime> wartość "1/12/07 12:00:00 AM". <xref:System.DateTime> Wartości mogą być następnie wyświetlane przy użyciu dowolnej specyfikatorów formatu standardowego lub niestandardowego, które wyświetlają tylko daty. (Zobacz ilustrację można znaleźć w sekcji przykład).  
  
 Wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości zwracanego <xref:System.DateTime> obiektu jest zawsze <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Aby wyświetlić datę bez jego składnik czasu, można również użyć "D" lub specyfikatory; formatu "d" Ilustracja znajduje się w sekcji przykład.  
  
   
  
## Examples  
 Poniższy przykład pobiera wartość <xref:System.DateTimeOffset.Date%2A> właściwości dla określonej daty. Następnie wyświetla tę wartość do konsoli przy użyciu niektóre specyfikatory standardowego i niestandardowego formatu daty.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Ciągi standardowego formatu daty i godziny</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Ciągi formatów niestandardowych daty/godziny</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTime" /> wartość, która reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Data i godzina bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Ta właściwość zwraca składnika godziny i daty <xref:System.DateTimeOffset> obiektu, który sprawia, że przydatne w przypadku wykonywania <xref:System.DateTimeOffset> do <xref:System.DateTime> konwersji. Na przykład jeśli <xref:System.DateTimeOffset> obiektu ma wartość daty i godziny "1/12/07 16:01:00 + 7:30", właściwość ta zwraca daty "1/12/07 16:01:00".  
  
 Wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości zwracanego <xref:System.DateTime> obiekt jest <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.DateTimeOffset.DateTime%2A> przekonwertować wartość czasu, zwracany przez właściwość <xref:System.DateTimeOffset.Now%2A> i <xref:System.DateTimeOffset.UtcNow%2A> właściwości <xref:System.DateTime> wartości.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">Konwertowanie pomiędzy DateTime i DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa dzień miesiąca, reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik dnia bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażony jako wartość z zakresu od 1 do 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik dnia obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody przy użyciu specyfikatorów formatu niestandardowego "d" lub "dd".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik dni z wartości <xref:System.DateTimeOffset> obiektu na trzy różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Day%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "d".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "dd".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa dzień tygodnia, reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Jedną z wartości wyliczenia, które wskazuje dzień tygodnia bieżącej <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartości stałe w <xref:System.DayOfWeek> wyliczenia zakresu od <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> do <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Jeśli Rzutowanie na liczbę całkowitą, jego wartość należy do zakresu od zera (co oznacza <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) 6 (co oznacza <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Możesz również wyświetlić nazwy dnia tygodnia z określonej daty przy użyciu specyfikatora formatu "D" lub specyfikator formatu niestandardowego "dddd". Na przykład:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Należy pamiętać, że ciąg zwracany przez wywołanie metody `ToString` metody <xref:System.DayOfWeek> składowej wyliczenia, która jest zwracana przez tę właściwość nie jest lokalizowany. Aby wyodrębnić ciąg, który zawiera nazwę dnia tygodnia bieżącej kultury lub określonej kultury, należy wywołać <xref:System.DateTimeOffset.ToString%2A> metody przy użyciu specyfikatora formatu niestandardowego "dddd". Na przykład, poniższy kod wyświetla nazwę dnia tygodnia dla daty przy użyciu `fr-fr` kultury.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 Poniższy przykład wyświetla nazwę dnia tygodnia pierwszego dnia każdego miesiąca w 2008 roku.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień roku, reprezentowane przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Dzień roku bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażony jako wartość z zakresu od 1 do 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dwa <see cref="T:System.DateTimeOffset" /> obiekty są równe, lub <see cref="T:System.DateTimeOffset" /> obiekt jest taki sam jak określony segment.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</param>
        <summary>Określa, czy bieżący <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje tego samego punktu w czasie określonym <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli oba <see cref="T:System.DateTimeOffset" /> obiekty mają takie same <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed wykonaniem porównania, ta metoda konwertuje wartości obu <xref:System.DateTimeOffset> obiekty do uniwersalnego czasu koordynowanego (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 Innymi słowy <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują ten sam czas i mają taką samą wartość przesunięcia, użyj <xref:System.DateTimeOffset.EqualsExact%2A> metody.  
  
 A <xref:System.DateTimeOffset> obiekt, który nie jest `null` jest uważany za nowszej (lub nowszego) niż ta, która jest `null`.  
  
 To przeciążenie <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> implementuje metodę <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metody. Oferuje ona wydajność nieznacznie wyższa niż <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> przeciążać, ponieważ `other` parametru nie musiały zostać skonwertowane z obiektu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób wywołania <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> metody do testowania <xref:System.DateTimeOffset> obiekty do porównania z bieżącym <xref:System.DateTimeOffset> obiektu.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</param>
        <summary>Określa, czy <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje tego samego punktu w czasie, ponieważ określony obiekt.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="obj" /> parametr jest <see cref="T:System.DateTimeOffset" /> obiektu i reprezentuje tego samego punktu w czasie, ponieważ bieżący <see cref="T:System.DateTimeOffset" /> obiektu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed wykonaniem porównania, ta metoda konwertuje wartości obu bieżącego <xref:System.DateTimeOffset> obiektu i `obj` parametru uniwersalnego czasu koordynowanego (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 Innymi słowy <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> Metoda określa, czy bieżący <xref:System.DateTimeOffset> obiektu oraz określony obiekt reprezentuje pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują ten sam czas i mają taką samą wartość przesunięcia, użyj <xref:System.DateTimeOffset.EqualsExact%2A> metody.  
  
 Jeśli `obj` jest `null`, lub jeśli typ środowiska wykonawczego `obj` nie <xref:System.DateTimeOffset>, metoda zwraca `false`.  
  
   
  
## Examples  
 Poniższy przykład wskazuje, czy bieżącego <xref:System.DateTimeOffset> obiekt jest taki sam dla kilku innych <xref:System.DateTimeOffset> obiektów, a także jako odwołanie o wartości null i w <xref:System.DateTime> obiektu.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="second">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa określone <see cref="T:System.DateTimeOffset" /> obiekty reprezentują tego samego punktu w czasie.</summary>
        <returns><see langword="true" /> Jeśli dwa <see cref="T:System.DateTimeOffset" /> obiekty mają takie same <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed wykonaniem porównania, ta metoda konwertuje zarówno <xref:System.DateTimeOffset> obiekty do uniwersalnego czasu koordynowanego (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują ten sam czas i mają taką samą wartość przesunięcia, użyj <xref:System.DateTimeOffset.EqualsExact%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób wywołania <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> metody do testowania różnych par <xref:System.DateTimeOffset> obiekty pod kątem równości.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</param>
        <summary>Określa, czy bieżący <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje tym samym czasie i ma takie same przesunięcie określonych <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli bieżący <see cref="T:System.DateTimeOffset" /> obiektu i <paramref name="other" /> mają taką samą wartość daty i godziny i te same <see cref="P:System.DateTimeOffset.Offset" /> wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ w wielu strefach czasowych, udostępnić pojedyncze przesunięcie, zwracana wartość wynosząca `true` nie gwarantuje, że bieżący i `other` obiektu reprezentują czas, w tej samej strefie czasowej.  
  
 W odróżnieniu od <xref:System.DateTimeOffset.EqualsExact%2A> metody, przeciążeń <xref:System.DateTimeOffset.Equals%2A> ustalają, czy dwa <xref:System.DateTimeOffset> wartości reprezentują pojedynczy punkt w czasie. Nie wskazują, że dwie wartości mają tę samą datę i czas, a także samo przesunięcie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.DateTimeOffset.EqualsExact%2A> metodę, aby porównać podobne <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Windows czas pliku, wyrażone w dziesięciomilionowych częściach sekundy.</param>
        <summary>Konwertuje określony czas pliku Windows odpowiedni czas lokalny.</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę <paramref name="fileTime" /> z przesunięciem równa przesunięcie czasu lokalnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 Czas pliku Windows jest bezpośrednio dostępny za pośrednictwem interfejsu API Windows przez wywołanie metody `GetFileTime` funkcji, która zwraca `FILETIME` struktury. Parametr jednej funkcji jest uchwyt plik, którego informacje o czasie pliku do pobrania. Dojście do pliku jest pobierany przez wywołanie metody `CreateFile` funkcji. `FILETIME` Struktury `dwHighDateTime` elementu członkowskiego zawiera cztery bajty wyższego rzędu czas pliku i jego `dwLowDateTime` elementu członkowskiego zawiera cztery bajty niskiego rzędu. W poniższym przykładzie pokazano, jak pobrać wartości czasu pliku Windows i konwertować je na <xref:System.DateTimeOffset> wartości.  
  
 Można również utworzyć wartości czasu pliku Windows z <xref:System.DateTime> wartości przez wywołanie metody <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> i <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> metod i z <xref:System.DateTimeOffset> wartości przez wywołanie metody <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto interfejsu API Windows można pobrać czasy plików Windows dla pliku wykonywalnego programu WordPad.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> jest mniejsza niż zero.  
  
—lub— 
 <paramref name="filetime" /> jest większa niż <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Time systemu Unix, wyrażone jako liczbę milisekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o 12:00 czasu UTC). Dla systemu Unix godzin przed tą datą jego wartość jest ujemna.</param>
        <summary>Konwertuje czas systemu Unix, wyrażone jako liczbę milisekund, które upłynęły od 1970-01-01T00:00:00Z do <see cref="T:System.DateTimeOffset" /> wartości.</summary>
        <returns>Wartość daty i godziny, który reprezentuje ten sam moment w czasie, ponieważ time systemu Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A> Wartość właściwości zwracanego <xref:System.DateTimeOffset> wystąpienie jest <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, która reprezentuje uniwersalnego czasu koordynowanego. Konwertuj na wartość godziny w określonej strefy czasowej przez wywołanie metody <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> jest mniejsza niż-62,135,596,800,000.  
  
—lub— 
 <paramref name="milliseconds" /> jest większe niż 253,402,300,799,999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">Time systemu Unix, wyrażone jako liczba sekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o 12:00 czasu UTC). Dla systemu Unix godzin przed tą datą jego wartość jest ujemna.</param>
        <summary>Konwertuje czas systemu Unix, wyrażone jako liczba sekund, które upłynęły od 1970-01-01T00:00:00Z do <see cref="T:System.DateTimeOffset" /> wartości.</summary>
        <returns>Wartość daty i godziny, który reprezentuje ten sam moment w czasie, ponieważ time systemu Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Offset%2A> Wartość właściwości zwracanego <xref:System.DateTimeOffset> wystąpienie jest <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, która reprezentuje uniwersalnego czasu koordynowanego. Konwertuj na wartość godziny w określonej strefy czasowej przez wywołanie metody <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> jest mniejsza niż-62,135,596,800.  
  
—lub— 
 <paramref name="seconds" /> jest większe niż 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość skrótu dla bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik godziny czas reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik godziny bieżącej <see cref="T:System.DateTimeOffset" /> obiektu. Ta właściwość używa zegar 24-godzinny; wartość z zakresu od 0 do 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik godziny obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody "H", lub specyfikatorów formatu niestandardowego "HH".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik godziny z <xref:System.DateTimeOffset> obiektu na trzy różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Hour%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "H".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> specyfikatora formatu metody "HH".  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTime" /> wartość, która reprezentuje lokalne daty i czasu bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Lokalne daty i czasu bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli to konieczne, <xref:System.DateTimeOffset.LocalDateTime%2A> właściwość konwertuje aktualny <xref:System.DateTimeOffset> Data i godzina do daty i godziny w systemie lokalnym obiektu. Konwersja jest operacją dwuetapową:  
  
1.  Właściwość konwertuje aktualny <xref:System.DateTimeOffset> obiektu czas uniwersalny czas koordynowany (UTC).  
  
2.  Właściwość następnie konwertuje UTC na czas lokalny.  
  
 Nie ma żadnych nieprawidłowe godziny i niejednoznacznych wartości czasu są mapowane do lokalnej strefy (czas standardowy). (Jednak Konwersja może utworzyć anomalii: Jeśli <xref:System.DateTimeOffset> wartość, która pochodzi z komputera lokalnego odzwierciedla niejednoznaczne daty i godziny, którego wartość może być konwertowana na czas UTC, a następnie ponownie na czas lokalny, który różni się od oryginalnego czasu.)  Właściwość ma zastosowanie żadnych reguł dopasowania w lokalnej strefie czasowej, podczas wykonywania tej konwersji.  
  
 Ta właściwość zwraca składnika godziny i daty <xref:System.DateTimeOffset> obiektu, który sprawia, że przydatne w przypadku <xref:System.DateTimeOffset> do <xref:System.DateTime> konwersji. Oprócz przeprowadzania konwersji wszelkie niezbędne czasu, właściwość ta różni się od <xref:System.DateTimeOffset.DateTime%2A> właściwości, ustawiając wartość <xref:System.DateTime.Kind%2A> właściwości zwracanego <xref:System.DateTime> obiekt <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano kilka konwersji <xref:System.DateTimeOffset> wartości na czas lokalny w Stanach Zjednoczonych Pacyficznego standardowa strefy czasowej. Należy zauważyć, że ostatnie trzy razy wszystkie niejednoznaczne; Właściwość mapuje wszystkie z nich pojedyncza Data i godzina w strefie standardowego czasu pacyficznego.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje największa możliwa wartość z <see cref="T:System.DateTimeOffset" />. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest 12/31/9999 11:59:59 PM + 00:00.  
  
 <xref:System.DateTimeOffset.MaxValue> Właściwość jest używana do określenia czy wartość nowej <xref:System.DateTimeOffset> obiektu lub <xref:System.DateTimeOffset> wartość zwrócona przez obiekt operacji arytmetycznej jest taka sama jak lub starszej niż ta wartość zakresu maksymalnego. Jeśli tak nie jest, metoda zgłasza <xref:System.ArgumentOutOfRangeException>. Wszelkie <xref:System.DateTimeOffset> wartość jest konwertowana do uniwersalnego czasu koordynowanego (UTC), zanim metoda porównuje ją z <xref:System.DateTimeOffset.MaxValue>.  Oznacza to, że <xref:System.DateTimeOffset> wartości, których data i godzina znajdują się blisko maksymalną wielkość zakresu, ale których przesunięcie jest ujemna, może zgłosić wyjątek. Na przykład, wartość 12/31/9999 11:00 PM -02:00 jest poza zakresem, ponieważ jest jedną godzinę późniejszy niż <xref:System.DateTimeOffset.MaxValue> gdy jest konwertowana na czas UTC.  
  
 Niektóre kalendarze i wiele, takich jak <xref:System.Globalization.UmAlQuraCalendar>, obsługują zakresu dat w prawym górnym, starszej niż <xref:System.DateTime.MaxValue>. W takich przypadkach próby uzyskania dostępu do <xref:System.DateTime.MaxValue> w i przypisania zmiennych lub formatowanie operacji analizowania może zgłosić <xref:System.ArgumentOutOfRangeException>. Zamiast pobierania wartości <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, możesz pobrać wartość określonej kultury najnowsze prawidłowej wartości daty z <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> jest poza zakresem kalendarz domyślny bieżącej lub określonej kultury.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik milisekund czas reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik milisekund bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażone jako liczba całkowita z zakresu od 0 do 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik milisekund obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody przy użyciu specyfikatora formatu niestandardowego "fff".  
  
 Jeśli użytkownik korzysta z właściwości takich jak <xref:System.DateTimeOffset.Now%2A> lub <xref:System.DateTimeOffset.UtcNow%2A> dokładnie śledzić liczbę milisekund, który upłynął, dokładność składnik czasu w milisekundach zależy od rozdzielczości zegara systemowego. Windows NT w wersji 3.5 lub nowszy oraz systemy operacyjne Windows Vista rozdzielczość zegara wynosi około 10 – 15 milisekund.  
  
   
  
## Examples  
 Poniższy przykład wyświetla liczbę milisekund <xref:System.DateTimeOffset> obiektu przy użyciu specyfikatora formatu niestandardowego, uzyskując bezpośrednio dostęp <xref:System.DateTimeOffset.Millisecond%2A> właściwości.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik minuty z czas reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik minuty z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażone jako liczba całkowita z zakresu od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik minuty obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody za pomocą "m", czyli specyfikatorów formatu niestandardowego "mm".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik minuty z <xref:System.DateTimeOffset> obiektu na trzy różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Minute%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "m".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje najwcześniejszej możliwej <see cref="T:System.DateTimeOffset" /> wartość. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej wynosi 1/1/0001 0:00:00: 00 + 00:00.  
  
 <xref:System.DateTimeOffset.MinValue> Właściwość jest używana do określenia czy wartość nowej <xref:System.DateTimeOffset> obiektu lub <xref:System.DateTimeOffset> wartość zwrócona przez obiekt operacji arytmetycznej jest taka sama, wcześniejsza niż ta wartość zakresu minimalnego. Jeśli tak nie jest, metoda zgłasza <xref:System.ArgumentOutOfRangeException>. Wszelkie <xref:System.DateTimeOffset> wartość jest konwertowana na uniwersalny czas koordynowany (UTC) zanim metoda przeprowadza porównanie z <xref:System.DateTimeOffset.MinValue>.  Oznacza to, że <xref:System.DateTimeOffset> wartości, których data i godzina znajdują się blisko zakresu minimalnego, ale których offset jest dodatnia, może zgłosić wyjątek. Na przykład, wartość 1/1/0001 1:00:00: 00 + 02:00 jest poza zakresem, ponieważ jest jedną godzinę wcześniej niż <xref:System.DateTimeOffset.MinValue> gdy jest konwertowana na czas UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik miesiąca z Data jest reprezentowana przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik miesiąca bieżącej <see cref="T:System.DateTimeOffset" /> obiektu, wyrażone jako liczba całkowita z zakresu od 1 do 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik miesiąca obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody przy użyciu specyfikatorów formatu niestandardowego "M" lub "MM".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik miesiąca z <xref:System.DateTimeOffset> wartość na trzy różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Month%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "M".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "MM".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTimeOffset" /> obiekt, który jest ustawiona na bieżącą datą i godziną bieżącego komputera, a wartość przesunięcia ustawiono przesunięcie czasu lokalnego z uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>Element <see cref="T:System.DateTimeOffset" /> obiektu, którego daty i godziny jest bieżącym czasem lokalnym i którego przesunięcie jest przesunięcie lokalnej strefy czasowej z uniwersalnego czasu koordynowanego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładność składnik milisekund bieżącym czasem lokalnym zależy od rozdzielczości zegara systemowego. Windows NT w wersji 3.5 lub nowszy oraz systemy operacyjne Windows Vista rozdzielczość zegara wynosi około 10 – 15 milisekund.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.Now%2A> właściwości w celu pobrania aktualnej daty i godziny i wyświetla je przy użyciu wszystkich [ciągi formatu standardowego daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) obsługiwane przez <xref:System.DateTimeOffset> typu.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.Now%2A> i <xref:System.DateTimeOffset.Millisecond%2A> właściwości w celu określenia rozdzielczość zegara systemowego. Wyświetla czas tylko wtedy, gdy wartość jego składnik milisekund została zmieniona.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</summary>
        <value>Różnica między bieżącą <see cref="T:System.DateTimeOffset" /> wartość czasu i uniwersalny czas koordynowany (UTC) obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeSpan.Hours%2A> właściwości zwracanego <xref:System.TimeSpan> obiektu do zakresu od-14 godzin do 14 godzin.  
  
 Wartość <xref:System.DateTimeOffset.Offset%2A> właściwość jest precyzyjna do minuty.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.Offset%2A> właściwość do wyświetlenia różnicy czas lokalny z uniwersalnego czasu koordynowanego (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Obiekt do dodania interwał czasu.</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">Przedział czasu do dodania.</param>
        <summary>Dodaje określony interwał do <see cref="T:System.DateTimeOffset" /> obiekt, który ma określoną datę i godzinę, a daje <see cref="T:System.DateTimeOffset" /> obiekt, który ma nowe daty i godziny.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości z <paramref name="dateTimeTz" /> i <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Addition%2A> Metoda definiuje operacja dodawania dla <xref:System.DateTimeOffset> wartości. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Języki, które nie obsługują operatorów niestandardowych i przeciążanie operatorów może wywołać <xref:System.DateTimeOffset.Add%2A> metody zamiast tego.  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa określone <see cref="T:System.DateTimeOffset" /> obiekty reprezentują tego samego punktu w czasie.</summary>
        <returns><see langword="true" /> Jeśli oba <see cref="T:System.DateTimeOffset" /> obiekty mają takie same <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Equality%2A> Metoda definiuje operacji operatora równości dla <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Ocenia `left` i `right` operandy pod kątem równości, operator konwertuje obie wartości do uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy <xref:System.DateTimeOffset.op_Equality%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują ten sam czas i mają taką samą wartość przesunięcia, użyj <xref:System.DateTimeOffset.EqualsExact%2A> metody.  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden określony <see cref="T:System.DateTimeOffset" /> obiekt jest większy niż (lub późniejszy niż) drugi określony <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="left" /> jest późniejsza niż <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> Metoda definiuje działania wyższa niż operator <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.DateTimeOffset.Compare%2A> metody zamiast tego. Można również wywołać <xref:System.DateTimeOffset.op_GreaterThan%2A> metoda bezpośrednio w poniższym przykładzie pokazano.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Ocenia `left` i `right` operandów, operator konwertuje obie wartości do uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden określony <see cref="T:System.DateTimeOffset" /> obiekt jest większy lub równy do drugiej określonego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="left" /> jest taka sama jak lub późniejsza niż <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_GreaterThan%2A> Metoda definiuje działania większa lub równa operator <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.DateTimeOffset.Compare%2A> metody zamiast tego. Niektóre języki można również wywołać <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> metoda bezpośrednio w poniższym przykładzie pokazano.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Ocenia `left` i `right` operandów, operator konwertuje obie wartości do uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Obiekt do przekonwertowania.</param>
        <summary>Definiuje niejawną konwersję <see cref="T:System.DateTime" /> obiekt <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Przekonwertowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Implicit%2A> Metoda umożliwia kompilatorowi dokonać automatycznej konwersji <xref:System.DateTime> obiekt <xref:System.DateTimeOffset> obiekt bez jawnego operatora rzutowania (w języku C#) lub wywołać funkcję konwersji (w języku Visual Basic). Definiuje konwersja poszerzająca, która nie wiąże się z utratą danych i nie generuje <xref:System.OverflowException>. <xref:System.DateTimeOffset.op_Implicit%2A> Metody sprawia, że kod taki jak następujące możliwości:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Ta metoda jest odpowiednikiem <xref:System.DateTimeOffset.%23ctor%2A> konstruktora. Przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość `dateTime` parametru:  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, datę i godzinę <xref:System.DateTimeOffset> obiektu jest równe `dateTime`, a jego <xref:System.DateTimeOffset.Offset%2A> właściwość ma wartość równą 0.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, datę i godzinę <xref:System.DateTimeOffset> obiektu jest równe `dateTime`, a jego <xref:System.DateTimeOffset.Offset%2A> właściwość ma wartość równą przesunięcie bieżącej strefy czasowej systemu lokalnego.  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uniwersalny czas koordynowany (UTC), Data i godzina, będącą wynikiem zastosowania przesunięcie jest starsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Data i Godzina UTC będącą wynikiem zastosowania przesunięcie jest późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa określone <see cref="T:System.DateTimeOffset" /> obiekty odnoszą się do różnych punktach w czasie.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="left" /> i <paramref name="right" /> nie mają taki sam <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartości; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Inequality%2A> Metoda definiuje operacji operator nierówności dla <xref:System.DateTimeOffset> obiektów. Zawsze zwraca przeciwną wynikiem <xref:System.DateTimeOffset.op_Equality%2A>. <xref:System.DateTimeOffset.op_Inequality%2A> Metoda umożliwia następującego kodu:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Ocenia `left` i `right` operandy pod kątem równości, operator konwertuje obie wartości do uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy <xref:System.DateTimeOffset.op_Inequality%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują różne punkty w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia.  
  
 Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.DateTimeOffset.Compare%2A> metody zamiast tego. Ponadto niektóre języki można również wywołać <xref:System.DateTimeOffset.op_Inequality%2A> metoda bezpośrednio w poniższym przykładzie pokazano.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden określony <see cref="T:System.DateTimeOffset" /> obiekt jest mniejszy niż drugi określony <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="left" /> jest starsza niż <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThan%2A> Metoda definiuje less than-operator dla działania <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Ocenia `left` i `right` operandów, operator konwertuje oba operandy uniwersalnego czasu koordynowanego (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.DateTimeOffset.Compare%2A> metody zamiast tego. Ponadto niektóre języki można również wywołać <xref:System.DateTimeOffset.op_LessThan%2A> metoda bezpośrednio w poniższym przykładzie pokazano.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden określony <see cref="T:System.DateTimeOffset" /> obiekt jest mniejszy niż drugi określony <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns><see langword="true" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="left" /> jest starsza niż <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość <paramref name="right" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> Metoda określa operację mniejszą lub równą operatora dla <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Języki, które nie obsługują operatorów niestandardowych, można wywołać <xref:System.DateTimeOffset.Compare%2A> metody zamiast tego. Niektóre języki można również wywołać <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> metoda bezpośrednio w poniższym przykładzie pokazano.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Ocenia `left` i `right` operandów, operator konwertuje obie wartości do uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odejmuje określoną <see cref="T:System.DateTimeOffset" /> lub <see cref="T:System.TimeSpan" /> obiektu z <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Odjemna.</param>
        <param name="right">Odjemnik.</param>
        <summary>Odejmuje jeden <see cref="T:System.DateTimeOffset" /> obiektu z innego i zwraca przedział czasu.</summary>
        <returns>Obiekt, który reprezentuje różnica między <paramref name="left" /> i <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> Metoda określa operację odejmowania <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Języki, które nie obsługują operatorów niestandardowych i przeciążanie operatorów może wywołać <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> metody zamiast tego.  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Obiekt daty i czasu do odjęcia od.</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">Interwał czasu, który należy odjąć.</param>
        <summary>Odejmuje określony przedział czasu od określonej daty i godziny, a daje nową datę i godzinę.</summary>
        <returns>Obiekt, który jest równy wartości <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.op_Subtraction%2A> Metoda określa operację odejmowania <xref:System.DateTimeOffset> obiektów. Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Języki, które nie obsługują operatorów niestandardowych i przeciążanie operatorów może wywołać <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metody zamiast tego.  
  
 Jest równoważne metodę dla tego operatora <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę, godzinę i przesunięcia jego <see cref="T:System.DateTimeOffset" /> równoważne.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> analizuje ciąg zawierający trzy elementy, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. Te trzy elementy są, jak pokazano w poniższej tabeli.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Przesunięcie >|"-7:30"|  
  
 Mimo że każdy z tych elementów jest opcjonalny, \<przesunięcie > nie może występować samodzielnie. Należy podać razem z wartościami \<daty > lub \<czas >. Jeśli \<daty > Brak domyślnej wartości jest bieżący dzień. Jeśli \<czasu > brakuje jego domyślna wartość to 0:00:00: 00. Jeśli \<daty > jest obecny, ale jego roku składnika składa się z dwóch cyfr, jest konwertowany na rok w bieżącego kalendarza bieżącej kultury, na podstawie wartości z <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<przesunięcie > brakuje jego domyślna wartość to przesunięcie lokalnej strefy czasowej. \<Przesunięcie > może reprezentować ujemnych lub dodatnią przesunięcie względem uniwersalnego czasu koordynowanego (UTC). W obu przypadkach \<przesunięcie > mogą zawierać symbol znaku.  
  
 `input` Ciągu jest analizowany przy użyciu informacje o formatowaniu w <xref:System.Globalization.DateTimeFormatInfo> inicjowanym dla bieżącej kultury. Aby przeanalizować ciąg, który zawiera wyznaczonym formatowania, nie odpowiada formatowania bieżącej kultury, należy użyć <xref:System.DateTimeOffset.ParseExact%2A> metody i podania specyfikatora formatu.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.Parse%28System.String%29> metodę, aby przeanalizować kilka ciągów daty i godziny. Przykład zawiera dane wyjściowe z 22 marca 2007 w systemie, w których kulturą jest en-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" /> zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który zawiera formatowanie specyficzne dla kultury informacje na temat <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważny, korzystając z informacji zawartych w określonym formacie specyficzne dla kultury.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" />, zgodnie z określonym <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ta analizuje ciąg zawierający trzy elementy, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Przesunięcie >|"-7:30"|  
  
 Mimo że każdy z tych elementów jest opcjonalny, \<przesunięcie > nie może występować samodzielnie. Należy podać razem z wartościami \<daty > lub \<czas >. Jeśli \<daty > Brak domyślnej wartości jest bieżący dzień. Jeśli \<daty > jest obecny, ale jego roku składnika składa się z dwóch cyfr, jest konwertowany na rok w `provider` bieżący kalendarz parametru na podstawie wartości z <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<czasu > brakuje jego domyślna wartość to 0:00:00: 00. Jeśli \<przesunięcie > brakuje jego domyślna wartość to przesunięcie lokalnej strefy czasowej. \<Przesunięcie > może reprezentować ujemnych lub dodatnią przesunięcie względem uniwersalnego czasu koordynowanego (UTC). W obu przypadkach \<przesunięcie > mogą zawierać symbol znaku.  
  
 Format te trzy elementy jest definiowany przez `formatProvider` parametr, który może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, której formatowanie jest używany w `input` parametru. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje formatowania użytego w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatnia lub ujemna, używane w \<przesunięcie > musi być albo + lub -. Nie jest zdefiniowany przez <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu `formatProvider` parametru.  
  
   
  
## Examples  
 Poniższy przykład analizuje daty i ciągi czasu, które są sformatowane dla kultury fr-fr, a następnie wyświetli je przy użyciu systemu lokalnego domyślne en-us kultury.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" /> zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który zawiera formatowanie specyficzne dla kultury informacje na temat <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />. To typowa wartość do określenia <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne przy użyciu informacji o określonym formacie specyficzne dla kultury formatowanie i style.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> zgodnie z określonym <paramref name="formatProvider" /> i <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda ta analizuje ciąg zawierający trzy elementy, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Przesunięcie >|"-7:30"|  
  
 Mimo że każdy z tych elementów jest opcjonalny, \<przesunięcie > nie może występować samodzielnie. Należy podać razem z wartościami \<daty > lub \<czas >. Jeśli \<daty > Brak domyślnej wartości jest bieżący dzień. Jeśli \<daty > jest obecny, ale jego roku składnika składa się z dwóch cyfr, jest konwertowany na rok w `provider` bieżący kalendarz parametru na podstawie wartości z <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<czasu > brakuje jego domyślna wartość to 0:00:00: 00. Jeśli \<przesunięcie > brakuje domyślną wartością jest przesunięcie lokalnej strefy czasowej, lub <xref:System.TimeSpan.Zero?displayProperty=nameWithType> Jeśli <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> lub <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> wartość jest określona w `styles` parametru. Jeśli \<przesunięcie > jest obecny, może reprezentować ujemnych lub dodatnią przesunięcie względem uniwersalnego czasu koordynowanego (UTC). W obu przypadkach \<przesunięcie > mogą zawierać symbol znaku.  
  
 Format te trzy elementy jest definiowany przez `formatProvider` parametr, który może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, której formatowanie jest używany w `input` parametru. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje formatowania użytego w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Każdy element, również mogą być ujęte przez wiodące i końcowe białe i \<Data > a \<czas > może to być wewnętrzny biały (na przykład 6:00:00). Tylko \<przesunięcie > składnika nie może zawierać wewnętrzny biały znak.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatnia lub ujemna, używane w \<przesunięcie > musi być albo + lub -. Nie jest zdefiniowany przez <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez `formatProvider` parametru.  
  
 W poniższej tabeli przedstawiono elementy członkowskie <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> wyliczenie, które są obsługiwane.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje ciąg, reprezentowane przez `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywołując <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Choć ważna, wartość ta jest ignorowana. Wewnętrzny biały znak jest dozwolony w \<Data > a \<czas > elementy.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Choć ważna, wartość ta jest ignorowana. Początkowe biały znak jest dozwolony przed każdy składnik przeanalizowany ciąg.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Choć ważna, wartość ta jest ignorowana. Końcowe biały znak jest dozwolony przed każdy składnik przeanalizowany ciąg.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Jest to zachowanie domyślne. Nie można zastąpić poprzez dostarczanie bardziej restrykcyjne <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takich jak <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wskazuje, że, jeśli `input` brakuje parametru \<przesunięcie > element, należy podać przesunięcie lokalnej strefy czasowej. Jest to domyślne zachowanie <xref:System.DateTimeOffset.Parse%2A> metody.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wskazuje, że, jeśli `input` brakuje parametru \<przesunięcie > element, należy podać przesunięcie czasu UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Choć ważna, ta wartość jest ignorowana i nie ma wpływu.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwość, ta wartość nie ma wpływu.|  
  
 Tylko <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> wartość nie jest obsługiwana. <xref:System.ArgumentException> Jest generowany, jeśli ta wartość jest uwzględniona w `styles` parametru.  
  
   
  
## Examples  
 Poniższy przykład ilustruje efekt przekazywanie <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, i <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> wartości `styles` parametru <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
 <paramref name="styles" /> nie jest prawidłowym <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <paramref name="styles" /> zawiera nieobsługiwaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <paramref name="styles" /> obejmuje <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" /> zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu, który definiuje z oczekiwanym formatem <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu podanego formatu i informacji o formacie specyficzne dla kultury. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> zgodnie z określonym <paramref name="format" /> i <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Metoda analizuje reprezentację ciągu daty, która musi być w formacie zdefiniowane przez `format` parametru. Wymaga również, aby \<daty >, \<czas >, a \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w kolejności określonej przez `format`. Jeśli `input` ciąg nie pasuje to `format` parametr, metoda zgłasza <xref:System.FormatException>.  Z kolei <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody jest analizowany ciąg przedstawiając datę w jednym z formatów rozpoznawany przez dostawcę formatu <xref:System.Globalization.DateTimeFormatInfo> obiektu. <xref:System.DateTimeOffset.Parse%2A> Umożliwia także \<daty >, \<czas >, i \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w dowolnej kolejności.  
  
 `format` Jest ciągiem, który zawiera jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują wymagany format parametru `input` parametru. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, metoda zgłasza <xref:System.FormatException>.  
  
 Jeśli `format` wymaga, aby `input` zawierają datę, ale nie przez czas wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli `format` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli `format` nie wymaga `input` zawiera przesunięcie, wynikowy <xref:System.DateTimeOffset> przesunięcia strefy czasowej systemu lokalnego przypisany jest obiekt.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru, ponieważ jest dokładny format `input` Jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody za pomocą standardowych i niestandardowych określników i niezmiennej kultury, można przeanalizować kilka ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

Poniższy przykład analizuje tablicę ciągów, które powinny być zgodna z [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Jako dane wyjściowe w przykładzie pokazano ciągi zawierające spacje na początku i nie można przeanalizować powiedzie się, jak ciągów daty i godziny elementy, które są poza zakresem.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="format" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
 <paramref name="format" /> jest ciągiem pustym.  
  
—lub— 
Składnik godziny i oznaczenie AM/PM w <paramref name="input" /> nie zgadza się.</exception>
        <block subset="none" type="usage"><para>W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> metoda zgłasza wyjątek <see cref="T:System.FormatException" /> ciąg można przeanalizować zawiera składnik godziny i oznaczenia AM/PM, które nie są w umowie. W [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i wcześniejszych wersjach, oznaczenia AM/PM jest ignorowany.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków, który reprezentuje datę i godzinę.</param>
        <param name="format">Zakres znaków, który zawiera specyfikator formatu, który definiuje z oczekiwanym formatem <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który zawiera informacje o formatowaniu specyficzne dla kultury na temat <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />.</param>
        <summary>Konwertuje zakres znaków, który reprezentuje datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonego formatu, informacji o formacie specyficzne dla kultury i stylu. Format daty i godziny reprezentującego musi dokładnie pasować określonym formacie.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> parametr określony przez <paramref name="format" />, <paramref name="formatProvider" />, i <paramref name="styles" /> parametrów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Metoda ta analizuje obszaru znak, który reprezentuje datę, która musi być w formacie zdefiniowane przez `format` parametru. Wymaga również, aby \<daty >, \<czas >, a \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w kolejności określonej przez `format`. Jeśli `input` nie odpowiada `format` wzorzec, metoda zgłasza <xref:System.FormatException>.  Z kolei <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> metody jest analizowany ciąg przedstawiając datę w jednym z formatów rozpoznawany przez dostawcę formatu <xref:System.Globalization.DateTimeFormatInfo> obiektu. <xref:System.DateTimeOffset.Parse%2A> Umożliwia także \<daty >, \<czas >, i \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w dowolnej kolejności.  
  
 `format` Parametr jest zakresu znaków, który zawiera specyfikator formatu standardowego pojedynczych znaków lub specyfikatorów formatu niestandardowego, które definiują wymagany format parametru `input` parametru. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, metoda zgłasza <xref:System.FormatException>.  
  
 Jeśli `format` wymaga, aby `input` zawierają datę, ale nie przez czas wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli `format` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli `format` nie wymaga `input` zawiera przesunięcie, wynikowy <xref:System.DateTimeOffset> przesunięcia strefy czasowej systemu lokalnego przypisany jest obiekt.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru, ponieważ jest dokładny format `input` Jeśli `format` jest specyfikator formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
—lub—  
<paramref name="styles" /> Parametr zawiera nieobsługiwaną wartość.  
—lub—  
<paramref name="styles" /> Parametr zawiera <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> jest puste znaku zakresu.  
 - lub - <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
 - lub - <paramref name="format" /> jest pusty znak zakresu.  
 —lub—  
 Składnik godziny i oznaczenie AM/PM w <paramref name="input" /> nie zgadza się.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków, który zawiera datę i godzinę konwersji.</param>
        <param name="formats">Tablica specyfikatorów formatu, które definiują oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />.</param>
        <summary>Konwertuje zakres znaków, który zawiera ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu wskazanych formatów, informacji o formacie specyficzne dla kultury i stylu. Format daty i godziny reprezentującego musi dokładnie jednego ze wskazanych formatów.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> parametr określony przez <paramref name="formats" />, <paramref name="formatProvider" />, i <paramref name="styles" /> parametrów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Metoda ta analizuje zakres znaków reprezentujący datę, która pasuje do jednej z wzorców przypisane do `formats` parametru. Jeśli `input` nie pasuje dowolny z tych wzorców dowolne zmiany, definiowane przez `styles` parametr, metoda zgłasza <xref:System.FormatException>. Oprócz porównanie `input` do wielu wzorców formatowania, to przeciążenie działa identycznie do <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> metody.  
  
 `formats` Parametr jest tablicą ciągów, w której elementy zawierają jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują możliwe wzorzec `input` parametru. Po wywołaniu metody `input` musi odpowiadać jednej z tych wzorców. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowanego elementu w `formats` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, metoda zgłasza <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Za pomocą `formats` parametr tego przeciążenia można określić wiele formatów może pomóc zmniejszyć Rozczarowanie wielu użytkownikom środowisko podczas wprowadzania daty i godziny. W szczególności możliwość definiowania wielu wzorców w danych wejściowych włącza aplikację do obsługi reprezentacji daty i godziny, które można uwzględnić lub braku zer wiodących w ciągu miesięcy, dni, godziny, minuty i sekundy.
  
 Jeśli dopasowanego elementu w `formats` wymaga, aby `input` zawierają datę, ale nie przez czas, wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli element dopasowane w `formats` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli element dopasowane w `formats` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładny format `input`, jeśli pasującego elementu `formats` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określony przez `format`. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników (z wyjątkiem przesunięcie) i jest ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący spacje nie został określony przez `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie został określony przez `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzny nie został określony przez `formats`. Wszystkich dodatkowych białych znaków, nie jest określony w elemencie dopasowane w `formats` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w określonym elemencie `formats` dla aby wystąpiło dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie obowiązuje, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
- lub - <paramref name="styles" /> zawiera nieobsługiwaną wartość.  
—lub—  
<paramref name="styles" /> Parametr zawiera <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> jest puste znaku zakresu.  
- lub - <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
—lub—  
Nie elementu <paramref name="formats" /> zawiera prawidłowym specyfikatorem formatu.  
—lub—  
Składnik godziny i oznaczenie AM/PM w <paramref name="input" /> nie zgadza się.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu, który definiuje z oczekiwanym formatem <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonego formatu, informacji o formacie specyficzne dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> parametr określony przez <paramref name="format" />, <paramref name="formatProvider" />, i <paramref name="styles" /> parametrów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metoda analizuje reprezentację ciągu daty, która musi być w formacie zdefiniowane przez `format` parametru. Wymaga również, aby \<daty >, \<czas >, a \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w kolejności określonej przez `format`. Jeśli `input` ciąg nie pasuje do wzorca `format` parametrem żadnych zmian, zdefiniowane przez `styles` parametr, metoda zgłasza <xref:System.FormatException>.  Z kolei <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody jest analizowany ciąg przedstawiając datę w jednym z formatów rozpoznawany przez dostawcę formatu <xref:System.Globalization.DateTimeFormatInfo> obiektu. <xref:System.DateTimeOffset.Parse%2A> Umożliwia także \<daty >, \<czas >, i \<przesunięcie > elementy reprezentację ciągu daty i godziny są wyświetlane w dowolnej kolejności.  
  
 `format` Jest ciągiem, który zawiera jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują wymagany wzorzec `input` parametru. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, metoda zgłasza <xref:System.FormatException>.  
  
 Jeśli `format` wymaga, aby `input` zawierają datę, ale nie przez czas wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli `format` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli `format` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładny format `input`, jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określony przez `format`. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników i jest ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzny nie został określony przez `format`. Wszystkich dodatkowych białych znaków, nie jest określona w `format` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w `format`. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie obowiązuje, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody za pomocą standardowych i niestandardowych określników, niezmienna kultura i różnymi <xref:System.Globalization.DateTimeStyles> wartości można przeanalizować kilka ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

W poniższym przykładzie użyto różnych <xref:System.Globalization.DateTimeStyles> wartości można przeanalizować tablicę ciągów, które powinny być zgodna z [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Dane wyjściowe z przykładu pokazują, można przeanalizować, jeśli się nie powieść ciągi, które są mają niepoprawny format:

- zawierają one biały znak i odpowiednią <xref:System.Globalization.DateTimeStyles> flagi (takie jak <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> nie został podany w wywołaniu metody.

- zawierają one daty i godziny elementy, które są poza zakresem.

Ciągi, które nie należy określać przesunięcie czasu UTC są zakłada się, że masz przesunięcie lokalnej strefy czasowej (w tym przypadku -07:00) chyba że <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flaga jest podany w wywołaniu metody. W takim przypadku są to zakłada się, że skoordynowany czas uniwersalny.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera nieobsługiwaną wartość.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="format" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
 <paramref name="format" /> jest ciągiem pustym.  
  
—lub— 
Składnik godziny i oznaczenie AM/PM w <paramref name="input" /> nie zgadza się.</exception>
        <block subset="none" type="usage"><para>W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> metoda zgłasza wyjątek <see cref="T:System.FormatException" /> ciąg można przeanalizować zawiera składnik godziny i oznaczenia AM/PM, które nie są w umowie. W [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i wcześniejszych wersjach, oznaczenia AM/PM jest ignorowany.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica specyfikatorów formatu, które definiują oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu wskazanych formatów, informacji o formacie specyficzne dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do jednego ze wskazanych formatów.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny, który jest zawarty w <paramref name="input" /> parametr określony przez <paramref name="formats" />, <paramref name="formatProvider" />, i <paramref name="styles" /> parametrów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metody jest analizowany ciąg przedstawiając datę, która pasuje do jednej z wzorców przypisane do `formats` parametru. Jeśli `input` ciąg nie jest zgodny ze wszystkimi odmiany zdefiniowane przez dowolne spośród tych wzorców `styles` parametr, metoda zgłasza <xref:System.FormatException>. Oprócz porównanie `input` do wielu wzorców formatowania, to przeciążenie działa identycznie do <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody.  
  
 `formats` Parametr jest tablicą ciągów, w której elementy zawierają jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują możliwe wzorzec `input` parametru. Po wywołaniu metody `input` musi odpowiadać jednej z tych wzorców. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowanego elementu w `formats` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, metoda zgłasza <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Za pomocą `formats` parametr tego przeciążenia można określić wiele formatów może pomóc zmniejszyć Rozczarowanie wielu użytkownikom środowisko podczas wprowadzania daty i godziny. W szczególności możliwość definiowania wielu wzorców w danych wejściowych włącza aplikację do obsługi reprezentacji daty i godziny, które można uwzględnić lub braku zer wiodących w ciągu miesięcy, dni, godziny, minuty i sekundy. Przykład stanowi ilustrację tego.  
  
 Jeśli dopasowanego elementu w `formats` wymaga, aby `input` zawierają datę, ale nie przez czas, wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli element dopasowane w `formats` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli element dopasowane w `formats` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładny format `input`, jeśli pasującego elementu `formats` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określony przez `format`. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników (z wyjątkiem przesunięcie) i jest ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący spacje nie został określony przez `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie został określony przez `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzny nie został określony przez `formats`. Wszystkich dodatkowych białych znaków, nie jest określony w elemencie dopasowane w `formats` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w określonym elemencie `formats` dla aby wystąpiło dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie obowiązuje, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
   
  
## Examples  
 Poniższy przykład definiuje wiele formatów danych wejściowych dla reprezentacji w postaci ciągu daty i godziny oraz wartości przesunięcia, a następnie przekazuje ciąg, który jest wprowadzana przez użytkownika w celu <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
 <paramref name="styles" /> zawiera nieobsługiwaną wartość.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny.  
  
—lub— 
Nie elementu <paramref name="formats" /> zawiera prawidłowym specyfikatorem formatu.  
  
—lub— 
Składnik godziny i oznaczenie AM/PM w <paramref name="input" /> nie zgadza się.</exception>
        <block subset="none" type="usage"><para>W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> metoda zgłasza wyjątek <see cref="T:System.FormatException" /> ciąg można przeanalizować zawiera składnik godziny i oznaczenia AM/PM, które nie są w umowie. W [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i wcześniejszych wersjach, oznaczenia AM/PM jest ignorowany.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik sekundy czasu zegara, reprezentowane przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik sekundy z <see cref="T:System.DateTimeOffset" /> obiektu, wyrażony jako wartość całkowita z przedziału od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> drugi element obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody za pomocą "s" lub specyfikatorów formatu niestandardowego "ss".  
  
   
  
## Examples  
 Poniższy przykład wyświetla drugiego składnika <xref:System.DateTimeOffset> obiektu na trzy różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Second%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "s".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> specyfikatora formatu metody "ss".  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odejmuje określony czas lub czas trwania z bieżącej <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który reprezentuje wartość do odjęcia.</param>
        <summary>Odejmuje <see cref="T:System.DateTimeOffset" /> wartość, która reprezentuje określoną datę i godzinę z bieżącej <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Obiekt, który określa interwał między tymi dwoma <see cref="T:System.DateTimeOffset" /> obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje zarówno <xref:System.DateTimeOffset> obiekty do uniwersalnego czasu koordynowanego (UTC), przed obliczeniem przedział czasu, rozdzielający je. Spowoduje to usunięcie wpływu, jaki różne przesunięcia względem czasu UTC, mogą mieć na porównanie.  
  
> [!NOTE]
>  Dla języków, które obsługują operatorów niestandardowych można również wykonać przy użyciu operator odejmowania odejmowania daty i godziny. Aby uzyskać więcej informacji, zobacz <xref:System.DateTimeOffset.op_Subtraction%2A> metody.  
  
 Ponieważ ani bieżącego <xref:System.DateTimeOffset> obiektu ani `value` parametru reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> metody nie należy wziąć pod uwagę daną strefę czasową dostosowania reguł podczas jego odejmuje daty i godziny.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano odejmowania, który używa <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Interwał czasu, który należy odjąć.</param>
        <summary>Odejmuje określony przedział czasu z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Obiekt, który jest taki sam, datę i czas reprezentowany przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu pomniejszoną o przedział czasu, reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.DateTimeOffset.Subtract%2A> metodę, aby odjąć więcej niż jeden rodzaj przedział czasu (dni, godziny, minuty, sekundy lub milisekund), w ramach jednej operacji. Jego zachowanie jest taka sama jak <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> metody, która definiuje operator odejmowania. <xref:System.DateTimeOffset> Struktury obsługuje również metody dodawania specjalne (takie jak <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, i <xref:System.DateTimeOffset.AddMinutes%2A>) umożliwiające wykonywanie odejmowania, przypisując ujemną wartość parametru metody.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiektu. Nie modyfikuje wartości bieżącego obiektu przez dodanie `timeSpan` jego datę i godzinę.  
  
 <xref:System.DateTimeOffset.Subtract%2A> Metoda nie wpływa na wartość <xref:System.DateTimeOffset> obiektu <xref:System.DateTimeOffset.Offset%2A> właściwości. Zwrócony <xref:System.DateTimeOffset> obiekt ma tego samego przesunięcie jako oryginalnego obiektu.  
  
 Ponieważ bieżący <xref:System.DateTimeOffset> obiekt nie reprezentuje datę i godzinę w określonej strefy czasowej <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> metody nie należy wziąć pod uwagę reguły korekty daną strefę czasową, podczas wykonywania odejmowania.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano odejmowania, który używa <xref:System.DateTimeOffset.Subtract%2A> metody.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> wartość jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektu.</param>
        <summary>Porównuje wartość bieżącej <see cref="T:System.DateTimeOffset" /> obiekt z innym obiektem tego samego typu.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem wskazuje, czy bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest mniejszy, równy lub większy niż <paramref name="obj" />. Wartości zwracane metody jest interpretowany w następujący sposób: 
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest mniejszy niż (wcześniej niż) <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest taki sam (tego samego punktu w czasie) <paramref name="obj" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest większy niż (późniejsza niż) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamia się po zakończeniu deserializacji obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Lokalizacja docelowa tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> obiektu przy użyciu danych wymaganych do zserializowania bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> Parametr <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaczników, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu w czasie zegara.</summary>
        <value>Liczba taktów w <see cref="T:System.DateTimeOffset" /> czas zegara obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Wartość <xref:System.DateTimeOffset.Ticks%2A> właściwość reprezentuje liczbę 100-nanosekundowych interwałów, które upłynęły od północy 12:00:00 w dniu 1 stycznia 0001 (wartość <xref:System.DateTimeOffset.MinValue>). Nie ma znaczników, które zostaną dodane przez przestępnym sekund. Nanosekundowych jest miliardowego jednej sekundy; istnieje dziesięć milionów impulsów na sekundę. Wartość <xref:System.DateTimeOffset.Ticks%2A> właściwości zakresu od `DateTimeOffset.MinValue.Ticks` do `DateTimeOffset.MaxValue.Ticks`.  
  
 Możesz przypisać liczbę taktów do <xref:System.DateTimeOffset> obiektu za pomocą <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> przeciążenia konstruktora.  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.DateTimeOffset> obiekt poprzez zbliżenie liczby taktów daty 1 lipca 2008 1:23:07. Następnie wyświetla datę i liczby taktów reprezentowany przez tą datą do konsoli.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę dla bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Przedział czasu bieżącej daty, który upłynął od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 <xref:System.DateTimeOffset.TimeOfDay%2A> Właściwość zwraca składnika godziny <xref:System.DateTimeOffset> obiektu w formie <xref:System.TimeSpan> obiektu. Jest to równoważne <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.TimeOfDay%2A> właściwość, aby wyodrębnić czasu i wyświetl ją do konsoli.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na czas pliku Windows.</summary>
        <returns>Wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażona jako czas pliku Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 <xref:System.DateTimeOffset.ToFileTime%2A> Metoda konwertuje aktualny <xref:System.DateTimeOffset> daty i czasu UTC, przed rozpoczęciem konwersji obiektu. Innymi słowy, wywołanie <xref:System.DateTimeOffset.ToFileTime%2A> metodą jest odpowiednikiem następujące wywołanie metody:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikowy czas pliku reprezentuje datę i godzinę przed północy 1 stycznia 1601 r. Uniwersalny czas koordynowany (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje aktualny <see cref="T:System.DateTimeOffset" /> obiekt <see cref="T:System.DateTimeOffset" /> obiekt, który reprezentuje czas lokalny.</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiekt jest konwertowana na czas lokalny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wykonywanie konwersji na czas lokalny, Metoda ta najpierw konwertuje bieżącego <xref:System.DateTimeOffset> daty i czasu uniwersalnego czasu koordynowanego (UTC) przez odjęcie przesunięcie od chwili obiektu. Następnie konwertuje Data i Godzina UTC na czas lokalny, dodając przesunięcie strefy czasu lokalnego. W ten sposób uwzględnia żadnych reguł dopasowania dla lokalnej strefy czasowej.  
  
 Wartość bieżącego <xref:System.DateTimeOffset> obiektów i wartości <xref:System.DateTimeOffset> obiektu zwróconego przez wywołania metody które reprezentują tego samego punktu w czasie. Oznacza to jeśli obie są przekazywane do <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metody, który zwróci metoda `true`.  
  
 Jeśli konwersja powoduje, że czas, który jest poza zakresem <xref:System.DateTimeOffset> typu <xref:System.DateTimeOffset.ToLocalTime%2A> metoda zwraca <xref:System.DateTimeOffset> obiekt, który ma datę i godzinę ustawions <xref:System.DateTimeOffset.MaxValue> lub <xref:System.DateTimeOffset.MinValue> i przesunięcia ustawiono przesunięcie lokalnej strefy czasowej.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ToLocalTime%2A> metodę, aby przekonwertować <xref:System.DateTimeOffset> wartość na czas lokalny w strefie standardowego czasu pacyficznego. Również dwie metody obsługi reguł korygowania strefy czasu lokalnego.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie można przekonwertować <see cref="T:System.DateTimeOffset" /> wartość.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu datę i godzinę, określonym przez wartość przesunięcia.</summary>
        <returns>Obiekt, który jest taki sam, jak oryginalny <see cref="T:System.DateTimeOffset" /> obiektu (oznacza to, że ich <see cref="M:System.DateTimeOffset.ToUniversalTime" /> metody zwracają identyczne punkty w czasie), ale których <see cref="P:System.DateTimeOffset.Offset" /> właściwość jest ustawiona na <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.ToOffset%2A> Metoda to metoda alternatywna do wywoływania <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody. Może być przydatne w przypadku wykonywania prostych konwersje z jednej strefie czasowej do innego, gdy wiadomo, przesunięć stref czasowych z uniwersalnego czasu koordynowanego (UTC). Jednak ponieważ oryginalne ani <xref:System.DateTimeOffset> obiektu ani nowy <xref:System.DateTimeOffset> obiektu zwróconego przez wywołanie metody są jednoznacznie powiązane z daną strefę czasową, metoda nie obejmuje żadnych reguł dopasowania stref czasowych w konwersji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób używania <xref:System.DateTimeOffset.ToOffset%2A> metodę, aby przekonwertować <xref:System.DateTimeOffset> obiekt <xref:System.DateTimeOffset> obiektu z innego przesunięcia.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wartość wynikowa <see cref="T:System.DateTimeOffset" /> obiekt ma <see cref="P:System.DateTimeOffset.DateTime" /> wartości starsze niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wynikowa <see cref="T:System.DateTimeOffset" /> obiekt ma <see cref="P:System.DateTimeOffset.DateTime" /> wartość późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> jest mniejsze niż-14 godzin.  
  
—lub— 
 <paramref name="offset" /> jest większe niż 14 godzin.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego reprezentację ciągu równoważnego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego reprezentację ciągu równoważnego.</summary>
        <returns>Reprezentacja ciągu <see cref="T:System.DateTimeOffset" /> obiektu, który zawiera przesunięcie dołączany na końcu ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez tę metodę jest taka sama jak w przypadku <xref:System.DateTime.ToString?displayProperty=nameWithType> metody, z wyjątkiem, że zawiera spację, a następnie przesunięcie dołączany na końcu ciągu. Innymi słowy, operacja formatowania danych wyjściowych przy użyciu wzorca daty krótkiej, wzorzec dużo czasu i `zzz` ciągu formatu niestandardowego, przy czym każdy element oddzielony od poprzedniego elementu spacjami. Na przykład jeśli <xref:System.DateTime.ToString?displayProperty=nameWithType> zwraca wartość 1/12/2008 18:15:50: 00, <xref:System.DateTimeOffset.ToString> zwraca wartość 1/12/2008 18:15:50: 00 -08:00 czasu, który wynosi 8 godzin za uniwersalnego czasu koordynowanego (UTC).  
  
 Metoda ta wykorzystuje informacje o formatowaniu pochodzące z bieżącej kultury. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Inne przeciążenia <xref:System.DateTimeOffset.ToString%2A> metody pozwalają na określenie kultury, której formatowanie do użycia, a także do zdefiniowania struktury danych wyjściowych <xref:System.DateTimeOffset> wartość.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób wywołania <xref:System.DateTimeOffset.ToString> metody i wyświetla dane wyjściowe w systemie, którego bieżącą kulturą jest en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" /> Metoda zwraca reprezentację ciągu daty i godziny w kalendarz używany przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienie jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która jest poza zakresem <see cref="T:System.Globalization.HijriCalendar" /> klasy, gdy bieżącą kulturą jest arabski (Syria).  
  
[! code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! kodu vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego reprezentację ciągu równoważnego przy użyciu określonego specyficzne dla kultury informacje o formatowaniu.</summary>
        <returns>Ciąg reprezentujący wartość bieżącej <see cref="T:System.DateTimeOffset" /> obiekt określony przez <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez tę metodę jest taka sama jak w przypadku jej przeciążenie równoważne <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> metody, z wyjątkiem, że zawiera spację, a następnie przesunięcie dołączany na końcu ciągu. Innymi słowy, operacja formatowania danych wyjściowych przy użyciu wzorca daty krótkiej, wzorzec dużo czasu i `zzz` ciągu formatu niestandardowego, przy czym każdy element oddzielony od poprzedniego elementu spacjami.  
  
 Format te trzy elementy jest definiowany przez `formatProvider` parametru. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   Element <xref:System.Globalization.CultureInfo> obiektu, który reprezentuje kulturę, której konwencje formatowania są stosowane do zwracanego ciągu. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje formatowanie zwracanego ciągu.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatProvider` jest `null`, <xref:System.Globalization.DateTimeFormatInfo> obiekt skojarzony z bieżącą kulturą jest używana (zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 Poniższy przykład wyświetla <xref:System.DateTimeOffset> przy użyciu <xref:System.Globalization.CultureInfo> obiektami, które reprezentują kultury niezmiennej, a także czterech innych kultur.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> Metoda zwraca reprezentację ciągu daty i godziny w kalendarz używany przez kulturę, reprezentowane przez <paramref name="formatProvider" /> parametru. Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwości. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienie jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która jest poza zakresem <see cref="T:System.Globalization.JapaneseCalendar" /> klasy.  
  
[! code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! kodu vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego reprezentację ciągu równoważnego przy użyciu określonego formatu.</summary>
        <returns>Ciąg reprezentujący wartość bieżącej <see cref="T:System.DateTimeOffset" /> obiekt określony przez <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` Parametr musi zawierać albo pojedynczy znak specyfikatora formatu (zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatu (zobacz [niestandardowych ciągów daty i godziny Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) definiuje formatowanie zwracanego ciągu. Jeśli `format` jest wartość null lub pusty ciąg (""), <xref:System.DateTimeOffset> wartość znajdują się dane wyjściowe przy użyciu domyślnego formatu.  
  
 W poniższej tabeli przedstawiono dokładne działanie niektórych specyfikatorów formatu, gdy jest używane z <xref:System.DateTimeOffset>, który różni się od ich zachowania, gdy jest używane z <xref:System.DateTime>.  
  
|Specyfikator formatu istniejących|Nowe zachowanie|  
|-------------------------------|------------------|  
|„K”|Zaprojektowana do przesyłania danych daty i godziny. Za pomocą <xref:System.DateTimeOffset>, mapuje "zzz" (przesunięcie jest zawsze wyświetlane ze godzinach i minutach). Należy pamiętać, że "K" specyfikator formatu niestandardowego; nie może występować jako pojedynczy znak w `format`.|  
|„U”|Nieobsługiwane.|  
|"r"|Konwertuje <xref:System.DateTimeOffset> obiektu do uniwersalnego czasu koordynowanego (UTC) i wyświetla go za pomocą ciągu formatu niestandardowego `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|„u”|Konwertuje <xref:System.DateTimeOffset> obiektu względem czasu UTC i umieszcza go w formacie `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Pozostałe standardowy daty i czasu specyfikatorów formatu działają w ten sam sposób, przy użyciu <xref:System.DateTimeOffset.ToString%28System.String%29> metoda tak samo, jak za pomocą <xref:System.DateTime.ToString%2A> metody.  
  
 Metoda ta wykorzystuje informacje o formatowaniu pochodzące z bieżącej kultury. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 Poniższy przykład wyświetla <xref:System.DateTimeOffset> obiekcie do konsoli przy użyciu każdego standardowy format daty i godziny specyfikatorów formatu. Dane wyjściowe są formatowane przy użyciu en-us kultury.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> jest jednym z nich, i nie jest jednym ze znaków specyfikatora formatu standardowego zdefiniowane dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" /> nie zawiera prawidłowego wzoru formatu niestandardowego.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" /> Metoda zwraca reprezentację ciągu daty i godziny w kalendarz używany przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienie jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która jest poza zakresem <see cref="T:System.Globalization.HebrewCalendar" /> klasy, gdy bieżącą kulturą jest hebrajski (Izrael).  
  
[! code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! kodu vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego reprezentację ciągu równoważnego przy użyciu podanego formatu i informacji o formacie specyficzne dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącej <see cref="T:System.DateTimeOffset" /> obiekt określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` Parametr musi zawierać albo pojedynczy znak specyfikatora formatu (zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatu (zobacz [niestandardowych ciągów daty i godziny Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). Jeśli `format` jest wartość null lub pusty ciąg (""), <xref:System.DateTimeOffset> obiektu znajdują się dane wyjściowe przy użyciu domyślnego formatu.  
  
 W poniższej tabeli przedstawiono dokładne działanie niektórych specyfikatorów formatu, gdy jest używane z <xref:System.DateTimeOffset>, który różni się od ich zachowania, gdy jest używane z <xref:System.DateTime>.  
  
|Specyfikator formatu istniejących|Nowe zachowanie|  
|-------------------------------|------------------|  
|„K”|Zaprojektowana do przesyłania danych daty i godziny. Za pomocą <xref:System.DateTimeOffset>, mapuje "zzz" (przesunięcie jest zawsze wyświetlane ze godzinach i minutach). Należy pamiętać, że "K" specyfikator formatu niestandardowego; nie może występować jako pojedynczy znak w `format`.|  
|„U”|Nieobsługiwane.|  
|"r"|Konwertuje <xref:System.DateTimeOffset> obiektu do uniwersalnego czasu koordynowanego (UTC) i wyświetla go za pomocą ciągu formatu niestandardowego `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|„u”|Konwertuje <xref:System.DateTimeOffset> wartość na czas UTC i umieszcza go w formacie `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Pozostałe standardowy daty i czasu specyfikatorów formatu działają w ten sam sposób, przy użyciu <xref:System.DateTimeOffset.ToString%28System.String%29> metoda tak samo, jak za pomocą <xref:System.DateTime.ToString%2A> metody.  
  
 Wzorzec, który odpowiada specyfikatory formatu standardowego, a także symboli i nazwy składników daty i godziny, jest definiowana przez `formatProvider` parametru. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, której formatowanie jest używany w `input`. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje formatowania użytego w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatProvider` jest `null`, <xref:System.Globalization.DateTimeFormatInfo> obiekt skojarzony z bieżącą kulturą jest używana (zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> metodę w celu wyświetlenia <xref:System.DateTimeOffset> przy użyciu ciągu formatu niestandardowego dla kilku różnych kultur.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> jest jednym z nich, i nie jest jednym ze znaków specyfikatora formatu standardowego zdefiniowane dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" /> nie zawiera prawidłowego wzoru formatu niestandardowego.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> Metoda zwraca reprezentację ciągu daty i godziny w kalendarz używany przez <paramref name="formatProvider" /> parametru. Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwości. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienie jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która jest poza zakresem <see cref="T:System.Globalization.UmAlQuraCalendar" /> klasy.  
  
[! code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! kodu vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: .NET Framework 4 formatowanie narzędzia</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje aktualny <see cref="T:System.DateTimeOffset" /> obiekt <see cref="T:System.DateTimeOffset" /> wartość, która reprezentuje uniwersalnego czasu koordynowanego (UTC).</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiekt przekonwertowany do uniwersalnego czasu koordynowanego (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca <xref:System.DateTimeOffset> którego <xref:System.DateTimeOffset.Offset%2A> właściwości jest równa zero.  
  
 Wartość bieżącego <xref:System.DateTimeOffset> obiektów i wartości <xref:System.DateTimeOffset> obiektu zwróconego przez wywołania metody które reprezentują tego samego punktu w czasie. Oznacza to jeśli obie są przekazywane do <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metody, który zwróci metoda `true`.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.ToUniversalTime%2A> metodę konwersji czasu lokalnego oraz kilka innych razy uniwersalnego czasu koordynowanego (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę milisekund, które upłynęły od 1970-01-01T00:00:00.000Z.</summary>
        <returns>Liczba milisekund, które upłynęły od 1970-01-01T00:00:00.000Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Time systemu UNIX reprezentuje liczbę sekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o 12:00 czasu UTC). On nie uwzględniać przestępnym sekund. Ta metoda zwraca liczbę milisekund w time systemu Unix.  
  
 Ta metoda konwertuje najpierw bieżącego wystąpienia względem czasu UTC przed zwróceniem liczbę milisekund w jego time systemu Unix. Dla wartości daty i godziny przed rokiem 1970-01-01T00:00:00Z, ta metoda zwraca wartość ujemną.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę sekund, które upłynęły od 1970-01-01T00:00:00Z.</summary>
        <returns>Liczba sekund, które upłynęły od 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Time systemu UNIX reprezentuje liczbę sekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o 12:00 czasu UTC). On nie uwzględniać przestępnym sekund.  
  
 Ta metoda konwertuje najpierw bieżącego wystąpienia względem czasu UTC przed zwróceniem jej time systemu Unix. Dla wartości daty i godziny przed rokiem 1970-01-01T00:00:00Z, ta metoda zwraca wartość ujemną.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> metodę, aby zwrócić time systemu Unix wartości, które są równe, tuż przed, a wkrótce po 1970-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="result">Gdy metoda zwróci wartość, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednikiem daty i godziny <paramref name="input" />, jeśli konwersja powiodła się, lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="input" /> parametr jest <see langword="null" /> lub nie zawiera nieprawidłową reprezentacją ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Próbuje konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne i zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="input" /> parametr jest pomyślnie przekonwertowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> metoda przypomina <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> metody, z wyjątkiem, że nie zgłosi wyjątek, jeśli konwersja nie powiedzie się. Analizuje ciąg zawierający trzy elementy, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Przesunięcie >|"-7:30"|  
  
 Mimo że każdy z tych elementów jest opcjonalny, \<przesunięcie > nie może występować samodzielnie. Należy podać razem z wartościami \<daty > lub \<czas >. Jeśli \<daty > Brak domyślnej wartości jest bieżący dzień. Jeśli \<daty > jest obecny, ale jego roku składnika składa się z dwóch cyfr, jest konwertowany na rok w bieżącego kalendarza bieżącej kultury, na podstawie wartości z <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<czasu > brakuje jego domyślna wartość to 0:00:00: 00. Jeśli \<przesunięcie > brakuje jego domyślna wartość to przesunięcie lokalnej strefy czasowej. Jeśli \<przesunięcie > jest obecny, może reprezentować ujemnych lub dodatnią przesunięcie względem uniwersalnego czasu koordynowanego (UTC). W obu przypadkach \<przesunięcie > musi zawierać symbol znaku lub metoda zwraca `false`.  
  
 `input` Ciągu jest analizowany przy użyciu informacje o formatowaniu w <xref:System.Globalization.DateTimeFormatInfo> inicjowanym dla bieżącej kultury. Aby przeanalizować ciąg, który zawiera wyznaczonym formatowania, muszą odpowiadać w przypadku bieżącej kultury, należy użyć <xref:System.DateTimeOffset.TryParseExact%2A> metody i podania specyfikatora formatu.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> metodę, aby przeanalizować kilka ciągów przy użyciu różnych formatów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: .NET Framework 4 formatowanie narzędzia</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który zawiera informacje o formatowaniu specyficzne dla kultury na temat <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />.</param>
        <param name="result">Gdy metoda zwróci wartość, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednikiem daty i godziny wartość <paramref name="input" />, jeśli konwersja powiodła się, lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="input" /> parametr jest <see langword="null" /> lub nie zawiera nieprawidłową reprezentacją ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Próbuje przekonwertować określony ciąg reprezentujący datę i godzinę jego <see cref="T:System.DateTimeOffset" /> równoważne i zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="input" /> parametr jest pomyślnie przekonwertowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metoda przypomina <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z wyjątkiem, że nie zgłosi wyjątek, jeśli konwersja nie powiedzie się. Metoda analizuje ciąg zawierający trzy elementy, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Przesunięcie >|"-7:30"|  
  
 Mimo że każdy z tych elementów jest opcjonalny, \<przesunięcie > nie może występować samodzielnie. Należy podać razem z wartościami \<daty > lub \<czas >. Jeśli \<daty > Brak domyślnej wartości jest bieżący dzień. Jeśli \<daty > jest obecny, ale jego roku składnika składa się z dwóch cyfr, jest konwertowany na rok w `provider` bieżący kalendarz parametru na podstawie wartości z <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<czasu > brakuje jego domyślna wartość to 0:00:00: 00. Jeśli \<przesunięcie > Brak domyślną wartością jest przesunięcie lokalnej strefy czasowej, lub <xref:System.TimeSpan.Zero> Jeśli <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> lub <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> wartość jest określona w `styles`. Jeśli \<przesunięcie > jest obecny, może reprezentować ujemnych lub dodatnią przesunięcie względem uniwersalnego czasu koordynowanego (UTC). W obu przypadkach \<przesunięcie > musi zawierać symbol znaku lub metoda zwraca `false`.  
  
 `input` Ciągu jest analizowany przy użyciu informacje o formatowaniu specyficzne dla kultury w <xref:System.Globalization.DateTimeFormatInfo> dostarczonych przez obiekt `formatProvider` parametru. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, której formatowanie jest używany w `input`. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje format, który jest używany w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Ponadto każdy element może być rozdzielone wiodące i końcowe białe i \<Data > a \<czas > składników może zawierać wewnętrzny biały (na przykład 6:00:00). Tylko \<przesunięcie > składnika nie może zawierać wewnętrzny biały znak.  
  
 Jeśli `provider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatnia lub ujemna, używane w \<przesunięcie > musi być albo + lub -. Nie jest zdefiniowany przez <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez `formatprovider` parametru <xref:System.Globalization.CultureInfo.NumberFormat%2A> właściwości.  
  
 Następujące elementy członkowskie z <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane:  
  
|Element członkowski DateTimeStyles|Komentarze|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje ciąg, reprezentowane przez `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywołując zwracany obiekt <xref:System.DateTimeOffset.ToUniversalTime> metody.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Choć ważna, wartość ta jest ignorowana. Wewnętrzny biały znak jest dozwolony w \<Data > a \<czas > składniki.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Choć ważna, wartość ta jest ignorowana. Początkowe biały znak jest dozwolony przed każdy składnik przeanalizowany ciąg.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Choć ważna, wartość ta jest ignorowana. Końcowe biały znak jest dozwolony przed każdy składnik przeanalizowany ciąg.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Jest to zachowanie domyślne. Nie można zastąpić poprzez dostarczanie bardziej restrykcyjne <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takich jak <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wskazuje, że, jeśli `input` brakuje parametru \<przesunięcie > element, należy podać przesunięcie lokalnej strefy czasowej. Jest to domyślne zachowanie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wskazuje, że, jeśli `input` brakuje parametru \<przesunięcie > element, należy podać przesunięcie czasu UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Choć ważna, ta wartość jest ignorowana i nie ma wpływu.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwość, ta wartość nie ma wpływu.|  
  
 Tylko <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> wartość nie jest obsługiwana. <xref:System.ArgumentException> Jest generowany, jeśli ta wartość jest uwzględniona w `styles` parametru.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody za pomocą różnych <xref:System.Globalization.DateTimeStyles> wartości, aby przeanalizować niektóre ciągi zawierające różne formaty daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> zawiera Niezdefiniowany <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwane.  
  
—lub— 
 <paramref name="styles" /> obejmuje wzajemnie się wykluczają <see cref="T:System.Globalization.DateTimeStyles" /> wartości.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> równoważne. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków, zawierającą reprezentujący datę i godzinę konwersji.</param>
        <param name="format">Specyfikator formatu, który definiuje wymagany format parametru <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format parametru <paramref name="input" />. To typowa wartość do określenia <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Gdy metoda zwróci wartość, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednikiem daty i godziny <paramref name="input" />, jeśli konwersja jest powiodło się, lub <see cref="F:System.DateTimeOffset.MinValue" /> Jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się</param>
        <summary>Konwertuje reprezentację daty i godziny w zakresie znaków, aby jego <see cref="System.DateTimeOffset" /> odpowiednika przy użyciu określonego formatu, informacji o formacie specyficzne dla kultury i stylu. Format daty i godziny reprezentującego musi dokładnie pasować seryjnych formatu.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="input" /> parametr jest pomyślnie przekonwertowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Przypomina to przeciążenie <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> metody, z tą różnicą, że ta metoda wyrzuca wyjątku, jeśli konwersja nie powiedzie się. Analizuje reprezentacja daty i godziny, który dokładnie musi być zgodna ze wzorcem określonym przez `format` parametru. Jeśli `input` nie pasuje do tego wzorca, z niektórych zmian biały znak zdefiniowane przez `styles` parametru podczas analizowania kończy się niepowodzeniem, a metoda zwraca `false`.  
  
`format` Parametr jest zakresu znaków, który zawiera jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują wymagany wzorzec `input`. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, analizowania operacja zakończy się niepowodzeniem i metoda zwraca `false`.  
  
Jeśli `format` wymaga, aby `input` zawierają datę, ale nie przez czas wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli `format` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli `format` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładne wzorzec `input` Jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i standardowych formatów dozwolonych w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania reprezentację daty i godziny, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określona przez format. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników, z wyjątkiem przesunięcie i jest ignorowana podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzny nie został określony przez `format`. Wszystkich dodatkowych białych znaków, nie jest określona w `format` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w `format`. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma wpływu, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> zawiera Niezdefiniowany <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
- lub - <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwane.  
- lub - <paramref name="styles" /> obejmuje wzajemnie się wykluczają <see cref="T:System.Globalization.DateTimeStyles" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Ta metoda jest analizowany ciąg przedstawiając datę, która pasuje do jednej z wzorców przypisane do `formats` tablicy. Jeśli `input` nie pasuje do jednej z tych wzorców z wszelkich zmian zdefiniowane przez `styles` parametru podczas analizowania kończy się niepowodzeniem, a metoda zwraca `false`. Oprócz porównanie `input` do wielu ciągów, które zawierają specyfikatorów formatu, to przeciążenie działa identycznie do <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> metody.  
  
 `formats` Parametr jest tablicą ciągów, w której elementy zawierają jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują możliwe wzorzec `input`. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowanego elementu w `formats` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku udanej operacji zakończy się niepowodzeniem, a metoda zwraca `false`.  
  
> [!IMPORTANT]
>  Za pomocą `formats` parametr tego przeciążenia można określić wiele formatów może pomóc zmniejszyć Rozczarowanie wielu użytkownikom środowisko podczas wprowadzania daty i godziny. W szczególności możliwość definiowania wielu wzorców w danych wejściowych włącza aplikację do obsługi reprezentacji daty i godziny, które można uwzględnić lub braku zer wiodących w ciągu miesięcy, dni, godziny, minuty i sekundy. Przykład stanowi ilustrację tego.  
  
 Jeśli dopasowanego elementu w `formats` wymaga, aby `input` zawierają datę, ale nie przez czas, wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli element dopasowane w `formats` wymaga, że dane wejściowe zawierają przez czas, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli element dopasowane w `formats` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładne wzorzec `input` Jeśli pasującego elementu `formats` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określony przez elementy w `formats`. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników (z wyjątkiem przesunięcie) i jest ignorowana podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący wiodące spacje nie są określone przez elementy w `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie są określone przez elementy w `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzne nie są określone przez elementy w `formats`. Wszystkich dodatkowych białych znaków, nie jest określony w elemencie dopasowane w `formats` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w określonym elemencie w `formats` dla pomyślnego dopasowania wystąpić. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie obowiązuje, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> zawiera Niezdefiniowany <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
- lub - <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwane.  
- lub - <paramref name="styles" /> obejmuje wzajemnie się wykluczają <see cref="T:System.Globalization.DateTimeStyles" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu, który definiuje wymagany format parametru <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowe połączenie wartości wyliczenia wskazująca dozwolony format danych wejściowych. To typowa wartość do określenia <see langword="None" />.</param>
        <param name="result">Gdy metoda zwróci wartość, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednikiem daty i godziny <paramref name="input" />, jeśli konwersja powiodła się, lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="input" /> parametr jest <see langword="null" />, lub nie zawiera nieprawidłową reprezentacją ciągu daty i godziny w oczekiwanym formacie zdefiniowane przez <paramref name="format" /> i <c>dostawcy</c>. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonego formatu, informacji o formacie specyficzne dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="input" /> parametr jest pomyślnie przekonwertowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metoda przypomina <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z tą różnicą, że ta metoda wyrzuca wyjątku, jeśli konwersja nie powiedzie się. Analizuje ciąg reprezentujący datę i godzinę, która dokładnie musi być zgodna ze wzorcem określonym przez `format` parametru. Jeśli `input` ciąg nie pasuje do tego wzorca, z niektórych zmian biały znak zdefiniowane przez `styles` parametru podczas analizowania kończy się niepowodzeniem, a metoda zwraca `false`.  
  
 `format` Jest ciągiem, który zawiera jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują wymagany wzorzec `input`. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku, analizowania operacja zakończy się niepowodzeniem i metoda zwraca `false`.  
  
 Jeśli `format` wymaga, aby `input` zawierają datę, ale nie przez czas wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli `format` wymaga, aby `input` zawiera godzinę, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli `format` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładne wzorzec `input` Jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i standardowych formatów dozwolonych w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określona przez format. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników, z wyjątkiem przesunięcie i jest ignorowana podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie został określony przez `format`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzny nie został określony przez `format`. Wszystkich dodatkowych białych znaków, nie jest określona w `format` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w `format`. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma wpływu, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
## Examples 

 W poniższym przykładzie użyto <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody za pomocą standardowych i niestandardowych określników, niezmienna kultura i różnymi <xref:System.Globalization.DateTimeStyles> wartości można przeanalizować kilka ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

W poniższym przykładzie użyto różnych <xref:System.Globalization.DateTimeStyles> wartości można przeanalizować tablicę ciągów, które powinny być zgodna z [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Dane wyjściowe z przykładu pokazują, można przeanalizować, jeśli się nie powieść ciągi, które są mają niepoprawny format:

- zawierają one biały znak i odpowiednią <xref:System.Globalization.DateTimeStyles> flagi (takie jak <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> nie został podany w wywołaniu metody.

- zawierają one daty i godziny elementy, które są poza zakresem.

Ciągi, które nie należy określać przesunięcie czasu UTC są zakłada się, że masz przesunięcie lokalnej strefy czasowej (w tym przypadku -07:00, która odzwierciedla przesunięcie strefy czasu pacyficznego) chyba że <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flaga jest podany w wywołaniu metody. W takim przypadku są to zakłada się, że skoordynowany czas uniwersalny.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> zawiera Niezdefiniowany <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwane.  
  
—lub— 
 <paramref name="styles" /> obejmuje wzajemnie się wykluczają <see cref="T:System.Globalization.DateTimeStyles" /> wartości.</exception>
        <block subset="none" type="usage"><para>W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.TryParseExact" /> zwraca <see langword="false" /> ciąg można przeanalizować zawiera składnik godziny i oznaczenia AM/PM, które nie są w umowie. W [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i wcześniejszych wersjach, oznaczenia AM/PM jest ignorowany.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica, która definiuje oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza specyficzne dla kultury informacje o formatowaniu <paramref name="input" />.</param>
        <param name="styles">Bitowe połączenie wartości wyliczenia wskazująca dozwolony format danych wejściowych. To typowa wartość do określenia <see langword="None" />.</param>
        <param name="result">Gdy metoda zwróci wartość, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednikiem daty i godziny <paramref name="input" />, jeśli konwersja powiodła się, lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja nie powiodła się. Jeśli konwersja nie powiedzie się <paramref name="input" /> nie zawiera nieprawidłową reprezentacją ciągu daty i godziny lub nie zawiera datę i godzinę w oczekiwanym formacie definicją <paramref name="format" />, lub jeśli <paramref name="formats" /> jest <see langword="null" />. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonej tablicy formatów, informacji o formacie specyficzne dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do jednego ze wskazanych formatów.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="input" /> parametr jest pomyślnie przekonwertowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Metody jest analizowany ciąg przedstawiając datę, która pasuje do jednej z wzorców przypisane do `formats` tablicy. Jeśli `input` ciąg nie pasuje do jednej z tych wzorców z wszelkich zmian zdefiniowane przez `styles` parametru podczas analizowania kończy się niepowodzeniem, a metoda zwraca `false`. Oprócz porównanie `input` do wielu ciągów, które zawierają specyfikatorów formatu, to przeciążenie działa identycznie do <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody.  
  
 `formats` Parametr jest tablicą ciągów, w której elementy zawierają jeden standardowy specyfikator formatu albo jednego lub więcej specyfikatorów formatu niestandardowego, które definiują możliwe wzorzec `input`. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowanego elementu w `formats` obejmuje `z`, `zz`, lub `zzz` specyfikatorów formatu niestandardowego, aby wskazać, że przesunięcie musi znajdować się w `input`, że musi zawierać znak ujemny lub znak wartości dodatnich. Jeśli brakuje znaku udanej operacji zakończy się niepowodzeniem, a metoda zwraca `false`.  
  
> [!IMPORTANT]
>  Za pomocą `formats` parametr tego przeciążenia można określić wiele formatów może pomóc zmniejszyć Rozczarowanie wielu użytkownikom środowisko podczas wprowadzania daty i godziny. W szczególności możliwość definiowania wielu wzorców w danych wejściowych włącza aplikację do obsługi reprezentacji daty i godziny, które można uwzględnić lub braku zer wiodących w ciągu miesięcy, dni, godziny, minuty i sekundy. Przykład stanowi ilustrację tego.  
  
 Jeśli dopasowanego elementu w `formats` wymaga, aby `input` zawierają datę, ale nie przez czas, wynikowy <xref:System.DateTimeOffset> przypisany jest obiekt, godziny od północy (0: 00:00). Jeśli element dopasowane w `formats` wymaga, że dane wejściowe zawierają przez czas, ale nie daty, wynikowy <xref:System.DateTimeOffset> bieżącą datę w systemie lokalnym przypisany jest obiekt. Jeśli element dopasowane w `formats` nie wymaga `input` zawiera przesunięcie, przesunięcie wynikowy <xref:System.DateTimeOffset> obiekt jest zależny od wartości `styles` parametru. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeLocal>, przesunięcie lokalnej strefy czasowej jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli `styles` obejmuje <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie skoordynowanego czasu uniwersalnego (UTC) lub + 00:00 jest przypisane do <xref:System.DateTimeOffset> obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określonej daty i godziny symboli i ciągów używanych w `input` są definiowane przez `formatProvider` parametru. To samo dotyczy dokładne wzorzec `input` Jeśli pasującego elementu `formats` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może być jedną z następujących czynności:  
  
-   A <xref:System.Globalization.CultureInfo> obiekt, który reprezentuje kulturę, na podstawie którego `input` jest interpretowany. <xref:System.Globalization.DateTimeFormatInfo> Obiektu zwróconego przez <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> właściwość definiuje symbole i formatowanie w `input`.  
  
-   Element <xref:System.Globalization.DateTimeFormatInfo> obiektu, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null`, <xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez składnika przesunięcia jawne są parsowane i obsługuje konwersji czasu UTC w ramach operacji analizy. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane, oprócz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles` Element członkowski|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje `input` oraz, w razie potrzeby konwertuje go na UTC. Jest to równoważne do analizowania parametrów, a następnie wywoływania <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metoda zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli element dopasowane w `formats` nie wymaga `input` zawierają wartość przesunięcia zwracanego <xref:System.DateTimeOffset> obiekt otrzymuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Umożliwia `input` obejmujący wewnętrzny biały znak nie jest określony przez elementy w `formats`. Dodatkowy biały znak może występować między składnikami Data i godzina, jak i w ramach poszczególnych składników (z wyjątkiem przesunięcie) i jest ignorowana podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` obejmujący wiodące spacje nie są określone przez elementy w `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` obejmujący końcowe spacje nie są określone przez elementy w `formats`. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` na zawiera spacje wiodące, końcowe i wewnętrzne nie są określone przez elementy w `formats`. Wszystkich dodatkowych białych znaków, nie jest określony w elemencie dopasowane w `formats` są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolona w `input`. Biały znak musi znajdować się dokładnie tak jak określono w określonym elemencie w `formats` dla pomyślnego dopasowania wystąpić. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie obowiązuje, ponieważ <xref:System.DateTimeOffset> nie ma struktury `Kind` właściwości.|  
  
   
  
## Examples  
 Poniższy przykład definiuje wiele formatów danych wejściowych dla reprezentacji w postaci ciągu daty i godziny oraz wartości przesunięcia, a następnie przekazuje ciąg, który jest wprowadzana przez użytkownika w celu <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> zawiera Niezdefiniowany <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwane.  
  
—lub— 
 <paramref name="styles" /> obejmuje wzajemnie się wykluczają <see cref="T:System.Globalization.DateTimeStyles" /> wartości.</exception>
        <block subset="none" type="usage"><para>W [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.TryParseExact" /> zwraca <see langword="false" /> ciąg można przeanalizować zawiera składnik godziny i oznaczenia AM/PM, które nie są w umowie. W [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i wcześniejszych wersjach, oznaczenia AM/PM jest ignorowany.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTime" /> wartość, która reprezentuje uniwersalnego czasu koordynowanego (UTC) Data i godzina, bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Uniwersalny czas koordynowany (UTC) Data i godzina, bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A> Właściwość wykonuje dwa konwersji:  
  
-   Konwertuje datę i godzinę bieżącego <xref:System.DateTimeOffset> obiektu do uniwersalnego czasu koordynowanego (UTC). Konwersja jest wykonywana przez odjęcie wartości <xref:System.DateTimeOffset.Offset%2A> właściwość Data i godzina bieżącego <xref:System.DateTimeOffset> obiektu.  
  
-   Konwertuje <xref:System.DateTimeOffset> wartość <xref:System.DateTime> wartość.  
  
 <xref:System.DateTime.Kind%2A> Właściwości zwracanego <xref:System.DateTimeOffset.DateTime%2A> wartość jest równa <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Pobieranie wartości <xref:System.DateTimeOffset.UtcDateTime%2A> właściwość jest równoważna wywoływania bieżącego <xref:System.DateTimeOffset> obiektu `ToUniversalTime.DateTime` własności, chyba że <xref:System.DateTime.Kind%2A> właściwość drugiego <xref:System.DateTime> wartość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.DateTimeOffset.UtcDateTime%2A> właściwość do wyświetlenia <xref:System.DateTimeOffset> wartość i odpowiedniego czasu UTC.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.DateTimeOffset" /> obiektu, którego daty i godziny to bieżący uniwersalny czas koordynowany (UTC), Data i godzina i którego przesunięcie <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>Obiekt, którego daty i godziny jest bieżący uniwersalny czas koordynowany (UTC) i którego przesunięcie <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A> Właściwość oblicza bieżący uniwersalny czas koordynowany (UTC) na podstawie czasu zegara systemu lokalnego, przesunięcie zdefiniowanych przez strefę czasową systemu lokalnego.  
  
 Dokładność składnik milisekund bieżący czas UTC, zależy od rozdzielczości zegara systemowego. Windows NT w wersji 3.5 lub nowszy oraz systemy operacyjne Windows Vista rozdzielczość zegara wynosi około 10 – 15 milisekund.  
  
   
  
## Examples  
 Poniższy przykład ilustruje relacji między uniwersalnego czasu koordynowanego (UTC) i czasem lokalnym.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaczników, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu w uniwersalnego czasu koordynowanego (UTC).</summary>
        <value>Liczba taktów w <see cref="T:System.DateTimeOffset" /> obiektu uniwersalnego czasu koordynowanego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.DateTimeOffset.UtcTicks%2A> właściwość reprezentuje liczbę 100-nanosekundowych interwałów, które upłynęły od północy 12:00:00 w dniu 1 stycznia 0001 (wartość <xref:System.DateTimeOffset.MinValue>). Nie ma znaczników, które zostaną dodane przez przestępnym sekund. Nanosekundowych jest miliardowego jednej sekundy; istnieje dziesięć milionów impulsów na sekundę. Wartość <xref:System.DateTimeOffset.UtcTicks%2A> właściwości zakresu od `DateTimeOffset.MinValue.Ticks` do `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik roku od daty reprezentowane przez bieżącą <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Składnik roku z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, wyrażony jako wartość całkowita z przedziału od 0 do 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A> Właściwość nie ma wpływu wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Możesz również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik roku obiektu przez wywołanie metody <xref:System.DateTimeOffset.ToString%2A> metody przy użyciu specyfikatorów formatu niestandardowego "y", "yy" lub "yyyy".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik roku z <xref:System.DateTimeOffset> wartość na cztery różne sposoby:  
  
-   Poprzez pobranie wartości <xref:System.DateTimeOffset.Year%2A> właściwości.  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "y".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "yy".  
  
-   Przez wywołanie metody <xref:System.DateTimeOffset.ToString%28System.String%29> metody przy użyciu specyfikatora formatu "yyyy".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>