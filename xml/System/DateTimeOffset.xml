<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca19352a2d908a6d2ffd0ba1d16b681680ca3a1a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69421155" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje punkt w czasie, zwykle wyrażony jako dzień i godzinę, względem uniwersalnego czasu koordynowanego (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Struktura zawiera <xref:System.DateTimeOffset> wartość wraz z właściwością, która definiuje różnice między datą i godziną bieżącego wystąpienia i uniwersalnym czasem koordynowanym (UTC). <xref:System.DateTimeOffset.Offset%2A> <xref:System.DateTimeOffset> <xref:System.DateTime> Ponieważ dokładnie definiuje datę i godzinę względem czasu UTC, <xref:System.DateTimeOffset> struktura nie `Kind` obejmuje elementu członkowskiego, jak <xref:System.DateTime> struktura. Reprezentuje daty i godziny z wartościami, których zakresy czasu UTC pochodzą z 12:00:00 północy, 1 stycznia 0001 Anno Domini (typowa ERA) do 11:59:59, 31 grudnia 9999 N.E. (C.E.).  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Składnik <xref:System.DateTimeOffset> czasu wartości jest mierzony w jednostkach 100-nanosekund o nazwie takty, a określony dzień to liczba taktów od 12:00 północy, 1 stycznia 0,001 n.e. 0001 <xref:System.Globalization.GregorianCalendar> w kalendarzu. <xref:System.DateTimeOffset> Wartość jest zawsze wyrażona w kontekście kalendarza jawnego lub domyślnego. Takty, które można przypisać do sekund przestępnych, nie są uwzględniane w łącznej liczbie taktów.  
  
 <xref:System.DateTimeOffset> Chociaż wartość zawiera przesunięcie, nie jest to w pełni oparta na strefach struktura danych. Chociaż przesunięcie od UTC jest jedną cechą strefy czasowej, nie identyfikuje jednoznacznie strefy czasowej. Tylko wielokrotne strefy czasowe mają takie samo przesunięcie od czasu UTC, ale przesunięcie pojedynczej strefy czasowej zmienia się, jeśli zaobserwuje czas letni. Oznacza to, że po <xref:System.DateTimeOffset> odłączeniu wartości od swojej strefy czasowej nie można już jednoznacznie odwrócić jej do oryginalnej strefy czasowej.  
  
 Ponieważ <xref:System.DateTimeOffset> jest strukturą <xref:System.DateTimeOffset> , obiekt, który został zadeklarowany, ale nie został zainicjowany w inny sposób, zawiera wartości domyślne dla każdego z jego pól składowych. Oznacza to, że <xref:System.DateTimeOffset.DateTime%2A> właściwość jest ustawiona na <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> , a <xref:System.DateTimeOffset.Offset%2A> jej właściwość jest ustawiona <xref:System.TimeSpan.Zero?displayProperty=nameWithType>na.  
  
 Można utworzyć nową <xref:System.DateTimeOffset> wartość przez wywołanie dowolnego przeciążenia konstruktora, które są podobne do przeciążonych konstruktorów <xref:System.DateTime> dla struktury. Możesz również utworzyć nową <xref:System.DateTimeOffset> wartość, przypisując <xref:System.DateTime> jej wartość. Jest to niejawna konwersja; nie wymaga operatora rzutowania (in C#) ani wywołania metody konwersji (w Visual Basic). Możesz również <xref:System.DateTimeOffset> zainicjować wartość z ciągu reprezentującego datę i godzinę, wywołując liczbę statycznych metod analizy ciągów, które obejmują <xref:System.DateTimeOffset.ParseExact%2A> <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.TryParse%2A>,, i <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Elementy członkowskie <xref:System.DateTimeOffset> struktury zapewniają funkcje w następujących obszarach:  
  
-   Arytmetyka daty i godziny.  
  
     Można dodawać lub odejmować daty lub przedziały czasu z określonej <xref:System.DateTimeOffset> wartości. Operacje arytmetyczne <xref:System.DateTimeOffset> z wartościami, w przeciwieństwie <xref:System.DateTime> do tych z wartościami, dostosowuje się do różnic w czasie, gdy zwracają wynik. Na przykład poniższy kod używa <xref:System.DateTime> zmiennych do odejmowania bieżącego czasu lokalnego od bieżącego czasu UTC. Kod następnie używa <xref:System.DateTimeOffset> zmiennych do wykonania tej samej operacji. Odejmowanie z <xref:System.DateTime> wartościami zwraca różnicę lokalnej strefy czasowej z UTC, podczas gdy odejmowanie <xref:System.DateTimeOffset> od wartości zwraca <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Operacje konwersji typu.  
  
     Można przekonwertować <xref:System.DateTimeOffset> wartości na <xref:System.DateTimeOffset.DateTime%2A> wartości i odwrotnie.  
  
-   Operacje manipulowania i wyodrębniania czasu.  
  
     Można wyodrębnić datę lub godzinę <xref:System.DateTimeOffset> wartości. Możesz również pobrać wartość danego <xref:System.DateTimeOffset> składnika, na przykład jego rok lub miesiąc.  

   > [!NOTE]
   >  Jeśli pracujesz z wartością taktów, która ma zostać przekonwertowana na inny przedział czasu, na <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>przykład minuty lub sekundy, należy użyć <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType> <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>,,, lub <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> stałej do przeprowadzenia konwersji. Na przykład, aby dodać liczbę sekund reprezentowanych przez określoną liczbę znaczników do <xref:System.DateTimeOffset.Second%2A> składnika <xref:System.DateTimeOffset> wartości, można użyć wyrażenia `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  

-   Konwersja daty i godziny.  
  
     Można przekonwertować dowolną <xref:System.DateTimeOffset> wartość na inną <xref:System.DateTimeOffset> wartość reprezentującą ten sam punkt w czasie w innej strefie czasowej. Jednak reguły dostosowania strefy czasowej są stosowane tylko w przypadku <xref:System.DateTimeOffset.ToLocalTime%2A> metody, która <xref:System.DateTimeOffset> konwertuje wartość na datę i godzinę w lokalnej strefie systemowej.  
  
-   Porównanie daty i godziny.  
  
     Można określić, czy określona <xref:System.DateTimeOffset> wartość jest wcześniejsza niż, taka sama jak lub późniejsza niż inna <xref:System.DateTimeOffset> wartość. Przed wykonaniem porównania wszystkie wartości są konwertowane na czas UTC.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Wybieranie pomiędzy elementem DateTime, DateTimeOffset, TimeSpan i TimeZoneInfo</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonej <see cref="T:System.DateTime" /> wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tego konstruktora zależy od wartości <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości `dateTime` parametru:  
  
-   W <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> przypadku wartości <xref:System.TimeSpan.Zero>is <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> <xref:System.DateTimeOffset.DateTime%2A> właściwość nowego `dateTime` wystąpieniajestustawianajakorówna,awłaściwośćjestustawionanawartość.<xref:System.DateTimeOffset.Offset%2A>  
  
-   Jeśli <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> wartość <xref:System.DateTimeOffset.Offset%2A> `dateTime`jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ,<xref:System.DateTimeOffset.DateTime%2A> właściwość nowego wystąpienia jest ustawiana jako równa, a właściwość jest ustawiona na przesunięcie bieżącej strefy czasowej systemu lokalnego.  
  
   
  
## Examples  
 Poniższy przykład ilustruje, jak wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości `dateTime` parametru ma wpływ na wartość daty i godziny zwracanej przez ten Konstruktor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina uniwersalnego czasu koordynowanego (UTC), które wynikają z zastosowania przesunięcia <see cref="F:System.DateTimeOffset.MinValue" />, jest wcześniejsza niż.  
  
—lub— 
Data i godzina UTC wynikające z zastosowania przesunięcia są późniejsze niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data i godzina.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonej <see cref="T:System.DateTime" /> wartości i przesunięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tego konstruktora zależy od części wartości <xref:System.DateTime.Kind%2A> właściwości `dateTime` parametru:  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A> jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>równa `offset` , wartość parametru musi być równa 0 lub <xref:System.ArgumentException> jest generowany.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A> <xref:System.ArgumentException> to <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, wartość parametru musi być równa wartości przesunięcia lokalnej strefy czasowej od skoordynowanego czasu uniwersalnego (UTC) dla tej konkretnej daty lub zgłoszenia. `offset`  
  
-   W przypadku wartości <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> parametrumożebyćdowolnaprawidłowawartość`offset` .  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak zainicjować <xref:System.DateTimeOffset> obiekt z datą i godziną oraz przesunięcie lokalnej strefy czasowej, gdy ta strefa czasowa nie jest znana z góry.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /><see cref="F:System.DateTimeKind.Utc" /> równa <paramref name="offset" /> się i nie jest równa zero.  
  
—lub— 
 <paramref name="dateTime.Kind" /><see cref="F:System.DateTimeKind.Local" /> równa <paramref name="offset" /> się i nie jest równe przesunięciu lokalnej strefy czasowej systemu.  
  
—lub— 
 <paramref name="offset" />nie jest określony w pełnych minutach.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest krótszy niż-14 godzin lub dłuższy niż 14 godzin.  
  
—lub— 
 <see cref="P:System.DateTimeOffset.UtcDateTime" />jest mniejsze niż <see cref="F:System.DateTimeOffset.MinValue" /> lub większe niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Data i godzina wyrażona jako liczba interwałów 100-nanosekund, które upłynęły od 12:00:00 północy 1 stycznia 0,001.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonej liczby taktów i przesunięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle próba wywołania <xref:System.DateTimeOffset.%23ctor%2A> konstruktora w celu <xref:System.DateTimeOffset> utworzenia wystąpienia wartości z czasem lokalnym i przesunięciem innym niż <xref:System.ArgumentException>lokalna strefa czasowa zgłasza. Aby obejść to ograniczenie, można <xref:System.DateTimeOffset> użyć tego przeciążenia konstruktora. W poniższym przykładzie zastosowano liczbę taktów czasu lokalnego do utworzenia wystąpienia <xref:System.DateTimeOffset> wartości, której przesunięcie nie musi reprezentować czasu lokalnego:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.DateTimeOffset> Obiekt przy użyciu liczby taktów w dowolnej dacie (w tym przypadku 16 lipca 2007, o 1:32 PM) z przesunięciem-5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />nie jest określony w pełnych minutach.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />. <see cref="P:System.DateTimeOffset.UtcDateTime" />  
  
—lub— 
 <paramref name="ticks" />jest mniejsze niż <see langword="DateTimeOffset.MinValue.Ticks" /> lub większe niż <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
—lub— 
 <paramref name="Offset" />s mniej niż-14 godzin lub więcej niż 14 godzin.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonego roku, miesiąca, dnia, godziny, minuty, sekundy i przesunięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje `year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTimeOffset> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> Wywołaj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTimeOffset> obiektu przy <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> użyciu przeciążenia konstruktora.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />nie reprezentuje całkowitej minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsze niż 1 lub większe niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż jedna lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="offset" />jest krótszy niż-14 godzin lub dłuższy niż 14 godzin.  
  
—lub— 
Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />. <see cref="P:System.DateTimeOffset.UtcDateTime" /></exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i przesunięcia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje `year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTimeOffset> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> Wywołaj konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTimeOffset> obiektu przy <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> użyciu przeciążenia konstruktora.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />nie reprezentuje całkowitej minuty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsze niż 1 lub większe niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż jedna lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.  
  
—lub— 
 <paramref name="offset" />jest mniejsza niż-14 lub większa niż 14.  
  
—lub— 
Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />. <see cref="P:System.DateTimeOffset.UtcDateTime" /></exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Rok.</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="calendar">Kalendarz używany do interpretowania <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <param name="offset">Przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTimeOffset" /> struktury przy użyciu określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i przesunięcia określonego kalendarza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`Parametry, `month`, `day`, ,`hour`, `calendar` i wszystkieodzwierciedlająwartościwyrażonewkalendarzuokreślonymprzezparametr.`millisecond` `minute` `second` Wyjątek jest generowany, jeśli te wartości tworzą datę i godzinę, których nie można wyrazić przy użyciu tego kalendarza.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 Poniższy przykład używa wystąpień <xref:System.Globalization.HebrewCalendar> klasy <xref:System.Globalization.HijriCalendar> i klasy w celu utworzenia wystąpienia <xref:System.DateTimeOffset> wartości. Ta data zostanie następnie wyświetlona w konsoli programu przy użyciu odpowiednich kalendarzy i kalendarza gregoriańskiego.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" />nie reprezentuje całkowitej minuty.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />nie może <see langword="null" />być.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż wartość <paramref name="calendar" /> <see langword="MinSupportedDateTime.Year" /> parametru lub większa niż <see langword="MaxSupportedDateTime.Year" />.  
  
—lub— 
 <paramref name="month" />wartość jest mniejsza lub równa liczbie miesięcy w <paramref name="year" />. <paramref name="calendar" />  
  
—lub— 
 <paramref name="day" />jest mniejsza niż jedna lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza od zera lub większa od 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.  
  
—lub— 
 <paramref name="offset" />jest krótszy niż-14 godzin lub dłuższy niż 14 godzin.  
  
—lub— 
Parametry <paramref name="year" />, <paramref name="month" /> i<paramref name="day" /> nie mogą być reprezentowane jako wartości daty i godziny.  
  
—lub— 
Właściwość jest wcześniejsza niż <see cref="F:System.DateTimeOffset.MinValue" /> lub późniejsza niż <see cref="F:System.DateTimeOffset.MaxValue" />. <see cref="P:System.DateTimeOffset.UtcDateTime" /></exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Tworzenie wystąpień obiektów DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan"><see cref="T:System.TimeSpan" /> Obiekt, który reprezentuje dodatni lub ujemny przedział czasu.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określony przedział czasu do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz interwału czasu reprezentowanego przez. <paramref name="timeSpan" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć metody, <xref:System.DateTimeOffset.Add%2A> aby dodać więcej niż jeden rodzaj przedziału czasu (dni, godziny, minuty, sekundy lub milisekundy) w ramach jednej operacji. Zachowanie tej metody jest identyczne z operatorem dodawania. Struktura obsługuje także wyspecjalizowane metody dodawania (takie jak <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>i <xref:System.DateTimeOffset.AddMinutes%2A>) dla każdego przedziału czasu. <xref:System.DateTimeOffset>  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `timeSpan` do jego daty i godziny.  
  
 Metoda nie ma wpływu na wartość <xref:System.DateTimeOffset.Offset%2A> właściwości Current <xref:System.DateTimeOffset> obiektu. <xref:System.DateTimeOffset.Add%2A>  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.Add%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 Jeśli parametr jest `null`, Metoda ta zwraca wartość oryginalnego <xref:System.DateTimeOffset> obiektu bez zmian. `timeSpan`  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.TimeSpan> obiektów, które reprezentują czasy lotów między miejscami docelowymi. Następnie Metoda dodaje te czasy <xref:System.DateTimeOffset> do obiektu, który reprezentuje początkowy czas Takeoff lotu. <xref:System.DateTimeOffset.Add%2A> Wynik odzwierciedla zaplanowaną godzinę przybycia w każdym miejscu docelowym.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Liczba całych i częściowych dni. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę dni całkowite i ułamkowe do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę dni reprezentowane przez. <paramref name="days" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `days` parametru jest częścią ułamkową dnia. Na przykład 4,5 jest równoważne 4 dni, 12 godzin, 0 minut, 0 sekund, 0 milisekund. `days` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `days` do jego daty i godziny.  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddDays%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 Przekonwertowanie przedziałów czasu mniejszych niż dzień do ułamka może spowodować utratę precyzji. Jeśli jest to problematyczne rozwiązanie, można użyć <xref:System.DateTimeOffset.Add%2A> metody, która umożliwia określenie więcej niż jednego rodzaju interwału czasu w pojedynczym wywołaniu metody i eliminuje konieczność konwersji przedziałów czasu na części ułamkowe dnia.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTimeOffset.AddDays%2A> metodę, aby wyświetlić listę dat przypadających w poniedziałek, początek tygodnia pracy w marcu 2008.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Liczba całych i częściowych godzin. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę godzin całkowitych i ułamkowych do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę godzin przedstawionych przez. <paramref name="hours" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `hours` parametru jest częścią ułamkową godziny. Na przykład 4,5 jest równa 4 godziny, 30 minut, 0 sekund, 0 milisekund. `hours` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `hours` do jego daty i godziny.  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddHours%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 Przekonwertowanie przedziałów czasu o wartości mniejszej niż godzina do ułamka może spowodować utratę dokładności. (Na przykład jedna minuta to 0,01666 godziny). Jeśli jest to problematyczne rozwiązanie, można użyć <xref:System.DateTimeOffset.Add%2A> metody, która umożliwia określenie więcej niż jednego rodzaju interwału czasu w wywołaniu pojedynczej metody i eliminuje konieczność konwersji przedziałów czasowych na części ułamkowe.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTimeOffset.AddHours%2A> metodę, aby wyświetlić godziny rozpoczęcia zmian roboczych dla danego tygodnia w biurze, który ma 2 8 godzin.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Liczba całych i częściowych milisekund. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę milisekund do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę całych milisekund reprezentowane przez. <paramref name="milliseconds" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `milliseconds` parametru jest częścią ułamkową milisekund. Na przykład 4,5 jest równoważne z 4 milisekundami i 5000 taktami, gdzie jedna milisekunda jest równa 10 000 Takty. `milliseconds` Jednak jest zaokrąglana do najbliższej milisekundy. wszystkie wartości .5 lub większych są zaokrąglane w górę.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `milliseconds` do jego daty i godziny.  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddMilliseconds%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Liczba całych i częściowych minut. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę całkowite i ułamkowe minuty do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę minut przedstawionych przez. <paramref name="minutes" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `minutes` parametru jest częścią ułamkową minuty. Na przykład 4,5 jest równoważne 4 minut, 30 sekund, 0 milisekund. `minutes` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` do jego daty i godziny.  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddMinutes%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 Przekonwertowanie przedziałów czasu o wartości mniejszej niż minutę na ułamek może spowodować utratę dokładności. (Na przykład jedna sekunda to 0,01666 minuty). Jeśli jest to problematyczne rozwiązanie, można użyć <xref:System.DateTimeOffset.Add%2A> metody, która umożliwia określenie więcej niż jednego rodzaju interwału czasu w wywołaniu pojedynczej metody i eliminuje konieczność konwersji przedziałów czasowych na części ułamkowe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Liczba całych miesięcy. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę miesięcy do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę miesięcy reprezentowanych przez. <paramref name="months" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do większości innych metod, które dodają pojedynczą jednostkę przedziału czasu (na przykład minuty lub dni) do wartości daty <xref:System.DateTimeOffset.AddMonths%2A> i godziny, nie pozwala na dodawanie części ułamkowych miesiąca. Aby dodać godzinę, która składa się z innych jednostek czasu oprócz miesięcy do <xref:System.DateTimeOffset> obiektu, <xref:System.DateTimeOffset.Add%2A> Użyj metody.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `months` do jego daty i godziny.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTimeOffset.AddMonths%2A> metodę, aby wyświetlić datę początkową każdego kwartału roku 2007.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Liczba całych i częściowych sekund. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę sekund i ułamkowe sekundy do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę sekund reprezentowane przez. <paramref name="seconds" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część ułamkowa `seconds` parametru jest częścią ułamkową sekundy. W poniższej tabeli przedstawiono wartość części ułamkowych sekund.  
  
|Druga wartość|Odpowiednik|  
|------------------|----------------|  
|.1 sekunda|100 milisekund|  
|.01 s|10 milisekund|  
|.001 s|1 milisekund|  
  
 `seconds` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` do jego daty i godziny.  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddSeconds%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Liczba taktów 100-nanosekund. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę taktów do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczby taktów reprezentowanych przez. <paramref name="ticks" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Takt reprezentuje 100 nanosekund lub jeden 10 milionowego sekundy. Ze względu na to, że cykl jest bardzo mały i dokładny interwał czasu, każda większa jednostka czasu może być wyrażona jako liczba taktów bez utraty dokładności.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `minutes` do jego daty i godziny.  
  
 W poniższej tabeli przedstawiono liczbę taktów w określonym przedziale czasu.  
  
|Przedział czasu|Liczba znaczników|  
|-------------------|---------------------|  
|Sekunda|10 000 000|  
|Minuta|600 000 000|  
|Godzina|36 000 000 000|  
|Dzień|864 000 000 000|  
|Ciągu|6 048 000 000 000|  
|Bieżącym|Zależy od liczby dni w miesiącu.|  
|Rok przestępny|315 360 000 000 000|  
|Rok przestępny|316 224 000 000 000|  
  
 Ponieważ obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.AddTicks%2A> , metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas wykonywania operacji arytmetycznych daty i czasu. <xref:System.DateTimeOffset>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Liczba lat. Liczba może być dodatnia lub ujemna.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTimeOffset" /> obiekt, który dodaje określoną liczbę lat do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt oraz liczbę lat reprezentowane przez. <paramref name="years" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do większości innych metod, które dodają pojedynczą jednostkę przedziału czasu (na przykład minuty lub dni) do wartości daty <xref:System.DateTimeOffset.AddYears%2A> i godziny, nie pozwala na dodawanie części ułamkowych roku. Aby dodać godzinę, która składa się z innych jednostek czasu oprócz lat do <xref:System.DateTimeOffset> obiektu, <xref:System.DateTimeOffset.Add%2A> Użyj metody.  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `months` do jego daty i godziny.  
  
   
  
## Examples  
 W Stany Zjednoczone nie można wystawić licencji sterownika dla osób w wieku poniżej 16 lat. W poniższym przykładzie przedstawiono najnowszą możliwą datę, w której osoba musi zostać poniesiona w celu uzyskania legalnej licencji na licencję.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="second">Drugi obiekt, który będzie porównywany.</param>
        <summary>Porównuje <see cref="T:System.DateTimeOffset" /> dwa obiekty i wskazuje, czy pierwszy jest wcześniejszy niż drugi, równy sekundzie, czy później niż drugi.</summary>
        <returns>Liczba całkowita ze znakiem, która wskazuje, czy <paramref name="first" /> wartość parametru jest wcześniejsza niż, późniejsza niż lub taka sama jak wartość <paramref name="second" /> parametru, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Znaczenie 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="first" />jest wcześniejsza <paramref name="second" />niż.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="first" />jest równe <paramref name="second" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="first" />jest późniejsza niż <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas przeprowadzania porównania Metoda konwertuje zarówno `first` `second` parametry, jak i na uniwersalny czas koordynowany (UTC) przed wykonaniem porównania. Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 Innymi słowy, <xref:System.DateTimeOffset.Compare%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywołania <xref:System.DateTimeOffset.Compare%2A> metody w celu porównania <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektem.</param>
        <summary>Porównuje bieżący <see cref="T:System.DateTimeOffset" /> obiekt z określonym <see cref="T:System.DateTimeOffset" /> obiektem i wskazuje, czy bieżący obiekt jest wcześniejszy niż, taki sam jak lub późniejszy niż drugi <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <returns>Liczba całkowita ze znakiem, która wskazuje relację <see cref="T:System.DateTimeOffset" /> między bieżącym <paramref name="other" />obiektem a, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest wcześniejszy niż <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest taki sam jak <paramref name="other" />.  
  
 </description></item><item><term> Większe niż zero.  
  
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest późniejszy niż <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda porównuje <xref:System.DateTimeOffset> obiekty przez porównanie <xref:System.DateTimeOffset.UtcDateTime%2A> ich wartości, czyli określa, czy dwa obiekty reprezentują pojedynczy punkt w czasie, i wskazuje, czy bieżący obiekt jest wcześniejszy niż, później, czy taki sam, jak `other`parametr.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywołania <xref:System.DateTimeOffset.CompareTo%2A> metody w celu porównania <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą składnik daty bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTime" /></summary>
        <value>Wartość, która reprezentuje składnik daty bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTime" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość usuwa wszystkie znaczące części składnika czasu z <xref:System.DateTimeOffset> obiektu i zwraca tylko jego znaczący składnik daty. Na przykład jeśli <xref:System.DateTimeOffset> obiekt ma wartość daty i godziny "1/12/07 4:01pm + 7:30", właściwość <xref:System.DateTime> zwraca wartość "1/12/07 12:00:00 am". <xref:System.DateTime> Wartość można następnie wyświetlić przy użyciu dowolnego specyfikatora formatu standardowego lub niestandardowego, który wyświetla tylko daty. (Zobacz sekcję przykładową dla ilustracji).  
  
 Wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości zwracanego <xref:System.DateTime> obiektu jest zawsze <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Nie ma to wpływ na wartość <xref:System.DateTimeOffset.Offset%2A> właściwości.  
  
 Aby wyświetlić datę bez jej składnika czasu, można również użyć specyfikatorów formatu "D" lub "d"; ilustracja zapoznaj się z sekcją przykładową.  
  
   
  
## Examples  
 Poniższy przykład pobiera wartość <xref:System.DateTimeOffset.Date%2A> właściwości dla konkretnej daty. Następnie wyświetla tę wartość w konsoli programu przy użyciu standardowych i niestandardowych specyfikatorów formatu tylko daty.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące DateTime</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące DateTime</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTime" /></summary>
        <value>Data i godzina bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.DateTime%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Ta właściwość zwraca zarówno datę, jak i składnik <xref:System.DateTimeOffset> czasu obiektu, co sprawia, że jest to przydatne <xref:System.DateTimeOffset> <xref:System.DateTime> do konwersji. Na przykład jeśli <xref:System.DateTimeOffset> obiekt ma wartość daty i godziny "1/12/07 4:01pm + 7:30", właściwość zwraca datę "1/12/07 4:01pm".  
  
 Wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości zwracanego <xref:System.DateTime> obiektu to <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 <xref:System.DateTimeOffset.DateTime%2A> Poniższy przykład ilustruje użycie właściwości, aby przekonwertować czas zwracany <xref:System.DateTimeOffset.Now%2A> przez właściwości i <xref:System.DateTimeOffset.UtcNow%2A> na <xref:System.DateTime> wartości.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">Konwertowanie pomiędzy DateTime i DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień miesiąca reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik dnia bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako wartość z zakresu od 1 do 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Day%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Można również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik dnia obiektu przez <xref:System.DateTimeOffset.ToString%2A> wywołanie metody ze specyfikatorami formatu niestandardowego "d" lub "DD".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik <xref:System.DateTimeOffset> dnia obiektu na trzy różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Day%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "d".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "DD".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień tygodnia reprezentowany przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Jedna z wartości wyliczenia wskazująca dzień tygodnia bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość stałych w <xref:System.DayOfWeek> wyliczeniu z zakresu od <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> do <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Jeśli rzutowanie na liczbę całkowitą, jego wartości są z zakresu od zera <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>(co wskazuje) na sześć <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>(co oznacza).  
  
 Możesz również wyświetlić nazwę dnia tygodnia dla określonej daty przy użyciu specyfikatora formatu "D" lub specyfikatora formatu niestandardowego "dddd". Na przykład:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Należy zauważyć, że ciąg zwracany przez wywołanie `ToString` metody <xref:System.DayOfWeek> elementu członkowskiego wyliczenia zwracanego przez tę właściwość nie jest zlokalizowany. Aby wyodrębnić ciąg, który zawiera nazwę dnia tygodnia bieżącej kultury lub określonej kultury, wywołaj <xref:System.DateTimeOffset.ToString%2A> metodę ze specyfikatorem formatu niestandardowego "dddd". Na przykład poniższy kod wyświetla nazwę dnia tygodnia dla daty przy użyciu `fr-fr` kultury.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 Poniższy przykład wyświetla nazwę dnia tygodnia pierwszego dnia każdego miesiąca roku 2008.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień roku reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Dzień roku bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako wartość z przedziału od 1 do 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy <see cref="T:System.DateTimeOffset" /> dwa obiekty są równe, <see cref="T:System.DateTimeOffset" /> czy obiekt jest równy podanemu obiektowi.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje ten sam punkt w czasie jak określony <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <returns><see langword="true" />Jeśli oba <see cref="T:System.DateTimeOffset" /> obiekty mają tę samą <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość; w przeciwnym <see langword="false" />razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed przeprowadzeniem porównania ta metoda konwertuje wartości obu <xref:System.DateTimeOffset> obiektów na uniwersalny czas koordynowany (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 Innymi słowy, <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy <xref:System.DateTimeOffset> dwa obiekty reprezentują ten sam czas i mają tę samą wartość przesunięcia, <xref:System.DateTimeOffset.EqualsExact%2A> Użyj metody.  
  
 Obiekt, który nie `null` jest uważany za nowszy (lub większy `null`) niż jeden z nich. <xref:System.DateTimeOffset>  
  
 To Przeciążenie <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> metody <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implementuje metodę. Oferuje nieco lepszą wydajność niż Przeciążenie, <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> `other` ponieważ parametr nie musi być konwertowany z obiektu.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywołania <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> metody do testowania <xref:System.DateTimeOffset> obiektów pod kątem równości z bieżącym <xref:System.DateTimeOffset> obiektem.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektem.</param>
        <summary>Określa, czy <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje ten sam punkt w czasie jak określony obiekt.</summary>
        <returns><see langword="true" />Jeśli parametr jest obiektem i reprezentuje ten sam punkt w czasie co bieżący <see cref="T:System.DateTimeOffset" /> obiekt; w przeciwnym razie, <see langword="false" />. <see cref="T:System.DateTimeOffset" /> <paramref name="obj" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed przeprowadzeniem porównania ta metoda konwertuje wartości zarówno bieżącego <xref:System.DateTimeOffset> obiektu `obj` , jak i parametru na uniwersalny czas koordynowany (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 Innymi słowy <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> Metoda określa, czy bieżący <xref:System.DateTimeOffset> obiekt i określony obiekt reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy <xref:System.DateTimeOffset> dwa obiekty reprezentują ten sam czas i mają tę samą wartość przesunięcia, <xref:System.DateTimeOffset.EqualsExact%2A> Użyj metody.  
  
 Jeśli `obj` `obj` jest `null`lub typem czasu wykonywania nie <xref:System.DateTimeOffset>jest, metoda zwraca `false`.  
  
   
  
## Examples  
 Poniższy przykład wskazuje, czy bieżący <xref:System.DateTimeOffset> obiekt jest równy kilku innym <xref:System.DateTimeOffset> obiektom, jak również do odwołania o wartości null i <xref:System.DateTime> obiektu.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="second">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa <see cref="T:System.DateTimeOffset" /> określone obiekty reprezentują ten sam punkt w czasie.</summary>
        <returns><see langword="true" />Jeśli dwa <see cref="T:System.DateTimeOffset" /> obiekty mają tę samą <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed przeprowadzeniem porównania ta metoda konwertuje oba <xref:System.DateTimeOffset> obiekty na uniwersalny czas koordynowany (UTC). Metoda ta jest równoważna dla następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy, <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy <xref:System.DateTimeOffset> dwa obiekty reprezentują ten sam czas i mają tę samą wartość przesunięcia, <xref:System.DateTimeOffset.EqualsExact%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywołania <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> metody w celu przetestowania różnych <xref:System.DateTimeOffset> par obiektów pod kątem równości.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektem.</param>
        <summary>Określa, czy bieżący <see cref="T:System.DateTimeOffset" /> obiekt reprezentuje ten sam czas i ma takie samo przesunięcie jak określony <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <returns><see langword="true" />Jeśli bieżący <see cref="T:System.DateTimeOffset" /> obiekt i <paramref name="other" /> ma tę samą wartość daty i godziny oraz tę <see langword="false" />samą <see cref="P:System.DateTimeOffset.Offset" /> wartość; w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ze względu na to, że wiele stref czasowych współdzieli pojedyncze przesunięcie, wartość zwracana przez `true` nie gwarantuje, że bieżący `other` i obiekt reprezentuje czasy w tej samej strefie czasowej.  
  
 W przeciwieństwie <xref:System.DateTimeOffset.EqualsExact%2A> do metody, przeciążenia <xref:System.DateTimeOffset.Equals%2A> metody określają tylko, czy dwie <xref:System.DateTimeOffset> wartości reprezentują pojedynczy punkt w czasie. Nie wskazują one, że dwie wartości mają tę samą datę i godzinę, jak również to samo przesunięcie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje <xref:System.DateTimeOffset.EqualsExact%2A> sposób użycia metody do porównywania podobnych <xref:System.DateTimeOffset> obiektów.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Czas pliku systemu Windows wyrażony w taktach.</param>
        <summary>Konwertuje określony czas pliku systemu Windows na odpowiedni czas lokalny.</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę <paramref name="fileTime" /> z przesunięciem ustawionym na przesunięcie czasu lokalnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 Czas pliku systemu Windows jest bezpośrednio dostępny za pomocą interfejsu API systemu Windows przez `GetFileTime` wywołanie funkcji, która `FILETIME` zwraca strukturę. Pojedynczy parametr funkcji jest dojściem pliku, którego informacje o czasie pliku mają być pobierane. Dojście do pliku jest pobierane przez wywołanie `CreateFile` funkcji. Elementczłonkowski`dwHighDateTime`strukturyzawiera cztery duże ilości bajtów czasu pliku, a jego `dwLowDateTime` element członkowski zawiera cztery bajty w niskiej kolejności. `FILETIME` Poniższy przykład ilustruje sposób pobierania wartości czasu pliku systemu Windows i konwertowania ich na <xref:System.DateTimeOffset> wartości.  
  
 Wartości czasu pliku systemu Windows mogą być również tworzone <xref:System.DateTime> na podstawie wartości poprzez <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> wywoływanie <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> metod i <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> i <xref:System.DateTimeOffset> z wartości przez wywołanie metody.  
  
   
  
## Examples  
 W poniższym przykładzie za pomocą interfejsu API systemu Windows można pobrać czasy plików systemu Windows dla pliku wykonywalnego programu WordPad.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" />jest mniejsza od zera.  
  
—lub— 
 <paramref name="filetime" />jest większa niż <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Czas systemu UNIX wyrażony jako liczba milisekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o godzinie 12:00 AM/godzina UTC). W przypadku czasów UNIX przed tą datą wartość jest ujemna.</param>
        <summary>Konwertuje czas systemu UNIX wyrażony jako liczba milisekund, które upłynęły od 1970-01-01T00:00:00Z do <see cref="T:System.DateTimeOffset" /> wartości.</summary>
        <returns>Wartość daty i godziny reprezentująca ten sam moment w czasie, jak w przypadku systemu UNIX.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości zwracanego <xref:System.DateTimeOffset> wystąpienia to <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, która reprezentuje uniwersalny czas koordynowany. <xref:System.DateTimeOffset.Offset%2A> Można przekonwertować ją na czas w określonej strefie czasowej, wywołując <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodę.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" />jest mniejsza niż-62 135 596 800 000.  
  
—lub— 
 <paramref name="milliseconds" />jest większa niż 253 402 300 799 999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">Czas systemu UNIX wyrażony jako liczba sekund, które upłynęły od 1970-01-01T00:00:00Z (1 stycznia 1970, o godzinie 12:00 AM/s). W przypadku czasów UNIX przed tą datą wartość jest ujemna.</param>
        <summary>Konwertuje czas systemu UNIX wyrażony jako liczba sekund, które upłynęły od 1970-01-01T00:00:00Z do <see cref="T:System.DateTimeOffset" /> wartości.</summary>
        <returns>Wartość daty i godziny reprezentująca ten sam moment w czasie, jak w przypadku systemu UNIX.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości zwracanego <xref:System.DateTimeOffset> wystąpienia to <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, która reprezentuje uniwersalny czas koordynowany. <xref:System.DateTimeOffset.Offset%2A> Można przekonwertować ją na czas w określonej strefie czasowej, wywołując <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodę.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" />jest mniejsza niż-62 135 596 800.  
  
—lub— 
 <paramref name="seconds" />jest większa niż 253 402 300 799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik godziny z czasu reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik godziny bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. Ta właściwość używa zegara 24-godzinnego; wartość z zakresu od 0 do 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Hour%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Można również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik godziny obiektu, <xref:System.DateTimeOffset.ToString%2A> wywołując metodę ze specyfikatorami formatu niestandardowego "H" lub "gg".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik <xref:System.DateTimeOffset> godziny obiektu na trzy różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Hour%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "H".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "HH".  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą lokalną datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTime" /></summary>
        <value>Lokalna Data i godzina bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W razie potrzeby <xref:System.DateTimeOffset.LocalDateTime%2A> Właściwość konwertuje datę i godzinę <xref:System.DateTimeOffset> bieżącego obiektu na datę i godzinę systemu lokalnego. Konwersja jest operacją dwuetapową:  
  
1.  Właściwość konwertuje czas bieżącego <xref:System.DateTimeOffset> obiektu na uniwersalny czas koordynowany (UTC).  
  
2.  Właściwość następnie konwertuje UTC na czas lokalny.  
  
 Nie są one nieprawidłowe i niejednoznaczne czasy są mapowane na czas standardowy strefy lokalnej. (Jednak Konwersja może tworzyć anomalie: Jeśli <xref:System.DateTimeOffset> wartość pochodna komputera lokalnego odzwierciedla niejednoznaczną datę i godzinę, ta wartość może zostać przekonwertowana na czas UTC, a następnie z powrotem do czasu lokalnego, który różni się od oryginalnego czasu).  Właściwość stosuje wszelkie reguły korekty w lokalnej strefie czasowej podczas wykonywania tej konwersji.  
  
 Ta właściwość zwraca zarówno datę, jak i składnik <xref:System.DateTimeOffset> czasu obiektu, co sprawia, że jest to <xref:System.DateTimeOffset> przydatne <xref:System.DateTime> do konwersji. Poza wykonywaniem dowolnych niezbędnych operacji konwersji ta właściwość różni się od <xref:System.DateTimeOffset.DateTime%2A> właściwości przez ustawienie wartości <xref:System.DateTime.Kind%2A> właściwości zwracanego <xref:System.DateTime> obiektu na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład ilustruje kilka konwersji <xref:System.DateTimeOffset> wartości na czasy lokalne w Stanach Zjednoczonych Standardowa strefa czasowa (pacyficzny). Należy zauważyć, że ostatnie trzy razy są niejednoznaczne; Właściwość mapuje wszystkie z nich na pojedynczą datę i godzinę w standardowej strefie czasowej pacyficznego.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje największą możliwą wartość <see cref="T:System.DateTimeOffset" />. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej to 12/31/9999 11:59:59 PM + 00:00.  
  
 Właściwość służy do określenia, czy wartość nowego <xref:System.DateTimeOffset> obiektu lub <xref:System.DateTimeOffset> wartość zwrócona przez operację arytmetyczną jest taka sama jak wartość maksymalnego zakresu lub jej wcześniejsza. <xref:System.DateTimeOffset.MaxValue> Jeśli tak nie jest, metoda zgłasza <xref:System.ArgumentOutOfRangeException>. Każda <xref:System.DateTimeOffset> wartość jest konwertowana na uniwersalny czas koordynowany (UTC), zanim metoda porównuje <xref:System.DateTimeOffset.MaxValue>ją z.  Oznacza to, że <xref:System.DateTimeOffset> wartość, której data i godzina zbliża się do maksymalnego zakresu, ale którego przesunięcie jest ujemne, może zgłosić wyjątek. Na przykład wartość 12/31/9999 11:00 pm-02:00 jest poza zakresem, ponieważ jest ona późniejsza niż <xref:System.DateTimeOffset.MaxValue> godzina przekonwertowania na czas UTC.  
  
 Niektóre kalendarze, takie jak <xref:System.Globalization.UmAlQuraCalendar>, obsługują górny zakres dat, który jest wcześniejszy niż. <xref:System.DateTime.MaxValue> W takich przypadkach próba uzyskania dostępu <xref:System.DateTime.MaxValue> do zmiennych przypisań lub formatowania i analizy może <xref:System.ArgumentOutOfRangeException>zgłosić. Zamiast pobierać wartość <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, można pobrać wartość z <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> właściwości określona kultura, która jest poprawna.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" />znajduje się poza zakresem bieżącego lub określonego domyślnego kalendarza kultury.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik milisekundy czasu reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik milisekund bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako liczba całkowita z zakresu od 0 do 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> składnik milisekundy obiektu przez <xref:System.DateTimeOffset.ToString%2A> wywołanie metody ze specyfikatorem formatu niestandardowego "FFF".  
  
 Jeśli korzystasz z właściwości, takich <xref:System.DateTimeOffset.Now%2A> jak <xref:System.DateTimeOffset.UtcNow%2A> lub, aby dokładnie śledzić liczbę minionych milisekund, dokładność składnika czasu milisekund zależy od rozdzielczości zegara systemowego. W systemach operacyjnych Windows NT 3,5 i nowszych oraz Windows Vista rozdzielczość zegara wynosi około 10-15 milisekund.  
  
   
  
## Examples  
 Poniższy przykład wyświetla liczbę milisekund <xref:System.DateTimeOffset> obiektu przy użyciu specyfikatora formatu niestandardowego i przez bezpośredni <xref:System.DateTimeOffset.Millisecond%2A> dostęp do właściwości.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik minuty czasu reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik minuty bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako liczba całkowita z zakresu od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Minute%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Możesz również utworzyć reprezentację ciągu dla <xref:System.DateTimeOffset> komponentu minuty obiektu przez <xref:System.DateTimeOffset.ToString%2A> wywołanie metody ze specyfikatorami formatu niestandardowego "m" lub "mm".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik <xref:System.DateTimeOffset> minuty obiektu na trzy różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Minute%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "m".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje najwcześniejszą możliwą <see cref="T:System.DateTimeOffset" /> wartość. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej to 1/1/0001 12:00:00 AM + 00:00.  
  
 Właściwość służy do określenia, czy wartość nowego <xref:System.DateTimeOffset> obiektu lub <xref:System.DateTimeOffset> wartość zwrócona przez operację arytmetyczną jest taka sama jak wartość minimalnego zakresu lub jej późniejsza. <xref:System.DateTimeOffset.MinValue> Jeśli tak nie jest, metoda zgłasza <xref:System.ArgumentOutOfRangeException>. Każda <xref:System.DateTimeOffset> wartość jest konwertowana na uniwersalny czas koordynowany (UTC) przed wykonaniem <xref:System.DateTimeOffset.MinValue>porównania przez metodę.  Oznacza to, że <xref:System.DateTimeOffset> wartość, której data i godzina znajdują się blisko minimalnego zakresu, ale którego przesunięcie jest dodatnie, może zgłosić wyjątek. Na przykład wartość 1/1/0001 1:00:00 am + 02:00 jest spoza zakresu, ponieważ jest ona wcześniejsza niż <xref:System.DateTimeOffset.MinValue> godzina przekonwertowania na czas UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik miesiąca z daty reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik miesiąca bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako liczba całkowita z zakresu od 1 do 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Month%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Możesz również utworzyć reprezentację ciągu dla <xref:System.DateTimeOffset> składnika miesiąca obiektu, <xref:System.DateTimeOffset.ToString%2A> wywołując metodę ze specyfikatorami formatu niestandardowego "M" lub "mm".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik <xref:System.DateTimeOffset> miesiąca wartości na trzy różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Month%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "M".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTimeOffset" /> Pobiera obiekt, który jest ustawiony na bieżącą datę i godzinę na bieżącym komputerze z przesunięciem ustawionym na przesunięcie czasu lokalnego od skoordynowanego czasu uniwersalnego (UTC).</summary>
        <value><see cref="T:System.DateTimeOffset" /> Obiekt, którego data i godzina są bieżącym czasem lokalnym i którego przesunięcie jest przesunięciem lokalnej strefy czasowej od skoordynowanego czasu uniwersalnego (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dokładność bieżącego czasu lokalnego składnika milisekund zależy od rozdzielczości zegara systemowego. W systemach operacyjnych Windows NT 3,5 i nowszych oraz Windows Vista rozdzielczość zegara wynosi około 10-15 milisekund.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.Now%2A> właściwości, aby pobrać bieżącą datę i godzinę, i wyświetlić ją przy użyciu każdego [standardowego ciągu formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) obsługiwanego przez <xref:System.DateTimeOffset> typ.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 W poniższym przykładzie zastosowano <xref:System.DateTimeOffset.Now%2A> właściwości <xref:System.DateTimeOffset.Millisecond%2A> i, aby określić rozdzielczość zegara systemowego. Wyświetla czas tylko wtedy, gdy wartość jego składnika milisekundy uległa zmianie.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przesunięcie czasu od skoordynowanego czasu uniwersalnego (UTC).</summary>
        <value>Różnica między wartością czasu bieżącego <see cref="T:System.DateTimeOffset" /> obiektu i uniwersalnym czasem koordynowanym (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.TimeSpan.Hours%2A> właściwości zwracanego <xref:System.TimeSpan> obiektu może przyjmować od-14 godzin do 14 godzin.  
  
 Wartość <xref:System.DateTimeOffset.Offset%2A> właściwości jest precyzyjna z dokładnością do minuty.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTimeOffset.Offset%2A> właściwości, aby wyświetlić różnicę czasu lokalnego od skoordynowanego czasu uniwersalnego (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netframework-2.0;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Obiekt, do którego ma zostać dodany przedział czasu.</param>
        <param name="dateTimeTz">Obiekt, do którego ma zostać dodany przedział czasu.</param>
        <param name="timeSpan">Przedział czasu, który ma zostać dodany.</param>
        <summary>Dodaje określony przedział czasu do <see cref="T:System.DateTimeOffset" /> obiektu, który ma określoną datę i godzinę, i zwraca <see cref="T:System.DateTimeOffset" /> obiekt, który ma nową datę i godzinę.</summary>
        <returns>Obiekt <paramref name="dateTimeTz" /> , którego wartość jest sumą wartości i <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operację dodawania dla <xref:System.DateTimeOffset> wartości. <xref:System.DateTimeOffset.op_Addition%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Języki nieobsługujące niestandardowych operatorów i przeciążania operatora mogą wywołać <xref:System.DateTimeOffset.Add%2A> metodę zamiast.  
  
 Równoważna Metoda dla tego operatora to <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa <see cref="T:System.DateTimeOffset" /> określone obiekty reprezentują ten sam punkt w czasie.</summary>
        <returns><see langword="true" />Jeśli oba <see cref="T:System.DateTimeOffset" /> obiekty mają tę samą <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartość; w przeciwnym <see langword="false" />razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operację operatora równości dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_Equality%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Przed obliczeniem `left` argumentów i `right` dla równości, operator konwertuje obie wartości na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy, <xref:System.DateTimeOffset.op_Equality%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują pojedynczy punkt w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia. Aby określić, czy <xref:System.DateTimeOffset> dwa obiekty reprezentują ten sam czas i mają tę samą wartość przesunięcia, <xref:System.DateTimeOffset.EqualsExact%2A> Użyj metody.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTimeOffset" /> z określonych obiektów jest większy niż (lub późniejsza) drugi określony <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <returns><see langword="true" /><see cref="P:System.DateTimeOffset.UtcDateTime" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> <see langword="false" />wartość jest późniejsza niż wartość ;<paramref name="right" />w przeciwnym razie. <paramref name="left" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operacje operatora większego niż dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_GreaterThan%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Języki nieobsługujące niestandardowych operatorów mogą wywołać <xref:System.DateTimeOffset.Compare%2A> metodę zamiast. Mogą również wywołać <xref:System.DateTimeOffset.op_GreaterThan%2A> metodę bezpośrednio, jak pokazano w poniższym przykładzie.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Przed szacowaniem `left` operandów `right` i operator konwertuje obie wartości na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTimeOffset" /> z określonych obiektów jest większy lub równy drugiemu określonemu <see cref="T:System.DateTimeOffset" /> obiektowi.</summary>
        <returns><see langword="true" /><paramref name="right" /> <see langword="false" /> <see cref="P:System.DateTimeOffset.UtcDateTime" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> wartośćjesttakasamajaklubpóźniejszaniżwartość;<paramref name="left" /> w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operacje operatora "większe niż lub równe" dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_GreaterThan%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Języki nieobsługujące niestandardowych operatorów mogą wywołać <xref:System.DateTimeOffset.Compare%2A> metodę zamiast. Niektóre języki mogą również wywołać <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> metodę bezpośrednio, jak pokazano w poniższym przykładzie.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Przed szacowaniem `left` operandów `right` i operator konwertuje obie wartości na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Obiekt do przekonwertowania.</param>
        <summary>Definiuje niejawną konwersję <see cref="T:System.DateTime" /> obiektu <see cref="T:System.DateTimeOffset" /> do obiektu.</summary>
        <returns>Przekonwertowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda umożliwia kompilatorowi automatyczne <xref:System.DateTime> konwertowanie obiektu na <xref:System.DateTimeOffset> obiekt bez jawnego operatora rzutowania (in C#) lub wywołania funkcji konwersji (w Visual Basic). <xref:System.DateTimeOffset.op_Implicit%2A> Definiuje konwersję rozszerzającą, która nie obejmuje utraty danych i nie generuje <xref:System.OverflowException>. <xref:System.DateTimeOffset.op_Implicit%2A> Metoda wprowadza kod, taki jak następujące możliwe:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Ta metoda jest równoważna z <xref:System.DateTimeOffset.%23ctor%2A> konstruktorem. Przesunięcie obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości `dateTime` parametru:  
  
-   <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Jeśli wartość <xref:System.DateTimeOffset.Offset%2A> właściwości to <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeOffset> Data i godzina obiektu jest równa `dateTime`, a jej właściwość jest równa 0.  
  
-   Jeśli wartość <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> właściwości jest `dateTime` <xref:System.DateTimeOffset> lub, Data i godzina obiektu jest ustawiona jako równa, a jego <xref:System.DateTimeOffset.Offset%2A> właściwość jest ustawiona na przesunięcie bieżącej strefy czasowej systemu lokalnego. <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> <xref:System.DateTimeKind.Local?displayProperty=nameWithType>  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina uniwersalnego czasu koordynowanego (UTC), które wynikają z zastosowania przesunięcia <see cref="F:System.DateTimeOffset.MinValue" />, jest wcześniejsza niż.  
  
—lub— 
Data i godzina UTC wynikające z zastosowania przesunięcia są późniejsze niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy dwa <see cref="T:System.DateTimeOffset" /> określone obiekty odwołują się do różnych punktów w czasie.</summary>
        <returns><see langword="true" />Jeśli <paramref name="left" /> i <see cref="P:System.DateTimeOffset.UtcDateTime" /> niemają<see langword="false" />tej samej wartości; w przeciwnym razie. <paramref name="right" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operacje operatora nierówności dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_Inequality%2A> Zawsze zwraca odwrotny wynik z <xref:System.DateTimeOffset.op_Equality%2A>. <xref:System.DateTimeOffset.op_Inequality%2A> Metoda umożliwia wykonywanie następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Przed obliczeniem `left` argumentów i `right` dla równości, operator konwertuje obie wartości na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Innymi słowy, <xref:System.DateTimeOffset.op_Inequality%2A> Metoda określa, czy dwa <xref:System.DateTimeOffset> obiekty reprezentują różne punkty w czasie. Porównuje bezpośrednio daty i godziny, a nie przesunięcia.  
  
 Języki nieobsługujące niestandardowych operatorów mogą wywołać <xref:System.DateTimeOffset.Compare%2A> metodę zamiast. Ponadto niektóre języki mogą również wywołać <xref:System.DateTimeOffset.op_Inequality%2A> metodę bezpośrednio, jak pokazano w poniższym przykładzie.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTimeOffset" /> z określonych obiektów jest mniejszy od drugiego <see cref="T:System.DateTimeOffset" /> określonego obiektu.</summary>
        <returns><see langword="true" /><see cref="P:System.DateTimeOffset.UtcDateTime" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> <see langword="false" />wartość jest wcześniejsza niż wartość ;wprzeciwnymrazie.<paramref name="right" /> <paramref name="left" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operacje operatora mniejszego niż operator dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_LessThan%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Przed szacowaniem `left` operandów `right` i operator konwertuje oba operandy na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Języki nieobsługujące niestandardowych operatorów mogą wywołać <xref:System.DateTimeOffset.Compare%2A> metodę zamiast. Ponadto niektóre języki mogą również wywołać <xref:System.DateTimeOffset.op_LessThan%2A> metodę bezpośrednio, jak pokazano w poniższym przykładzie.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="right">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTimeOffset" /> z określonych obiektów jest mniejszy od drugiego <see cref="T:System.DateTimeOffset" /> określonego obiektu.</summary>
        <returns><see langword="true" /><see cref="P:System.DateTimeOffset.UtcDateTime" /> Jeśli <see cref="P:System.DateTimeOffset.UtcDateTime" /> <see langword="false" />wartość jest wcześniejsza niż wartość ;wprzeciwnymrazie.<paramref name="right" /> <paramref name="left" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operacje operatora mniejszego niż lub równego dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Języki nieobsługujące niestandardowych operatorów mogą wywołać <xref:System.DateTimeOffset.Compare%2A> metodę zamiast. Niektóre języki mogą również wywołać <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> metodę bezpośrednio, jak pokazano w poniższym przykładzie.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Przed szacowaniem `left` operandów `right` i operator konwertuje obie wartości na uniwersalny czas koordynowany (UTC). Operacja ta jest równoważna z wykonaniem następujących czynności:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odejmuje określoną <see cref="T:System.DateTimeOffset" /> wartość lub <see cref="T:System.TimeSpan" /> obiekt z <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Odjemna.</param>
        <param name="right">Odjemnik.</param>
        <summary>Odejmuje jeden <see cref="T:System.DateTimeOffset" /> obiekt od innego i daje przedział czasu.</summary>
        <returns>Obiekt, który reprezentuje różnicę między <paramref name="left" /> i. <paramref name="right" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operację odejmowania dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_Subtraction%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Języki nieobsługujące niestandardowych operatorów i przeciążania operatora mogą wywołać <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> metodę zamiast.  
  
 Równoważna Metoda dla tego operatora to <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netframework-2.0;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Obiekt daty i godziny, z którego ma zostać odjęta wartość.</param>
        <param name="dateTimeTz">Obiekt daty i godziny, z którego ma zostać odjęta wartość.</param>
        <param name="timeSpan">Interwał czasu, który należy odjąć.</param>
        <summary>Odejmuje określony przedział czasu od określonej daty i godziny, a następnie zwraca nową datę i godzinę.</summary>
        <returns>Obiekt, który jest równy wartości <paramref name="dateTimeOffset" /> minus. <paramref name="timeSpan" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda definiuje operację odejmowania dla <xref:System.DateTimeOffset> obiektów. <xref:System.DateTimeOffset.op_Subtraction%2A> Umożliwia stosowanie kodu takiego jak następujący:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Języki nieobsługujące niestandardowych operatorów i przeciążania operatora mogą wywołać <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodę zamiast.  
  
 Równoważna Metoda dla tego operatora to <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest <see cref="F:System.DateTimeOffset.MinValue" /> mniejsza lub równa <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę, godzinę i przesunięcie na jego <see cref="T:System.DateTimeOffset" /> odpowiednik.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest <paramref name="input" />zawarta w.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29>analizuje ciąg z trzema elementami, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. Te trzy elementy są przedstawione w poniższej tabeli.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<> Przesunięcia|"-7:30"|  
  
 Chociaż każdy z tych elementów jest opcjonalny, \<przesunięcia > nie może być wyświetlany przez siebie. Musi ona być podana razem z \<datą > lub \<> czasu. W \<przypadku braku daty > wartość domyślna to bieżący dzień. W \<przypadku braku czasu > wartość domyślna to 12:00:00 am. Jeśli \<Data > jest obecna, ale jej składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok w bieżącym kalendarzu bieżącej kultury na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Jeśli \<brak > przesunięcia, jego wartość domyślna to przesunięcie lokalnej strefy czasowej. \<> Przesunięcia może reprezentować wartość ujemną lub dodatnią od skoordynowanego czasu uniwersalnego (UTC). W obu przypadkach \<> przesunięcia musi zawierać symbol znaku.  
  
 Ciąg jest analizowany przy użyciu informacji o formatowaniu <xref:System.Globalization.DateTimeFormatInfo> w obiekcie, który jest zainicjowany dla bieżącej kultury. `input` Aby przeanalizować ciąg, który zawiera wskazane formatowanie, które nie musi być zgodne z formatowaniem bieżącej kultury, użyj <xref:System.DateTimeOffset.ParseExact%2A> metody i podaj specyfikator formatu.  
  
   
  
## Examples  
 Poniższy przykład wywołuje metodę, <xref:System.DateTimeOffset.Parse%28System.String%29> aby przeanalizować kilka ciągów daty i godziny. Przykład zawiera dane wyjściowe z 22 marca 2007, w systemie, którego kultura jest en-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" />zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formacie specyficznym dla kultury.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonych informacji o formacie specyficznym dla kultury.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="input" />, zgodnie z <paramref name="formatProvider" />parametrem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda analizuje ciąg z trzema elementami, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<> Przesunięcia|"-7:30"|  
  
 Chociaż każdy z tych elementów jest opcjonalny, \<przesunięcia > nie może być wyświetlany przez siebie. Musi ona być podana razem z \<datą > lub \<> czasu. W \<przypadku braku daty > wartość domyślna to bieżący dzień. Jeśli \<Data > jest obecna, ale jej składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok `provider` w bieżącym kalendarzu parametru na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. W \<przypadku braku czasu > wartość domyślna to 12:00:00 am. Jeśli \<brak > przesunięcia, jego wartość domyślna to przesunięcie lokalnej strefy czasowej. \<> Przesunięcia może reprezentować wartość ujemną lub dodatnią od skoordynowanego czasu uniwersalnego (UTC). W obu przypadkach \<> przesunięcia musi zawierać symbol znaku.  
  
 Format tych trzech elementów jest definiowany przez `formatProvider` parametr, który może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę, której formatowanie jest używane `input` w parametrze. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje formatowanie używane w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatni lub ujemny użyty w \<przesunięciu > musi mieć wartość + lub-. Nie jest on zdefiniowany <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> przez lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu `formatProvider` parametru.  
  
   
  
## Examples  
 Poniższy przykład analizuje ciągi daty i godziny, które są sformatowane dla kultury fr-fr i wyświetlają je przy użyciu domyślnej kultury en-us systemu lokalnego.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" />zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formacie specyficznym dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonych informacji o formacie określonym dla kultury i stylu formatowania.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest <paramref name="input" /> zawarta <paramref name="formatProvider" /> w <paramref name="styles" />parametrze i.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda analizuje ciąg z trzema elementami, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<> Przesunięcia|"-7:30"|  
  
 Chociaż każdy z tych elementów jest opcjonalny, \<przesunięcia > nie może być wyświetlany przez siebie. Musi ona być podana razem z \<datą > lub \<> czasu. W \<przypadku braku daty > wartość domyślna to bieżący dzień. Jeśli \<Data > jest obecna, ale jej składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok `provider` w bieżącym kalendarzu parametru na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. W \<przypadku braku czasu > wartość domyślna to 12:00:00 am. Jeśli \<brak > przesunięcia, jego wartość domyślna to przesunięcie lokalnej strefy czasowej lub <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.TimeSpan.Zero?displayProperty=nameWithType> wartość lub <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> jest określona w `styles` parametrze. Jeśli \<przesunięta > jest obecna, może reprezentować wartość ujemną lub dodatnią od skoordynowanego czasu uniwersalnego (UTC). W obu przypadkach \<> przesunięcia musi zawierać symbol znaku.  
  
 Format tych trzech elementów jest definiowany przez `formatProvider` parametr, który może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę, której formatowanie jest używane `input` w parametrze. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje formatowanie używane w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Każdy element może być również otoczony wiodącym lub końcowym białym znakiem, a \<> daty i \<godziny > elementy mogą zawierać wewnętrzny biały znak (na przykład 6:   00:00). Tylko składnik \<przesunięcia > nie może zawierać wewnętrznego odstępu.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatni lub ujemny użyty w \<przesunięciu > musi mieć wartość + lub-. Nie jest on zdefiniowany <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> przez lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez `formatProvider` parametr.  
  
 W poniższej tabeli przedstawiono elementy członkowskie <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> wyliczenia, które są obsługiwane.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje ciąg przedstawiony przez `input` i, w razie potrzeby, konwertuje go na czas UTC. Jest on równoznaczny z analizą ciągu, a następnie <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> wywołaniem metody zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Choć ważna, wartość ta jest ignorowana. W \<> daty i \<czasie > elementy są dozwolone wewnętrzne białe znaki.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Choć ważna, wartość ta jest ignorowana. Na początku każdego składnika w analizowanym ciągu jest dozwolony wiodący biały znak.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Choć ważna, wartość ta jest ignorowana. Na początku każdego składnika w analizowanym ciągu jest dozwolone końcowe białe miejsce.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Jest to zachowanie domyślne. Nie można go zastąpić przez dostarczenie bardziej restrykcyjnej <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takiej jak <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wskazuje, że jeśli `input` parametr \<nie ma przesunięcia > elementu, należy podać przesunięcie lokalnej strefy czasowej. Jest to domyślne zachowanie <xref:System.DateTimeOffset.Parse%2A> metody.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wskazuje, że jeśli `input` parametr \<nie ma elementu przesunięcia >, należy podać przesunięcie czasu UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Chociaż prawidłowy, ta wartość jest ignorowana i nie ma żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Ponieważ struktura nie `Kind` zawiera właściwości, ta wartość nie ma żadnego skutku. <xref:System.DateTimeOffset>|  
  
 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Tylko wartość nie jest obsługiwana. Jest <xref:System.ArgumentException> zgłaszany, jeśli ta wartość jest uwzględniona `styles` w parametrze.  
  
   
  
## Examples  
 Poniższy przykład ilustruje efekt <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>przekazania wartości, `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, i <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> do parametru <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
 <paramref name="styles" />nie jest prawidłową <see cref="T:System.Globalization.DateTimeStyles" /> wartością.  
  
—lub— 
 <paramref name="styles" />zawiera nieobsługiwaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <paramref name="styles" />zawiera <see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
 <paramref name="input" />zawiera ciąg reprezentujący wartość przesunięcia bez daty lub godziny.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu definiujący oczekiwany format <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje określony format ciągu daty i godziny na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonego formatu i informacji o formacie specyficznym dla kultury. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest <paramref name="input" /> zawarta <paramref name="format" /> w <paramref name="formatProvider" />parametrze i.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która musi być w formacie zdefiniowanym `format` przez parametr. <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> \<Wymaga również, aby daty >, \<czasu > i \<przesunięcia > reprezentujące datę i godzinę są wyświetlane w kolejności określonej przez `format`. Jeśli ciąg nie jest zgodny z tym `format` parametrem <xref:System.FormatException>, metoda zgłasza. `input`  Z kolei <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Metoda analizuje reprezentację ciągu daty w jednym z formatów rozpoznawanych przez <xref:System.Globalization.DateTimeFormatInfo> obiekt dostawcy formatu. <xref:System.DateTimeOffset.Parse%2A>umożliwia \<również > daty, \<czasu > i \<przesunięcia > elementów ciągu reprezentujących datę i godzinę do wyświetlenia w dowolnej kolejności.  
  
 Parametr jest ciągiem zawierającym pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują wymagany format `input` parametru. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` `zz` `zzz` zawiera specyfikatory formatu `input`,, lub niestandardowe, aby wskazać, że przesunięcie musi być obecne w, przesunięcie musi zawierać znak minus lub znak dodatni. `z` Jeśli brakuje znaku, metoda wygeneruje <xref:System.FormatException>.  
  
 Jeśli `format` jest wymagane `input` , które zawierają datę, ale nie godzinę, obiekt <xref:System.DateTimeOffset> wyniku jest przypisywany o godzinie północy (0:00:00). Jeśli `format` jest to `input` wymagane, które zawierają godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku przypisuje bieżącą datę w systemie lokalnym. Jeśli `format` program nie `input` wymaga przesunięcia, <xref:System.DateTimeOffset> przypisywany jest do niego obiekt przesunięcia strefy czasowej systemu lokalnego.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są definiowane `formatProvider` przez parametr, tak jak w `input` przypadku `format` precyzyjnego formatu specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody ze specyfikatorami formatu standardowego i niestandardowego oraz kulturą niezmienną do analizowania kilku ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

Poniższy przykład analizuje tablicę ciągów, które są zgodne z [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Ponieważ dane wyjściowe z przykładu pokazują, ciągi zawierające spacje początkowe lub końcowe nie mogą zostać przeanalizowane pomyślnie, tak jak ciągi z elementami daty i godziny poza zakresem.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="format" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
 <paramref name="format" />jest pustym ciągiem.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="input" /> zgadzają się.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTimeOffset.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków, który reprezentuje datę i godzinę.</param>
        <param name="format">Zakres znaków zawierający specyfikator formatu, który definiuje oczekiwany format <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />.</param>
        <summary>Konwertuje zakres znaków, który reprezentuje datę i godzinę do <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format reprezentujący datę i godzinę musi być dokładnie zgodny z określonym formatem.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest zawarta <paramref name="input" /> w parametrze, zgodnie z <paramref name="format" />parametrami, <paramref name="formatProvider" />i <paramref name="styles" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Ta metoda analizuje zakres znaków, który reprezentuje datę, która musi być w formacie zdefiniowanym przez `format` parametr. \<Wymaga również, aby daty >, \<czasu > i \<przesunięcia > reprezentujące datę i godzinę są wyświetlane w kolejności określonej przez `format`. Jeśli `input` nie pasuje do `format` wzorca <xref:System.FormatException>, metoda wygeneruje.  Z kolei <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> Metoda analizuje reprezentację ciągu daty w jednym z formatów rozpoznawanych przez <xref:System.Globalization.DateTimeFormatInfo> obiekt dostawcy formatu. <xref:System.DateTimeOffset.Parse%2A>umożliwia \<również > daty, \<czasu > i \<przesunięcia > elementów ciągu reprezentujących datę i godzinę do wyświetlenia w dowolnej kolejności.  
  
 Parametr jest zakresem znaków, który zawiera specyfikator formatu standardowego o pojedynczej literze lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują wymagany format `input` parametru. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` `zz` `zzz` zawiera specyfikatory formatu `input`,, lub niestandardowe, aby wskazać, że przesunięcie musi być obecne w, przesunięcie musi zawierać znak minus lub znak dodatni. `z` Jeśli brakuje znaku, metoda wygeneruje <xref:System.FormatException>.  
  
 Jeśli `format` jest wymagane `input` , które zawierają datę, ale nie godzinę, obiekt <xref:System.DateTimeOffset> wyniku jest przypisywany o godzinie północy (0:00:00). Jeśli `format` jest to `input` wymagane, które zawierają godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku przypisuje bieżącą datę w systemie lokalnym. Jeśli `format` program nie `input` wymaga przesunięcia, <xref:System.DateTimeOffset> przypisywany jest do niego obiekt przesunięcia strefy czasowej systemu lokalnego.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są definiowane `formatProvider` przez parametr, tak jak w `input` przypadku `format` standardowego specyfikatora formatu. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
—lub—  
<paramref name="styles" /> Parametr zawiera nieobsługiwaną wartość.  
—lub—  
<paramref name="styles" /> Parametr zawiera<see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />jest pustym zakresem znaków.  
 -lub- <paramref name="input" /> nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
 -lub- <paramref name="format" /> jest pustym zakresem znaków.  
 —lub—  
 Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="input" /> zgadzają się.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków zawierający datę i godzinę do przekonwertowania.</param>
        <param name="formats">Tablica specyfikatorów formatu, które definiują oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />.</param>
        <summary>Konwertuje zakres znaków, który zawiera ciąg reprezentujący datę i godzinę do <see cref="T:System.DateTimeOffset" /> odpowiednika przy użyciu określonych formatów, informacji o formacie specyficznym dla kultury i stylu. Format reprezentujący datę i godzinę musi dokładnie odpowiadać jednemu z określonych formatów.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest zawarta <paramref name="input" /> w parametrze, zgodnie z <paramref name="formats" />parametrami, <paramref name="formatProvider" />i <paramref name="styles" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Ta metoda analizuje zakres znaków reprezentujący datę pasującą do każdego z wzorców przypisanych do `formats` parametru. Jeśli `input` nie pasuje do żadnego z tych wzorców z żadną z wariantów zdefiniowanych `styles` przez parametr <xref:System.FormatException>, metoda zgłasza. Nie można przeprowadzić `input` porównania z wieloma wzorcami formatowania, to Przeciążenie zachowuje <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> się identycznie z metodą.  
  
 Parametr jest tablicą ciągów, której elementy zawierają pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują możliwy wzorzec `input` parametru. `formats` Gdy metoda jest wywoływana, `input` musi być zgodna z jednym z tych wzorców. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowany element w `formats` `z`zawiera specyfikatory `zz`formatu, `zzz` lub niestandardowy, aby wskazać, że przesunięcie musi być obecne w `input`, przesunięcie musi zawierać znak minus lub znak dodatni. Jeśli brakuje znaku, metoda wygeneruje <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  `formats` Użycie parametru tego przeciążenia w celu określenia wielu formatów może pomóc w zmniejszeniu frustrację wielu użytkowników podczas wprowadzania dat i godzin. W szczególności możliwość zdefiniowania wielu wzorców danych wejściowych umożliwia aplikacji obsługę prezentacji daty i godziny, które mogą zawierać lub nie mieć wiodących zer w miesiącach, dniach, godzinach, minutach i sekundach.
  
 Jeśli dopasowany element w `formats` wymaga, `input` który zawiera datę, ale nie godzinę, wówczas obiektem otrzymanym <xref:System.DateTimeOffset> jest przypisywany czas północy (0:00:00). Jeśli dopasowany element w `formats` wymaga, `input` który zawiera godzinę, ale nie datę, obiekt wyniku <xref:System.DateTimeOffset> jest przypisywany do bieżącej daty w systemie lokalnym. Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. To samo jest prawdziwe dla dokładnego formatu `input`, jeśli pasujący `formats` element jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie `format`jest określony przez. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników (z wyjątkiem przesunięcia) i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które `formats`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które `formats`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie `formats`są określone przez. Podczas analizowania ciągu nie wszystkie dodatkowe znaki białych znaków, które nie są `formats` określone w dopasowanym elemencie w programie, są ignorowane.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak określono w konkretnym `formats` elemencie elementu, aby nastąpiło dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, <xref:System.DateTimeOffset> ponieważ struktura nie `Kind` zawiera właściwości.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
-lub- <paramref name="styles" /> zawiera nieobsługiwaną wartość.  
—lub—  
<paramref name="styles" /> Parametr zawiera<see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />jest pustym zakresem znaków.  
-lub- <paramref name="input" /> nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
—lub—  
Żaden element <paramref name="formats" /> nie zawiera prawidłowego specyfikatora formatu.  
—lub—  
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="input" /> zgadzają się.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu definiujący oczekiwany format <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest zawarta <paramref name="input" /> w parametrze, zgodnie z <paramref name="format" />parametrami, <paramref name="formatProvider" />i <paramref name="styles" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która musi być w formacie zdefiniowanym `format` przez parametr. <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> \<Wymaga również, aby daty >, \<czasu > i \<przesunięcia > reprezentujące datę i godzinę są wyświetlane w kolejności określonej przez `format`. Jeśli ciąg nie jest zgodny ze wzorcem `format` parametru, przy `styles` każdej zmienności zdefiniowanej przez parametr Metoda generuje <xref:System.FormatException>. `input`  Z kolei <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metoda analizuje reprezentację ciągu daty w jednym z formatów rozpoznawanych przez <xref:System.Globalization.DateTimeFormatInfo> obiekt dostawcy formatu. <xref:System.DateTimeOffset.Parse%2A>umożliwia \<również > daty, \<czasu > i \<przesunięcia > elementów ciągu reprezentujących datę i godzinę do wyświetlenia w dowolnej kolejności.  
  
 Parametr jest ciągiem zawierającym pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują wymagany wzorzec `input` parametru. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` `zz` `zzz` zawiera specyfikatory formatu `input`,, lub niestandardowe, aby wskazać, że przesunięcie musi być obecne w, przesunięcie musi zawierać znak minus lub znak dodatni. `z` Jeśli brakuje znaku, metoda wygeneruje <xref:System.FormatException>.  
  
 Jeśli `format` jest wymagane `input` , które zawierają datę, ale nie godzinę, obiekt <xref:System.DateTimeOffset> wyniku jest przypisywany o godzinie północy (0:00:00). Jeśli `format` jest to `input` wymagane, które zawierają godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku przypisuje bieżącą datę w systemie lokalnym. Jeśli `format` nie wymaga, aby `input` zawierało przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. To samo jest prawdziwe w przypadku precyzyjnego formatu `input`, jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie `format`jest określony przez. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w poszczególnych składnikach i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie `format`są określone przez. Podczas analizowania ciągu nie określono `format` żadnych dodatkowych znaków białych.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak `format`określono w. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, <xref:System.DateTimeOffset> ponieważ struktura nie `Kind` zawiera właściwości.|  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody ze specyfikatorami formatu standardowego i niestandardowego, kulturą niezmienną i różnymi <xref:System.Globalization.DateTimeStyles> wartościami do analizowania kilku ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

W poniższym przykładzie zastosowano różne <xref:System.Globalization.DateTimeStyles> wartości w celu przeanalizowania tablicy ciągów, które są zgodne z normą [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Dane wyjściowe z przykładu pokazują, że nie można przeanalizować ciągów, które są w odpowiednim formacie, jeśli:

- zawierają one odstępy, a odpowiednia <xref:System.Globalization.DateTimeStyles> flaga (taka jak <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> nie została podana w wywołaniu metody.

- zawierają one elementy daty i godziny, które znajdują się poza zakresem.

W przypadku ciągów, które nie określają przesunięcia czasu UTC, przyjmuje się, że przesunięcia lokalnej strefy czasowej (w tym przypadku-07:00), <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> chyba że flaga zostanie podana w wywołaniu metody. W takim przypadku zakłada się, że jest to uniwersalny czas koordynowany.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera nieobsługiwaną wartość.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera<see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="format" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
 <paramref name="format" />jest pustym ciągiem.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="input" /> zgadzają się.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTimeOffset.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica specyfikatorów formatu, które definiują oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonych formatów, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do jednego ze wskazanych formatów.</summary>
        <returns>Obiekt, który jest równoznaczny z datą i godziną, która jest zawarta <paramref name="input" /> w parametrze, zgodnie z <paramref name="formats" />parametrami, <paramref name="formatProvider" />i <paramref name="styles" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która pasuje `formats` do dowolnego z wzorców przypisanych do parametru. <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Jeśli ciąg nie pasuje do żadnego z tych wzorców z żadną z wariantów zdefiniowanych `styles` przez parametr <xref:System.FormatException>, metoda zgłasza. `input` Nie można przeprowadzić `input` porównania z wieloma wzorcami formatowania, to Przeciążenie zachowuje <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> się identycznie z metodą.  
  
 Parametr jest tablicą ciągów, której elementy zawierają pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują możliwy wzorzec `input` parametru. `formats` Gdy metoda jest wywoływana, `input` musi być zgodna z jednym z tych wzorców. Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowany element w `formats` `z`zawiera specyfikatory `zz`formatu, `zzz` lub niestandardowy, aby wskazać, że przesunięcie musi być obecne w `input`, przesunięcie musi zawierać znak minus lub znak dodatni. Jeśli brakuje znaku, metoda wygeneruje <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  `formats` Użycie parametru tego przeciążenia w celu określenia wielu formatów może pomóc w zmniejszeniu frustrację wielu użytkowników podczas wprowadzania dat i godzin. W szczególności możliwość zdefiniowania wielu wzorców danych wejściowych umożliwia aplikacji obsługę prezentacji daty i godziny, które mogą zawierać lub nie mieć wiodących zer w miesiącach, dniach, godzinach, minutach i sekundach. Przykład zawiera ilustrację.  
  
 Jeśli dopasowany element w `formats` wymaga, `input` który zawiera datę, ale nie godzinę, wówczas obiektem otrzymanym <xref:System.DateTimeOffset> jest przypisywany czas północy (0:00:00). Jeśli dopasowany element w `formats` wymaga, `input` który zawiera godzinę, ale nie datę, obiekt wyniku <xref:System.DateTimeOffset> jest przypisywany do bieżącej daty w systemie lokalnym. Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. To samo jest prawdziwe dla dokładnego formatu `input`, jeśli pasujący `formats` element jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie `format`jest określony przez. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników (z wyjątkiem przesunięcia) i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które `formats`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które `formats`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie `formats`są określone przez. Podczas analizowania ciągu nie wszystkie dodatkowe znaki białych znaków, które nie są `formats` określone w dopasowanym elemencie w programie, są ignorowane.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak określono w konkretnym `formats` elemencie elementu, aby nastąpiło dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, <xref:System.DateTimeOffset> ponieważ struktura nie `Kind` zawiera właściwości.|  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano wiele formatów danych wejściowych dla ciągu reprezentującego datę i godzinę oraz wartość przesunięcia, a następnie przekazuje ciąg wprowadzony przez użytkownika do <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Przesunięcie jest większe niż 14 godzin lub mniejsze niż-14 godzin.  
  
—lub— 
 <paramref name="styles" />zawiera nieobsługiwaną wartość.  
  
—lub— 
<paramref name="styles" /> Parametr zawiera<see cref="T:System.Globalization.DateTimeStyles" /> wartości, które nie mogą być używane razem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" />jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="input" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.  
  
—lub— 
Żaden element <paramref name="formats" /> nie zawiera prawidłowego specyfikatora formatu.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="input" /> zgadzają się.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTimeOffset.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera drugi składnik czasu zegara reprezentowanego przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Drugi składnik <see cref="T:System.DateTimeOffset" /> obiektu, wyrażony jako wartość całkowita z zakresu od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Second%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Można również utworzyć ciąg reprezentujący <xref:System.DateTimeOffset> drugi składnik obiektu przez <xref:System.DateTimeOffset.ToString%2A> wywołanie metody z specyfikatorami formatu niestandardowego "s" lub "SS".  
  
   
  
## Examples  
 Poniższy przykład wyświetla drugi składnik <xref:System.DateTimeOffset> obiektu na trzy różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Second%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "s".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "SS".  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odejmuje określony czas lub czas trwania z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który reprezentuje wartość do odjęcia.</param>
        <summary>Odejmuje wartość reprezentującą określoną datę i godzinę z bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTimeOffset" /></summary>
        <returns>Obiekt, który określa interwał między dwoma <see cref="T:System.DateTimeOffset" /> obiektami.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda konwertuje oba <xref:System.DateTimeOffset> obiekty na uniwersalny czas koordynowany (UTC) przed obliczeniem przedziału czasu, który je oddziela. Spowoduje to usunięcie wszystkich efektów, które mogą mieć różne przesunięcia z czasu UTC.  
  
> [!NOTE]
>  W przypadku języków, które obsługują operatory niestandardowe, można również wykonywać odejmowanie dat i godzin przy użyciu operatora odejmowania. Aby uzyskać szczegółowe informacje, <xref:System.DateTimeOffset.op_Subtraction%2A> Zobacz metodę.  
  
 Ponieważ ani bieżący <xref:System.DateTimeOffset> obiekt `value` ani parametr nie reprezentuje daty i godziny w <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> określonej strefie czasowej, metoda nie uwzględnia określonych reguł korekty strefy czasowej podczas odejmowania dat i godzin.  
  
   
  
## Examples  
 Poniższy przykład ilustruje odejmowanie, które używa <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Interwał czasu, który należy odjąć.</param>
        <summary>Odejmuje określony przedział czasu od bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <returns>Obiekt, który jest równy dacie i godzinie reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt, minus przedział czasu reprezentowany przez. <paramref name="value" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć metody, <xref:System.DateTimeOffset.Subtract%2A> aby odjąć więcej niż jeden rodzaj przedziału czasu (dni, godziny, minuty, sekundy lub milisekundy) w ramach jednej operacji. Zachowanie jest takie samo jak <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> Metoda, która definiuje operator odejmowania. Struktura obsługuje także wyspecjalizowane metody dodawania (takie jak <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>i <xref:System.DateTimeOffset.AddMinutes%2A>), które umożliwiają odejmowanie, przypisując wartość ujemną do parametru metody. <xref:System.DateTimeOffset>  
  
> [!NOTE]
>  Ta metoda zwraca nowy <xref:System.DateTimeOffset> obiekt. Nie modyfikuje wartości bieżącego obiektu przez dodanie `timeSpan` do jego daty i godziny.  
  
 Metoda nie ma wpływu na wartość <xref:System.DateTimeOffset> <xref:System.DateTimeOffset.Offset%2A> właściwości obiektu. <xref:System.DateTimeOffset.Subtract%2A> Zwrócony <xref:System.DateTimeOffset> obiekt ma takie samo przesunięcie jak oryginalny obiekt.  
  
 Ponieważ bieżący <xref:System.DateTimeOffset> obiekt nie reprezentuje daty i godziny w określonej strefie czasowej <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> , metoda nie uwzględnia konkretnych reguł korekty strefy czasowej podczas wykonywania odejmowania.  
  
   
  
## Examples  
 Poniższy przykład ilustruje odejmowanie, które używa <xref:System.DateTimeOffset.Subtract%2A> metody.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość wyników <see cref="T:System.DateTimeOffset" /> jest mniejsza niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Wartość wyników <see cref="T:System.DateTimeOffset" /> jest większa niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym <see cref="T:System.DateTimeOffset" /> obiektem.</param>
        <summary>Porównuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu z innym obiektem tego samego typu.</summary>
        <returns>32-bitowa liczba całkowita ze znakiem, która wskazuje <see cref="T:System.DateTimeOffset" /> , czy bieżący obiekt jest mniejszy niż lub większy niż. <paramref name="obj" /> Wartości zwracane metody są interpretowane w następujący sposób: 
 <list type="table"><listheader><term> Wartość zwracana 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest mniejszy niż (wcześniej) <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest równy (ten sam punkt w czasie) <paramref name="obj" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description> Bieżący <see cref="T:System.DateTimeOffset" /> obiekt jest większy niż (nowszy niż) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Obiekt, który zainicjował wywołanie zwrotne. Funkcje tego parametru nie są obecnie implementowane.</param>
        <summary>Uruchamia się po zakończeniu deserializacji obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe dla tej serializacji (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Wypełnia obiekt danymi wymaganymi do serializacji bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.Runtime.Serialization.SerializationInfo" /></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="info" /></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaczników reprezentujących datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu w czasie zegara.</summary>
        <value>Liczba znaczników w <see cref="T:System.DateTimeOffset" /> czasie zegara obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Ticks%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Wartość <xref:System.DateTimeOffset.Ticks%2A> właściwości reprezentuje liczbę interwałów 100-nanosekund, które upłynęły od 12:00:00 północy 1 stycznia 0001 ( <xref:System.DateTimeOffset.MinValue>wartość). Nie obejmuje taktów, które byłyby dodawane w sekundach przestępnym. W nanosekundie jest jedna miliardowegoa sekunda; w drugim występuje 10 000 000 taktów. Wartość <xref:System.DateTimeOffset.Ticks%2A> z zakresu właściwości z `DateTimeOffset.MinValue.Ticks` do `DateTimeOffset.MaxValue.Ticks`.  
  
 Można przypisać liczbę taktów do <xref:System.DateTimeOffset> obiektu przy <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> użyciu przeciążenia konstruktora.  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.DateTimeOffset> obiekt, przybliżąc liczbę taktów w dniu 1 lipca 2008 1:23:07. Następnie wyświetla datę i liczbę taktów reprezentowanej przez tę datę w konsoli programu.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę dla bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</summary>
        <value>Przedział czasu bieżącej daty, który upłynął od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.TimeOfDay%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Właściwość zwraca składnik <xref:System.DateTimeOffset> czasu obiektu <xref:System.TimeSpan> w postaci obiektu. <xref:System.DateTimeOffset.TimeOfDay%2A> Jest ona równoważna <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> z właściwością.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTimeOffset.TimeOfDay%2A> właściwości, aby wyodrębnić czas i wyświetlić go w konsoli programu.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na czas pliku systemu Windows.</summary>
        <returns>Wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażona jako czas pliku systemu Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 Metoda konwertuje datę i godzinę <xref:System.DateTimeOffset> bieżącego obiektu na UTC przed wykonaniem konwersji. <xref:System.DateTimeOffset.ToFileTime%2A> Innymi słowy, wywołanie <xref:System.DateTimeOffset.ToFileTime%2A> metody jest równoważne następującemu wywołaniu metody:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uzyskany czas pliku będzie reprezentował datę i godzinę przed północy 1 stycznia 1601 0001 Uniwersalny czas koordynowany (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje bieżący <see cref="T:System.DateTimeOffset" /> obiekt <see cref="T:System.DateTimeOffset" /> na obiekt, który reprezentuje czas lokalny.</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu konwertowane na czas lokalny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W trakcie konwersji na czas lokalny Metoda najpierw konwertuje datę i godzinę bieżącego <xref:System.DateTimeOffset> obiektu na uniwersalny czas koordynowany (UTC) przez odjęcie przesunięcia od czasu. Następnie konwertuje datę i godzinę UTC na czas lokalny przez dodanie przesunięcia lokalnej strefy czasowej. W tym celu bierze pod uwagę wszystkie reguły korekty dla lokalnej strefy czasowej.  
  
 Zarówno wartość bieżącego <xref:System.DateTimeOffset> obiektu, jak i wartość <xref:System.DateTimeOffset> obiektu zwróconego przez wywołanie metody reprezentują ten sam punkt w czasie. Oznacza to, że jeśli oba są przesyłane do <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metody, Metoda `true`zwróci wartość.  
  
 <xref:System.DateTimeOffset> Jeśli konwersja powoduje <xref:System.DateTimeOffset.ToLocalTime%2A> , że czas poza zakresem typu, metoda zwraca <xref:System.DateTimeOffset> obiekt, który <xref:System.DateTimeOffset.MaxValue> ma ustawioną datę i godzinę, lub <xref:System.DateTimeOffset.MinValue> i przesunięcie ustawione na przesunięcie lokalnej strefy czasowej.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.DateTimeOffset.ToLocalTime%2A> metody do <xref:System.DateTimeOffset> przekonwertowania wartości na czas lokalny w strefie czasowej w warstwie Standardowa. Ilustruje również obsługę metody dla reguł korekty lokalnej strefy czasowej.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">Przesunięcie, do którego ma <see cref="T:System.DateTimeOffset" /> zostać przekonwertowana wartość.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na datę i godzinę określoną przez wartość przesunięcia.</summary>
        <returns>Obiekt, który <see cref="T:System.DateTimeOffset" /> jest równy pierwotnemu obiektowi (to oznacza, że ich <see cref="M:System.DateTimeOffset.ToUniversalTime" /> metody zwracają identyczne punkty w czasie), <see cref="P:System.DateTimeOffset.Offset" /> ale których właściwość jest <paramref name="offset" />ustawiona na.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest alternatywą dla <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> wywołania metody. <xref:System.DateTimeOffset.ToOffset%2A> Może to być przydatne do wykonywania prostych konwersji z jednej strefy czasowej na inną, gdy są znane strefy czasowe przesunięcia od uniwersalnego czasu koordynowanego (UTC). Jednak ponieważ ani oryginalny <xref:System.DateTimeOffset> obiekt ani nowy <xref:System.DateTimeOffset> obiekt zwrócony przez wywołanie metody nie są jednoznacznie powiązane z konkretną strefą czasową, metoda nie stosuje żadnych reguł korekty strefy czasowej w konwersji.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.DateTimeOffset.ToOffset%2A> metody do <xref:System.DateTimeOffset> konwersji obiektu do <xref:System.DateTimeOffset> obiektu z innym przesunięciem.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Obiekt wyników <see cref="T:System.DateTimeOffset" /> <see cref="P:System.DateTimeOffset.DateTime" /> ma wartość wcześniejszą niż <see cref="F:System.DateTimeOffset.MinValue" />.  
  
—lub— 
Obiekt otrzymany <see cref="T:System.DateTimeOffset" /> <see cref="P:System.DateTimeOffset.DateTime" /> ma wartość późniejszą niż <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest krótszy niż-14 godzin.  
  
—lub— 
 <paramref name="offset" />jest większy niż 14 godzin.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego równoważną reprezentację w postaci ciągu.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego równoważną reprezentację w postaci ciągu.</summary>
        <returns>Ciąg reprezentujący <see cref="T:System.DateTimeOffset" /> obiekt, który zawiera przesunięcie dołączone na końcu ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez tę metodę jest taka sama jak <xref:System.DateTime.ToString?displayProperty=nameWithType> Metoda, z tą różnicą, że zawiera spację, a następnie przesunięcie dołączone na końcu ciągu. Innymi słowy, formatuje dane wyjściowe przy użyciu wzorca daty krótkiej, wzorca godziny długiej i `zzz` niestandardowego ciągu formatu, z każdym elementem oddzielonym od poprzedniego elementu przez spację. Na przykład jeśli <xref:System.DateTime.ToString?displayProperty=nameWithType> zwraca wartość 1/12/2008 6:15:50 pm, <xref:System.DateTimeOffset.ToString> zwraca wartość 1/12/2008 6:15:50 pm-08:00 przez czas, który jest osiem godzin za uniwersalny czas koordynowany (UTC).  
  
 Metoda ta wykorzystuje informacje o formatowaniu pochodzące z bieżącej kultury. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Inne przeciążenia <xref:System.DateTimeOffset.ToString%2A> metody pozwalają określić kulturę, której formatowanie ma być używane, oraz definiować wzorzec <xref:System.DateTimeOffset> danych wyjściowych wartości.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywołania <xref:System.DateTimeOffset.ToString> metody i wyświetla dane wyjściowe w systemie, którego bieżącą kulturą jest en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString" /> Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.HijriCalendar" /> klasy, gdy bieżąca kultura jest arabski (Syria).  
  
[! code-CSharp[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! code-VB[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu określonych informacji o formatowaniu specyficznych dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, określony przez. <paramref name="formatProvider" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwracana przez tę metodę jest taka sama jak Metoda równoważnego przeciążenia <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> metody, z tą różnicą, że zawiera spację, a następnie przesunięcie dołączone na końcu ciągu. Innymi słowy, formatuje dane wyjściowe przy użyciu wzorca daty krótkiej, wzorca godziny długiej i `zzz` niestandardowego ciągu formatu, z każdym elementem oddzielonym od poprzedniego elementu przez spację.  
  
 Format tych trzech elementów jest definiowany przez `formatProvider` parametr. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   <xref:System.Globalization.CultureInfo> Obiekt, który reprezentuje kulturę, której konwencje formatowania są stosowane do zwracanego ciągu. <xref:System.Globalization.DateTimeFormatInfo> Obiekt zwrócony<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> przez właściwość definiuje formatowanie zwracanego ciągu.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatProvider` jest `null`, <xref:System.Globalization.CultureInfo.CurrentCulture%2A>jest używany obiektskojarzonyzbieżącąkulturą(zobacz).<xref:System.Globalization.DateTimeFormatInfo>  
  
   
  
## Examples  
 Poniższy przykład wyświetla <xref:System.DateTimeOffset> obiekt za pomocą <xref:System.Globalization.CultureInfo> obiektów, które reprezentują niezmienną kulturę, a także cztery inne kultury.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina wykraczają poza zakres dat obsługiwany przez kalendarz używany przez <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez kulturę reprezentowaną <paramref name="formatProvider" /> przez parametr. <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwość. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.JapaneseCalendar" /> klasy.  
  
[! code-CSharp[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! code-VB[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu podanego formatu.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, określony przez. <paramref name="format" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr powinien zawierać pojedynczy znak specyfikatora formatu (zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatowania (zobacz [ciągi niestandardowego formatu daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md)) definiujący format zwracanych `format` parametry. Jeśli `format` ma wartość null lub jest pustym ciągiem ("") <xref:System.DateTimeOffset> , wartość jest wyjściowa przy użyciu formatu domyślnego.  
  
 W poniższej tabeli przedstawiono dokładne operacje pewnych specyfikatorów formatu, które są używane z <xref:System.DateTimeOffset>programem, które różnią się od ich zachowania <xref:System.DateTime>w przypadku użycia z.  
  
|Istniejący specyfikator formatu|Nowe zachowanie|  
|-------------------------------|------------------|  
|„K”|Zaprojektowana do rundy datę i godzinę. W <xref:System.DateTimeOffset>programie mapowanie na "ZZZ" (przesunięcie jest zawsze wyświetlane z godzinami i minutach). Należy zauważyć, że "K" jest specyfikatorem formatu niestandardowego; nie może pojawić się jako pojedynczy znak `format`w.|  
|„U”|Nieobsługiwane.|  
|®|Konwertuje obiekt na uniwersalny czas koordynowany (UTC) i wyprowadza go przy użyciu ciągu `ddd, dd MMM yyyy HH:mm:ss GMT`formatu niestandardowego. <xref:System.DateTimeOffset>|  
|„u”|Konwertuje obiekt na czas UTC i wyprowadza go przy użyciu formatu `yyyy-MM-dd HH:mm:ssZ`. <xref:System.DateTimeOffset>|  
  
 Pozostałe specyfikatory standardowego formatu daty i godziny zachowują się tak samo <xref:System.DateTimeOffset.ToString%28System.String%29> , jak <xref:System.DateTime.ToString%2A> w metodzie.  
  
 Metoda ta wykorzystuje informacje o formatowaniu pochodzące z bieżącej kultury. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 Poniższy przykład wyświetla <xref:System.DateTimeOffset> obiekt konsoli programu przy użyciu każdego standardowego specyfikatora formatu daty i godziny. Dane wyjściowe są formatowane przy użyciu kultury en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> jest taka i nie jest jednym ze znaków specyfikatora formatu standardowego zdefiniowanego dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" />nie zawiera prawidłowego niestandardowego formatu formatowania.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTimeOffset.ToString(System.String)" /> Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.HebrewCalendar" /> klasy, gdy bieżąca kultura jest hebrajski (Izrael).  
  
[! code-CSharp[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! code-VB[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu określonego formatu i informacji o formacie specyficznym dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTimeOffset" /> obiektu, określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr powinien zawierać pojedynczy znak specyfikatora formatu (zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatowania (zobacz [ciągi niestandardowego formatu daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). `format` Jeśli `format` parametr ma wartość null lub jest pustym ciągiem ("" <xref:System.DateTimeOffset> ), obiekt jest wyprowadzany przy użyciu formatu domyślnego.  
  
 W poniższej tabeli przedstawiono dokładne operacje pewnych specyfikatorów formatu, które są używane z <xref:System.DateTimeOffset>programem, które różnią się od ich zachowania <xref:System.DateTime>w przypadku użycia z.  
  
|Istniejący specyfikator formatu|Nowe zachowanie|  
|-------------------------------|------------------|  
|„K”|Zaprojektowana do rundy datę i godzinę. W <xref:System.DateTimeOffset>programie mapowanie na "ZZZ" (przesunięcie jest zawsze wyświetlane z godzinami i minutach). Należy zauważyć, że "K" jest specyfikatorem formatu niestandardowego; nie może pojawić się jako pojedynczy znak `format`w.|  
|„U”|Nieobsługiwane.|  
|®|Konwertuje obiekt na uniwersalny czas koordynowany (UTC) i wyprowadza go przy użyciu ciągu `ddd, dd MMM yyyy HH:mm:ss GMT`formatu niestandardowego. <xref:System.DateTimeOffset>|  
|„u”|Konwertuje wartość na czas UTC i wyprowadza ją przy użyciu formatu `yyyy-MM-dd HH:mm:ssZ`. <xref:System.DateTimeOffset>|  
  
 Pozostałe specyfikatory standardowego formatu daty i godziny zachowują się tak samo <xref:System.DateTimeOffset.ToString%28System.String%29> , jak <xref:System.DateTime.ToString%2A> w metodzie.  
  
 Wzorzec, który odnosi się do specyfikatorów formatu standardowego, a także symboli i nazw składników daty i godziny, jest definiowany przez `formatProvider` parametr. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę, której formatowanie jest używane `input`w. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje formatowanie używane w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatProvider` jest `null`, <xref:System.Globalization.CultureInfo.CurrentCulture%2A>jest używany obiektskojarzonyzbieżącąkulturą(zobacz).<xref:System.Globalization.DateTimeFormatInfo>  
  
   
  
## Examples  
 W poniższym przykładzie użyto metody <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> , aby <xref:System.DateTimeOffset> wyświetlić obiekt przy użyciu niestandardowego ciągu formatu dla kilku różnych kultur.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> jest taka i nie jest jednym ze znaków specyfikatora formatu standardowego zdefiniowanego dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" />nie zawiera prawidłowego niestandardowego formatu formatowania.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina wykraczają poza zakres dat obsługiwany przez kalendarz używany przez <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym <paramref name="formatProvider" /> przez parametr. <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwość. Jeśli wartość bieżącego <see cref="T:System.DateTimeOffset" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.UmAlQuraCalendar" /> klasy.  
  
[! code-CSharp[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! code-VB[System. DateTimeOffset. ToString. wyjątku ArgumentOutOfRangeException # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje bieżący <see cref="T:System.DateTimeOffset" /> obiekt <see cref="T:System.DateTimeOffset" /> na wartość reprezentującą uniwersalny czas koordynowany (UTC).</summary>
        <returns>Obiekt, który reprezentuje datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu przekonwertowany na uniwersalny czas koordynowany (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca obiekt <xref:System.DateTimeOffset> , którego <xref:System.DateTimeOffset.Offset%2A> właściwość ma wartość zero.  
  
 Zarówno wartość bieżącego <xref:System.DateTimeOffset> obiektu, jak i wartość <xref:System.DateTimeOffset> obiektu zwróconego przez wywołanie metody reprezentują ten sam punkt w czasie. Oznacza to, że jeśli oba są przesyłane do <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metody, Metoda `true`zwróci wartość.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.ToUniversalTime%2A> metodę w celu przekonwertowania czasu lokalnego i kilku innych czasów na uniwersalny czas koordynowany (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę milisekund, które upłynęły od 1970-01-01T00:00:00.000 Z.</summary>
        <returns>Liczba milisekund, które upłynęły od 1970-01-01T00:00:00.000 Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas systemu UNIX przedstawia liczbę sekund, które upłynęły od wersji 1970-01-01T00:00:00Z (1 stycznia 1970, o godzinie 12:00 czasu UTC). Nie zajmie to więcej sekund. Ta metoda zwraca liczbę milisekund w czasie systemu UNIX.  
  
 Ta metoda najpierw konwertuje bieżące wystąpienie na UTC przed zwróceniem liczby milisekund w jego czasie w systemie UNIX. W przypadku wartości daty i godziny przed 1970-01-01T00:00:00Z Metoda ta zwraca wartość ujemną.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca liczbę sekund, które upłynęły od 1970-01-01T00:00:00Z.</summary>
        <returns>Liczba sekund, które upłynęły od wersji 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas systemu UNIX przedstawia liczbę sekund, które upłynęły od wersji 1970-01-01T00:00:00Z (1 stycznia 1970, o godzinie 12:00 czasu UTC). Nie zajmie to więcej sekund.  
  
 Ta metoda najpierw konwertuje bieżące wystąpienie na UTC przed zwróceniem czasu systemu UNIX. W przypadku wartości daty i godziny przed 1970-01-01T00:00:00Z Metoda ta zwraca wartość ujemną.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> metodę w celu zwrócenia czasu systemu UNIX wartości, które są równe, wkrótce wcześniej i wkrótce po 1970 r-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="result">Gdy metoda zwraca, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednik daty i <paramref name="input" />godziny, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja zakończyła się niepowodzeniem. Konwersja nie powiedzie się <paramref name="input" /> , jeśli <see langword="null" /> parametr ma wartość lub nie zawiera prawidłowej reprezentacji ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Próbuje skonwertować określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik, a następnie zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli parametr został pomyślnie skonwertowany; <see langword="false" />w przeciwnym razie. <paramref name="input" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> metody jest podobne do <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> metody, z tą różnicą, że nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. Analizuje ciąg z trzema elementami, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<> Przesunięcia|"-7:30"|  
  
 Chociaż każdy z tych elementów jest opcjonalny, \<przesunięcia > nie może być wyświetlany przez siebie. Musi ona być podana razem z \<datą > lub \<> czasu. W \<przypadku braku daty > wartość domyślna to bieżący dzień. Jeśli \<Data > jest obecna, ale jej składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok w bieżącym kalendarzu bieżącej kultury na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. W \<przypadku braku czasu > wartość domyślna to 12:00:00 am. Jeśli \<brak > przesunięcia, jego wartość domyślna to przesunięcie lokalnej strefy czasowej. Jeśli \<przesunięta > jest obecna, może reprezentować wartość ujemną lub dodatnią od skoordynowanego czasu uniwersalnego (UTC). W obu przypadkach \<> przesunięcia musi zawierać symbol znaku lub metoda zwraca `false`.  
  
 Ciąg jest analizowany przy użyciu informacji o formatowaniu <xref:System.Globalization.DateTimeFormatInfo> w obiekcie zainicjowanym dla bieżącej kultury. `input` Aby przeanalizować ciąg, który zawiera wskazane formatowanie niekoniecznie odpowiadające wartości bieżącej kultury, użyj <xref:System.DateTimeOffset.TryParseExact%2A> metody i podaj specyfikator formatu.  
  
   
  
## Examples  
 Poniższy przykład wywołuje metodę, <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> aby przeanalizować kilka ciągów z różnymi formatami daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />.</param>
        <param name="result">Gdy metoda zwraca, zawiera <see cref="T:System.DateTimeOffset" /> wartość równoważną dacie i <paramref name="input" />godzinie, jeśli konwersja zakończyła się powodzeniem, lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja zakończyła się niepowodzeniem. Konwersja nie powiedzie się <paramref name="input" /> , jeśli <see langword="null" /> parametr ma wartość lub nie zawiera prawidłowej reprezentacji ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Próbuje skonwertować określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik, a następnie zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli parametr został pomyślnie skonwertowany; <see langword="false" />w przeciwnym razie. <paramref name="input" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody jest podobne do <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z tą różnicą, że nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. Metoda analizuje ciąg z trzema elementami, które mogą być wyświetlane w dowolnej kolejności i są rozdzielane znakami odstępu. W poniższej tabeli przedstawiono te trzy elementy.  
  
|Element|Przykład|  
|-------------|-------------|  
|\<Data >|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<> Przesunięcia|"-7:30"|  
  
 Chociaż każdy z tych elementów jest opcjonalny, \<przesunięcia > nie może być wyświetlany przez siebie. Musi ona być podana razem z \<datą > lub \<> czasu. W \<przypadku braku daty > wartość domyślna to bieżący dzień. Jeśli \<Data > jest obecna, ale jej składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok `provider` w bieżącym kalendarzu parametru na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. W \<przypadku braku czasu > wartość domyślna to 12:00:00 am. Jeśli \<brak > przesunięcia, jego wartość domyślna to przesunięcie lokalnej strefy czasowej lub <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.TimeSpan.Zero> wartość w `styles`parametrze lub <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> . Jeśli \<przesunięta > jest obecna, może reprezentować wartość ujemną lub dodatnią od skoordynowanego czasu uniwersalnego (UTC). W obu przypadkach \<> przesunięcia musi zawierać symbol znaku lub metoda zwraca `false`.  
  
 Ciąg jest analizowany przy użyciu specyficznych dla kultury informacji o formatowaniu <xref:System.Globalization.DateTimeFormatInfo> w obiekcie dostarczonym przez `formatProvider` parametr. `input` `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę, której formatowanie jest używane `input`w. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje format, który jest używany w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Ponadto każdy element może być rozdzielony przez wiodące lub końcowe białe znaki, a \<> daty i \<godziny > składniki mogą zawierać wewnętrzny biały znak (na przykład 6:   00:00). Tylko składnik \<przesunięcia > nie może zawierać wewnętrznego odstępu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Znak dodatni lub ujemny użyty w \<przesunięciu > musi mieć wartość + lub-. Nie jest on zdefiniowany przez <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> lub <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> właściwości <xref:System.Globalization.NumberFormatInfo> obiektu zwróconego przez `formatprovider` <xref:System.Globalization.CultureInfo.NumberFormat%2A> Właściwość parametru.  
  
 Obsługiwane są następujące elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia:  
  
|DateTimeStyles element członkowski|Komentarze|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizuje ciąg przedstawiony przez `input` i, w razie potrzeby, konwertuje go na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime> metody zwracanego obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Choć ważna, wartość ta jest ignorowana. W \<> i \<czasie > składników dozwolony jest biały znak.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Choć ważna, wartość ta jest ignorowana. Na początku każdego składnika w analizowanym ciągu jest dozwolony wiodący biały znak.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Choć ważna, wartość ta jest ignorowana. Na początku każdego składnika w ciągu analizowanym jest dozwolone końcowe białe miejsce.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Jest to zachowanie domyślne. Nie można go zastąpić przez dostarczenie bardziej restrykcyjnej <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takiej jak <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wskazuje, że jeśli `input` parametr \<nie ma przesunięcia > elementu, należy podać przesunięcie lokalnej strefy czasowej. Jest to domyślne zachowanie <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wskazuje, że jeśli `input` parametr \<nie ma elementu przesunięcia >, należy podać przesunięcie czasu UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Chociaż prawidłowy, ta wartość jest ignorowana i nie ma żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Ponieważ struktura nie `Kind` zawiera właściwości, ta wartość nie ma żadnego skutku. <xref:System.DateTimeOffset>|  
  
 <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Tylko wartość nie jest obsługiwana. Jest <xref:System.ArgumentException> zgłaszany, jeśli ta wartość jest uwzględniona `styles` w parametrze.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metodę z <xref:System.Globalization.DateTimeStyles> różnymi wartościami, aby przeanalizować niektóre ciągi z różnymi formatami daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera niezdefiniowaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />nie jest obsługiwana.  
  
—lub— 
 <paramref name="styles" />zawiera wzajemnie wykluczające <see cref="T:System.Globalization.DateTimeStyles" /> się wartości.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Zakres znaków, który zawiera reprezentację daty i godziny do przekonwertowania.</param>
        <param name="format">Specyfikator formatu definiujący wymagany format <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="input" />. Typową wartością do określenia jest<see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Gdy metoda zwraca, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednik daty i <paramref name="input" />godziny, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTimeOffset.MinValue" /> konwersja nie powiodła się. Konwersja nie powiedzie się, jeśli</param>
        <summary>Konwertuje reprezentację daty i godziny w znakach do jego <see cref="System.DateTimeOffset" /> ekwiwalentu przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format reprezentujący datę i godzinę musi być dokładnie zgodny z określonym formatem.</summary>
        <returns><see langword="true" />Jeśli parametr został pomyślnie skonwertowany; <see langword="false" />w przeciwnym razie. <paramref name="input" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

To Przeciążenie przypomina <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> metodę, z tą różnicą, że ta metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. Analizuje reprezentację daty i godziny, która musi dokładnie pasować do wzorca określonego przez `format` parametr. Jeśli `input` nie pasuje do tego wzorca, a niektóre możliwe zmiany w białych znakach zdefiniowane `styles` przez parametr, operacja analizy kończy się niepowodzeniem i zwraca `false`metodę.  
  
Parametr jest zakresem znaków, który zawiera pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują wymagany `input`wzorzec. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` `zz` `zzz` zawiera specyfikatory formatu `input`,, lub niestandardowe, aby wskazać, że przesunięcie musi być obecne w, przesunięcie musi zawierać znak minus lub znak dodatni. `z` Jeśli brakuje znaku, operacja analizy kończy się niepowodzeniem, a metoda zwraca `false`.  
  
Jeśli `format` jest wymagane `input` , które zawierają datę, ale nie godzinę, obiekt <xref:System.DateTimeOffset> wyniku jest przypisywany o godzinie północy (0:00:00). Jeśli `format` jest to `input` wymagane, które zawierają godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku przypisuje bieżącą datę w systemie lokalnym. Jeśli `format` nie wymaga, aby `input` zawierało przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. Ta sama wartość dotyczy dokładnego wzorca `input` , jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formaty standardowe dozwolone w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizą reprezentacji daty i godziny, a następnie <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> wywołania metody zwracanego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie jest określony przez format. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników, z wyjątkiem przesunięcia, i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie `format`są określone przez. Podczas analizowania ciągu nie określono `format` żadnych dodatkowych znaków białych.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak `format`określono w. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, ponieważ <xref:System.DateTimeOffset> struktura nie `Kind` zawiera właściwości.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera niezdefiniowaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
-lub- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwana.  
-lub- <paramref name="styles" /> zawiera wzajemnie wykluczające <see cref="T:System.Globalization.DateTimeStyles" /> się wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Ta metoda analizuje ciąg reprezentujący datę, która pasuje do dowolnego z wzorców przypisanych do `formats` tablicy. Jeśli `input` nie pasuje do żadnego z tych wzorców z żadną różnicą zdefiniowaną `styles` przez parametr, operacja analizy kończy się niepowodzeniem, `false`a metoda zwraca. Oprócz porównywania `input` z wieloma ciągami, które zawierają specyfikatory formatu, Przeciążenie zachowuje <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> się identycznie z metodą.  
  
 Parametr jest tablicą ciągów, której elementy zawierają pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują możliwy `input`wzorzec. `formats` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowany element w `formats` `z`zawiera specyfikatory `zz`formatu, `zzz` lub niestandardowy, aby wskazać, że przesunięcie musi być obecne w `input`, przesunięcie musi zawierać znak minus lub znak dodatni. Jeśli brakuje znaku, operacja analizy kończy się niepowodzeniem, a metoda zwraca `false`.  
  
> [!IMPORTANT]
>  `formats` Użycie parametru tego przeciążenia w celu określenia wielu formatów może pomóc w zmniejszeniu frustrację wielu użytkowników podczas wprowadzania dat i godzin. W szczególności możliwość zdefiniowania wielu wzorców danych wejściowych umożliwia aplikacji obsługę prezentacji daty i godziny, które mogą zawierać lub nie mieć wiodących zer w miesiącach, dniach, godzinach, minutach i sekundach. Przykład zawiera ilustrację.  
  
 Jeśli dopasowany element w `formats` wymaga, `input` który zawiera datę, ale nie godzinę, wówczas obiektem otrzymanym <xref:System.DateTimeOffset> jest przypisywany czas północy (0:00:00). Jeśli dopasowany element w `formats` wymaga, aby dane wejściowe zawierały godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku jest przypisany do bieżącej daty w systemie lokalnym. Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny używane w programie `input` są zdefiniowane `formatProvider` przez parametr. To samo jest prawdziwe dla dokładnego wzorca `input` , jeśli pasujący `formats` element elementu jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie jest określony przez `formats`elementy w. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników (z wyjątkiem przesunięcia) i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które nie są określone `formats`przez elementy w. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które nie są określone `formats`przez elementy w. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie są określone przez `formats`elementy w. Podczas analizowania ciągu nie wszystkie dodatkowe znaki białych znaków, które nie są `formats` określone w dopasowanym elemencie w programie, są ignorowane.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak określono w określonym elemencie `formats` w, aby nastąpiło pomyślne dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, <xref:System.DateTimeOffset> ponieważ struktura nie `Kind` zawiera właściwości.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera niezdefiniowaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
-lub- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> nie jest obsługiwana.  
-lub- <paramref name="styles" /> zawiera wzajemnie wykluczające <see cref="T:System.Globalization.DateTimeStyles" /> się wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu definiujący wymagany format <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format danych wejściowych. Typową wartością do określenia jest <see langword="None" />.</param>
        <param name="result">Gdy metoda zwraca, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednik daty i <paramref name="input" />godziny, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja zakończyła się niepowodzeniem. Konwersja nie powiedzie się <paramref name="input" /> , jeśli <see langword="null" />parametr ma wartość lub nie zawiera prawidłowej reprezentacji ciągu daty i godziny w oczekiwanym formacie zdefiniowanym <paramref name="format" /> przez <c>operatora</c>i. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns><see langword="true" />Jeśli parametr został pomyślnie skonwertowany; <see langword="false" />w przeciwnym razie. <paramref name="input" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody jest podobne do <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z tą różnicą, że ta metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. Analizuje on ciąg reprezentujący datę i godzinę, które muszą dokładnie pasować do wzorca określonego przez `format` parametr. Jeśli ciąg nie jest zgodny z tym wzorcem, a niektóre możliwe zmiany w białej przestrzeni zdefiniowanej `styles` przez parametr, operacja analizy kończy się niepowodzeniem `false`i zwraca metodę. `input`  
  
 Parametr jest ciągiem zawierającym pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują wymagany `input`wzorzec. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli `format` `zz` `zzz` zawiera specyfikatory formatu `input`,, lub niestandardowe, aby wskazać, że przesunięcie musi być obecne w, przesunięcie musi zawierać znak minus lub znak dodatni. `z` Jeśli brakuje znaku, operacja analizy kończy się niepowodzeniem, a metoda zwraca `false`.  
  
 Jeśli `format` jest wymagane `input` , które zawierają datę, ale nie godzinę, obiekt <xref:System.DateTimeOffset> wyniku jest przypisywany o godzinie północy (0:00:00). Jeśli `format` jest to `input` wymagane, które zawierają godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku przypisuje bieżącą datę w systemie lokalnym. Jeśli `format` nie wymaga, aby `input` zawierało przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. Ta sama wartość dotyczy dokładnego wzorca `input` , jeśli `format` jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formaty standardowe dozwolone w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli `format` nie wymaga, aby `input` zawierała wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie jest określony przez format. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników, z wyjątkiem przesunięcia, i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które `format`nie są określone przez. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie `format`są określone przez. Podczas analizowania ciągu nie określono `format` żadnych dodatkowych znaków białych.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak `format`określono w. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, ponieważ <xref:System.DateTimeOffset> struktura nie `Kind` zawiera właściwości.|  
  
## Examples 

 W poniższym przykładzie użyto <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody ze specyfikatorami formatu standardowego i niestandardowego, kulturą niezmienną i różnymi <xref:System.Globalization.DateTimeStyles> wartościami do analizowania kilku ciągów daty i godziny.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

W poniższym przykładzie zastosowano różne <xref:System.Globalization.DateTimeStyles> wartości w celu przeanalizowania tablicy ciągów, które są zgodne z normą [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Dane wyjściowe z przykładu pokazują, że nie można przeanalizować ciągów, które są w odpowiednim formacie, jeśli:

- zawierają one odstępy, a odpowiednia <xref:System.Globalization.DateTimeStyles> flaga (taka jak <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> nie została podana w wywołaniu metody.

- zawierają one elementy daty i godziny, które znajdują się poza zakresem.

W przypadku ciągów, które nie określają przesunięcia czasu UTC, przyjmuje się, że przesunięcia lokalnej strefy czasowej (w tym przypadku-07:00, która odzwierciedla przesunięcie strefy czasowej pacyficznego), chyba że <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flaga jest podana w wywołaniu metody. W takim przypadku zakłada się, że jest to uniwersalny czas koordynowany.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera niezdefiniowaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />nie jest obsługiwana.  
  
—lub— 
 <paramref name="styles" />zawiera wzajemnie wykluczające <see cref="T:System.Globalization.DateTimeStyles" /> się wartości.</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]W ,zwraca<see langword="false" />, czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie znajduje się w umowie. <see cref="Overload:System.DateTimeOffset.TryParseExact" /> W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica definiująca oczekiwane formaty <paramref name="input" />.</param>
        <param name="formatProvider">Obiekt, który dostarcza informacje <paramref name="input" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format danych wejściowych. Typową wartością do określenia jest <see langword="None" />.</param>
        <param name="result">Gdy metoda zwraca, zawiera <see cref="T:System.DateTimeOffset" /> odpowiednik daty i <paramref name="input" />godziny, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTimeOffset.MinValue" />, jeśli konwersja zakończyła się niepowodzeniem. Konwersja kończy się niepowodzeniem <paramref name="input" /> , jeśli nie zawiera prawidłowej reprezentacji ciągu daty i godziny lub nie zawiera daty i godziny w oczekiwanym formacie zdefiniowanym przez <paramref name="format" />, lub jeśli <paramref name="formats" /> jest <see langword="null" />. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTimeOffset" /> odpowiednik przy użyciu określonej tablicy formatów, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do jednego ze wskazanych formatów.</summary>
        <returns><see langword="true" />Jeśli parametr został pomyślnie skonwertowany; <see langword="false" />w przeciwnym razie. <paramref name="input" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę pasującą `formats` do jednego z wzorców przypisanych do tablicy. <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Jeśli ciąg nie pasuje do żadnego z tych wzorców ze wszystkimi odmianami zdefiniowanymi `styles` przez parametr, operacja analizy kończy się niepowodzeniem i zwraca `false`metodę. `input` Oprócz porównywania `input` z wieloma ciągami, które zawierają specyfikatory formatu, Przeciążenie zachowuje <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> się identycznie z metodą.  
  
 Parametr jest tablicą ciągów, której elementy zawierają pojedynczy specyfikator formatu standardowego lub jeden lub więcej niestandardowych specyfikatorów formatu, które definiują możliwy `input`wzorzec. `formats` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Jeśli dopasowany element w `formats` `z`zawiera specyfikatory `zz`formatu, `zzz` lub niestandardowy, aby wskazać, że przesunięcie musi być obecne w `input`, przesunięcie musi zawierać znak minus lub znak dodatni. Jeśli brakuje znaku, operacja analizy kończy się niepowodzeniem, a metoda zwraca `false`.  
  
> [!IMPORTANT]
>  `formats` Użycie parametru tego przeciążenia w celu określenia wielu formatów może pomóc w zmniejszeniu frustrację wielu użytkowników podczas wprowadzania dat i godzin. W szczególności możliwość zdefiniowania wielu wzorców danych wejściowych umożliwia aplikacji obsługę prezentacji daty i godziny, które mogą zawierać lub nie mieć wiodących zer w miesiącach, dniach, godzinach, minutach i sekundach. Przykład zawiera ilustrację.  
  
 Jeśli dopasowany element w `formats` wymaga, `input` który zawiera datę, ale nie godzinę, wówczas obiektem otrzymanym <xref:System.DateTimeOffset> jest przypisywany czas północy (0:00:00). Jeśli dopasowany element w `formats` wymaga, aby dane wejściowe zawierały godzinę, ale nie datę, <xref:System.DateTimeOffset> obiekt wyniku jest przypisany do bieżącej daty w systemie lokalnym. Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał przesunięcie, przesunięcie `styles` obiektu otrzymanego <xref:System.DateTimeOffset> zależy od wartości parametru. W przypadku `styles` dołączenia do <xref:System.DateTimeOffset> obiektu zostaje przypisana przesunięcia lokalnej strefy czasowej. <xref:System.Globalization.DateTimeStyles.AssumeLocal> Jeśli `styles` <xref:System.DateTimeOffset> zawiera <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, przesunięcie uniwersalnego czasu koordynowanego (UTC) lub + 00:00 jest przypisane do obiektu. Jeśli żadna wartość nie jest określona, używane jest przesunięcie lokalnej strefy czasowej.  
  
 Określone symbole daty i godziny oraz ciągi używane w programie `input` są zdefiniowane `formatProvider` przez parametr. To samo jest prawdziwe dla dokładnego wzorca `input` , jeśli pasujący `formats` element elementu jest ciągiem specyfikatora formatu standardowego. `formatProvider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę opartą na `input` tym, który jest interpretowany. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje symbole i formatowanie w `input`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
 Jeśli `formatprovider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 `styles` Parametr określa, czy biały znak jest dozwolony w ciągu wejściowym, wskazuje, jak ciągi bez jawnego składnika przesunięcia są analizowane i obsługuje konwersję czasu UTC w ramach operacji analizowania. Wszystkie elementy członkowskie <xref:System.Globalization.DateTimeStyles> wyliczenia są obsługiwane z wyjątkiem <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Poniższa tabela zawiera listę działania każdego z obsługiwanych elementów członkowskich.  
  
|`DateTimeStyles`członkiem|Zachowanie|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`input` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jest on równoznaczny z analizowaniem ciągu, a następnie wywołaniem <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> metody zwróconego <xref:System.DateTimeOffset> obiektu.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie lokalnej strefy czasowej. Jest to wartość domyślna.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Jeśli dopasowany element w `formats` nie wymaga, aby `input` zawierał wartość przesunięcia, zwracany <xref:System.DateTimeOffset> obiekt uzyskuje przesunięcie czasu UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Zezwala `input` na uwzględnienie wewnętrznego znaku, który nie jest określony przez `formats`elementy w. Dodatkowe odstępy mogą pojawić się między składnikami daty i godziny i w obrębie poszczególnych składników (z wyjątkiem przesunięcia) i są ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Umożliwia `input` uwzględnienie spacji wiodących, które nie są określone `formats`przez elementy w. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Umożliwia `input` dołączenie spacji końcowych, które nie są określone `formats`przez elementy w. Są one ignorowane podczas analizowania ciągu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Umożliwia `input` uwzględnienie spacji wiodących, końcowych i wewnętrznych, które nie są określone przez `formats`elementy w. Podczas analizowania ciągu nie wszystkie dodatkowe znaki białych znaków, które nie są `formats` określone w dopasowanym elemencie w programie, są ignorowane.|  
|<xref:System.Globalization.DateTimeStyles.None>|Wskazuje, że dodatkowy biały znak nie jest dozwolony `input`w. Biały znak musi wyglądać dokładnie tak, jak określono w określonym elemencie `formats` w, aby nastąpiło pomyślne dopasowanie. Jest to zachowanie domyślne.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Nie ma żadnego efektu, <xref:System.DateTimeOffset> ponieważ struktura nie `Kind` zawiera właściwości.|  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano wiele formatów danych wejściowych dla ciągu reprezentującego datę i godzinę oraz wartość przesunięcia, a następnie przekazuje ciąg wprowadzony przez użytkownika do <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> metody.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera niezdefiniowaną <see cref="T:System.Globalization.DateTimeStyles" /> wartość.  
  
—lub— 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />nie jest obsługiwana.  
  
—lub— 
 <paramref name="styles" />zawiera wzajemnie wykluczające <see cref="T:System.Globalization.DateTimeStyles" /> się wartości.</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]W ,zwraca<see langword="false" />, czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie znajduje się w umowie. <see cref="Overload:System.DateTimeOffset.TryParseExact" /> W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która reprezentuje datę i godzinę uniwersalnego czasu koordynowanego (UTC) dla bieżącego <see cref="T:System.DateTimeOffset" /> obiektu. <see cref="T:System.DateTime" /></summary>
        <value>Data i godzina uniwersalnego czasu koordynowanego (UTC) bieżącego <see cref="T:System.DateTimeOffset" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcDateTime%2A> Właściwość wykonuje podwójną konwersję:  
  
-   Konwertuje datę i godzinę bieżącego <xref:System.DateTimeOffset> obiektu na uniwersalny czas koordynowany (UTC). Konwersja jest wykonywana przez odjęcie wartości <xref:System.DateTimeOffset.Offset%2A> właściwości od daty i godziny bieżącego <xref:System.DateTimeOffset> obiektu.  
  
-   Konwertuje <xref:System.DateTimeOffset> wartość<xref:System.DateTime> na wartość.  
  
 Właściwość zwracanej <xref:System.DateTimeOffset.DateTime%2A> wartości jest ustawiona na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. <xref:System.DateTime.Kind%2A>  
  
 Pobieranie wartości <xref:System.DateTimeOffset.UtcDateTime%2A> właściwości jest równoznaczne z wywołaniem `ToUniversalTime.DateTime` właściwości Current <xref:System.DateTimeOffset> obiektu, z tą różnicą, że <xref:System.DateTime.Kind%2A> Właściwość tej ostatniej <xref:System.DateTime> wartości to <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak użyć <xref:System.DateTimeOffset.UtcDateTime%2A> właściwości, aby <xref:System.DateTimeOffset> wyświetlić wartość i odpowiadający jej czas UTC.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, którego data i godzina są ustawiane jako data i godzina bieżącego skoordynowanego czasu uniwersalnego (UTC) i którego <see cref="F:System.TimeSpan.Zero" />przesunięcie jest. <see cref="T:System.DateTimeOffset" /></summary>
        <value>Obiekt, którego data i godzina to bieżący uniwersalny czas koordynowany (UTC) i którego przesunięcie to <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.UtcNow%2A> Właściwość oblicza bieżący uniwersalny czas koordynowany (UTC) na podstawie czasu zegara systemu lokalnego i przesunięcia zdefiniowanego przez strefę czasową systemu lokalnego.  
  
 Dokładność bieżącego składnika czasu UTC zależy od rozdzielczości zegara systemowego. W systemach operacyjnych Windows NT 3,5 i nowszych oraz Windows Vista rozdzielczość zegara wynosi około 10-15 milisekund.  
  
   
  
## Examples  
 Poniższy przykład ilustruje relację między uniwersalnym czasem koordynowanym (UTC) i czasem lokalnym.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaczników reprezentujących datę i godzinę bieżącego <see cref="T:System.DateTimeOffset" /> obiektu w uniwersalnym czasie koordynowanym (UTC).</summary>
        <value>Liczba znaczników w uniwersalnym czasie koordynowanym przez <see cref="T:System.DateTimeOffset" /> obiekt (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.DateTimeOffset.UtcTicks%2A> właściwości reprezentuje liczbę interwałów 100-nanosekund, które upłynęły od 12:00:00 północy 1 stycznia 0001 ( <xref:System.DateTimeOffset.MinValue>wartość). Nie obejmuje taktów, które byłyby dodawane w sekundach przestępnym. W nanosekundie jest jedna miliardowegoa sekunda; w drugim występuje 10 000 000 taktów. Wartość <xref:System.DateTimeOffset.UtcTicks%2A> z zakresu właściwości z `DateTimeOffset.MinValue.Ticks` do `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik roku z daty reprezentowanej przez bieżący <see cref="T:System.DateTimeOffset" /> obiekt.</summary>
        <value>Składnik roku bieżącego <see cref="T:System.DateTimeOffset" /> obiektu wyrażony jako wartość całkowita z zakresu od 0 do 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Year%2A> Wartość<xref:System.DateTimeOffset.Offset%2A> właściwości nie ma wpływ na właściwość.  
  
 Możesz również utworzyć reprezentację ciągu dla <xref:System.DateTimeOffset> komponentu roku, <xref:System.DateTimeOffset.ToString%2A> wywołując metodę ze specyfikatorami formatu niestandardowego "y", "RR" lub "RRRR".  
  
   
  
## Examples  
 Poniższy przykład wyświetla składnik <xref:System.DateTimeOffset> roku wartości na cztery różne sposoby:  
  
-   Pobierając wartość <xref:System.DateTimeOffset.Year%2A> właściwości.  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "y".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "RR".  
  
-   Wywoływanie <xref:System.DateTimeOffset.ToString%28System.String%29> metody ze specyfikatorem formatu "RRRR".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
