<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c42bee4f607569959c7c5d7e16c9a5b4bc99c655" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39827664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm do pobierania obiektu, aby kontrolować sposób formatowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider> Interfejs dostarcza obiekt, który dostarcza informacje o formatowaniu dla operacji analizowania i formatowanie. Operacji formatowania przekonwertować wartość typu ciąg reprezentujący wartość tego. Typowe metody formatowania są `ToString` metody typu, a także <xref:System.String.Format%2A>. Operacje analizy przekonwertować ciąg reprezentujący wartość do typu przy użyciu tej wartości. Typowe metody analizy są `Parse` i `TryParse`.  
  
 <xref:System.IFormatProvider> Interfejsu, który składa się z jednej metody <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>. <xref:System.IFormatProvider.GetFormat%2A> jest metodą wywołania zwrotnego: analiza lub metoda formatowania wywołuje on i przekazuje je <xref:System.Type> obiekt, który reprezentuje typ obiektu, który formatowania lub analizowania metoda oczekuje, że udostępni informacje o formatowaniu. <xref:System.IFormatProvider.GetFormat%2A> Metoda jest odpowiedzialna za zwrócenie obiektu tego typu.  
  
 <xref:System.IFormatProvider> implementacje są często używane niejawnie, formatowania i analizowania metody. Na przykład <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metoda niejawnie wykorzystuje <xref:System.IFormatProvider> wdrożenia, który reprezentuje kulturę bieżącego systemu. <xref:System.IFormatProvider> implementacje można również określić jawnie za pomocą metod, które mają parametr typu <xref:System.IFormatProvider>, takich jak <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> i <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Program .NET Framework zawiera następujące trzy wstępnie zdefiniowane <xref:System.IFormatProvider> implementacji w celu dostarczenia informacje specyficzne dla kultury, które są używane w formatowania lub analizowania wartości liczbowych i daty i godziny:  
  
-   <xref:System.Globalization.NumberFormatInfo> Klasy, która zawiera informacje, które jest używany do formatowania liczb, takie jak waluty tysięcy separator i symbole separatorów dziesiętnych dla określonej kultury. Dla informacji na temat ciągów wstępnie zdefiniowany format rozpoznawane przez <xref:System.Globalization.NumberFormatInfo> obiektu i stosowane w operacjach formatowania liczbowego, zobacz [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) i [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Klasy, która zawiera informacje, które jest używany do formatowania daty i godziny, na przykład symbole separatorów daty i godziny dla określonej kultury lub kolejności i formatu roku, miesiąca i dnia składniki wartość typu date. Dla informacji na temat ciągów wstępnie zdefiniowany format rozpoznawane przez <xref:System.Globalization.DateTimeFormatInfo> obiektu i stosowane w operacjach formatowania liczbowego, zobacz [standardowych ciągów daty i godziny Format](~/docs/standard/base-types/standard-date-and-time-format-strings.md) i [Custom Date and Time Format Strings ](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo> Klasy, która reprezentuje określoną kulturę. Jego <xref:System.IFormatProvider.GetFormat%2A> metoda zwróci wartość specyficzne dla kultury <xref:System.Globalization.NumberFormatInfo> lub <xref:System.Globalization.DateTimeFormatInfo> obiektu, w zależności od tego, czy <xref:System.Globalization.CultureInfo> obiekt jest używany w formatowania lub analizowania operacji, która zawiera liczby lub daty i godziny.  
  
 Program .NET Framework obsługuje także niestandardowe formatowanie. Zwykle wymaga to tworzenia klasy formatowania, która implementuje interfejsy <xref:System.IFormatProvider> i <xref:System.ICustomFormatter>. Wystąpienie tej klasy jest następnie przekazywany jako parametr do metody, która wykonuje niestandardowe formatowanie operacji, takich jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> przykład stanowi ilustrację takich implementację niestandardową, która formatuje liczbę jako liczbę 12-cyfrowy konta.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.IFormatProvider> implementacji zmienić reprezentację wartości daty i godziny. W tym przypadku pojedyncza Data jest wyświetlana przy użyciu <xref:System.Globalization.CultureInfo> obiekty reprezentujące czterech różnych kultur.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 W poniższym przykładzie pokazano użycie klasy, która implementuje <xref:System.IFormatProvider> interfejsu i <xref:System.IFormatProvider.GetFormat%2A> metody. `AcctNumberFormat` Klasy konwertuje <xref:System.Int64> wartość, która reprezentuje liczbę sformatowaną konta 12-cyfrowy numer konta. Jego `GetFormat` metoda zwraca odwołanie do bieżącego `AcctNumberFormat` wystąpienia, jeśli `formatType` parametr odnosi się do klasy, która implementuje <xref:System.ICustomFormatter>; w przeciwnym razie `GetFormat` zwraca `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Klasa, która implementuje <xref:System.IFormatProvider> mogą następnie służyć w wywołaniu do formatowania i analizowania operacji. Na przykład, poniższy kod wywoła <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metoda generuje ciąg, który zawiera numer sformatowane konta 12 cyfr.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Obiekt, który określa typ formatu obiekt do zwrotu.</param>
        <summary>Zwraca obiekt, który dostarcza usługi formatowania dla określonego typu.</summary>
        <returns>Wystąpienie obiektu określonego przez <paramref name="formatType" />, jeśli <see cref="T:System.IFormatProvider" /> wdrożenia można dostarczyć tego typu obiektu; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> jest metodą wywołania zwrotnego, która formatowania i analizowania metody wywołana w celu pobrania informacji o formacie ciągu wejściowego podczas analizowania operacji lub formatu ciągu danych wyjściowych w operacjach formatowania. W `formatType` parametr, formatowania lub analizowania metoda przekazuje typ obiektu do wykonywania swoich operacji wymaga. Jeśli <xref:System.IFormatProvider> wdrożenia można podać formatowania lub analizowania obiektu, zwraca ten obiekt. Jeśli nie, zwraca `null`.  
  
 Na przykład, w wywołaniu <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metody argumentu metody jest <xref:System.IFormatProvider> obiektu, który dostarcza informacji na temat jak może być sformatowany ciąg reprezentujący bieżące wystąpienie liczby całkowitej. Kiedy środowisko uruchomieniowe wykonuje metodę, wywołuje <xref:System.IFormatProvider> obiektu <xref:System.IFormatProvider.GetFormat%2A> metody i przekazuje je <xref:System.Type> obiekt, który reprezentuje <xref:System.Globalization.NumberFormatInfo> typu. Jeśli <xref:System.IFormatProvider> może dostarczyć obiekt <xref:System.Globalization.NumberFormatInfo> obiektu i zwraca ten obiekt. Jeśli go nie może dostarczyć obiekt tego typu, zwraca `null`.  
  
 Możesz zaimplementować <xref:System.IFormatProvider> interfejsu i <xref:System.IFormatProvider.GetFormat%2A> metoda w klasach, które zapewniają niestandardowe formatowania lub analizowania usług. <xref:System.IFormatProvider> Implementacja jest następnie przekazywany jako argument do żadnego przeciążenia, analizowania lub formatowania metodę, która ma parametr typu <xref:System.IFormatProvider>, takich jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, lub <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano użycie klasy, która implementuje <xref:System.IFormatProvider> interfejsu i <xref:System.IFormatProvider.GetFormat%2A> metody. `AcctNumberFormat` Klasy konwertuje <xref:System.Int64> wartość, która reprezentuje liczbę sformatowaną konta 12-cyfrowy numer konta. Jego `GetFormat` metoda zwraca odwołanie do samego siebie, jeśli `formatType` parametr odnosi się do klasy, która implementuje <xref:System.ICustomFormatter>; w przeciwnym razie `GetFormat` zwraca `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Wystąpienie `AcctNumberFormat` klasy może być następnie przekazywany jako argument do metody, która zapewnia formatowania lub analizowania usług. Na przykład, poniższy kod przekazuje `AcctNumberFormat` klasy <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metodę w celu wygenerowania numer sformatowane konta 12 cyfr.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>