<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a605e4ebcc96522c2ca769cde87eed8ec1fedfd5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405956" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia mechanizm do pobierania obiektu w celu kontrolowania formatowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider> Interfejs dostarcza obiekt, który dostarcza informacje o formatowaniu dla operacji formatowania i analizowania. Operacje formatowania konwertują wartość typu na ciąg reprezentujący tę wartość. Typowymi metodami formatowania `ToString` są metody typu, a <xref:System.String.Format%2A>także. Operacje analizowania konwertują ciąg reprezentujący wartość na typ z tą wartością. Typowe metody analizy to `Parse` i `TryParse`.  
  
 Interfejs składa się z pojedynczej metody <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>,. <xref:System.IFormatProvider> <xref:System.IFormatProvider.GetFormat%2A>jest metodą wywołania zwrotnego: Metoda analizy lub formatowania wywołuje ją i przekazuje jej <xref:System.Type> obiekt, który reprezentuje typ obiektu, który oczekuje Metoda formatowania lub analizy, dostarczy informacje o formatowaniu. <xref:System.IFormatProvider.GetFormat%2A> Metoda jest odpowiedzialna za zwracanie obiektu tego typu.  
  
 <xref:System.IFormatProvider>implementacje są często używane niejawnie przez formatowanie i metody analizy. Na przykład <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metoda niejawnie <xref:System.IFormatProvider> używa implementacji, która reprezentuje bieżącą kulturę systemu. <xref:System.IFormatProvider>Implementacje można również jawnie określić przy użyciu metod, które mają parametr typu <xref:System.IFormatProvider>, taki jak <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> i <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 .NET Framework zawiera następujące trzy wstępnie zdefiniowane <xref:System.IFormatProvider> implementacje, które zawierają informacje specyficzne dla kultury, które są używane podczas formatowania lub analizowania wartości liczbowych i daty i godziny:  
  
-   <xref:System.Globalization.NumberFormatInfo> Klasa, która zawiera informacje, które są używane do formatowania liczb, takich jak waluta, separator tysięcy i symbole separatora dziesiętnego dla danej kultury. Aby uzyskać informacje na temat wstępnie zdefiniowanych ciągów formatu rozpoznawanych przez <xref:System.Globalization.NumberFormatInfo> obiekt i używanych w operacjach formatowania liczbowego, zobacz [Standardowe ciągi formatujące](~/docs/standard/base-types/standard-numeric-format-strings.md) i [ciągi formatów](~/docs/standard/base-types/custom-numeric-format-strings.md)liczbowych.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Klasa, która zawiera informacje, które są używane do formatowania dat i godzin, takich jak symbole separatora daty i godziny dla określonej kultury lub w kolejności i formacie daty, miesiąca i dnia. Aby uzyskać informacje na temat wstępnie zdefiniowanych ciągów formatu rozpoznawanych przez <xref:System.Globalization.DateTimeFormatInfo> obiekt i używanych w operacjach formatowania liczbowego, zobacz ciągi [standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo> Klasa, która reprezentuje określoną kulturę. Jego <xref:System.IFormatProvider.GetFormat%2A> Metoda zwraca specyficzną <xref:System.Globalization.NumberFormatInfo> dla kultury lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, w zależności od tego, <xref:System.Globalization.CultureInfo> czy obiekt jest używany w operacji formatowania lub analizowania, która obejmuje liczby, daty i godziny.  
  
 .NET Framework obsługuje również niestandardowe formatowanie. Zwykle obejmuje to Tworzenie klasy formatowania, która implementuje oba <xref:System.IFormatProvider> i. <xref:System.ICustomFormatter> Wystąpienie tej klasy jest następnie przenoszone jako parametr do metody, która wykonuje niestandardowe operacje formatowania, takie jak <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> przykład zawiera ilustrację takiej implementacji niestandardowej, która formatuje liczbę jako 12-cyfrowy numer konta.  
  
   
  
## Examples  
 Poniższy przykład ilustruje, jak <xref:System.IFormatProvider> implementacja może zmienić reprezentację wartości daty i godziny. W tym przypadku jest wyświetlana pojedyncza Data przy użyciu <xref:System.Globalization.CultureInfo> obiektów, które reprezentują cztery różne kultury.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 Poniższy przykład ilustruje użycie klasy implementującej <xref:System.IFormatProvider> Interfejs <xref:System.IFormatProvider.GetFormat%2A> i metodę. `AcctNumberFormat` Klasa<xref:System.Int64> konwertuje wartość reprezentującą numer konta na sformatowany 12-cyfrowy numer konta. Jego `GetFormat` Metoda zwraca odwołanie do bieżącego `AcctNumberFormat` wystąpienia, `formatType` <xref:System.ICustomFormatter> `GetFormat` Jeśli parametr odwołuje się do klasy, która implementuje; w przeciwnym razie `null`zwraca.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Klasa, która implementuje <xref:System.IFormatProvider> , może być używana w wywołaniu operacji formatowania i analizowania. Na przykład poniższy kod wywołuje <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metodę w celu wygenerowania ciągu zawierającego sformatowany 12-cyfrowy numer konta.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">Instrukcje: Definiowanie i używanie niestandardowych dostawców formatu liczbowego</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Obiekt, który określa typ obiektu formatu do zwrócenia.</param>
        <summary>Zwraca obiekt, który zapewnia usługi formatowania dla określonego typu.</summary>
        <returns>Wystąpienie obiektu określonego przez <paramref name="formatType" />, <see cref="T:System.IFormatProvider" /> jeśli implementacja może dostarczyć tego typu obiektu; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A>jest metodą wywołania zwrotnego, która pobiera i analizuje metody, aby pobierać informacje o formacie ciągu wejściowego w operacjach analizowania lub formacie ciągu wyjściowego w operacjach formatowania. `formatType` W parametrze Metoda formatowania lub analizowania przekazuje typ obiektu wymaganego do wykonania operacji. <xref:System.IFormatProvider> Jeśli implementacja może dostarczyć ten obiekt formatowania lub analizowania, zwraca ten obiekt. Jeśli nie, zwraca `null`.  
  
 Na przykład w wywołaniu <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metody argument metody <xref:System.IFormatProvider> jest obiektem, który zawiera informacje na temat sposobu, w jaki ciąg reprezentujący bieżące wystąpienie liczby całkowitej może być sformatowany. Gdy środowisko uruchomieniowe <xref:System.IFormatProvider> wykonuje metodę, wywołuje <xref:System.IFormatProvider.GetFormat%2A> metodę obiektu i przekazuje go <xref:System.Globalization.NumberFormatInfo> do <xref:System.Type> obiektu, który reprezentuje typ. Jeśli obiekt może <xref:System.Globalization.NumberFormatInfo> dostarczyć obiekt, zwraca ten obiekt. <xref:System.IFormatProvider> Jeśli nie można dostarczyć obiektu tego typu, zwraca `null`.  
  
 <xref:System.IFormatProvider> Interfejs<xref:System.IFormatProvider.GetFormat%2A> i metodę można zaimplementować w klasach, które zapewniają niestandardowe formatowanie lub usługi analizy. <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> <xref:System.IFormatProvider> <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>Implementacja jest następnie przenoszona jako argument do dowolnego przeciążenia metody analizy lub formatowania, która ma parametr typu, taki jak, lub. <xref:System.IFormatProvider>  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie klasy implementującej <xref:System.IFormatProvider> Interfejs <xref:System.IFormatProvider.GetFormat%2A> i metodę. `AcctNumberFormat` Klasa<xref:System.Int64> konwertuje wartość reprezentującą numer konta na sformatowany 12-cyfrowy numer konta. Jego `GetFormat` Metoda zwraca odwołanie do siebie <xref:System.ICustomFormatter> `formatType` `null`, jeśli parametr odwołuje się do klasy, która implementuje; w przeciwnym razie zwraca.`GetFormat`  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Wystąpienie `AcctNumberFormat` klasy można następnie przesłać jako argument do metody, która zapewnia usługi formatowania lub analizy. Na przykład poniższy kod przekazuje `AcctNumberFormat` klasy <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> do metody w celu wygenerowania sformatowanego 12-cyfrowego numeru konta.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
