<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72b216b53b069d5fe20d01e603a0145f8e6c8052" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428709" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje strefę czasową.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa to region geograficzny, w którym jest używana standardowa jednocześnie.  
  
> [!IMPORTANT]
>  Jeśli to możliwe, użyj <xref:System.TimeZoneInfo> klasy zamiast <xref:System.TimeZone> klasy.  
  
 Można użyć <xref:System.TimeZone> klasy można pobrać informacji o bieżącej strefy czasowej i Konwertowanie godzin od lokalnego czasu uniwersalnego czasu koordynowanego (UTC) lub na odwrót. Nie można jednak użyć <xref:System.TimeZone> klasy do reprezentowania stref czasowych niż lokalnej strefy lub do obsługi konwersji daty i godziny między strefami czasowymi do innego. W tym celu należy użyć <xref:System.TimeZoneInfo> klasy. Ta klasa służy do pobierania informacji o dowolnej strefy czasowej zdefiniowane w systemie lokalnym, do tworzenia niestandardowych stref czasowych i Konwertowanie godzin między strefami czasowymi do innego.  
  
 <xref:System.TimeZone> Klasa obsługuje tylko pojedynczy czasu letniego reguła korekty w lokalnej strefie czasowej. W związku z tym <xref:System.TimeZone> klasy dokładnie może zgłaszać informacji o czasu letniego lub konwersji między czasem UTC a lokalnym tylko dla okresu, w którym najnowsze reguła korekty jest włączona. Z kolei <xref:System.TimeZoneInfo> klasa obsługuje wiele reguł korygowania, co umożliwia do pracy z danych historycznych strefy czasowej.  
  
   
  
## Examples  
 Następujący przykład odwołania i wyświetla wybrany `TimeZone` klasy elementów.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Oprócz implementacji dla jego <see langword="abstract" /> elementów członkowskich (typy oznaczone <see langword="MustOverride" /> w języku Visual Basic), należy pamiętać, że klasy wyprowadzone z <see cref="T:System.TimeZone" /> przesłonić domyślne zachowanie <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> metody. Jest to spowodowane domyślne zachowanie <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> w programie .NET Framework w wersji 2.0 nie są zależne od wywołania <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, tak jak w wersji systemu .NET Framework 1.0 i 1.1.  Aby uzyskać więcej informacji, zobacz <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> metody.</para>
    </block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.TimeZone" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera strefy czasowej bieżącego komputera.</summary>
        <value>A <see cref="T:System.TimeZone" /> obiekt, który reprezentuje bieżącej strefy czasu lokalnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Następujące odwołania przykład `CurrentTimeZone` właściwości i wyświetla nazwy (czas standardowy) i czasu letniego na podstawie lokalnej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Po zakończeniu jest buforowane dane strefy czasu lokalnego <see cref="P:System.TimeZone.CurrentTimeZone" /> najpierw służy do pobierania informacji o strefie czasowej. Jeśli system lokalny zmiany strefy czasowej później, <see cref="P:System.TimeZone.CurrentTimeZone" /> właściwości nie odzwierciedlenia tej zmiany. Jeśli wymagana jest obsługa zmiany strefy czasowej podczas aplikacja jest uruchomiona, należy użyć <see cref="T:System.TimeZoneInfo" /> klasy i wywołanie jego <see cref="M:System.TimeZoneInfo.ClearCachedData" /> metody.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę strefy czasu letniego.</summary>
        <value>Nazwa strefy czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli czas letni nie jest używany w strefie czasowej, ciąg pusty ("") jest zwracany.  
  
 <xref:System.TimeZone.DaylightName%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Następujący przykład odwołania i wyświetla `DaylightName` właściwości bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok, którego dotyczy okresu czasu letniego.</param>
        <summary>Zwraca okres czasu letniego dla danego roku.</summary>
        <returns>A <see cref="T:System.Globalization.DaylightTime" /> obiekt, który zawiera datę początkową i końcową dla czasu letniego w <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest obsługiwana tylko jedna okresu czasu letniego.  
  
 Jeśli czas letni nie jest używana w bieżącej strefy czasowej, jest zwracana wartość <xref:System.Globalization.DaylightTime> obiektu, gdy wartość <xref:System.Globalization.DaylightTime.Start%2A> i <xref:System.Globalization.DaylightTime.End%2A> jest <xref:System.DateTime.MinValue?displayProperty=nameWithType>i wartość <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> jest <xref:System.TimeSpan> ustawiana na 0 znaczniki osi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> jest mniejsza niż 1 lub większą niż 9999.</exception>
        <block subset="none" type="usage">
          <para>Ponieważ <see cref="T:System.TimeZone" /> klasa obsługuje tylko jedna reguła korekty czasu letniego, <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> metody dotyczy bieżącej regule dostosowanie każdego roku, niezależnie od tego, czy reguła korekty są faktycznie stosowane do tego roku. Przy założeniu, że system operacyjny ma dokładne dane dla danego roku, lepszych wyników jest dostępna, Praca z tablica <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiekty zwrócone przez <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> metody. <see cref="P:System.Globalization.DaylightTime.Start" />, <see cref="P:System.Globalization.DaylightTime.End" />, I <see cref="P:System.Globalization.DaylightTime.Delta" /> odpowiada właściwości <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />, i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> właściwości.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Wartość daty i godziny.</param>
        <summary>Zwraca przesunięcie uniwersalny czas koordynowany (UTC) dla określonego czasu lokalnego.</summary>
        <returns>Przesunięcie uniwersalny czas koordynowany (UTC) z <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca przesunięcie lub różnicę między `time` parametr i uniwersalny czas koordynowany (UTC). To znaczy:  
  
 `time` = UTC + przesunięcie  
  
 Metoda interpretuje ze strefą czasową `time` na podstawie jego <xref:System.DateTime.Kind%2A> właściwości. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, metoda zwraca przesunięcie w lokalnej strefie czasowej. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, metoda zwraca przesunięcie równe <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Jeśli w lokalnej strefie czasowej przestrzega czasu letniego, <xref:System.TimeZone.GetUtcOffset%2A> stosuje się reguły korekty bieżącego `time` podczas określania przesunięcie w lokalnej strefie czasowej. Oznacza to, że zwrócony przez przesunięcie <xref:System.TimeZone.GetUtcOffset%2A> odzwierciedla czy `time` znajduje się w strefie czasowej (czas standardowy) lub jego czasu letniego.  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A> Metody rozpoznaje tylko dla bieżącego czasu letniego korekty reguły w lokalnej strefie czasowej. W związku z tym będzie gwarancji, aby dokładnie zwrócić UTC przesunięcie czasu lokalnego tylko w okresie, w którym najnowsze reguła korekty jest włączona. Jeśli może zwrócić wyniki niedokładne `time` jest historyczny wartość daty i godziny który podlegał poprzedniej reguła korekty.  
  
 <xref:System.TimeZone.GetUtcOffset%2A> Odpowiada metoda <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metody. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metody.  
  
 Ponieważ wartość daty i godziny reprezentowany przez `time` przesunięcie tej wartości od czasu UTC są nie ściśle powiązane, lokalne lub nieokreślona datę i wartość czasu może zwracać różne wartości przesunięcia podczas uruchamiania na różnych komputerach lub uruchomienia na tym samym komputerze, w obszarze różnych strefach czasowych. Jeśli to zachowanie jest niepożądane, użyj <xref:System.DateTimeOffset> wartość zmiennej. <xref:System.DateTimeOffset> — Typ danych ściśle couples wartość daty i godziny z jego przesunięcie od czasu UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy jest określoną datę i godzinę w określonym przedziale czasu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca wartość wskazującą, czy jest określoną datę i godzinę w określonym przedziale czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="time" /> w Uwzględniaj czas okresu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rok, którego dotyczy okresu czasu letniego jest pochodną `time` parametru.  
  
 Ponieważ <xref:System.TimeZone> klasa obsługuje reguły korekty pojedynczego czasu letniego, <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> — metoda dotyczy dowolnego daty, niezależnie od tego, czy reguła korekty była obowiązująca w tej daty bieżącej regule dopasowania. Przy założeniu, że system operacyjny zawiera dane dokładne historycznych czasu letniego, lepszych wyników jest dostępna za pomocą <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <param name="daylightTimes">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy w określonym przedziale czasu określonym jest określoną datą i godziną.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="time" /> w <paramref name="daylightTimes" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Metoda zapewnia te same funkcje co tego przeciążenia <xref:System.TimeZone.IsDaylightSavingTime%2A> metody. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="daylightTimes" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę strefy (czas standardowy).</summary>
        <value>Nazwa strefy (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Następujący przykład odwołania i wyświetla `StandardName` właściwości bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia tej właściwości <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Czas uniwersalny czas koordynowany (UTC).</param>
        <summary>Zwraca określoną datę i godzinę czasu lokalnego, która odpowiada.</summary>
        <returns>A <see cref="T:System.DateTime" /> obiektu, którego wartość jest czasu lokalnego, który odpowiada <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono relacje między `time` parametru i <xref:System.DateTime> wartość zwrócona przez tę metodę.  
  
|`time` Parametr|Zachowanie|Wartość zwracana|  
|----------------------|--------------|------------------|  
|Czas uniwersalny czas koordynowany (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Konwertuje czas UTC na czas lokalny.|A <xref:System.DateTime> obiektu, którego wartość jest czasu lokalnego, który odpowiada `time`.|  
|Czas lokalny (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Konwersja nie jest konieczne.|Taki sam <xref:System.DateTime> reprezentowany przez wartość `time` parametru.|  
|Przez nieokreślony czas (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Zakłada się, że czas UTC jest i konwertuje ją od czasu UTC na czas lokalny.|A <xref:System.DateTime> obiektu, którego wartość jest czasu lokalnego, który odpowiada `time`.|  
  
 Jeśli w lokalnej strefie czasowej przestrzega czasu letniego, <xref:System.TimeZone.ToLocalTime%2A> stosuje się reguły korekty bieżącego `time` podczas wykonywania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A> Metody rozpoznaje tylko dla bieżącego czasu letniego korekty reguły w lokalnej strefie czasowej. W związku z tym jest gwarantowana dokładnie zwraca czas lokalny odpowiadający określonym czasie UTC tylko w okresie, w którym najnowsze reguła korekty jest włączona. Jeśli może zwrócić wyniki niedokładne `time` jest historyczny wartość daty i godziny który podlegał poprzedniej reguła korekty.  
  
 <xref:System.TimeZone.ToLocalTime%2A> Odpowiada metoda <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> metody z jego `destinationTimeZone` ustawiono parametr <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Chociaż nie jest wymagany, w większości przypadków klas pochodnych do uruchamiania programu .NET Framework w wersji 2.0 powinny zastępować Domyślna implementacja tej metody. W wersji systemu .NET Framework 1.0 i 1.1 <see langword="ToLocalTime" /> wywołano metodę <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> — metoda i dostosowana do czasu, gdy zwracany jest czas lokalny. Jednak począwszy od programu .NET Framework 2.0, zachowanie w implementacji domyślnej jest zależna od <see cref="P:System.DateTime.Kind" /> właściwość <paramref name="time" /> parametru. Jeśli jego wartość wynosi <see cref="F:System.DateTimeKind.Local" />, ta metoda zwraca <paramref name="time" /> bez zmian. Jeśli jego wartość <see cref="F:System.DateTimeKind.Utc" /> lub <see cref="F:System.DateTimeKind.Unspecified" />, ta metoda przyjmuje <paramref name="time" /> określa czasu UTC i konwertuje ją na czas lokalny system bez wywoływania elementu <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> metody.  Poniższy kod zapewnia prosty zastępowania Domyślna implementacja <see langword="ToLocalTime" /> metody. W tym kodzie <see langword="internalTimeZone" /> zmienna reprezentuje wystąpienie prywatnej <see langword="TimeZone" /> klasy: [! kodu csharp [System.TimeZone.ToLocalTime#1] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [! kodu vb [System.TimeZone.ToLocalTime#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca uniwersalny czas koordynowany (UTC) odpowiadający określonym czasie.</summary>
        <returns>A <see cref="T:System.DateTime" /> obiektu, którego wartość jest uniwersalny czas koordynowany (UTC) umożliwiająca <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w lokalnej strefie czasowej przestrzega czasu letniego, <xref:System.TimeZone.ToUniversalTime%2A> stosuje się reguły korekty bieżącego `time` parametru podczas wykonywania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A> Metody rozpoznaje tylko dla bieżącego czasu letniego korekty reguły w lokalnej strefie czasowej. W związku z tym będzie gwarancji, aby dokładnie zwrócić uniwersalny czas koordynowany (UTC) odpowiadającego danego czasu lokalnego tylko w okresie, w którym najnowsze reguła korekty jest włączona. Jeśli może zwrócić wyniki niedokładne `time` jest historyczny wartość daty i godziny który podlegał poprzedniej reguła korekty.  
  
 Jeśli `time` parametr jest niejednoznaczny czas, metoda zakłada, że jej czas standardowy. (Niejednoznaczny czas jest taki, który można zamapować na czas standardowy lub czas letni w lokalnej strefie czasowej). Jeśli `time` jest nieprawidłowa godzina metoda po prostu odejmuje czas lokalny z lokalnej strefy czasowej UTC przesunięcie do zwrócenia UTC. (Nieprawidłowa godzina jest taki, który nie istnieje z powodu stosowania czasu letniego reguł korygowania).  
  
 Ponieważ `time` jest interpretowana w odniesieniu do bieżącej strefy czasowej w systemie, datę i godzinę zwracane przez tę metodę mogą się różnić, jeśli aplikacja jest uruchamiana z różnych strefach czasowych na różnych komputerach lub w tym samym komputerze. W przypadkach, w których wartość daty i godziny musi reprezentować pojedynczego, jednoznaczne punkt w czasie, należy użyć <xref:System.DateTimeOffset> wartość reprezentują czas lokalny.  
  
 <xref:System.TimeZone.ToUniversalTime%2A> Odpowiada metoda <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> przeciążenie metody z <xref:System.DateTime> parametru których <xref:System.DateTime.Kind%2A> właściwość nie jest równa <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> przeciążenie metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>