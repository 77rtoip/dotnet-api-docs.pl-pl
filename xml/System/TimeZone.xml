<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8f9d216546f929c77f5a7b673db88580c758651" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69419253" /></Metadata><TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje strefę czasową.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa jest regionem geograficznym, w którym jest używany ten sam czas standardowy.  
  
> [!IMPORTANT]
>  Jeśli to możliwe, użyj <xref:System.TimeZoneInfo> klasy zamiast <xref:System.TimeZone> klasy.  
  
 Korzystając z <xref:System.TimeZone> klasy, można pobrać informacje o bieżącej strefie czasowej i skonwertować czas lokalny na uniwersalny czas koordynowany (UTC) lub odwrotnie. Nie można jednak używać <xref:System.TimeZone> klasy do reprezentowania stref czasowych innych niż strefa lokalna lub do obsługi konwersji daty i godziny z jednej strefy czasowej na inną. W tym celu należy użyć <xref:System.TimeZoneInfo> klasy. Za pomocą tej klasy można pobrać informacje dotyczące dowolnej strefy czasowej zdefiniowanej w systemie lokalnym, utworzyć niestandardowe strefy czasowe i przekonwertować czasy z jednej strefy czasowej na inną.  
  
 <xref:System.TimeZone> Klasa obsługuje tylko jedną regułę korekty czasu letniego dla lokalnej strefy czasowej. W związku z tym <xref:System.TimeZone> Klasa może dokładnie raportować informacje o czasie letnim lub konwertować między czasem UTC a czasem lokalnym tylko dla okresu, w którym obowiązuje Najnowsza reguła dopasowywania. Z kolei <xref:System.TimeZoneInfo> Klasa obsługuje wiele reguł korekty, co umożliwia współpracę z danymi strefy czasowej historycznej.  
  
   
  
## Examples  
 Poniższy przykład odwołuje się do i `TimeZone` wyświetla wybrane elementy klasy.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Oprócz <see langword="abstract" /> zapewniania implementacji dla elementów członkowskich (oznaczonych <see langword="MustOverride" /> w Visual Basic), ważne jest, aby klasy pochodzące z <see cref="T:System.TimeZone" /> przesłaniać domyślne zachowanie <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> metody. Wynika to z faktu, że <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> domyślne zachowanie w .NET Framework w wersji 2,0 nie zależy od wywołania do <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, podobnie jak w .NET Framework wersje 1,0 i 1,1.  Aby uzyskać szczegółowe informacje, <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> Zobacz metodę.</para></block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.TimeZone" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera strefę czasową bieżącego komputera.</summary>
        <value><see cref="T:System.TimeZone" /> Obiekt, który reprezentuje bieżącą lokalną strefę czasową.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A> Właściwość odpowiada<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład odwołuje się `CurrentTimeZone` do właściwości i wyświetla nazwy czasu standardowego i czasu letniego dla lokalnej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Dane lokalnej strefy czasowej są buforowane <see cref="P:System.TimeZone.CurrentTimeZone" /> po raz pierwszy są używane do pobierania informacji o strefie czasowej. Jeśli lokalna strefa czasowa systemu ulegnie zmianie, <see cref="P:System.TimeZone.CurrentTimeZone" /> właściwość nie odzwierciedla tej zmiany. Jeśli musisz obsługiwać zmiany strefy czasowej, gdy aplikacja jest uruchomiona, użyj <see cref="T:System.TimeZoneInfo" /> klasy i <see cref="M:System.TimeZoneInfo.ClearCachedData" /> Wywołaj metodę.</para></block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę strefy czasowej czasu letniego.</summary>
        <value>Nazwa strefy czasowej czasu letniego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli czas letni nie jest używany w strefie czasowej, zwracany jest pusty ciąg ("").  
  
 <xref:System.TimeZone.DaylightName%2A> Właściwość odpowiada<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład zawiera odwołania i wyświetla `DaylightName` Właściwość bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok, w którym obowiązuje okres czasu letniego.</param>
        <summary>Zwraca okres czasu letniego dla danego roku.</summary>
        <returns>Obiekt, który zawiera datę początkową i końcową czasu letniego w <paramref name="year" />. <see cref="T:System.Globalization.DaylightTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługiwany jest tylko jeden okres czasu letniego na rok.  
  
 Jeśli czas letni nie jest używany w <xref:System.Globalization.DaylightTime> bieżącej strefie czasowej, wartość zwracana jest obiektem, gdzie <xref:System.Globalization.DaylightTime.Start%2A> wartość i <xref:System.TimeSpan> <xref:System.Globalization.DaylightTime.End%2A> jest <xref:System.DateTime.MinValue?displayProperty=nameWithType>, a wartość <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> jest inicjowana do 0 taktów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.</exception>
        <block subset="none" type="usage"><para>Ponieważ Klasa obsługuje tylko jedną regułę dostosowania czasu letniego <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> , Metoda stosuje bieżącą regułę korekty do dowolnego roku, niezależnie od tego, czy reguła korekty rzeczywiście stosuje się do tego roku. <see cref="T:System.TimeZone" /> Przy założeniu, że sam system operacyjny ma dokładne dane dla danego roku, można uzyskać dokładniejszy wynik, pracując z tablicą <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów zwracanych <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> przez metodę. <see cref="P:System.Globalization.DaylightTime.Start" />Właściwości, <see cref="P:System.Globalization.DaylightTime.End" /> i<see cref="P:System.Globalization.DaylightTime.Delta" /> odpowiadają właściwościom ,<see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />i .<see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" /></para></block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Wartość daty i godziny.</param>
        <summary>Zwraca przesunięcie uniwersalnego czasu koordynowanego (UTC) dla określonego czasu lokalnego.</summary>
        <returns>Przesunięcie uniwersalnego czasu koordynowanego (UTC) <paramref name="time" />od.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca przesunięcie lub różnicę między `time` parametrem i uniwersalnym czasem koordynowanym (UTC). To znaczy:  
  
 `time`= UTC + przesunięcie  
  
 Metoda interpretuje strefę `time` czasową na podstawie jej <xref:System.DateTime.Kind%2A> właściwości. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwości jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, metoda zwraca przesunięcie lokalnej strefy czasowej. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwości jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, Metoda <xref:System.TimeSpan.Zero?displayProperty=nameWithType>zwraca przesunięcie równe.  
  
 Jeśli lokalna strefa czasowa zaobserwuje czas letni, <xref:System.TimeZone.GetUtcOffset%2A> stosuje bieżącą regułę korekty do `time` podczas określania przesunięcia lokalnej strefy czasowej. Oznacza to, że przesunięcie zwrócone przez <xref:System.TimeZone.GetUtcOffset%2A> odzwierciedla, `time` czy przypada w czasie standardowym strefy czasowej, czy czas letni.  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A> Metoda rozpoznaje tylko bieżącą regułę korekty czasu letniego dla lokalnej strefy czasowej. W związku z tym jest gwarantowane dokładne zwrócenie przesunięcia UTC czasu lokalnego tylko w okresie, w którym obowiązuje Najnowsza reguła korygowania. Może zwracać niedokładne wyniki, jeśli `time` jest to historyczna wartość daty i godziny, która była objęta poprzednią regułą korekty.  
  
 <xref:System.TimeZone.GetUtcOffset%2A> Metoda odpowiada<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metodzie. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metody.  
  
 Ponieważ wartość daty i godziny reprezentowana przez `time` i przesunięcia wartości z UTC nie są ściśle sprzężone, lokalna lub nieokreślona wartość daty i godziny może zwrócić inną wartość przesunięcia w przypadku uruchamiania na różnych komputerach lub w przypadku uruchamiania na tym samym komputerze w obszarze różne strefy czasowe. Jeśli to zachowanie jest niepożądane, zamiast tego <xref:System.DateTimeOffset> Użyj wartości. Typ <xref:System.DateTimeOffset> danych ściśle Couples wartość daty i godziny z przesunięciem od czasu UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy określona data i godzina przypada w okresie czasu letniego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca wartość wskazującą, czy określona data i godzina przypada w okresie czasu letniego.</summary>
        <returns><see langword="true" />Jeśli <paramref name="time" /> jest w przedziale czasu letniego; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rok, do którego obowiązuje okres czasu letniego, pochodzi od `time` parametru.  
  
 Ponieważ Klasa obsługuje jedną regułę korekty czasu letniego <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> , Metoda stosuje bieżącą regułę korekty do dowolnej daty, niezależnie od tego, czy reguła korekty obowiązywała w tej dacie. <xref:System.TimeZone> Przy założeniu, że sam system operacyjny ma dokładne historyczne dane czasu letniego, dokładniejszy wynik jest dostępny za pomocą <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <param name="daylightTimes">Okres czasu letniego.</param>
        <summary>Zwraca wartość wskazującą, czy określona data i godzina przypada w określonym okresie czasu letniego.</summary>
        <returns><see langword="true" />Jeśli <paramref name="time" /> jest w <paramref name="daylightTimes" />; w przeciwnym <see langword="false" />razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zapewnia te same funkcje co Przeciążenie <xref:System.TimeZone.IsDaylightSavingTime%2A> metody. <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="daylightTimes" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę standardowej strefy czasowej.</summary>
        <value>Nazwa standardowej strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A> Właściwość odpowiada<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości. Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład zawiera odwołania i wyświetla `StandardName` Właściwość bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia tej właściwości na <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Uniwersalny czas koordynowany (UTC).</param>
        <summary>Zwraca czas lokalny odpowiadający określonej wartości daty i godziny.</summary>
        <returns>Obiekt, którego wartością jest czas lokalny, który odnosi się <paramref name="time" />do. <see cref="T:System.DateTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono relacje między `time` parametrem <xref:System.DateTime> a wartością zwracaną przez tę metodę.  
  
|`time`konstruktora|Zachowanie|Wartość zwracana|  
|----------------------|--------------|------------------|  
|Uniwersalny czas koordynowany (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Konwertuje godzinę z czasu UTC na czas lokalny.|Obiekt, którego wartością jest czas lokalny, który odnosi się `time`do. <xref:System.DateTime>|  
|Czas lokalny (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Konwersja nie jest konieczna.|Ta sama <xref:System.DateTime> wartość reprezentowana `time` przez parametr.|  
|Nieokreślony czas (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Przyjęto założenie, że godzina jest UTC i konwertuje ją z czasu UTC na czas lokalny.|Obiekt, którego wartością jest czas lokalny, który odnosi się `time`do. <xref:System.DateTime>|  
  
 Jeśli lokalna strefa czasowa zaobserwuje czas letni, <xref:System.TimeZone.ToLocalTime%2A> stosuje bieżącą regułę korekty do `time` podczas przeprowadzania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A> Metoda rozpoznaje tylko bieżącą regułę korekty czasu letniego dla lokalnej strefy czasowej. W związku z tym gwarantowane jest dokładne zwrócenie czasu lokalnego odpowiadającego określonemu czasowi UTC tylko w czasie, w którym obowiązuje Najnowsza reguła korygowania. Może zwracać niedokładne wyniki, jeśli `time` jest to historyczna wartość daty i godziny, która była objęta poprzednią regułą korekty.  
  
 Metoda odnosi <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> się do metody z `destinationTimeZone` parametrem ustawionym na <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. <xref:System.TimeZone.ToLocalTime%2A> Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Chociaż nie jest to wymagane, w większości przypadków klasy pochodne działające w .NET Framework wersja 2,0 powinna zastąpić domyślną implementację tej metody. W .NET Framework wersje 1,0 i 1,1 <see langword="ToLocalTime" /> Metoda <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> wywoływana i dostosowana do czasu letniego podczas powrotu czasu lokalnego. Jednak począwszy od .NET Framework 2,0, zachowanie implementacji domyślnej zależy od <see cref="P:System.DateTime.Kind" /> właściwości <paramref name="time" /> parametru. Jeśli wartość jest <see cref="F:System.DateTimeKind.Local" />, ta metoda zwraca <paramref name="time" /> niezmieniony. Jeśli jego wartość <see cref="F:System.DateTimeKind.Utc" /> to lub <see cref="F:System.DateTimeKind.Unspecified" />, ta metoda zakłada <paramref name="time" /> , że jest UTC i konwertuje ją <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> na czas systemu lokalnego bez wywoływania metody.  
  
Poniższy kod zawiera proste przesłonięcie domyślnej implementacji <see langword="ToLocalTime" /> metody. W tym kodzie <see langword="internalTimeZone" /> zmienna reprezentuje wystąpienie <see langword="TimeZone" /> prywatne klasy: 
[!code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [!code-vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para></block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca uniwersalny czas koordynowany (UTC), który odnosi się do określonego czasu.</summary>
        <returns>Obiekt, którego wartością jest uniwersalny czas koordynowany (UTC), który odnosi <paramref name="time" />się do. <see cref="T:System.DateTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli lokalna strefa czasowa zaobserwuje czas letni, <xref:System.TimeZone.ToUniversalTime%2A> stosuje bieżącą regułę korekty `time` do parametru podczas przeprowadzania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A> Metoda rozpoznaje tylko bieżącą regułę korekty czasu letniego dla lokalnej strefy czasowej. W związku z tym gwarantowane jest dokładne zwrócenie uniwersalnego czasu koordynowanego (UTC) odpowiadającego określonemu czasowi lokalnemu tylko w czasie, w którym obowiązuje Najnowsza reguła korygowania. Może zwracać niedokładne wyniki, jeśli `time` jest to historyczna wartość daty i godziny, która była objęta poprzednią regułą korekty.  
  
 `time` Jeśli parametr jest niejednoznaczny, Metoda zakłada, że jest to czas standardowy. (Niejednoznaczny czas to taki, który może być mapowany do czasu standardowego lub czasu letniego w lokalnej strefie czasowej). Jeśli `time` jest to nieprawidłowy czas, metoda po prostu ododejmuje czas lokalny od przesunięcia czasu UTC lokalnej strefy czasowej do zwrócenia czasu UTC. (Nieprawidłowy czas to taka, która nie istnieje ze względu na sposób zastosowania reguł korekty czasu letniego).  
  
 Ponieważ `time` jest interpretowany w odniesieniu do bieżącej strefy czasowej w bieżącym systemie, Data i czas zwracany przez tę metodę mogą się różnić w przypadku uruchamiania aplikacji na różnych komputerach lub na tym samym komputerze z różnymi strefami czasowymi. W przypadkach, w których wartość daty i godziny musi reprezentować pojedynczy, jednoznaczny punkt w czasie, użyj <xref:System.DateTimeOffset> wartości, aby reprezentować czas lokalny.  
  
 <xref:System.DateTime> <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>Metoda odnosi <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> się do przeciążenia metody z parametrem, którego właściwość nie jest równa. <xref:System.TimeZone.ToUniversalTime%2A> Jeśli to możliwe, użyj <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> przeciążenia metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>
