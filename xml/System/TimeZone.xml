<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62215458e791aa2cd511748f97bee5bb8bc6a897" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52381497" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje strefy czasowej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strefa czasowa to region geograficzny, w którym jest używany ten sam (czas standardowy).  
  
> [!IMPORTANT]
>  Możliwe, używaj <xref:System.TimeZoneInfo> klasy zamiast <xref:System.TimeZone> klasy.  
  
 Możesz użyć <xref:System.TimeZone> klasy, aby pobrać informacje o bieżącej strefy czasowej i Konwertowanie godzin od czasu lokalnego do uniwersalnego czasu koordynowanego (UTC) lub na odwrót. Nie można jednak użyć <xref:System.TimeZone> klasy do reprezentowania stref czasowych niż lokalnej strefy lub do obsługi konwersji daty i godziny w jednej strefie czasowej na inny. W tym celu należy użyć <xref:System.TimeZoneInfo> klasy. Ta klasa służy do pobierania informacji o dowolnej strefie czasowej, zdefiniowane w systemie lokalnym, tworzenie niestandardowych stref czasowych i Konwertowanie godzin między strefami czasowymi do innego.  
  
 <xref:System.TimeZone> Klasy obsługuje tylko reguła korekty pojedynczego czasu letniego dla strefy czasu lokalnego. W rezultacie <xref:System.TimeZone> klasy można dokładnie raportuje czasu lub konwersji między czasem UTC i czasem lokalnym tylko w przypadku okres, w którym najnowsze reguły dopasowania jest aktywna. Z kolei <xref:System.TimeZoneInfo> klasa obsługuje wiele reguł dopasowania, co umożliwia pracę z danymi historycznymi strefy czasowej.  
  
   
  
## Examples  
 Poniższy przykład odwołania i wyświetla wybrane `TimeZone` klasy elementów.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Oprócz dostarczając implementacje dla jego <see langword="abstract" /> elementów członkowskich (typy oznaczone <see langword="MustOverride" /> w języku Visual Basic), jest ważne, że klasy pochodne klasy <see cref="T:System.TimeZone" /> zastąpić domyślne zachowanie <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> metody. Jest to spowodowane domyślne zachowanie <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> w programie .NET Framework w wersji 2.0 nie zależy od wywołania <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, tak jak w .NET Framework w wersji 1.0 i 1.1.  Aby uzyskać więcej informacji, zobacz <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> metody.</para>
    </block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.TimeZone" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera strefy czasowej bieżącego komputera.</summary>
        <value>A <see cref="T:System.TimeZone" /> obiekt, który reprezentuje bieżący lokalnej strefy czasowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości. Możliwe, używaj <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Następujące odwołania przykład `CurrentTimeZone` właściwości i wyświetla nazwy (czas standardowy) i czasu letniego dla strefy czasu lokalnego.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Dane strefy czasu lokalnego jest buforowana po <see cref="P:System.TimeZone.CurrentTimeZone" /> najpierw służy do pobierania informacji o strefie czasowej. Jeśli system użytkownika lokalnego zmiany strefy czasowej później, <see cref="P:System.TimeZone.CurrentTimeZone" /> właściwość nie będzie odzwierciedlał tę zmianę. Jeśli wymagana jest obsługa zmiany strefy czasowej podczas aplikacja jest uruchomiona, należy użyć <see cref="T:System.TimeZoneInfo" /> klasy i wywołanie jego <see cref="M:System.TimeZoneInfo.ClearCachedData" /> metody.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę strefy czasu letniego.</summary>
        <value>Nazwa strefy zmiany czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli czas letni nie jest używany w strefie czasowej, ciąg pusty ("") jest zwracany.  
  
 <xref:System.TimeZone.DaylightName%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości. Możliwe, używaj <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład odwołania i wyświetla `DaylightName` właściwości bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok, które dotyczą okres czasu.</param>
        <summary>Zwraca okres czasu letniego dla danego roku.</summary>
        <returns>A <see cref="T:System.Globalization.DaylightTime" /> obiekt, który zawiera datę początkową i końcową czasu w <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest obsługiwany tylko jeden okres czasu letniego na rok.  
  
 Jeśli czas letni nie jest używany w bieżącej strefie czasowej, wartość zwracana jest <xref:System.Globalization.DaylightTime> obiektu, gdzie wartość <xref:System.Globalization.DaylightTime.Start%2A> i <xref:System.Globalization.DaylightTime.End%2A> jest <xref:System.DateTime.MinValue?displayProperty=nameWithType>i wartość <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> jest <xref:System.TimeSpan> inicjowana wartością 0 taktów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> jest mniejsza od 1 lub większa niż 9999.</exception>
        <block subset="none" type="usage">
          <para>Ponieważ <see cref="T:System.TimeZone" /> klasy obsługuje tylko jedną regułę dopasowania czasu letniego <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> metoda bieżącej reguły dopasowania jest stosowana do każdego roku, niezależnie od tego, czy reguła korekty są faktycznie stosowane do danego roku. Przy założeniu, że sam system operacyjny ma dokładnych danych dla danego roku, lepszych wyników jest dostępna, pracując nad tablicę <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> obiektów zwróconych przez <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> metody. <see cref="P:System.Globalization.DaylightTime.Start" />, <see cref="P:System.Globalization.DaylightTime.End" />, I <see cref="P:System.Globalization.DaylightTime.Delta" /> właściwości odpowiadają <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />, i <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> właściwości.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Wartość daty i godziny.</param>
        <summary>Zwraca przesunięcie skoordynowanego czasu uniwersalnego (UTC) dla określonego czasu lokalnego.</summary>
        <returns>Przesunięcie skoordynowanego czasu uniwersalnego (UTC) od <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca przesunięcie lub różnicy między `time` parametr i uniwersalny czas koordynowany (UTC). To znaczy:  
  
 `time` = UTC + przesunięcie  
  
 Metoda interpretuje strefę czasową `time` na podstawie jego <xref:System.DateTime.Kind%2A> właściwości. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> lub <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, metoda zwraca przesunięcie lokalnej strefy czasowej. Jeśli wartość <xref:System.DateTime.Kind%2A> właściwość <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, metoda zwraca przesunięcie równa <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Jeśli lokalnej strefy czasowej obowiązuje czas letni, <xref:System.TimeZone.GetUtcOffset%2A> stosuje bieżące reguły korekty `time` podczas ustalania, przesunięcie lokalnej strefy czasowej. Oznacza to, że zwrócony przez przesunięcie <xref:System.TimeZone.GetUtcOffset%2A> odzwierciedla czy `time` znajduje się w strefie czasowej (czas standardowy) lub jego czasu letniego.  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A> Metoda rozpoznaje tylko bieżącego czasu letniego korekty reguły dla lokalnej strefy czasowej. W rezultacie jest gwarantowane dokładnie zwrócić przesunięcie czasu UTC czasu lokalnego, tylko w okresie, w którym najnowsze reguły dopasowania jest aktywna. Może zwracać nieprecyzyjne wyniki, jeśli `time` jest historyczne wartość daty i godziny będący podlegają poprzedniego reguła korekty.  
  
 <xref:System.TimeZone.GetUtcOffset%2A> Metody odpowiada <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metody. Możliwe, używaj <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> metody.  
  
 Ponieważ wartość daty i godziny są reprezentowane przez `time` tę wartość przesunięcie względem czasu UTC są nie ściśle powiązane, lokalnej lub nieokreślony datę i wartości w czasie może zwracać różne wartości przesunięcia, podczas uruchamiania na różnych komputerach lub uruchomienia na tym samym komputerze, w obszarze różnych strefach czasowych. Jeśli to zachowanie jest niepożądany, należy użyć <xref:System.DateTimeOffset> jest wartość. <xref:System.DateTimeOffset> — Typ danych ściśle couples wartości daty i godziny przy użyciu jego przesunięcie względem czasu UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy do określonej daty i godziny znajduje się w przedziale czasu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca wartość wskazującą, czy określonej daty i godziny znajduje się w przedziale czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="time" /> znajduje się w letni, co umożliwia zaoszczędzenie czasu okres; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rok, do której stosują się okres czasu jest tworzony na podstawie `time` parametru.  
  
 Ponieważ <xref:System.TimeZone> klasa obsługuje regułę dopasowania jednego czasu letniego <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> metoda stosowana bieżącej reguły dopasowania na dowolną datę, niezależnie od tego, czy reguła korekty był obowiązywać w tym dniu. Przy założeniu, że sam system operacyjny zawiera dane dokładne historyczne czasu letniego, bardziej precyzyjne wynik jest dostępna za pomocą <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody. Możliwe, używaj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <param name="daylightTimes">To be added.</param>
        <summary>Zwraca wartość wskazującą, czy określonej daty i godziny jest przed upływem określonego czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="time" /> znajduje się w <paramref name="daylightTimes" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Metoda zapewnia taką samą funkcjonalność jak to przeciążenie <xref:System.TimeZone.IsDaylightSavingTime%2A> metody. Możliwe, używaj <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="daylightTimes" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę strefy (czas standardowy).</summary>
        <value>Nazwa strefy (czas standardowy).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A> Właściwość odpowiada <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości. Możliwe, używaj <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład odwołania i wyświetla `StandardName` właściwości bieżącej strefy czasowej.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Próbowano ustawić tę właściwość na <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Czas uniwersalny czas koordynowany (UTC).</param>
        <summary>Zwraca wartość czasu lokalnego, który odpowiada na określoną wartość daty i godziny.</summary>
        <returns>A <see cref="T:System.DateTime" /> obiektu, którego wartość jest czasu lokalnego, który odpowiada <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono relację między `time` parametru i <xref:System.DateTime> wartość zwrócona przez tę metodę.  
  
|`time` Parametr|Zachowanie|Wartość zwracana|  
|----------------------|--------------|------------------|  
|Czas uniwersalny czas koordynowany (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Konwertuje czas względem czasu UTC na czas lokalny.|A <xref:System.DateTime> obiektu, którego wartość jest czasu lokalnego, który odpowiada `time`.|  
|Czas lokalny (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Konwersja nie jest konieczne.|Taki sam <xref:System.DateTime> wartością reprezentowaną przez `time` parametru.|  
|Nieokreślony czas (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Przyjęto założenie, że czas jest czasem UTC i konwertuje go z czasu UTC na czas lokalny.|A <xref:System.DateTime> obiektu, którego wartość jest czasu lokalnego, który odpowiada `time`.|  
  
 Jeśli w lokalnej strefie czasowej obowiązuje czas letni, <xref:System.TimeZone.ToLocalTime%2A> stosuje bieżące reguły korekty `time` podczas wykonywania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A> Metoda rozpoznaje tylko bieżącego czasu letniego korekty reguły dla lokalnej strefy czasowej. W rezultacie jest gwarantowane dokładnie zwrócić czasu lokalnego, odpowiadających określonym czasie UTC tylko w okresie, w którym najnowsze reguły dopasowania jest aktywna. Może zwracać nieprecyzyjne wyniki, jeśli `time` jest historyczne wartość daty i godziny będący podlegają poprzedniego reguła korekty.  
  
 <xref:System.TimeZone.ToLocalTime%2A> Metody odpowiada <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> metody z jego `destinationTimeZone` parametr <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Możliwe, używaj <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Chociaż nie jest wymagany, w większości przypadków klasy pochodne działających w ramach platformy .NET Framework w wersji 2.0 powinny przesłaniać Domyślna implementacja tej metody. W .NET Framework w wersji 1.0 i 1.1 <see langword="ToLocalTime" /> metodę o nazwie <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> metody i dostosowana do czasu, gdy zwracany jest czas lokalny. Począwszy od programu .NET Framework 2.0, zachowanie domyślne wdrożenie zależy jednak <see cref="P:System.DateTime.Kind" /> właściwość <paramref name="time" /> parametru. Jeśli wartość to <see cref="F:System.DateTimeKind.Local" />, Metoda ta zwraca <paramref name="time" /> bez zmian. Jeśli wartość <see cref="F:System.DateTimeKind.Utc" /> lub <see cref="F:System.DateTimeKind.Unspecified" />, ta metoda przyjmuje <paramref name="time" /> jest czasem UTC i konwertuje ją na lokalną godziną systemową bez wywoływania <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> metody.  
  
Poniższy kod zawiera proste zastępowania domyślna Implementacja klasy <see langword="ToLocalTime" /> metody. W tym kodzie <see langword="internalTimeZone" /> zmiennej reprezentuje wystąpienie prywatnej <see langword="TimeZone" /> klasy: 
[! code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [! kodu vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Data i godzina.</param>
        <summary>Zwraca uniwersalnego czasu koordynowanego (UTC), która odnosi się do określonego czasu.</summary>
        <returns>A <see cref="T:System.DateTime" /> obiektu, którego wartość jest uniwersalny czas koordynowany (UTC), umożliwiająca <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli lokalnej strefy czasowej obowiązuje czas letni, <xref:System.TimeZone.ToUniversalTime%2A> stosuje bieżące reguły korekty `time` parametr podczas wykonywania konwersji.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A> Metoda rozpoznaje tylko bieżącego czasu letniego korekty reguły dla lokalnej strefy czasowej. W rezultacie jest gwarantowane dokładnie zwrócić uniwersalnego czasu koordynowanego (UTC) odpowiadający określonego czasu lokalnego, tylko w okresie, w którym najnowsze reguły dopasowania jest aktywna. Może zwracać nieprecyzyjne wyniki, jeśli `time` jest historyczne wartość daty i godziny będący podlegają poprzedniego reguła korekty.  
  
 Jeśli `time` parametr jest niejednoznaczny czas, metoda zakłada jest (czas standardowy). (Niejednoznaczny czas jest taki, który można mapować na czas standardowy lub do czasu letniego w lokalnej strefie czasowej). Jeśli `time` jest nieprawidłowy, metoda odejmuje po prostu czas lokalny z lokalnej strefy czasowej przesunięcie czasu UTC do zwrócenia czasu UTC. (Nieprawidłowa godzina jest taki, który nie istnieje ze względu na stosowanie reguł dopasowania czasu letniego).  
  
 Ponieważ `time` jest interpretowany w odniesieniu do bieżącej strefy czasowej w bieżącym systemie datę i godzinę zwracanego przez tę metodę mogą się różnić, jeśli aplikacja jest uruchamiana na różnych komputerach lub na tym samym komputerze przy użyciu różnych strefach czasowych. W przypadkach, w których wartości daty i godziny musi reprezentować pojedynczy, jednoznaczną punkt w czasie, należy użyć <xref:System.DateTimeOffset> wartość do reprezentowania czasu lokalnego.  
  
 <xref:System.TimeZone.ToUniversalTime%2A> Metody odpowiada <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> przeciążenie metody z <xref:System.DateTime> parametru którego <xref:System.DateTime.Kind%2A> właściwość nie jest równa <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Możliwe, używaj <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> przeciążenie metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>