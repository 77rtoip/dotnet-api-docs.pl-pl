<Type Name="Tuple&lt;T1,T2,T3,T4&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7427c1ae24f73570a0f6b9da281a533c2f2e025" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428040" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`4&lt;T1, T2, T3, T4&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`4" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Typ pierwszego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T2">Typ drugiego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T3">Typ trzeciego składnika spójnej kolekcji.</typeparam>
    <typeparam name="T4">Typ czwartego składnika spójnej kolekcji.</typeparam>
    <summary>Reprezentuje krotki 4 lub poczwórnej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spójna kolekcja to struktura danych, która ma określoną liczbę i kolejność wartości. <xref:System.Tuple%604> Klasa reprezentuje krotka 4 lub poczwórny zapewnia, czyli krotka zawiera cztery składniki.  
  
 Można utworzyć wystąpienia <xref:System.Tuple%604> obiektu, wywołując jedną <xref:System.Tuple%604.%23ctor%2A> konstruktora lub statycznych <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> metody. Wartość krotki składniki można pobrać przy użyciu tylko do odczytu <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>, i <xref:System.Tuple%604.Item4%2A> wystąpienia właściwości.  
  
 Spójne kolekcje są powszechnie wykorzystywane na cztery różne sposoby:  
  
-   Reprezentowanie jednego zestawu danych. Na przykład spójna kolekcja może reprezentować rekord bazy danych, a jej składniki mogą reprezentować poszczególne pola rekordu.  
  
-   Zapewnienie łatwego dostępu do zestawu danych i możliwości wykonywania w nim różnych operacji. W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiekty, które zawierają nazwy baseball pitchers, liczba innings one pitched i Liczba uruchomień wypracowana (elementy, które są oceniane bez obsługuje błędy) i trafienia, że ich porzucił. Tablica jest przekazywana do `ComputeStatistics` metodę, która oblicza średnią Uruchom wypracowana każdego kostkę (średnia liczba uruchomień przekazanego w grze inning 9) i średnia liczba trafień przekazanych na inning. Metoda używa również tych dwóch średnie do obliczenia średniej hipotetyczny skuteczności.  
  
     [!code-csharp[System.Tuple\`4.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`4.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.class/vb/example1.vb#1)]  
  
-   Aby zwrócić wartości wielu z metody bez użycia `out` parametrów (C#) lub `ByRef` parametry (w języku Visual Basic). Na przykład poprzednim przykładzie zwraca jego obliczona statystyki, wraz z nazwą kostkę w tablicy <xref:System.Tuple%604> obiektów.  
  
-   Przekazywanie wielu wartości do metody za pomocą jednego parametru. Na przykład <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> metoda ma jeden parametr, który pozwala na określanie jedną wartość do metody, która wykonuje wątek przy uruchamianiu. Jeśli podasz <xref:System.Tuple%604> obiekt jako argument metody, możesz podać procedury uruchomienia wątku z czterech elementów danych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.#ctor(`0,`1,`2,`3)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; : 'T1 * 'T2 * 'T3 * 'T4 -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; (item1, item2, item3, item4)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <param name="item1">Wartość pierwszego składnika spójnej kolekcji.</param>
        <param name="item2">Wartość drugiego składnika spójnej kolekcji.</param>
        <param name="item3">Wartość trzeciego składnika spójnej kolekcji.</param>
        <param name="item4">Wartość czwartego składnika spójnej kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Tuple`4" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również użyć statycznych <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> metody do tworzenia wystąpienia obiektu spójnej kolekcji 4 bez konieczności jawnego określania typów jego składniki. W poniższym przykładzie użyto <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> metody tworzenia wystąpienia których elementy są typu krotki 4 <xref:System.String>, <xref:System.Double>, <xref:System.Double>, i <xref:System.Double>.  
  
 [!code-csharp[System.Tuple.Create#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#7)]
 [!code-vb[System.Tuple.Create#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#7)]  
  
 Jest to równoważne następujące wywołanie do <xref:System.Tuple%604.%23ctor%2A> konstruktora klasy.  
  
 [!code-csharp[System.Tuple.Create#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#8)]
 [!code-vb[System.Tuple.Create#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy bieżący <see cref="T:System.Tuple`4" /> obiekt jest taki sam jak określony obiekt.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj` Parametr jest uznawany za taki sam jak bieżące wystąpienie w następujących warunkach:  
  
-   Jest <xref:System.Tuple%604> obiektu.  
  
-   Jego cztery składniki mają ten sam typ jak bieżące wystąpienie.  
  
-   Jego cztery składniki są takie same jak bieżące wystąpienie. Równość jest określana przez domyślny moduł porównywania równości obiektów dla każdego składnika.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiektów, które zawierają dane dotyczące temperatur na trzy razy w określonym dniu. <xref:System.Tuple%604.Equals%28System.Object%29> Metoda jest wywoływana w celu porównania co <xref:System.Tuple%604> obiektu z każdym innym <xref:System.Tuple%604> obiektu. Przedstawia dane wyjściowe, które <xref:System.Tuple%604.Equals%28System.Object%29> metoda zwraca `true` tylko wtedy, gdy wszystkie cztery składniki <xref:System.Tuple%604> obiekty mają takie same wartości.  
  
 [!code-csharp[System.Tuple\`4.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`4.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość skrótu dla bieżącego <see cref="T:System.Tuple`4" /> obiektu.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`4" /> pierwszy składnik obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`4" /> pierwszy składnik obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%604.Item1%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%604.Item1%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%604> obiektu i pobierania pierwszego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiektów, których elementy zawierają nazwę miejscowości, miesiąc w roku oraz średnia temperatura wysoki i niski w danym miesiącu. Następnie pobiera i wyświetla wartości każdego składnika.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`4" /> drugi składnik obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`4" /> drugi składnik obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%604.Item2%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%604.Item2%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%604> obiektu i pobierania drugiego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiektów, których elementy zawierają nazwę miejscowości, miesiąc w roku oraz średnia temperatura wysoki i niski w danym miesiącu. Następnie pobiera i wyświetla wartości każdego składnika.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`4" /> trzecim składnikiem obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`4" /> trzecim składnikiem obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%604.Item3%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%604.Item3%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%604> obiektu i pobierania trzeciego elementu z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiektów, których elementy zawierają nazwę miejscowości, miesiąc w roku oraz średnia temperatura wysoki i niski w danym miesiącu. Następnie pobiera i wyświetla wartości każdego składnika.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość bieżącego <see cref="T:System.Tuple`4" /> czwartym składnikiem obiektu.</summary>
        <value>Wartość bieżącego <see cref="T:System.Tuple`4" /> czwartym składnikiem obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamiczne można określić typu <xref:System.Tuple%604.Item4%2A> składnika w jeden z dwóch sposobów:  
  
-   Wywołując `GetType` metody na wartość, która jest zwracana w wyniku <xref:System.Tuple%604.Item4%2A> właściwości.  
  
-   Pobierając <xref:System.Type> obiekt, który reprezentuje <xref:System.Tuple%604> obiektu i pobierania czwartym elementem z tablicy, która jest zwracana przez jego <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano tablicę <xref:System.Tuple%604> obiektów, których elementy zawierają nazwę miejscowości, miesiąc w roku oraz średnia temperatura wysoki i niski w danym miesiącu. Następnie pobiera i wyświetla wartości każdego składnika.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</param>
        <param name="comparer">Obiekt dostarczający niestandardowe reguły na potrzeby porównania.</param>
        <summary>Porównuje bieżący <see cref="T:System.Tuple`4" /> obiektu określony obiekt przy użyciu określona funkcja porównująca i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</summary>
        <returns>Całkowita wskazująca pozycję tego wystąpienia i <paramref name="other" /> w porządku sortowania, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość </term><description> opis </description></listheader><item><term> ujemnej liczby całkowitej </term><description> poprzedza tego wystąpienia <paramref name="other" />.  </description></item><item><term> Zero </term><description> to wystąpienie i <paramref name="other" /> mieć to samo położenie w kolejności sortowania.  </description></item><item><term> Dodatnia liczba całkowita </term><description> następuje to wystąpienie <paramref name="other" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%604> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralComparable> interfejsu.  
  
 Mimo że tę metodę można wywołać bezpośrednio, najczęściej jest wywoływana przez kolekcję sortowanie metod, które obejmują <xref:System.Collections.IComparer> parametry porządkowania elementów członkowskich kolekcji. Na przykład jest wywoływana przez <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> — metoda i <xref:System.Collections.SortedList.Add%2A> metody <xref:System.Collections.SortedList> obiekt, który zostanie uruchomiony przy użyciu <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> konstruktora.  
  
> [!CAUTION]
>  <xref:System.Tuple%604.System%23Collections%23IStructuralComparable%23CompareTo%28System.Object%2CSystem.Collections.IComparer%29> Metoda jest przeznaczona do użycia w operacji sortowania. Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe. Aby ustalić, czy dwa obiekty są takie same, należy wywołać <xref:System.Tuple%604.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> metody.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.Tuple%604> obiektów, które zawierają dane statystyczne dotyczące baseball pitchers. Elementy danych obejmują nazwę kostkę, liczba innings pitched kostkę wypracowana Uruchom średnia (średnia liczba uruchomień, który ma pozwala na grę) i liczba trafień kostkę została podana w górę. Przykład wyświetla składnika każda krotka w tablicy w kolejności nieposortowana sortuje tablicy, a następnie wywołuje <xref:System.Tuple%604.ToString%2A> do wyświetlenia wartości poszczególne krotki posortowane. Aby posortować tablicy, w przykładzie zdefiniowano ogólnego `PitcherComparer` klasa implementująca <xref:System.Collections.IComparer> interfejsu i sortowanie <xref:System.Tuple%604> obiektów w kolejności rosnącej przez wartość ich trzecim składnikiem (średnia Uruchom wypracowana) zamiast ich pierwszym składnik. Należy pamiętać, że przykładzie nie mogą bezpośrednio wywoływać <xref:System.Tuple%604.System%23Collections%23IStructuralComparable%23CompareTo%28System.Object%2CSystem.Collections.IComparer%29> metody. Ta metoda jest wywoływana przez niejawnie <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> metody dla każdego elementu w tablicy.  
  
 [!code-csharp[System.Tuple\`4.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`4.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> nie jest <see cref="T:System.Tuple`4" /> obiektu.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <param name="comparer">Obiekt definiujący metodę służącą ocenie, czy dwa obiekty są sobie równe.</param>
        <summary>Zwraca wartość wskazującą, czy bieżący <see cref="T:System.Tuple`4" /> obiekt jest taki sam jak określony obiekt na podstawie metody porównania określony.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące wystąpienie jest taki sam jak określony obiekt; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%604> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralEquatable> interfejsu.  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Implementacji jest wywoływana tylko wtedy, gdy `other` nie jest `null`, jeśli można pomyślnie rzutowanie (C#) i przekonwertować (w języku Visual Basic) <xref:System.Tuple%604> obiektów, których elementy mają ten sam typ jak bieżące wystąpienie. <xref:System.Tuple%604.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> Metoda przekazuje pierwszy <xref:System.Tuple%604.Item1%2A> wartości <xref:System.Tuple%604> obiekty do porównania z <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementacji. Jeśli wywołanie tej metody zwraca `true`, metoda jest wywoływana ponownie i przekazany <xref:System.Tuple%604.Item2%2A> wartości dwa <xref:System.Tuple%604> obiektów. Jeśli wywołanie tej metody zwraca `true` ponownie, ma zostać wywołana metoda innej czasu i przekazany <xref:System.Tuple%604.Item3%2A> wartości dwa <xref:System.Tuple%604> obiektów. Jeśli wywołanie tej metody zwraca `true` ponownie, metoda jest wywoływana raz czwartej i przekazany <xref:System.Tuple%604.Item4%2A> wartości dwa <xref:System.Tuple%604> obiektów.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `Item3And4Comparer` klasa implementująca <xref:System.Collections.IEqualityComparer> interfejsu i zmiany sposobu, w jaki <xref:System.Tuple%604> obiekty są oceniane pod kątem równości. Metoda zawsze zwraca `true` po jest przekazywany <xref:System.Tuple%604.Item1%2A> i <xref:System.Tuple%604.Item2%2A> wartości właściwości dwóch <xref:System.Tuple%604> obiektów który wywołuje `obj.Equals` metodę sprawdzania ich <xref:System.Tuple%604.Item3%2A> wartości właściwości. Wywołanie tej metody zwraca wartość true, również wywołuje `obj.Equals` metodę, aby ocenić krotek <xref:System.Tuple%604.Item4%2A> wartości właściwości. W związku z tym testy metoda równości tylko na podstawie wartości z <xref:System.Tuple%604.Item3%2A> i <xref:System.Tuple%604.Item4%2A> właściwości. Dane wyjściowe przedstawia wynik dla zestawu danych <xref:System.Tuple%604> obiektów, które zapisać jego nazwę miejscowości USA, miesiąc w roku i średnia temperatura wysoki i niski w danym miesiącu.  
  
 [!code-csharp[System.Tuple\`4.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`4.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Obiekt których <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> metody oblicza wartość skrótu bieżącego <see cref="T:System.Tuple`4" /> obiektu.</param>
        <summary>Oblicza wartość skrótu dla bieżącego <see cref="T:System.Tuple`4" /> obiektu za pomocą metody określonej obliczeń.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%604> wystąpienia jest rzutowane na <xref:System.Collections.IStructuralEquatable> interfejsu.  
  
 Metoda opakowuje po prostu wywołanie `comparer` obiektu <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementacji.  
  
 Algorytm używany do obliczania skrótu ma zwracać taki sam skrót dla dwóch <xref:System.Tuple%604> obiektów, które są traktowane jako równe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, który ma zostać porównany z bieżącym wystąpieniem.</param>
        <summary>Porównuje bieżący <see cref="T:System.Tuple`4" /> obiekt do określonego obiektu i zwraca liczbę całkowitą, która wskazuje, czy bieżący obiekt jest przed, po lub w tym samym miejscu określony obiekt w kolejności sortowania.</summary>
        <returns>Całkowita wskazująca pozycję tego wystąpienia i <paramref name="obj" /> w porządku sortowania, jak pokazano w poniższej tabeli.  
  
 <list type="table"><listheader><term> Wartość </term><description> opis </description></listheader><item><term> ujemnej liczby całkowitej </term><description> poprzedza tego wystąpienia <paramref name="obj" />.  </description></item><item><term> Zero </term><description> to wystąpienie i <paramref name="obj" /> mieć to samo położenie w kolejności sortowania.  </description></item><item><term> Dodatnia liczba całkowita </term><description> następuje to wystąpienie <paramref name="obj" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Tuple%604> wystąpienia jest rzutowane na <xref:System.IComparable> interfejsu.  
  
 Ta metoda zapewnia <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementację <xref:System.Tuple%604> klasy. Mimo że można bezpośrednio wywołać metody, najczęściej jest wywoływana przez przeciążeń domyślne sortowanie metod, takich jak kolekcja <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> i <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, porządkowania elementów członkowskich kolekcji.  
  
> [!CAUTION]
>  <xref:System.Tuple%604.System%23IComparable%23CompareTo%2A> Metoda jest przeznaczona do użycia w operacji sortowania. Nie należy jej używać, gdy głównym celem porównania jest ustalenie, czy dwa obiekty są sobie równe. Aby ustalić, czy dwa obiekty są takie same, należy wywołać <xref:System.Tuple%604.Equals%2A> metody.  
  
 <xref:System.Tuple%604.System%23IComparable%23CompareTo%2A> Metoda używa domyślna funkcja porównująca obiekt do porównania poszczególnych składników.  
  
   
  
## Examples  
 Poniższy przykład tworzy tablicę <xref:System.Tuple%604> obiektów, których składniki składają się z nazwy, liczba innings pitched i liczba trafień i uruchamia wypracowana przekazanego w kostkę baseball. On Wyświetla składniki każda krotka w tablicy w kolejności nieposortowane, sortuje tablicy, a następnie wywołuje <xref:System.Tuple%604.ToString%2A> Aby wyświetlić poszczególne krotki posortowane. Dane wyjściowe pokazują, że tablica jest posortowana według nazw i który element jest pierwszy. Należy pamiętać, że przykładzie nie mogą bezpośrednio wywoływać <xref:System.Tuple%604.System%23IComparable%23CompareTo%28System.Object%29> metody. Ta metoda jest wywoływana przez niejawnie <xref:System.Array.Sort%28System.Array%29> metody dla każdego elementu w tablicy.  
  
 [!code-csharp[System.Tuple\`4.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`4.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> nie jest <see cref="T:System.Tuple`4" /> obiektu.</exception>
        <altmember cref="M:System.Tuple`4.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Określony indeks <see langword="Tuple" /> elementu. <c>Indeks</c> można z zakresu od 0 do 3.</param>
        <summary>Pobiera wartość określonego <see langword="Tuple" /> elementu.</summary>
        <value>Wartość <see langword="Tuple" /> elementu w określonej pozycji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%604.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> Właściwość jest jawnej implementacji interfejsu. Aby wywołać go, należy rzutowania lub konwersji <xref:System.Tuple%604> do obiektu <xref:System.Runtime.CompilerServices.ITuple> obiektu interfejsu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> jest mniejsza niż 0 lub większy niż 3.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w <see langword="Tuple" />.</summary>
        <value>4, liczba elementów w <see cref="T:System.Tuple`4" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%604.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> Właściwość jest jawnej implementacji interfejsu. Aby wywołać go, należy rzutowania lub konwersji <xref:System.Tuple%604> do obiektu <xref:System.Runtime.CompilerServices.ITuple> obiektu interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący wartość to <see cref="T:System.Tuple`4" /> wystąpienia.</summary>
        <returns>Reprezentacja ciągu <see cref="T:System.Tuple`4" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Długość ciągu zwróconego przez tę metodę ma postać (*Item1*, *Item2*, *Item3*, *Item4*), gdzie *Item1*, *Item2*, *Item3*, i *Item4* reprezentują wartości <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>i <xref:System.Tuple%604.Item4%2A> właściwości, odpowiednio. Jeśli dowolna z wartości właściwości jest `null`, jest reprezentowany jako <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia <xref:System.Tuple%604.ToString%2A> metody. Wyświetla składniki tablicę obiektów 4-spójnej kolekcji, które zawierają nazwę miejscowości, miesiąc roku i wysoki i niski średnia temperatura w danym miesiącu.  
  
 [!code-csharp[System.Tuple\`4.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`4.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>