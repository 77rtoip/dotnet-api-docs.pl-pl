<Type Name="Enum" FullName="System.Enum">
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5fa59-101">Udostępnia klasę podstawową dla wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-102">Wyliczenie to zbiór stałe nazwane, którego typ podstawowy jest dowolnego typu całkowitego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="5fa59-103">Jeśli żaden typ podstawowy jest jawnie zadeklarowana, <xref:System.Int32> jest używany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="5fa59-104"><xref:System.Enum> jest klasą bazową dla wszystkich wyliczenia w programie .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="5fa59-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="5fa59-105">Typy wyliczeniowe są definiowane przez `enum` — słowo kluczowe języka C# i `Enum`... `End Enum` utworzyć w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5fa59-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="5fa59-106"><xref:System.Enum> udostępnia metody porównanie wystąpienia tej klasy, konwertowania wartości wystąpienia na jej reprezentację konwertowanie reprezentację liczby na wystąpienie tej klasy i tworzenia wystąpienia określonego wyliczenie i wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="5fa59-107">Wyliczenie można również traktować jako pole bitowe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="5fa59-108">Aby uzyskać więcej informacji, zobacz [Non-wyłącznie elementy członkowskie i atrybut Flags](#Flags) sekcji i <xref:System.FlagsAttribute> tematu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="5fa59-109">W tym temacie:</span><span class="sxs-lookup"><span data-stu-id="5fa59-109">In this topic:</span></span>  
  
 <span data-ttu-id="5fa59-110">[Tworzenie typu wyliczenia](#Creating) </span><span class="sxs-lookup"><span data-stu-id="5fa59-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="5fa59-111">[Utworzenie wystąpienia typu wyliczenia](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="5fa59-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="5fa59-112">[Najlepsze rozwiązania w zakresie — wyliczenie](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="5fa59-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="5fa59-113">[Wykonywanie operacji z wyliczenia](#Operations) </span><span class="sxs-lookup"><span data-stu-id="5fa59-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="5fa59-114">Wykonywania konwersji</span><span class="sxs-lookup"><span data-stu-id="5fa59-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="5fa59-115">Podczas analizowania wartości wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="5fa59-116">Formatowanie wartości wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="5fa59-117">Iteracja elementy członkowskie wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="5fa59-118">Elementy Członkowskie inne niż na wyłączność i atrybut Flags</span><span class="sxs-lookup"><span data-stu-id="5fa59-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="5fa59-119">Dodawanie metod — wyliczenie</span><span class="sxs-lookup"><span data-stu-id="5fa59-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="5fa59-120">Tworzenie typu wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="5fa59-121">Języki programowania zwykle zawierają składni, aby zadeklarować wyliczenie zawiera zestaw stałe nazwane i ich wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="5fa59-122">Poniższy przykład przedstawia składnię wykorzystywaną przez C# i Visual Basic zdefiniowanie wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="5fa59-123">Tworzy wyliczenie o nazwie `ArrivalStatus` mający trzech elementów członkowskich: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, i `ArrivalStatus.Late`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="5fa59-124">Należy pamiętać, że w obu przypadkach wyliczenia nie jawnie dziedziczy <xref:System.Enum>; relacji dziedziczenia jest niejawnie obsługiwane przez kompilator.</span><span class="sxs-lookup"><span data-stu-id="5fa59-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="5fa59-125">Nigdy nie należy utworzyć których typ podstawowy jest niecałkowity typ wyliczeniowy lub <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="5fa59-126">Chociaż typem wyliczenia można tworzyć przy użyciu odbicia, wywołania metody, które używają wynikowy typ są zawodne i może także zgłaszać dodatkowe wyjątki.</span><span class="sxs-lookup"><span data-stu-id="5fa59-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="5fa59-127">Utworzenie wystąpienia typu wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="5fa59-128">Można utworzyć wystąpienie typu wyliczenia tak samo, jak wystąpienia dowolnego typu wartości: deklarowanie zmiennej i przypisując jedną z wyliczenia do niego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="5fa59-129">Poniższy przykład tworzy `ArrivalStatus` o wartości `ArrivalStatus.OnTime`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="5fa59-130">Można również utworzyć wystąpienie wartością wyliczenia w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="5fa59-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="5fa59-131">Za pomocą funkcji określonym programowania w języku rzutowania (jak C#) lub przekonwertować (tak jak w języku Visual Basic) wartość całkowitą wartością wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="5fa59-132">Poniższy przykład tworzy `ArrivalStatus` obiektu, którego wartość jest `ArrivalStatus.Early` w ten sposób.</span><span class="sxs-lookup"><span data-stu-id="5fa59-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="5fa59-133">Przez wywołanie jego niejawne domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="5fa59-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="5fa59-134">Jak w poniższym przykładzie pokazano, w tym przypadku odpowiednia wartość wyliczenia wystąpienia jest 0.</span><span class="sxs-lookup"><span data-stu-id="5fa59-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="5fa59-135">Jednak to nie jest zawsze wartość prawidłowej stałej w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="5fa59-136">Wywołując <xref:System.Enum.Parse%2A> lub <xref:System.Enum.TryParse%2A> metodę, aby przeanalizować ciągu zawierającego nazwę stała w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="5fa59-137">Aby uzyskać więcej informacji, zobacz [podczas analizowania wartości wyliczenia](#parsing) sekcji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="5fa59-138">Wywołując <xref:System.Enum.ToObject%2A> do przekonwertowania na typ wyliczeniowy wartością całkowitą.</span><span class="sxs-lookup"><span data-stu-id="5fa59-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="5fa59-139">Aby uzyskać więcej informacji, zobacz [wykonywania konwersji](#conversions) sekcji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="5fa59-140">Najlepsze rozwiązania w zakresie — wyliczenie</span><span class="sxs-lookup"><span data-stu-id="5fa59-140">Enumeration best practices</span></span>  
 <span data-ttu-id="5fa59-141">Zaleca się stosować następujące najlepsze rozwiązania, podczas definiowania Typy wyliczeniowe:</span><span class="sxs-lookup"><span data-stu-id="5fa59-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="5fa59-142">Jeśli nie zdefiniowano elementu członkowskiego wyliczenia, którego wartość wynosi 0, należy rozważyć utworzenie `None` stała wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="5fa59-143">Domyślnie pamięć używana na potrzeby wyliczenia jest ustawiana na wartość zero przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="5fa59-144">W związku z tym jeśli nie zostanie zdefiniowana stałą, którego wartość wynosi zero, wyliczenia będzie zawierać niedozwoloną wartość, po jego utworzeniu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="5fa59-145">W przypadku oczywiste domyślne działanie case, aby reprezentować, rozważ użycie wyliczany aplikacji stałej którego wartość wynosi zero do reprezentowania go.</span><span class="sxs-lookup"><span data-stu-id="5fa59-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="5fa59-146">Jeśli nie ma żadnych domyślne działanie case, rozważ użycie Stała wyliczeniowa którego wartość wynosi zero, aby określić przypadek, który nie jest reprezentowany przez żadną wyliczone stałe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="5fa59-147">Nie określaj wyliczone stałe, które są zarezerwowane do użytku w przyszłości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="5fa59-148">Podczas definiowania metody lub właściwości, która ma stałą wyliczone jako wartość, należy wziąć pod uwagę sprawdzania poprawności wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="5fa59-149">Dzieje się tak można rzutować wartość liczbową na typ wyliczeniowy nawet, jeśli nie zdefiniowano wartości numerycznych w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="5fa59-150">Dodatkowe wskazówki na typy wyliczeniowe pola bitowe są stałe, których są wyświetlane w [Non-wyłącznie elementy członkowskie i atrybut Flags](#Flags) sekcji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="5fa59-151">Wykonywanie operacji z wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="5fa59-152">Nie można definiować nowych metod tworzenia wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="5fa59-153">Jednak typem wyliczenia dziedziczy kompletny zestaw statyczne i metody wystąpienia z <xref:System.Enum> klasy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="5fa59-154">Poniższe sekcje przeglądu większość tych metod, oprócz kilka metod, które są często używane podczas pracy z wartości wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="5fa59-155">Wykonywania konwersji</span><span class="sxs-lookup"><span data-stu-id="5fa59-155">Performing conversions</span></span>  
 <span data-ttu-id="5fa59-156">Można konwertować między elementu członkowskiego wyliczenia i jego typem podstawowym za pomocą rzutowanie (w języku C#) lub operatora konwersji (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="5fa59-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="5fa59-157">W poniższym przykładzie użyto operatory rzutowania lub konwersji do wykonywania konwersji zarówno z liczby całkowitej w celu wartością wyliczenia i z wartością wyliczenia na liczbę całkowitą.</span><span class="sxs-lookup"><span data-stu-id="5fa59-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="5fa59-158"><xref:System.Enum> Zawiera również klasy <xref:System.Enum.ToObject%2A> metodę, która konwertuje wartość typu całkowitego na wartość wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="5fa59-159">W poniższym przykładzie użyto <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> metodę, aby przekonwertować <xref:System.Int32> do `ArrivalStatus` wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="5fa59-160">Należy zauważyć, że ponieważ <xref:System.Enum.ToObject%2A> zwraca wartość typu <xref:System.Object>, użyj operatora rzutowania lub konwersji nadal może być konieczne można rzutować obiektu na typ wyliczeniowy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="5fa59-161">Podczas konwersji całkowitą wartością wyliczenia, jest można przypisać wartość, która nie jest rzeczywiście członkiem wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="5fa59-162">Aby tego uniknąć, można przekazać liczby całkowitej w celu <xref:System.Enum.IsDefined%2A> metoda przed przeprowadzeniem konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="5fa59-163">W poniższym przykładzie użyto tej metody, aby określić, czy elementy w tablicy wartości będące liczbami całkowitymi można przekonwertować na `ArrivalStatus` wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="5fa59-164">Mimo że <xref:System.Enum> klasa zawiera jawne implementacje interfejsu z <xref:System.IConvertible> interfejs dla konwersji z wartości wyliczenia na typ całkowity, należy użyć metody <xref:System.Convert> klas, takich jak <xref:System.Convert.ToInt32%2A>, do Wykonaj te konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="5fa59-165">Poniższy przykład przedstawia, jak używasz <xref:System.Enum.GetUnderlyingType%2A> metody wraz z programem <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> metodę, aby przekonwertować wartość wyliczenia na jego typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="5fa59-166">Należy pamiętać, że w tym przykładzie nie wymaga z typem podstawowym typu wyliczania znane w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="5fa59-167">Podczas analizowania wartości wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="5fa59-168"><xref:System.Enum.Parse%2A> i <xref:System.Enum.TryParse%2A> metody umożliwiają konwertowanie reprezentacja ciągu wartości wyliczenia z tą wartością.</span><span class="sxs-lookup"><span data-stu-id="5fa59-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="5fa59-169">Reprezentacja ciągu może być nazwa lub odpowiednia wartość stałej wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="5fa59-170">Należy zwrócić uwagę, metody analizy pomyślnie przekonwertuje reprezentacje ciąg liczb, które nie są członkami określonej wyliczenia, jeśli ciągi można konwertować na wartość typ podstawowy wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="5fa59-171">Aby temu zapobiec, <xref:System.Enum.IsDefined%2A> można wywołać metody w celu zapewnienia wartość wyliczenia nieprawidłowy wynik metody analizy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="5fa59-172">W przykładzie pokazano tego podejścia i przedstawiono oba wywołania <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> i <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="5fa59-173">Należy pamiętać, że nieogólną metodę analizowania zwraca obiekt, który może być konieczne rzutowanie (C#) lub przekonwertować (w języku Visual Basic) na typ wyliczeniowy odpowiednie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="5fa59-174">Formatowanie wartości wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="5fa59-175">Można przekonwertować wartości wyliczenia ich oświadczenia ciąg przez wywołanie metody statycznych <xref:System.Enum.Format%2A> metody, a także przeciążenia wystąpienia <xref:System.Enum.ToString%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="5fa59-176">Ciąg formatu służy do kontrolowania sposobu dokładne, w którym wartość wyliczenia jest reprezentowany jako ciąg.</span><span class="sxs-lookup"><span data-stu-id="5fa59-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="5fa59-177">Aby uzyskać więcej informacji, zobacz [wyliczanie ciągów formatujących](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="5fa59-178">W poniższym przykładzie użyto każdej z obsługiwanych wyliczanie ciągów formatujących ("G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f") można przekonwertować członkiem `ArrivalStatus` wyliczeniu, aby jej reprezentacji ciągu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="5fa59-179">Iteracja elementy członkowskie wyliczenia</span><span class="sxs-lookup"><span data-stu-id="5fa59-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="5fa59-180"><xref:System.Enum> Typ nie implementuje <xref:System.Collections.IEnumerable> lub <xref:System.Collections.Generic.IEnumerable%601> interfejsu, które umożliwią przejść elementów członkowskich kolekcji za pomocą `foreach` (w języku C#) lub `For Each` (w języku Visual Basic) należy utworzyć.</span><span class="sxs-lookup"><span data-stu-id="5fa59-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="5fa59-181">Jednak można wyliczyć elementów członkowskich na dwa sposoby.</span><span class="sxs-lookup"><span data-stu-id="5fa59-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="5fa59-182">Możesz wywołać <xref:System.Enum.GetNames%2A> metoda pobierania tablica ciągów zawierająca nazwy elementy członkowskie wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="5fa59-183">Następnie dla każdego elementu w tablicy ciągów, należy wywołać <xref:System.Enum.Parse%2A> metodę, aby przekonwertować ciągu na wartość wyliczenia równoważne.</span><span class="sxs-lookup"><span data-stu-id="5fa59-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="5fa59-184">To podejście pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="5fa59-185">Możesz wywołać <xref:System.Enum.GetValues%2A> metoda pobierania tablicę zawierającą podstawową wartości w wyliczeniu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="5fa59-186">Następnie dla każdego elementu tablicy, należy wywołać <xref:System.Enum.ToObject%2A> metodę, aby przekonwertować na wartość wyliczenia równoważne do liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="5fa59-187">To podejście pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="5fa59-188">Elementy Członkowskie inne niż na wyłączność i atrybut Flags</span><span class="sxs-lookup"><span data-stu-id="5fa59-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="5fa59-189">Jeden zazwyczaj wyliczenie jest używane do reprezentowania zestaw wartości wykluczają się wzajemnie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="5fa59-190">Na przykład `ArrivalStatus` wystąpienie może mieć wartość `Early`, `OnTime`, lub `Late`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="5fa59-191">Nie ma sensu dla wartości `ArrivalStatus` wystąpienia, aby odzwierciedlić więcej niż jeden stała wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="5fa59-192">W innych przypadkach należy jednak wartość obiektu wyliczenia może zawierać wiele elementy członkowskie wyliczenia i każdy element członkowski reprezentuje pole bitowe wartości wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="5fa59-193"><xref:System.FlagsAttribute> Atrybut może służyć do wskazują, że wyliczenia składa się z bitowego pól.</span><span class="sxs-lookup"><span data-stu-id="5fa59-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="5fa59-194">Na przykład wyliczeń o nazwie `Pets` może używać do określenia rodzaje zwierząt domowych w gospodarstwo domowe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="5fa59-195">Mogą być zdefiniowane w następujący sposób.</span><span class="sxs-lookup"><span data-stu-id="5fa59-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="5fa59-196">`Pets` Wyliczenia mogą być następnie używane jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="5fa59-197">Następujące najlepsze rozwiązania stosuje się podczas definiowania bitowej wyliczenie i stosowanie <xref:System.FlagsAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="5fa59-198">Użyj <xref:System.FlagsAttribute> atrybutu niestandardowego wyliczania tylko wtedy, gdy operacja bitowa (AND, OR wyłączne lub) ma zostać wykonane na wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="5fa59-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="5fa59-199">Zdefiniuj wyliczenie stałe w potęgami liczby dwa, oznacza to, 1, 2, 4, 8 i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="5fa59-200">Oznacza to, że indywidualne flagi w stałych Scalonej wyliczenia nie mogą się pokrywać.</span><span class="sxs-lookup"><span data-stu-id="5fa59-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="5fa59-201">Należy rozważyć utworzenie wyliczany stała dla często używanych flagi kombinacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="5fa59-202">Na przykład, jeśli masz wyliczenie używane dla operacji We/Wy pliku zawierającego stałych wyliczeniowych `Read = 1` i `Write = 2`, należy rozważyć utworzenie Stała wyliczeniowa `ReadWrite = Read OR Write`, który łączy `Read` i `Write` flagi.</span><span class="sxs-lookup"><span data-stu-id="5fa59-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="5fa59-203">Ponadto używane do łączenia z flagami operacji lub może zostać uznane za zaawansowane koncepcji w pewnych okolicznościach, które nie powinny być wymagane dla prostych zadań.</span><span class="sxs-lookup"><span data-stu-id="5fa59-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="5fa59-204">Należy zachować ostrożność, jeśli zdefiniować liczbą ujemną jako stała wyliczenia flag, ponieważ wielu pozycji flagi może być ustawiony na 1, co może zwiększyć mylące kodu i zachęca błędy kodowania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="5fa59-205">Jest to wygodny sposób sprawdzić, czy ustawiono flagę w wartość liczbową wywołać wystąpienie <xref:System.Enum.HasFlag%2A> metody, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="5fa59-206">Odpowiada to wykonywanie operacji i między wartość liczbową i stała wyliczenia flagi, ustawiająca wszystkie bity w wartość liczbową na zero, które nie odpowiadają flagi, a następnie sprawdzenie, czy wynik tej operacji jest równa Flaga wyliczyć stała.</span><span class="sxs-lookup"><span data-stu-id="5fa59-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="5fa59-207">Jest to zilustrowane w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="5fa59-208">Użyj `None` jako nazwa flagi wyliczyć stała, którego wartość wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="5fa59-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="5fa59-209">Nie można użyć `None` stała wyliczenia w operacji i do testowania dla flagi, ponieważ wynik to zawsze zero.</span><span class="sxs-lookup"><span data-stu-id="5fa59-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="5fa59-210">Jednak można wykonać operatorów logicznych, nie bitowe, porównania wartości liczbowych i `None` stała wyliczany można określić, czy wszystkie bity w wartość liczbową zostały ustawione.</span><span class="sxs-lookup"><span data-stu-id="5fa59-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="5fa59-211">Jest to zilustrowane w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="5fa59-212">Definiuje wartości wyliczenia wyłącznie w celu utworzenia duplikatów stan wyliczenia sam.</span><span class="sxs-lookup"><span data-stu-id="5fa59-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="5fa59-213">Na przykład nie definiują wyliczany stałą, której jedynie oznacza koniec wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="5fa59-214">Jeśli trzeba określić ostatniej wartości wyliczenia, sprawdź jawnie dla tej wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="5fa59-215">Ponadto można wykonać sprawdzania zakresu stała wyliczenia imię i nazwisko, jeśli wszystkie wartości w zakresie są prawidłowe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="5fa59-216">Dodawanie metod — wyliczenie</span><span class="sxs-lookup"><span data-stu-id="5fa59-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="5fa59-217">Ponieważ Typy wyliczeniowe są zdefiniowane przez struktury języka, takich jak `enum` (C#) i `Enum` (Visual Basic), nie można definiować niestandardowe metody dla typu wyliczenia innych niż te dziedziczone z metody <xref:System.Enum> klasy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="5fa59-218">Jednak można użyć metody rozszerzenia Dodawanie funkcji do typu konkretnego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="5fa59-219">W poniższym przykładzie `Grades` wyliczenie reprezentuje klas możliwych list, które student może pojawić się w klasie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="5fa59-220">Metody rozszerzenia o nazwie `Passing` jest dodawany do `Grades` wpisz, aby każde wystąpienie tego typu teraz "wie" czy reprezentuje klasy przekazywanie, czy nie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="5fa59-221">`Extensions` Klasa zawiera także statyczne zmiennej odczytu i zapisu, która definiuje klasy minimalna przekazywanie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="5fa59-222">Wartość zwracana `Passing` — metoda rozszerzenia odzwierciedla bieżącą wartość tej zmiennej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-223">W poniższym przykładzie pokazano, do reprezentowania nazwanych wartości i innym wyliczenie do reprezentowania pola bitowe o nazwie przy użyciu wyliczania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5fa59-224">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="5fa59-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa59-225">Inicjuje nowe wystąpienie klasy <see cref="T:System.Enum" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="5fa59-226">Obiekt do porównania, lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa59-227">Porównuje to wystąpienie z określonym obiektem i zwraca wskazanie ich względnych wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="5fa59-228">Podpisem liczba, która określa względne wartości tego wystąpienia i <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="5fa59-229"><list type="table"><listheader><term> Wartość</span><span class="sxs-lookup"><span data-stu-id="5fa59-229"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="5fa59-230"></term><description> Znaczenie</span><span class="sxs-lookup"><span data-stu-id="5fa59-230"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="5fa59-231"></description></listheader><item><term> Mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="5fa59-231"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="5fa59-232"></term><description> Wartość tego wystąpienia jest mniejsza niż wartość <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-232"></term><description> The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="5fa59-233"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="5fa59-233"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="5fa59-234"></term><description> Wartość tego wystąpienia jest równa wartości <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-234"></term><description> The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="5fa59-235"></description></item><item><term> Większa niż zero</span><span class="sxs-lookup"><span data-stu-id="5fa59-235"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="5fa59-236"></term><description> Wartość tego wystąpienia jest większa niż wartość <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-236"></term><description> The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="5fa59-237">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-237">-or-</span></span>  
  
 <span data-ttu-id="5fa59-238"><paramref name="target" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5fa59-239">Poniższy przykład przedstawia użycie `CompareTo` w kontekście `Enum`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-240"><paramref name="target" /> i to wystąpienie nie są tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5fa59-241">To wystąpienie nie jest typem <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, lub <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="5fa59-242">Obiekt do porównania z tym wystąpieniem lub <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-242">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa59-243">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</span><span class="sxs-lookup"><span data-stu-id="5fa59-243">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="5fa59-244"><see langword="true" /> Jeśli <paramref name="obj" /> jest wartością wyliczenia tego samego typu i o tej samej wartości podstawowej jako tego wystąpienia; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-244"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-245"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> Przesłonięcia metody <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> Aby zdefiniować sposób elementy członkowskie wyliczenia są oceniane pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-246">Poniższy przykład przedstawia użycie <xref:System.Enum.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="5fa59-247">W poniższym przykładzie zdefiniowano dwa typy wyliczeniowe, `SledDog` i `WorkDog`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="5fa59-248">`SledDog` Wyliczenie ma dwa elementy członkowskie, `SledDog.AlaskanMalamute` i `SledDog.Malamute`, które mają taką samą wartość podstawowej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="5fa59-249">Wywołanie <xref:System.Enum.Equals%2A> — metoda wskazuje, że te wartości są takie same, ponieważ ich wartości bazowe są takie same.</span><span class="sxs-lookup"><span data-stu-id="5fa59-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="5fa59-250">`SledDog.Malamute` i `WorkDog.Newfoundland` elementów członkowskich mają taką samą wartość podstawowej, mimo że reprezentują wyliczenie różnych typów.</span><span class="sxs-lookup"><span data-stu-id="5fa59-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="5fa59-251">Wywołanie <xref:System.Enum.Equals%2A> — metoda wskazuje, że te wartości nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="5fa59-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-252">Typ wyliczenia wartości do konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-252">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-253">Wartość do konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-253">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="5fa59-254">Format danych wyjściowych do użycia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-254">The output format to use.</span></span></param>
        <summary><span data-ttu-id="5fa59-255">Konwertuje określoną wartość określonego typu wyliczeniowego do reprezentacji ciągu równoważne zgodnie z określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="5fa59-256">Reprezentacja ciągu <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-256">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-257">W poniższej tabeli przedstawiono prawidłowe wartości dla `format` parametru.</span><span class="sxs-lookup"><span data-stu-id="5fa59-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="5fa59-258">Format</span><span class="sxs-lookup"><span data-stu-id="5fa59-258">Format</span></span>|<span data-ttu-id="5fa59-259">Opis</span><span class="sxs-lookup"><span data-stu-id="5fa59-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="5fa59-260">„G” lub „g”</span><span class="sxs-lookup"><span data-stu-id="5fa59-260">"G" or "g"</span></span>|<span data-ttu-id="5fa59-261">Jeśli `value` jest równy nazwanej stałej wyliczenia, nazwa tej stałej jest zwracane; w przeciwnym razie wartość dziesiętną z `value` jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="5fa59-262">Na przykład załóżmy, że tylko stała wyliczenia nosi nazwę czerwony, a jego wartość wynosi 1.</span><span class="sxs-lookup"><span data-stu-id="5fa59-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="5fa59-263">Jeśli `value` jest określony jako 1, ten format zwraca "Red".</span><span class="sxs-lookup"><span data-stu-id="5fa59-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="5fa59-264">Jednak jeśli `value` jest określony jako 2, ten format zwraca "2".</span><span class="sxs-lookup"><span data-stu-id="5fa59-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="5fa59-265">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-265">-or-</span></span><br /><br /> <span data-ttu-id="5fa59-266">Jeśli <xref:System.FlagsAttribute> niestandardowy atrybut jest stosowany do wyliczenia, `value` jest traktowany jako pola bitowego, która zawiera jedną lub więcej flag, które składają się z jednego lub więcej bitów.</span><span class="sxs-lookup"><span data-stu-id="5fa59-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="5fa59-267">Jeśli `value` jest równe kombinację o nazwie wyliczone stałe, listę nazw tych stałych rozdzielonych ogranicznik jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="5fa59-268">`value` jest wyszukiwany flagi zamierza najmniejszą wartość z flagą o największej wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="5fa59-269">Dla każdego Flaga, która odnosi się do pola bitowego w `value`, nazwa stałej jest połączony do listy rozdzielonych ogranicznika.</span><span class="sxs-lookup"><span data-stu-id="5fa59-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="5fa59-270">Wartość tej flagi jest wykluczany z dalszych brany pod uwagę, a wyszukiwanie jest kontynuowane flagę dalej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="5fa59-271">Jeśli `value` nie jest równa kombinację stałych wyliczeniowych dziesiętną o nazwie `value` jest zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="5fa59-272">„X” lub „x”</span><span class="sxs-lookup"><span data-stu-id="5fa59-272">"X" or "x"</span></span>|<span data-ttu-id="5fa59-273">Reprezentuje `value` w formacie szesnastkowym bez znaków "0 x".</span><span class="sxs-lookup"><span data-stu-id="5fa59-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="5fa59-274">„D” lub „d”</span><span class="sxs-lookup"><span data-stu-id="5fa59-274">"D" or "d"</span></span>|<span data-ttu-id="5fa59-275">Reprezentuje `value` w formie dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="5fa59-276">„F” lub „f”</span><span class="sxs-lookup"><span data-stu-id="5fa59-276">"F" or "f"</span></span>|<span data-ttu-id="5fa59-277">Zachowuje się tak samo "G" lub "g", z wyjątkiem <xref:System.FlagsAttribute> nie musi znajdować się na <xref:System.Enum> deklaracji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-278">Poniższy przykład przedstawia użycie `Format` w kontekście `Enum`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5fa59-279"><paramref name="enumType" />, <paramref name="value" />, Lub <paramref name="format" /> parametr jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5fa59-280"><paramref name="enumType" /> Parametr nie jest <see cref="T:System.Enum" /> typu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
 <span data-ttu-id="5fa59-281">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-281">-or-</span></span>  
  
 <span data-ttu-id="5fa59-282"><paramref name="value" /> Jest z poziomu wyliczenia, która różni się w typie z <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="5fa59-283">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-283">-or-</span></span>  
  
 <span data-ttu-id="5fa59-284">Typ <paramref name="value" /> nie jest typem podstawowym typu <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="5fa59-285"><paramref name="format" /> Parametrów zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-285">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5fa59-286"><paramref name="format" /> równa się "X", ale typ wyliczeniowy jest nieznany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-286"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa59-287">Zwraca wartość skrótu dla wartości tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-287">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="5fa59-288">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</span><span class="sxs-lookup"><span data-stu-id="5fa59-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-289">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-289">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-290">Wartość określonej stałej wyliczenia pod względem jego typem podstawowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-290">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="5fa59-291">Pobiera nazwę stała w wyliczeniu określony, która ma określoną wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-291">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="5fa59-292">Ciąg zawierający nazwę stała wyliczenia w <paramref name="enumType" /> o wartości <paramref name="value" />; lub <see langword="null" /> przypadku nieznalezienia takie stałej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-292">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-293">Jeśli wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowej, <xref:System.Enum.GetName%2A> metoda gwarantuje, że zwróci nazwę jednego z tych elementy członkowskie wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-293">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="5fa59-294">Jednak go nie gwarantuje, że zawsze zwróci nazwę elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-294">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="5fa59-295">W związku z tym po wielu elementy członkowskie wyliczenia mają taką samą wartość, kod aplikacji powinno nigdy nie zależą od metody zwraca nazwę określonego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-295">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-296">Poniższy przykład przedstawia użycie `GetName`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-296">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-297"><paramref name="enumType" /> lub <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-297"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-298"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-298"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="5fa59-299">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-299">-or-</span></span>  
  
 <span data-ttu-id="5fa59-300"><paramref name="value" /> nie jest ani typu <paramref name="enumType" /> ani nie ma ten sam typ podstawowy jako <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-300"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-301">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-301">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="5fa59-302">Pobiera tablicę nazw stałych w określonym wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-302">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="5fa59-303">Tablica ciągów nazw stałe <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-303">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-304">Elementy tablicy zwracanej wartości są sortowane według wartości binarne dla stałych wyliczeniowych (to znaczy przez ich wielkość bez znaku).</span><span class="sxs-lookup"><span data-stu-id="5fa59-304">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="5fa59-305">W poniższym przykładzie przedstawiono Wyświetla informacje o tablica zwrócona przez <xref:System.Enum.GetNames%2A> — metoda wyliczania zawierające ujemny, zero oraz wartość dodatnią.</span><span class="sxs-lookup"><span data-stu-id="5fa59-305">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="5fa59-306">W przypadku stałych wyliczeniowych o tej samej wartości kolejności odpowiadających im nazw jest nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="5fa59-306">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-307">Poniższy przykład przedstawia użycie <xref:System.Enum.GetNames%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-307">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-308"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-308"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-309"><paramref name="enumType" /> Parametr nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-309"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa59-310">Zwraca kod typu typ bazowy tego typu wyliczeniowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-310">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-311">Kod typu typu bazowego dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-311">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5fa59-312">Typ wyliczeniowy jest nieznany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-312">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-313">Wyliczenie, którego typem podstawowym zostaną pobrane.</span><span class="sxs-lookup"><span data-stu-id="5fa59-313">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="5fa59-314">Zwraca typ podstawowy wyliczenia określony.</span><span class="sxs-lookup"><span data-stu-id="5fa59-314">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="5fa59-315">Typ podstawowy elementu <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-315">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-316"><xref:System.Enum> Struktury umożliwia wartości może być reprezentowana jako stałe nazwane.</span><span class="sxs-lookup"><span data-stu-id="5fa59-316">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="5fa59-317">Typ danych wartości wyliczenia nosi nazwę jego typem podstawowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-317">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="5fa59-318">Na przykład typ bazowy <xref:System.DayOfWeek> wyliczenia, która składa się z stałe, które reprezentują każdego dnia tygodnia (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>i tak dalej), jest <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-318">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-319">Następujące przykładowe wywołania <xref:System.Enum.GetUnderlyingType%2A> metodę, aby wyświetlić podstawowy typ niektóre elementy członkowskie wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-319">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-320"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-320"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-321"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-321"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-322">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-322">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="5fa59-323">Pobiera tablicę wartości stałe w określonym wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-323">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="5fa59-324">Tablica zawierająca wartości stałe w <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-324">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-325">Elementy tablicy są sortowane według wartości binarne stałych — wyliczenie (to znaczy przez ich wielkość bez znaku).</span><span class="sxs-lookup"><span data-stu-id="5fa59-325">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="5fa59-326">W poniższym przykładzie przedstawiono informacje o tablica zwrócona przez <xref:System.Enum.GetValues%2A> — metoda wyliczania zawierające wartości ujemnej, zero oraz wartość dodatnią.</span><span class="sxs-lookup"><span data-stu-id="5fa59-326">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="5fa59-327"><xref:System.Enum.GetValues%2A> Metoda zwraca tablicę, która zawiera wartość dla każdego członka `enumType` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-327">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="5fa59-328">Jeśli wiele elementów członkowskich mają taką samą wartość, zwracana tablica zawiera zduplikowane wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-328">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="5fa59-329">W takim przypadku wywoływania <xref:System.Enum.GetName%2A> metody z każdej wartości w tablicy zwracane nie przywraca unikatowych nazw przypisane do elementów członkowskich, które mają zduplikowane wartości.</span><span class="sxs-lookup"><span data-stu-id="5fa59-329">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="5fa59-330">Aby pomyślnie pobrać wszystkie elementy członkowskie wyliczenia nazw, należy wywołać <xref:System.Enum.GetNames%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-330">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-331"><xref:System.Enum.GetValues%2A> Nie można wywołać metody przy użyciu odbicia w kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="5fa59-331">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="5fa59-332">Zamiast tego można pobrać wartość wszystkie elementy członkowskie wyliczenia za pomocą <xref:System.Type.GetFields%2A?displayProperty=nameWithType> metody, aby uzyskać tablicę <xref:System.Reflection.FieldInfo> obiektów, które reprezentują elementy członkowskie wyliczenia, a następnie wywołać <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> metody na każdy element tablicy.</span><span class="sxs-lookup"><span data-stu-id="5fa59-332">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="5fa59-333">Poniższy przykład przedstawia tej metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-333">The following example illustrates this technique.</span></span> <span data-ttu-id="5fa59-334">Zdefiniuj wyliczenie następujące w zestawie o nazwie Enumerations.dll wymaga:</span><span class="sxs-lookup"><span data-stu-id="5fa59-334">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="5fa59-335">Zestaw został załadowany w kontekście tylko odbicie <xref:System.Type> obiekt, który reprezentuje `Pets` wystąpienia wyliczenie tablicę <xref:System.Reflection.FieldInfo> obiekty są pobierane i wartości pól są wyświetlane w konsoli.</span><span class="sxs-lookup"><span data-stu-id="5fa59-335">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-336">Poniższy przykład przedstawia użycie <xref:System.Enum.GetValues%2A>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-336">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-337"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-337"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-338"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-338"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5fa59-339">Metoda jest wywoływana przez odbicie w kontekstu reflection-only</span><span class="sxs-lookup"><span data-stu-id="5fa59-339">The method is invoked by reflection in a reflection-only context,</span></span>  
  
 <span data-ttu-id="5fa59-340">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-340">-or-</span></span>  
  
 <span data-ttu-id="5fa59-341"><paramref name="enumType" /> to typ w zestawie załadowanym w kontekstu reflection-only.</span><span class="sxs-lookup"><span data-stu-id="5fa59-341"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="5fa59-342">Wartość wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-342">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="5fa59-343">Określa, czy co najmniej jedno pole bitowe są ustawione w bieżącego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-343">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="5fa59-344"><see langword="true" /> Jeśli pole bitowe lub bitowego pola, które są ustawiane w <paramref name="flag" /> również są ustawione w bieżącym wystąpieniu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-344"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-345"><xref:System.Enum.HasFlag%2A> Metoda zwraca wynik następujące wyrażenie warunkowe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-345">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="5fa59-346">Jeśli podstawową wartość `flag` wynosi zero, metoda zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-346">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="5fa59-347">Jeśli to zachowanie nie jest pożądane, możesz użyć <xref:System.Enum.Equals%2A> metody do testowania pod kątem równości zero i wywołanie <xref:System.Enum.HasFlag%2A> tylko wtedy, gdy podstawowa wartość `flag` jest równa zero, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-347">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="5fa59-348"><xref:System.Enum.HasFlag%2A> Metoda jest przeznaczona do użycia z typów wyliczenia, które są oznaczone ikoną z <xref:System.FlagsAttribute> atrybutu i może służyć do określenia, czy ustawiono wiele pól bitowych.</span><span class="sxs-lookup"><span data-stu-id="5fa59-348">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="5fa59-349">Dla typów wyliczenia, które nie są oznaczone ikoną z <xref:System.FlagsAttribute> atrybutu, albo wywoływać <xref:System.Enum.Equals%2A> metody lub <xref:System.Enum.CompareTo%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-349">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-350">W poniższym przykładzie zdefiniowano `ItemsOrdered` wyliczenie odzwierciedlający kategorii elementy, które klient można uporządkować w restauracji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-350">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="5fa59-351">Przykład sprawdza, czy klient ma uporządkowane zarówno entrée, jak i napój.</span><span class="sxs-lookup"><span data-stu-id="5fa59-351">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-352"><paramref name="flag" /> jest innego typu niż bieżące wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-352"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-353">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-353">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-354">Wartość lub nazwa stałej w <c>enumType</c>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-354">The value or name of a constant in <c>enumType</c>.</span></span></param>
        <summary><span data-ttu-id="5fa59-355">Zwraca wskazuje, czy stałą o określonej wartości istnieje w wyliczeniu określony.</span><span class="sxs-lookup"><span data-stu-id="5fa59-355">Returns an indication whether a constant with a specified value exists in a specified enumeration.</span></span></summary>
        <returns>
          <span data-ttu-id="5fa59-356"><see langword="true" /> Jeśli stała w <paramref name="enumType" /> ma wartość równą <paramref name="value" />; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-356"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-357">`value` Parametr może być jedną z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="5fa59-357">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="5fa59-358">Dowolny element członkowski typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-358">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="5fa59-359">Zmienna, którego wartość jest elementu członkowskiego wyliczenia typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-359">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="5fa59-360">Reprezentacja ciągu nazwy elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-360">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="5fa59-361">Znaki w ciągu musi mieć tej samej litery jako nazwa elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-361">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="5fa59-362">Wartość typu bazowego dla `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-362">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="5fa59-363">Jeśli stałe `enumType` zdefiniować zestaw pól bitowych i `value` zawiera wartości nazwy i wartości podstawowych wielu pól bitowych, <xref:System.Enum.IsDefined%2A> metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-363">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="5fa59-364">Innymi słowy, w przypadku wyliczenia, które definiują zestaw pól bitowych, Metoda określa tylko czy pola bitowego pojedynczego należy do wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-364">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="5fa59-365">Aby ustalić, czy wiele pól bitowych są ustawione w typem wyliczenia, które są oznaczone <xref:System.FlagsAttribute> atrybutu, należy wywołać <xref:System.Enum.HasFlag%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-365">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-366">W poniższym przykładzie zdefiniowano wyliczenie o nazwie `PetType` składający się z bitowego poszczególnych pól.</span><span class="sxs-lookup"><span data-stu-id="5fa59-366">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="5fa59-367">Następnie wywołuje <xref:System.Enum.IsDefined%2A> metody z wartości wyliczenia, ciąg nazwy i wartości złożonego wynikających z wielu pól bitowych ustawienie to możliwe.</span><span class="sxs-lookup"><span data-stu-id="5fa59-367">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-368"><paramref name="enumType" /> lub <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-368"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-369"><paramref name="enumType" /> Nie jest <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-369"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
 <span data-ttu-id="5fa59-370">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-370">-or-</span></span>  
  
 <span data-ttu-id="5fa59-371">Typ <paramref name="value" /> jest wyliczeniem, ale nie jest wyliczenia typu <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-371">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="5fa59-372">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-372">-or-</span></span>  
  
 <span data-ttu-id="5fa59-373">Typ <paramref name="value" /> nie jest typem podstawowym typu <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-373">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5fa59-374"><paramref name="value" /> nie jest typem <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, lub <see cref="T:System.UInt64" />, lub <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-374"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="5fa59-375">Jeśli <paramref name="enumType" /> jest wyliczeniem, która jest zdefiniowana za pomocą <see cref="T:System.FlagsAttribute" /> atrybutu, metoda zwraca <see langword="false" /> Jeśli bit wiele pól w <paramref name="value" /> są ustawione, ale <paramref name="value" /> nie odpowiada wartość wyliczenia złożonego lub, jeśli <paramref name="value" /> jest ciągów nazw wiele flag bitowych.</span><span class="sxs-lookup"><span data-stu-id="5fa59-375">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="5fa59-376">W poniższym przykładzie <c>zwierząt domowych</c> wyliczenie zdefiniowano z <see cref="T:System.FlagsAttribute" /> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-376">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="5fa59-377"><see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> Metoda zwraca <see langword="false" /> gdy przekazujesz ją wartością wyliczenia z bitowego dwa pola (<c>Pets.Dog</c> i <c>Pets.Cat</c>) ustawiona, i gdy przekazujesz ją reprezentację ciągu, który Wartość wyliczenia ("Dog, Cat").</span><span class="sxs-lookup"><span data-stu-id="5fa59-377">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)]
 [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  
  
 <span data-ttu-id="5fa59-378">Można określić, czy wiele pól bitowych są ustawiane przez wywołanie metody <see cref="M:System.Enum.HasFlag(System.Enum)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-378">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5fa59-379">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-379">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-380">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-380">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-381">Ciąg zawierający nazwę lub wartość do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-381">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="5fa59-382">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="5fa59-383">Obiekt typu <paramref name="enumType" /> którego wartość jest reprezentowana przez <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-383">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-384">`value` Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub listę o nazwie stałe rozdzielonych przecinkami (,).</span><span class="sxs-lookup"><span data-stu-id="5fa59-384">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="5fa59-385">Co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-385">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="5fa59-386">Jeśli `value` listę, jest zwracana wartość jest wartością określonej nazwy połączeniu z bitowego `OR` operacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-386">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="5fa59-387">Jeśli `value` jest nazwą, która nie odpowiada nazwanej stałej z `enumType`, metoda wygeneruje <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-387">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="5fa59-388">Jeśli `value` jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu `enumType` wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest `value` przekonwertować na typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="5fa59-388">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="5fa59-389">Jeśli to zachowanie jest niepożądane, wywołanie <xref:System.Enum.IsDefined%2A> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-389">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="5fa59-390">W poniższym przykładzie zdefiniowano `Colors` wyliczenia, wywołania <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <xref:System.Enum.IsDefined%2A> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w `Colors` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-390">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="5fa59-391">Ta operacja jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-391">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-392">W poniższym przykładzie użyto <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> metodę, aby przeanalizować tablicą ciągów, które są tworzone przez wywołanie metody <xref:System.Enum.GetNames%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-392">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="5fa59-393">Ponadto użyto <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> metody, można przeanalizować wartości wyliczenia, która składa się z polem bitowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-393">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-394"><paramref name="enumType" /> lub <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-394"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-395"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-395"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="5fa59-396">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-396">-or-</span></span>  
  
 <span data-ttu-id="5fa59-397"><paramref name="value" /> jest ciągiem pustym lub zawiera tylko biały znak.</span><span class="sxs-lookup"><span data-stu-id="5fa59-397"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
 <span data-ttu-id="5fa59-398">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-398">-or-</span></span>  
  
 <span data-ttu-id="5fa59-399"><paramref name="value" /> jest nazwą, ale nie jest elementem stałe nazwane zdefiniowane dla wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-399"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5fa59-400"><paramref name="value" /> znajduje się poza zakresem typu bazowego dla <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-400"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-401">Typ wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-401">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-402">Ciąg zawierający nazwę lub wartość do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-402">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="5fa59-403"><see langword="true" /> ignorowanie wielkości liter; <see langword="false" /> uznanie case.</span><span class="sxs-lookup"><span data-stu-id="5fa59-403"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="5fa59-404">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-404">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="5fa59-405">Parametr określa, czy operacja jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-405">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="5fa59-406">Obiekt typu <paramref name="enumType" /> którego wartość jest reprezentowana przez <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-406">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-407">`value` Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub listę o nazwie stałe rozdzielonych przecinkami (,).</span><span class="sxs-lookup"><span data-stu-id="5fa59-407">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="5fa59-408">Co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-408">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="5fa59-409">Jeśli `value` listę, jest zwracana wartość jest wartością określonej nazwy połączeniu z bitowego `OR` operacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-409">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="5fa59-410">Jeśli `value` jest nazwą, która nie odpowiada nazwanej stałej z `enumType`, metoda wygeneruje <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-410">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="5fa59-411">Jeśli `value` jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu `enumType` wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest `value` przekonwertować na typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="5fa59-411">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="5fa59-412">Jeśli to zachowanie jest niepożądane, wywołanie <xref:System.Enum.IsDefined%2A> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-412">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="5fa59-413">W poniższym przykładzie zdefiniowano `Colors` wyliczenia, wywołania <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <xref:System.Enum.IsDefined%2A> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w `Colors` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-413">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="5fa59-414">`ignoreCase` Parametr określa, czy ta operacja jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-414">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-415">W poniższym przykładzie użyto <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> metodę, aby przeanalizować tablicą ciągów, które są tworzone przez wywołanie metody <xref:System.Enum.GetNames%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-415">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="5fa59-416">Ponadto użyto <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> metody, można przeanalizować wartości wyliczenia, która składa się z polem bitowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-416">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-417"><paramref name="enumType" /> lub <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-417"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-418"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-418"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="5fa59-419">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-419">-or-</span></span>  
  
 <span data-ttu-id="5fa59-420"><paramref name="value" /> jest to pusty ciąg ("") lub zawiera tylko biały znak.</span><span class="sxs-lookup"><span data-stu-id="5fa59-420"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
 <span data-ttu-id="5fa59-421">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-421">-or-</span></span>  
  
 <span data-ttu-id="5fa59-422"><paramref name="value" /> jest nazwą, ale nie jest elementem stałe nazwane zdefiniowane dla wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-422"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5fa59-423"><paramref name="value" /> znajduje się poza zakresem typu bazowego dla <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-423"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-424">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-424">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-425">Konwertuje wartość bieżącą wartość logiczną na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-425">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-426">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-426">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-427">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-427">Currently not implemented.</span></span> <span data-ttu-id="5fa59-428">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-428">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-429">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-429">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-430">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-430">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-431">Konwertuje bieżącą wartość całkowitą bez znaku 8-bitowych na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-431">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-432">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-432">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-433">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-433">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-434">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-435">Konwertuje wartość bieżący znak Unicode, w zależności od typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-435">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-436">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-436">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-437">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-437">Currently not implemented.</span></span> <span data-ttu-id="5fa59-438">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-438">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-439">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-439">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-440">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-440">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-441">Konwertuje bieżącą wartość <see cref="T:System.DateTime" /> na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-441">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-442">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-442">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-443">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-443">Currently not implemented.</span></span> <span data-ttu-id="5fa59-444">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-444">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-445">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-446">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-446">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-447">Konwertuje bieżącą wartość <see cref="T:System.Decimal" /> na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-447">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-448">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-448">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-449">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-449">Currently not implemented.</span></span> <span data-ttu-id="5fa59-450">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-450">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-451">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-451">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-452">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-452">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-453">Konwertuje bieżącą wartość zmiennoprzecinkową podwójnej precyzji punktu numer na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-453">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-454">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-454">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-455">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-455">Currently not implemented.</span></span> <span data-ttu-id="5fa59-456">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-456">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-457">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-457">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-458">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-458">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-459">Konwertuje bieżącej wartości 16-bitową liczbę całkowitą ze znakiem na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-459">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-460">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-460">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-461">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-462">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-463">Konwertuje bieżącą wartość całkowita 32-bitowy oparty na typie podstawowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-463">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-464">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-465">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-466">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-467">Konwertuje bieżącą wartość całkowita 64-bitowy oparty na typie podstawowym.</span><span class="sxs-lookup"><span data-stu-id="5fa59-467">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-468">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-469">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-470">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-471">Konwertuje bieżącej wartości 8-bitową liczbę całkowitą ze znakiem na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-471">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-472">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-473">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-474">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-475">Konwertuje wartość bieżącą liczbie zmiennoprzecinkowej pojedynczej precyzji, na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-475">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-476">Ten element członkowski zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-476">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-477">Obecnie nie zaimplementowana.</span><span class="sxs-lookup"><span data-stu-id="5fa59-477">Currently not implemented.</span></span> <span data-ttu-id="5fa59-478">Zawsze zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="5fa59-478">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="5fa59-479">We wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="5fa59-479">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="5fa59-480">Typ docelowy konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-480">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="5fa59-481">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-481">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-482">Konwertuje bieżącą wartość na określony typ na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-482">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-483">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-483">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-484">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-484">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-485">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-486">Konwertuje bieżącej wartości 16-bitową liczbę całkowitą bez znaku na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-486">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-487">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-488">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-489">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-490">Konwertuje wartość bieżącą 32-bitowej liczby całkowitej bez znaku na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-490">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-491">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-492">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-493">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="5fa59-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="5fa59-494">Konwertuje bieżącą wartość 64-bitowej liczby całkowitej bez znaku na podstawie typu podstawowego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-494">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="5fa59-495">Przekonwertowana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-496">Używa <xref:System.Convert> do wykonania konwersji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5fa59-497">Konwertuje wartość całkowitą określonego elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-497">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-498">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-498">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-499">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-499">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-500">Konwertuje określony 8-bitową liczbę całkowitą bez znaku do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-500">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-501">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-501">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-502"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-502">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-503">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-503">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-504">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-504">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-505">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-505">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-506">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-506">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-507"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-507"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-508"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-508"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-509">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-509">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-510">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-510">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-511">Konwertuje określony 16-bitową liczbę całkowitą ze znakiem do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-511">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-512">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-512">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-513"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-513">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-514">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-514">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-515">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-515">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-516">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-516">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-517">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-517">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-518"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-518"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-519"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-519"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-520">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-520">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-521">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-521">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-522">Konwertuje określony całkowita 32-bitowej do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-522">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-523">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-523">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-524"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-524">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-525">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-525">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-526">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-526">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-527">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-527">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-528">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-528">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-529"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-529"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-530"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-530"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-531">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-531">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-532">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-532">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-533">Konwertuje określony całkowita 64-bitowej do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-533">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-534">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-534">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-535"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-536">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-537">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-538">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-539">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-540"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-540"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-541"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-541"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-542">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-542">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-543">Konwertuj wartości do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-543">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-544">Konwertuje określony obiekt z wartością całkowitą do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-544">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-545">Obiekt wyliczenia, którego wartość jest <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-545">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-546"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> Metoda konwertuje wartości całkowite `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-547">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-548">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-549">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-550">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-551"><paramref name="enumType" /> lub <paramref name="value" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-551"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-552"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-552"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="5fa59-553">—lub—</span><span class="sxs-lookup"><span data-stu-id="5fa59-553">-or-</span></span>  
  
 <span data-ttu-id="5fa59-554"><paramref name="value" /> nie jest typem <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, lub <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-554"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-555">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-555">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-556">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-556">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-557">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-557">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-558">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-558">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-559"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-559">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-560">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-560">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-561">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-561">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-562">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-562">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-563">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-563">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-564"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-564"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-565"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-565"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-566">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-566">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-567">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-567">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-568">Konwertuje wartość określonej liczby całkowitej bez znaku 16-bitowych do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-568">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-569">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-569">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-570"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-570">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-571">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-571">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-572">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-572">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-573">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-573">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-574">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-574">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-575"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-575"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-576"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-576"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-577">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-577">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-578">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-578">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-579">Konwertuje wartość określonej liczby całkowitej bez znaku 32-bitowej do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-579">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-580">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-580">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-581"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-581">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-582">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-582">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-583">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-583">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-584">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-584">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-585">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-585">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-586"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-586"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-587"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-587"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="5fa59-588">Typ wyliczeniowy, który będzie zwracany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-588">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="5fa59-589">Wartość do konwersji do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-589">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="5fa59-590">Konwertuje wartość określonej liczby całkowitej bez znaku 64-bitowej do elementu członkowskiego wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-590">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="5fa59-591">Wystąpienie wyliczenie ustawioną <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-591">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-592"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> Metoda konwertuje `value` do elementu członkowskiego wyliczenia, których wartości podstawowej jest `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-592">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="5fa59-593">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami `enumType` elementów członkowskich.</span><span class="sxs-lookup"><span data-stu-id="5fa59-593">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="5fa59-594">Aby upewnić się, że `value` jest prawidłową wartością podstawowej `enumType` wyliczenia, przekaż go do <xref:System.Enum.IsDefined%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5fa59-594">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="5fa59-595">Ta metoda konwersji zwraca wartość typu <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-595">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="5fa59-596">Następnie można rzutować go lub przekonwertować go na obiekt typu `enumType`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-596">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5fa59-597"><paramref name="enumType" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-597"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-598"><paramref name="enumType" /> Nie jest <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-598"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5fa59-599">Konwertuje wartość tego wystąpienia na jego równoważną reprezentację w postaci ciągu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-599">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa59-600">Konwertuje wartość tego wystąpienia na jego równoważną reprezentację w postaci ciągu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-600">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="5fa59-601">Ciąg reprezentujący wartość tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-601">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-602">Wartość zwracana jest formatowana przy specyfikator formatu Ogólne ("G").</span><span class="sxs-lookup"><span data-stu-id="5fa59-602">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="5fa59-603">Oznacza to, że jeśli <xref:System.FlagsAttribute> nie dotyczy to typ wyliczeniowy i jest nazwane równe stałą wartość tego wystąpienia, a następnie ciąg zawierający nazwę stałej jest zwracana wartość.</span><span class="sxs-lookup"><span data-stu-id="5fa59-603">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="5fa59-604">Jeśli <xref:System.FlagsAttribute> są stosowane i wartość tego wystąpienia jest kombinacją co najmniej jeden stałe nazwane, a następnie wartość zwracana jest ciąg zawierający listę nazw stałe rozdzielonych ogranicznika.</span><span class="sxs-lookup"><span data-stu-id="5fa59-604">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="5fa59-605">W przeciwnym razie wartość zwracana jest reprezentację ciągu tego wystąpienia wartość liczbową.</span><span class="sxs-lookup"><span data-stu-id="5fa59-605">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="5fa59-606">Aby uzyskać więcej informacji dotyczących formatowania wartości wyliczenia, zobacz [wyliczanie ciągów formatujących](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-606">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="5fa59-607">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-608">W poniższym przykładzie pokazano konwertowania wartości wyliczane na ciąg.</span><span class="sxs-lookup"><span data-stu-id="5fa59-608">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="5fa59-609">Wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowego próba pobrania reprezentację ciągu w nazwie elementu członkowskiego wyliczenia na podstawie jego wartości podstawowej, kodu nie upewnić żadnym założeniu o nazwie, który zwróci metoda.</span><span class="sxs-lookup"><span data-stu-id="5fa59-609">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="5fa59-610">Na przykład następujące wyliczenie definiuje dwa elementy członkowskie, <c>Shade.Gray</c> i <c>Shade.Grey</c>, które mają taką samą wartość podstawowej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-610">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="5fa59-611">Następujące wywołanie metody próbuje pobrać nazwy elementu członkowskiego <c>cień</c> wyliczenie których odpowiednia wartość to 1.</span><span class="sxs-lookup"><span data-stu-id="5fa59-611">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="5fa59-612">Metoda może zwracać "Szarym" lub "Wyjście", a kod, nie należy wprowadzać żadnych założeń, o których zostanie zwrócony ciąg.</span><span class="sxs-lookup"><span data-stu-id="5fa59-612">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)]
 [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="5fa59-613">(przestarzałe)</span><span class="sxs-lookup"><span data-stu-id="5fa59-613">(obsolete)</span></span></param>
        <summary><span data-ttu-id="5fa59-614">Przeciążenie tej metody jest przestarzały; Użyj <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-614">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="5fa59-615">Ciąg reprezentujący wartość tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-615">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="5fa59-616">Ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-616">A format string.</span></span></param>
        <summary><span data-ttu-id="5fa59-617">Konwertuje wartość tego wystąpienia reprezentacji równoważne ciągu w określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="5fa59-617">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="5fa59-618">Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-618">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-619">`format` Parametr może zawierać "G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f" ciągi formatów (ciąg formatu nie jest rozróżniana wielkość liter).</span><span class="sxs-lookup"><span data-stu-id="5fa59-619">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="5fa59-620">Jeśli `format` jest `null` lub ciąg pusty (""), specyfikator formatu Ogólne ("G") jest używany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-620">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="5fa59-621">Aby uzyskać więcej informacji na temat wyliczanie ciągów formatujących i formatowania wartości wyliczenia, zobacz [wyliczanie ciągów formatujących](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-621">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="5fa59-622">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-622">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-623">W poniższym przykładzie pokazano, jak przekonwertować wyliczenia wartości na ciąg.</span><span class="sxs-lookup"><span data-stu-id="5fa59-623">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="5fa59-624"><paramref name="format" /> zawiera nieprawidłową specyfikację.</span><span class="sxs-lookup"><span data-stu-id="5fa59-624"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5fa59-625"><paramref name="format" /> równa się "X", ale typ wyliczeniowy jest nieznany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-625"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="5fa59-626">Wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowego próba pobrania reprezentację ciągu w nazwie elementu członkowskiego wyliczenia na podstawie jego wartości podstawowej, kodu nie upewnić żadnym założeniu o nazwie, który zwróci metoda.</span><span class="sxs-lookup"><span data-stu-id="5fa59-626">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="5fa59-627">Na przykład następujące wyliczenie definiuje dwa elementy członkowskie, <c>Shade.Gray</c> i <c>Shade.Grey</c>, które mają taką samą wartość podstawowej.</span><span class="sxs-lookup"><span data-stu-id="5fa59-627">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="5fa59-628">Następujące wywołanie metody próbuje pobrać nazwy elementu członkowskiego <c>cień</c> wyliczenie których odpowiednia wartość to 1.</span><span class="sxs-lookup"><span data-stu-id="5fa59-628">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="5fa59-629">Metoda może zwracać "Szarym" lub "Wyjście", a kod, nie należy wprowadzać żadnych założeń, o których zostanie zwrócony ciąg.</span><span class="sxs-lookup"><span data-stu-id="5fa59-629">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)]
 [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="5fa59-630">Definicja formatu.</span><span class="sxs-lookup"><span data-stu-id="5fa59-630">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="5fa59-631">(Przestarzałe).</span><span class="sxs-lookup"><span data-stu-id="5fa59-631">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="5fa59-632">Przeciążenie tej metody jest przestarzały; Użyj <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-632">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="5fa59-633">Reprezentacja ciągu wartość tego wystąpienia, określony przez <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-633">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-634">`format` Parametr może zawierać "G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f" ciągi formatów (ciąg formatu nie jest rozróżniana wielkość liter).</span><span class="sxs-lookup"><span data-stu-id="5fa59-634">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="5fa59-635">Jeśli `format` jest `null` lub ciąg pusty (""), specyfikator formatu Ogólne ("G") jest używany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-635">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="5fa59-636">Aby uzyskać więcej informacji na temat wyliczanie ciągów formatujących i formatowania wartości wyliczenia, zobacz [wyliczanie ciągów formatujących](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-636">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="5fa59-637">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz [typy formatowania](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="5fa59-637">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="5fa59-638">Należy określić tylko `format`; `provider` parametru jest przestarzała.</span><span class="sxs-lookup"><span data-stu-id="5fa59-638">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="5fa59-639"><paramref name="format" /> nie zawiera specyfikację prawidłowy format.</span><span class="sxs-lookup"><span data-stu-id="5fa59-639"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5fa59-640"><paramref name="format" /> równa się "X", ale typ wyliczeniowy jest nieznany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-640"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5fa59-641">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-641">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="5fa59-642">Zwracana wartość wskazuje, czy konwersja powiodła się.</span><span class="sxs-lookup"><span data-stu-id="5fa59-642">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="5fa59-643">Typ wyliczenia, do którego można przekonwertować <c>wartość</c>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-643">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="5fa59-644">Reprezentacja ciągu nazwę wyliczenia lub odpowiednia wartość do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-644">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="5fa59-645">Gdy metoda zwróci wartość, <c>wynik</c> zawiera obiekt typu <c>element TEnum</c> którego wartość jest reprezentowana przez <c>wartość</c> Jeśli operacji analizowania zakończy się powodzeniem.</span><span class="sxs-lookup"><span data-stu-id="5fa59-645">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="5fa59-646">W przypadku niepowodzenia operacji analizowania <c>wynik</c> zawiera domyślną wartość typu bazowego dla <c>element TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-646">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="5fa59-647">Należy pamiętać, że ta wartość nie musi być członkiem <c>element TEnum</c> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-647">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="5fa59-648">Ten parametr jest przekazywany niezainicjowany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-648">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="5fa59-649">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-649">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="5fa59-650">Zwracana wartość wskazuje, czy konwersja powiodła się.</span><span class="sxs-lookup"><span data-stu-id="5fa59-650">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="5fa59-651"><see langword="true" /> Jeśli <paramref name="value" /> parametr został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-651"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> jest taka sama jak <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> metody, z wyjątkiem zamiast generowania wyjątku, zwraca `false` Jeśli konwersji nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="5fa59-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="5fa59-653">Eliminuje potrzebę obsługi podczas analizowania reprezentacja ciągu wartości wyliczenia wyjątków.</span><span class="sxs-lookup"><span data-stu-id="5fa59-653">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="5fa59-654">`value` Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub lista stałe nazwane podstawowej wartości rozdzielane przecinkami (,).</span><span class="sxs-lookup"><span data-stu-id="5fa59-654">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="5fa59-655">Jeśli `value` zawiera wiele o nazwie stałe lub wartości, co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-655">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="5fa59-656">Jeśli `value` jest listą, `result` odzwierciedla wartość określonej nazwy i wartości, w połączeniu z bitowego podstawowe `OR` operacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-656">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="5fa59-657">Jeśli `value` jest reprezentację ciągu nazwy wartości wyliczenia, porównanie `value` z wyliczenia nazw jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-657">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="5fa59-658">Jeśli `value` jest nazwą, która nie odpowiada nazwanej stałej z `TEnum`, metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-658">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="5fa59-659">Jeśli `value` jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu `TEnum` wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest `value` przekonwertować na typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="5fa59-659">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="5fa59-660">Jeśli to zachowanie jest niepożądane, wywołanie <xref:System.Enum.IsDefined%2A> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-660">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-661">W poniższym przykładzie zdefiniowano `Colors` wyliczenia, wywołania <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <xref:System.Enum.IsDefined%2A> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w `Colors` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-661">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-662"><paramref name="TEnum" /> nie jest typem wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-662"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="5fa59-663">Typ wyliczenia, do którego można przekonwertować <c>wartość</c>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-663">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="5fa59-664">Reprezentacja ciągu nazwę wyliczenia lub odpowiednia wartość do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="5fa59-664">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="5fa59-665"><see langword="true" /> ignorowanie wielkości liter; <see langword="false" /> wziąć pod uwagę w przypadku.</span><span class="sxs-lookup"><span data-stu-id="5fa59-665"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="5fa59-666">Gdy metoda zwróci wartość, <c>wynik</c> zawiera obiekt typu <c>element TEnum</c> którego wartość jest reprezentowana przez <c>wartość</c> Jeśli operacji analizowania zakończy się powodzeniem.</span><span class="sxs-lookup"><span data-stu-id="5fa59-666">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="5fa59-667">W przypadku niepowodzenia operacji analizowania <c>wynik</c> zawiera domyślną wartość typu bazowego dla <c>element TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="5fa59-667">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="5fa59-668">Należy pamiętać, że ta wartość nie musi być członkiem <c>element TEnum</c> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-668">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="5fa59-669">Ten parametr jest przekazywany niezainicjowany.</span><span class="sxs-lookup"><span data-stu-id="5fa59-669">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="5fa59-670">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</span><span class="sxs-lookup"><span data-stu-id="5fa59-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="5fa59-671">Parametr określa, czy operacja jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-671">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="5fa59-672">Zwracana wartość wskazuje, czy konwersja powiodła się.</span><span class="sxs-lookup"><span data-stu-id="5fa59-672">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="5fa59-673"><see langword="true" /> Jeśli <paramref name="value" /> parametr został przekonwertowany pomyślnie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa59-673"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5fa59-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> jest taka sama jak <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> metody, z wyjątkiem zamiast generowania wyjątku, zwraca `false` Jeśli konwersji nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="5fa59-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="5fa59-675">Eliminuje potrzebę obsługi podczas analizowania reprezentacja ciągu wartości wyliczenia wyjątków.</span><span class="sxs-lookup"><span data-stu-id="5fa59-675">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="5fa59-676">`value` Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub lista stałe nazwane podstawowej wartości rozdzielane przecinkami (,).</span><span class="sxs-lookup"><span data-stu-id="5fa59-676">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="5fa59-677">Jeśli `value` zawiera wiele o nazwie stałe lub wartości, co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w `value`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-677">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="5fa59-678">Jeśli `value` jest listą, `result` odzwierciedla wartość określonej nazwy i wartości, w połączeniu z bitowego podstawowe `OR` operacji.</span><span class="sxs-lookup"><span data-stu-id="5fa59-678">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="5fa59-679">Jeśli `value` jest reprezentację ciągu nazwy wartości wyliczenia, porównanie `value` z wyliczenia nazw zależy od `ignoreCase` parametru.</span><span class="sxs-lookup"><span data-stu-id="5fa59-679">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="5fa59-680">Jeśli `true`, wynik porównania ma bez uwzględniania wielkości liter; w wypadku `false`, jest rozróżniana wielkość liter.</span><span class="sxs-lookup"><span data-stu-id="5fa59-680">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="5fa59-681">Jeśli `value` jest nazwą, która nie odpowiada nazwanej stałej z `TEnum`, metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-681">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="5fa59-682">Jeśli `value` jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu `TEnum` wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest `value` przekonwertować na typ całkowity.</span><span class="sxs-lookup"><span data-stu-id="5fa59-682">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="5fa59-683">Jeśli to zachowanie jest niepożądane, wywołanie <xref:System.Enum.IsDefined%2A> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="5fa59-683">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5fa59-684">W poniższym przykładzie zdefiniowano `Colors` wyliczenia, wywołania <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <xref:System.Enum.IsDefined%2A> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w `Colors` wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-684">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="5fa59-685"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> Metoda używa porównania bez uwzględniania wielkości liter podczas próby skonwertowania reprezentacji ciągu o nazwie stałe wartości wyliczenia równoważne.</span><span class="sxs-lookup"><span data-stu-id="5fa59-685">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5fa59-686"><paramref name="TEnum" /> nie jest typem wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="5fa59-686"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>