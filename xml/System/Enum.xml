<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enum.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c259900d33a657adba6285794460c21b0e374f2a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c259900d33a657adba6285794460c21b0e374f2a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Provides the base class for enumerations.</source>
          <target state="translated">Udostępnia klasę podstawową dla wyliczenia.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An enumeration is a set of named constants whose underlying type is any integral type.</source>
          <target state="translated">Wyliczenie to zbiór stałe nazwane, którego typ podstawowy jest dowolnego typu całkowitego.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If no underlying type is explicitly declared, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> is used.</source>
          <target state="translated">Jeśli żaden typ podstawowy jest jawnie zadeklarowana, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> jest używany.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> is the base class for all enumerations in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> jest klasą bazową dla wszystkich wyliczenia w programie .NET Framework.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration types are defined by the <ph id="ph1">`enum`</ph> keyword in C# and the <ph id="ph2">`Enum`</ph>...<ph id="ph3">`End Enum`</ph> construct in Visual Basic.</source>
          <target state="translated">Typy wyliczeniowe są definiowane przez <ph id="ph1">`enum`</ph> — słowo kluczowe języka C# i <ph id="ph2">`Enum`</ph>... <ph id="ph3">`End Enum`</ph> utworzyć w języku Visual Basic.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> udostępnia metody porównanie wystąpienia tej klasy, konwertowania wartości wystąpienia na jej reprezentację konwertowanie reprezentację liczby na wystąpienie tej klasy i tworzenia wystąpienia określonego wyliczenie i wartości.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also treat an enumeration as a bit field.</source>
          <target state="translated">Wyliczenie można również traktować jako pole bitowe.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section and the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>Non-wyłącznie elementy członkowskie i atrybut Flags<ept id="p1">](#Flags)</ept> sekcji i <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> tematu.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In this topic:</source>
          <target state="translated">W tym temacie:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Creating an enumeration type<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Tworzenie typu wyliczenia<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Instantiating an enumeration type<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Utworzenie wystąpienia typu wyliczenia<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Enumeration best practices<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Najlepsze rozwiązania w zakresie — wyliczenie<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing operations with enumerations<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Wykonywanie operacji z wyliczenia<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing conversions<ept id="p1">](#conversions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Wykonywania konwersji<ept id="p1">](#conversions)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Parsing enumeration values<ept id="p1">](#parsing)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Podczas analizowania wartości wyliczenia<ept id="p1">](#parsing)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Formatting enumeration values<ept id="p1">](#formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Formatowanie wartości wyliczenia<ept id="p1">](#formatting)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Iterating enumeration members<ept id="p1">](#iterating)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Iteracja elementy członkowskie wyliczenia<ept id="p1">](#iterating)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Non-exclusive members and the Flags attribute<ept id="p1">](#Flags)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Elementy Członkowskie inne niż na wyłączność i atrybut Flags<ept id="p1">](#Flags)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Adding enumeration methods<ept id="p1">](#methods)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Dodawanie metod — wyliczenie<ept id="p1">](#methods)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Creating an enumeration type</source>
          <target state="translated">Tworzenie typu wyliczenia</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</source>
          <target state="translated">Języki programowania zwykle zawierają składni, aby zadeklarować wyliczenie zawiera zestaw stałe nazwane i ich wartości.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</source>
          <target state="translated">Poniższy przykład przedstawia składnię wykorzystywaną przez C# i Visual Basic zdefiniowanie wyliczenia.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It creates an enumeration named <ph id="ph1">`ArrivalStatus`</ph> that has three members: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, and <ph id="ph4">`ArrivalStatus.Late`</ph>.</source>
          <target state="translated">Tworzy wyliczenie o nazwie <ph id="ph1">`ArrivalStatus`</ph> mający trzech elementów członkowskich: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, i <ph id="ph4">`ArrivalStatus.Late`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that in both cases, the enumeration does not explicitly inherit from <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; the inheritance relationship is handled implicitly by the compiler.</source>
          <target state="translated">Należy pamiętać, że w obu przypadkach wyliczenia nie jawnie dziedziczy <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; relacji dziedziczenia jest niejawnie obsługiwane przez kompilator.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You should never create an enumeration type whose underlying type is non-integral or <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">Nigdy nie należy utworzyć których typ podstawowy jest niecałkowity typ wyliczeniowy lub <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</source>
          <target state="translated">Chociaż typem wyliczenia można tworzyć przy użyciu odbicia, wywołania metody, które używają wynikowy typ są zawodne i może także zgłaszać dodatkowe wyjątki.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Instantiating an enumeration type</source>
          <target state="translated">Utworzenie wystąpienia typu wyliczenia</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</source>
          <target state="translated">Można utworzyć wystąpienie typu wyliczenia tak samo, jak wystąpienia dowolnego typu wartości: deklarowanie zmiennej i przypisując jedną z wyliczenia do niego.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example instantiates an <ph id="ph1">`ArrivalStatus`</ph> whose value is <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</source>
          <target state="translated">Poniższy przykład tworzy <ph id="ph1">`ArrivalStatus`</ph> o wartości <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also instantiate an enumeration value in the following ways:</source>
          <target state="translated">Można również utworzyć wystąpienie wartością wyliczenia w następujący sposób:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</source>
          <target state="translated">Za pomocą funkcji określonym programowania w języku rzutowania (jak C#) lub przekonwertować (tak jak w języku Visual Basic) wartość całkowitą wartością wyliczenia.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example creates an <ph id="ph1">`ArrivalStatus`</ph> object whose value is <ph id="ph2">`ArrivalStatus.Early`</ph> in this way.</source>
          <target state="translated">Poniższy przykład tworzy <ph id="ph1">`ArrivalStatus`</ph> obiektu, którego wartość jest <ph id="ph2">`ArrivalStatus.Early`</ph> w ten sposób.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling its implicit default constructor.</source>
          <target state="translated">Przez wywołanie jego niejawne domyślnego konstruktora.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>As the following example shows, in this case the underlying value of the enumeration instance is 0.</source>
          <target state="translated">Jak w poniższym przykładzie pokazano, w tym przypadku odpowiednia wartość wyliczenia wystąpienia jest 0.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, this is not necessarily the value of a valid constant in the enumeration.</source>
          <target state="translated">Jednak to nie jest zawsze wartość prawidłowej stałej w wyliczeniu.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> method to parse a string that contains the name of a constant in the enumeration.</source>
          <target state="translated">Wywołując <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> metodę, aby przeanalizować ciągu zawierającego nazwę stała w wyliczeniu.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Parsing Enumeration Values<ept id="p1">](#parsing)</ept> section.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>podczas analizowania wartości wyliczenia<ept id="p1">](#parsing)</ept> sekcji.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert an integral value to an enumeration type.</source>
          <target state="translated">Wywołując <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> do przekonwertowania na typ wyliczeniowy wartością całkowitą.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Performing Conversions<ept id="p1">](#conversions)</ept> section.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>wykonywania konwersji<ept id="p1">](#conversions)</ept> sekcji.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration best practices</source>
          <target state="translated">Najlepsze rozwiązania w zakresie — wyliczenie</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>We recommend that you use the following best practices when you define enumeration types:</source>
          <target state="translated">Zaleca się stosować następujące najlepsze rozwiązania, podczas definiowania Typy wyliczeniowe:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you have not defined an enumeration member whose value is 0, consider creating a <ph id="ph1">`None`</ph> enumerated constant.</source>
          <target state="translated">Jeśli nie zdefiniowano elementu członkowskiego wyliczenia, którego wartość wynosi 0, należy rozważyć utworzenie <ph id="ph1">`None`</ph> stała wyliczenia.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By default, the memory used for the enumeration is initialized to zero by the common language runtime.</source>
          <target state="translated">Domyślnie pamięć używana na potrzeby wyliczenia jest ustawiana na wartość zero przez środowisko uruchomieniowe języka wspólnego.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</source>
          <target state="translated">W związku z tym jeśli nie zostanie zdefiniowana stałą, którego wartość wynosi zero, wyliczenia będzie zawierać niedozwoloną wartość, po jego utworzeniu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</source>
          <target state="translated">W przypadku oczywiste domyślne działanie case, aby reprezentować, rozważ użycie wyliczany aplikacji stałej którego wartość wynosi zero do reprezentowania go.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</source>
          <target state="translated">Jeśli nie ma żadnych domyślne działanie case, rozważ użycie Stała wyliczeniowa którego wartość wynosi zero, aby określić przypadek, który nie jest reprezentowany przez żadną wyliczone stałe.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not specify enumerated constants that are reserved for future use.</source>
          <target state="translated">Nie określaj wyliczone stałe, które są zarezerwowane do użytku w przyszłości.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When you define a method or property that takes an enumerated constant as a value, consider validating the value.</source>
          <target state="translated">Podczas definiowania metody lub właściwości, która ma stałą wyliczone jako wartość, należy wziąć pod uwagę sprawdzania poprawności wartości.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</source>
          <target state="translated">Dzieje się tak można rzutować wartość liczbową na typ wyliczeniowy nawet, jeśli nie zdefiniowano wartości numerycznych w wyliczeniu.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Additional best practices for enumeration types whose constants are bit fields are listed in the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section.</source>
          <target state="translated">Dodatkowe wskazówki na typy wyliczeniowe pola bitowe są stałe, których są wyświetlane w <bpt id="p1">[</bpt>Non-wyłącznie elementy członkowskie i atrybut Flags<ept id="p1">](#Flags)</ept> sekcji.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing operations with enumerations</source>
          <target state="translated">Wykonywanie operacji z wyliczenia</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot define new methods when you are creating an enumeration.</source>
          <target state="translated">Nie można definiować nowych metod tworzenia wyliczenia.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, an enumeration type inherits a complete set of static and instance methods from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">Jednak typem wyliczenia dziedziczy kompletny zestaw statyczne i metody wystąpienia z <ph id="ph1">&lt;xref:System.Enum&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</source>
          <target state="translated">Poniższe sekcje przeglądu większość tych metod, oprócz kilka metod, które są często używane podczas pracy z wartości wyliczenia.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing conversions</source>
          <target state="translated">Wykonywania konwersji</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</source>
          <target state="translated">Można konwertować między elementu członkowskiego wyliczenia i jego typem podstawowym za pomocą rzutowanie (w języku C#) lub operatora konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</source>
          <target state="translated">W poniższym przykładzie użyto operatory rzutowania lub konwersji do wykonywania konwersji zarówno z liczby całkowitej w celu wartością wyliczenia i z wartością wyliczenia na liczbę całkowitą.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class also includes a <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method that converts a value of any integral type to an enumeration value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> Zawiera również klasy <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> metodę, która konwertuje wartość typu całkowitego na wartość wyliczenia.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method to convert an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> to an <ph id="ph3">`ArrivalStatus`</ph> value.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> metodę, aby przekonwertować <ph id="ph2">&lt;xref:System.Int32&gt;</ph> do <ph id="ph3">`ArrivalStatus`</ph> wartości.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> returns a value of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</source>
          <target state="translated">Należy zauważyć, że ponieważ <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> zwraca wartość typu <ph id="ph2">&lt;xref:System.Object&gt;</ph>, użyj operatora rzutowania lub konwersji nadal może być konieczne można rzutować obiektu na typ wyliczeniowy.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</source>
          <target state="translated">Podczas konwersji całkowitą wartością wyliczenia, jest można przypisać wartość, która nie jest rzeczywiście członkiem wyliczenia.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, you can pass the integer to the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method before performing the conversion.</source>
          <target state="translated">Aby tego uniknąć, można przekazać liczby całkowitej w celu <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metoda przed przeprowadzeniem konwersji.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses this method to determine whether the elements in an array of integer values can be converted to <ph id="ph1">`ArrivalStatus`</ph> values.</source>
          <target state="translated">W poniższym przykładzie użyto tej metody, aby określić, czy elementy w tablicy wartości będące liczbami całkowitymi można przekonwertować na <ph id="ph1">`ArrivalStatus`</ph> wartości.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class provides explicit interface implementations of the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface for converting from an enumeration value to an integral type, you should use the methods of the <ph id="ph3">&lt;xref:System.Convert&gt;</ph> class, such as <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, to perform these conversions.</source>
          <target state="translated">Mimo że <ph id="ph1">&lt;xref:System.Enum&gt;</ph> klasa zawiera jawne implementacje interfejsu z <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfejs dla konwersji z wartości wyliczenia na typ całkowity, należy użyć metody <ph id="ph3">&lt;xref:System.Convert&gt;</ph> klas, takich jak <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, do Wykonaj te konwersji.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates how you can use the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method along with the <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> method to convert an enumeration value to its underlying type.</source>
          <target state="translated">Poniższy przykład przedstawia, jak używasz <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> metody wraz z programem <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> metodę, aby przekonwertować wartość wyliczenia na jego typ podstawowy.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that this example does not require the underlying type of the enumeration to be known at compile time.</source>
          <target state="translated">Należy pamiętać, że w tym przykładzie nie wymaga z typem podstawowym typu wyliczania znane w czasie kompilacji.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Parsing enumeration values</source>
          <target state="translated">Podczas analizowania wartości wyliczenia</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> methods allow you to convert the string representation of an enumeration value to that value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> metody umożliwiają konwertowanie reprezentacja ciągu wartości wyliczenia z tą wartością.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The string representation can be either the name or the underlying value of an enumeration constant.</source>
          <target state="translated">Reprezentacja ciągu może być nazwa lub odpowiednia wartość stałej wyliczenia.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</source>
          <target state="translated">Należy zwrócić uwagę, metody analizy pomyślnie przekonwertuje reprezentacje ciąg liczb, które nie są członkami określonej wyliczenia, jeśli ciągi można konwertować na wartość typ podstawowy wyliczenia.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method can be called to ensure that the result of the parsing method is a valid enumeration value.</source>
          <target state="translated">Aby temu zapobiec, <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> można wywołać metody w celu zapewnienia wartość wyliczenia nieprawidłowy wynik metody analizy.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The example illustrates this approach and demonstrates calls to both the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">W przykładzie pokazano tego podejścia i przedstawiono oba wywołania <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> i <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</source>
          <target state="translated">Należy pamiętać, że nieogólną metodę analizowania zwraca obiekt, który może być konieczne rzutowanie (C#) lub przekonwertować (w języku Visual Basic) na typ wyliczeniowy odpowiednie.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Formatting enumeration values</source>
          <target state="translated">Formatowanie wartości wyliczenia</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert enumeration values to their string representations by calling the static <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> method, as well as the overloads of the instance <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> method.</source>
          <target state="translated">Można przekonwertować wartości wyliczenia ich oświadczenia ciąg przez wywołanie metody statycznych <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> metody, a także przeciążenia wystąpienia <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can use a format string to control the precise way in which an enumeration value is represented as a string.</source>
          <target state="translated">Ciąg formatu służy do kontrolowania sposobu dokładne, w którym wartość wyliczenia jest reprezentowany jako ciąg.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>wyliczanie ciągów formatujących<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the <ph id="ph1">`ArrivalStatus`</ph> enumeration to its string representations.</source>
          <target state="translated">W poniższym przykładzie użyto każdej z obsługiwanych wyliczanie ciągów formatujących ("G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f") można przekonwertować członkiem <ph id="ph1">`ArrivalStatus`</ph> wyliczeniu, aby jej reprezentacji ciągu.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Iterating enumeration members</source>
          <target state="translated">Iteracja elementy członkowskie wyliczenia</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> type does not implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, which would enable you to iterate members of a collection by using a <ph id="ph4">`foreach`</ph> (in C#) or <ph id="ph5">`For Each`</ph> (in Visual Basic) construct.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> Typ nie implementuje <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> lub <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interfejsu, które umożliwią przejść elementów członkowskich kolekcji za pomocą <ph id="ph4">`foreach`</ph> (w języku C#) lub <ph id="ph5">`For Each`</ph> (w języku Visual Basic) należy utworzyć.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can enumerate members in either of two ways.</source>
          <target state="translated">Jednak można wyliczyć elementów członkowskich na dwa sposoby.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method to retrieve a string array containing the names of the enumeration members.</source>
          <target state="translated">Możesz wywołać <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metoda pobierania tablica ciągów zawierająca nazwy elementy członkowskie wyliczenia.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the string array, you can call the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> method to convert the string to its equivalent enumeration value.</source>
          <target state="translated">Następnie dla każdego elementu w tablicy ciągów, należy wywołać <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> metodę, aby przekonwertować ciągu na wartość wyliczenia równoważne.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">To podejście pokazano w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method to retrieve an array that contains the underlying values in the enumeration.</source>
          <target state="translated">Możesz wywołać <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> metoda pobierania tablicę zawierającą podstawową wartości w wyliczeniu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the array, you can call the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert the integer to its equivalent enumeration value.</source>
          <target state="translated">Następnie dla każdego elementu tablicy, należy wywołać <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> metodę, aby przekonwertować na wartość wyliczenia równoważne do liczby całkowitej.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">To podejście pokazano w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Non-exclusive members and the Flags attribute</source>
          <target state="translated">Elementy Członkowskie inne niż na wyłączność i atrybut Flags</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>One common use of an enumeration is to represent a set of mutually exclusive values.</source>
          <target state="translated">Jeden zazwyczaj wyliczenie jest używane do reprezentowania zestaw wartości wykluczają się wzajemnie.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an <ph id="ph1">`ArrivalStatus`</ph> instance can have a value of <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, or <ph id="ph4">`Late`</ph>.</source>
          <target state="translated">Na przykład <ph id="ph1">`ArrivalStatus`</ph> wystąpienie może mieć wartość <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, lub <ph id="ph4">`Late`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It makes no sense for the value of an <ph id="ph1">`ArrivalStatus`</ph> instance to reflect more than one enumeration constant.</source>
          <target state="translated">Nie ma sensu dla wartości <ph id="ph1">`ArrivalStatus`</ph> wystąpienia, aby odzwierciedlić więcej niż jeden stała wyliczenia.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</source>
          <target state="translated">W innych przypadkach należy jednak wartość obiektu wyliczenia może zawierać wiele elementy członkowskie wyliczenia i każdy element członkowski reprezentuje pole bitowe wartości wyliczenia.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute can be used to indicate that the enumeration consists of bit fields.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> Atrybut może służyć do wskazują, że wyliczenia składa się z bitowego pól.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an enumeration named <ph id="ph1">`Pets`</ph> might be used to indicate the kinds of pets in a household.</source>
          <target state="translated">Na przykład wyliczeń o nazwie <ph id="ph1">`Pets`</ph> może używać do określenia rodzaje zwierząt domowych w gospodarstwo domowe.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It can be defined as follows.</source>
          <target state="translated">Mogą być zdefiniowane w następujący sposób.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Pets`</ph> enumeration can then be used as shown in the following example.</source>
          <target state="translated"><ph id="ph1">`Pets`</ph> Wyliczenia mogą być następnie używane jak pokazano w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following best practices should be used when defining a bitwise enumeration and applying the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute.</source>
          <target state="translated">Następujące najlepsze rozwiązania stosuje się podczas definiowania bitowej wyliczenie i stosowanie <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> atrybutu.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> atrybutu niestandardowego wyliczania tylko wtedy, gdy operacja bitowa (AND, OR wyłączne lub) ma zostać wykonane na wartość liczbową.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</source>
          <target state="translated">Zdefiniuj wyliczenie stałe w potęgami liczby dwa, oznacza to, 1, 2, 4, 8 i tak dalej.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This means the individual flags in combined enumeration constants do not overlap.</source>
          <target state="translated">Oznacza to, że indywidualne flagi w stałych Scalonej wyliczenia nie mogą się pokrywać.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consider creating an enumerated constant for commonly used flag combinations.</source>
          <target state="translated">Należy rozważyć utworzenie wyliczany stała dla często używanych flagi kombinacji.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <ph id="ph1">`Read = 1`</ph> and <ph id="ph2">`Write = 2`</ph>, consider creating the enumerated constant <ph id="ph3">`ReadWrite = Read OR Write`</ph>, which combines the <ph id="ph4">`Read`</ph> and <ph id="ph5">`Write`</ph> flags.</source>
          <target state="translated">Na przykład, jeśli masz wyliczenie używane dla operacji We/Wy pliku zawierającego stałych wyliczeniowych <ph id="ph1">`Read = 1`</ph> i <ph id="ph2">`Write = 2`</ph>, należy rozważyć utworzenie Stała wyliczeniowa <ph id="ph3">`ReadWrite = Read OR Write`</ph>, który łączy <ph id="ph4">`Read`</ph> i <ph id="ph5">`Write`</ph> flagi.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</source>
          <target state="translated">Ponadto używane do łączenia z flagami operacji lub może zostać uznane za zaawansowane koncepcji w pewnych okolicznościach, które nie powinny być wymagane dla prostych zadań.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</source>
          <target state="translated">Należy zachować ostrożność, jeśli zdefiniować liczbą ujemną jako stała wyliczenia flag, ponieważ wielu pozycji flagi może być ustawiony na 1, co może zwiększyć mylące kodu i zachęca błędy kodowania.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>A convenient way to test whether a flag is set in a numeric value is to call the instance <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Jest to wygodny sposób sprawdzić, czy ustawiono flagę w wartość liczbową wywołać wystąpienie <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> metody, jak pokazano w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</source>
          <target state="translated">Odpowiada to wykonywanie operacji i między wartość liczbową i stała wyliczenia flagi, ustawiająca wszystkie bity w wartość liczbową na zero, które nie odpowiadają flagi, a następnie sprawdzenie, czy wynik tej operacji jest równa Flaga wyliczyć stała.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">Jest to zilustrowane w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use <ph id="ph1">`None`</ph> as the name of the flag enumerated constant whose value is zero.</source>
          <target state="translated">Użyj <ph id="ph1">`None`</ph> jako nazwa flagi wyliczyć stała, którego wartość wynosi zero.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot use the <ph id="ph1">`None`</ph> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</source>
          <target state="translated">Nie można użyć <ph id="ph1">`None`</ph> stała wyliczenia w operacji i do testowania dla flagi, ponieważ wynik to zawsze zero.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can perform a logical, not a bitwise, comparison between the numeric value and the <ph id="ph1">`None`</ph> enumerated constant to determine whether any bits in the numeric value are set.</source>
          <target state="translated">Jednak można wykonać operatorów logicznych, nie bitowe, porównania wartości liczbowych i <ph id="ph1">`None`</ph> stała wyliczany można określić, czy wszystkie bity w wartość liczbową zostały ustawione.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">Jest to zilustrowane w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not define an enumeration value solely to mirror the state of the enumeration itself.</source>
          <target state="translated">Definiuje wartości wyliczenia wyłącznie w celu utworzenia duplikatów stan wyliczenia sam.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, do not define an enumerated constant that merely marks the end of the enumeration.</source>
          <target state="translated">Na przykład nie definiują wyliczany stałą, której jedynie oznacza koniec wyliczenia.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you need to determine the last value of the enumeration, check for that value explicitly.</source>
          <target state="translated">Jeśli trzeba określić ostatniej wartości wyliczenia, sprawdź jawnie dla tej wartości.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</source>
          <target state="translated">Ponadto można wykonać sprawdzania zakresu stała wyliczenia imię i nazwisko, jeśli wszystkie wartości w zakresie są prawidłowe.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Adding enumeration methods</source>
          <target state="translated">Dodawanie metod — wyliczenie</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Because enumeration types are defined by language structures, such as <ph id="ph1">`enum`</ph> (C#) and <ph id="ph2">`Enum`</ph> (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <ph id="ph3">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">Ponieważ Typy wyliczeniowe są zdefiniowane przez struktury języka, takich jak <ph id="ph1">`enum`</ph> (C#) i <ph id="ph2">`Enum`</ph> (Visual Basic), nie można definiować niestandardowe metody dla typu wyliczenia innych niż te dziedziczone z metody <ph id="ph3">&lt;xref:System.Enum&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can use extension methods to add functionality to a particular enumeration type.</source>
          <target state="translated">Jednak można użyć metody rozszerzenia Dodawanie funkcji do typu konkretnego wyliczenia.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In the following example, the <ph id="ph1">`Grades`</ph> enumeration represents the possible letter grades that a student may receive in a class.</source>
          <target state="translated">W poniższym przykładzie <ph id="ph1">`Grades`</ph> wyliczenie reprezentuje klas możliwych list, które student może pojawić się w klasie.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An extension method named <ph id="ph1">`Passing`</ph> is added to the <ph id="ph2">`Grades`</ph> type so that each instance of that type now "knows" whether it represents a passing grade or not.</source>
          <target state="translated">Metody rozszerzenia o nazwie <ph id="ph1">`Passing`</ph> jest dodawany do <ph id="ph2">`Grades`</ph> wpisz, aby każde wystąpienie tego typu teraz "wie" czy reprezentuje klasy przekazywanie, czy nie.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Extensions`</ph> class also contains a static read-write variable that defines the minimum passing grade.</source>
          <target state="translated"><ph id="ph1">`Extensions`</ph> Klasa zawiera także statyczne zmiennej odczytu i zapisu, która definiuje klasy minimalna przekazywanie.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The return value of the <ph id="ph1">`Passing`</ph> extension method reflects the current value of that variable.</source>
          <target state="translated">Wartość zwracana <ph id="ph1">`Passing`</ph> — metoda rozszerzenia odzwierciedla bieżącą wartość tej zmiennej.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</source>
          <target state="translated">W poniższym przykładzie pokazano, do reprezentowania nazwanych wartości i innym wyliczenie do reprezentowania pola bitowe o nazwie przy użyciu wyliczania.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Enum.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>An object to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt do porównania, lub <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>Compares this instance to a specified object and returns an indication of their relative values.</source>
          <target state="translated">Porównuje to wystąpienie z określonym obiektem i zwraca wskazanie ich względnych wartości.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>A signed number that indicates the relative values of this instance and <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated">Podpisem liczba, która określa względne wartości tego wystąpienia i <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Wartość</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Znaczenie</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is less than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Wartość tego wystąpienia jest mniejsza niż wartość <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is equal to the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Wartość tego wystąpienia jest równa wartości <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Większa niż zero</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is greater than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Wartość tego wystąpienia jest większa niż wartość <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.CompareTo(System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`CompareTo`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">`CompareTo`</ph> w kontekście <ph id="ph2">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> and this instance are not the same type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> i to wystąpienie nie są tego samego typu.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>This instance is not type <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">To wystąpienie nie jest typem <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph>, lub <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Obiekt do porównania z tym wystąpieniem lub <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> jest wartością wyliczenia tego samego typu i o tej samej wartości podstawowej jako tego wystąpienia; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> to define how enumeration members are evaluated for equality.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> Przesłonięcia metody <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> Aby zdefiniować sposób elementy członkowskie wyliczenia są oceniane pod kątem równości.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example defines two enumeration types, <ph id="ph1">`SledDog`</ph> and <ph id="ph2">`WorkDog`</ph>.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano dwa typy wyliczeniowe, <ph id="ph1">`SledDog`</ph> i <ph id="ph2">`WorkDog`</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog`</ph> enumeration has two members, <ph id="ph2">`SledDog.AlaskanMalamute`</ph> and <ph id="ph3">`SledDog.Malamute`</ph>, that have the same underlying value.</source>
          <target state="translated"><ph id="ph1">`SledDog`</ph> Wyliczenie ma dwa elementy członkowskie, <ph id="ph2">`SledDog.AlaskanMalamute`</ph> i <ph id="ph3">`SledDog.Malamute`</ph>, które mają taką samą wartość podstawowej.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are equal because their underlying values are the same.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> — metoda wskazuje, że te wartości są takie same, ponieważ ich wartości bazowe są takie same.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog.Malamute`</ph> and <ph id="ph2">`WorkDog.Newfoundland`</ph> members have the same underlying value, although they represent different enumeration types.</source>
          <target state="translated"><ph id="ph1">`SledDog.Malamute`</ph> i <ph id="ph2">`WorkDog.Newfoundland`</ph> elementów członkowskich mają taką samą wartość podstawowej, mimo że reprezentują wyliczenie różnych typów.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are not equal.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> — metoda wskazuje, że te wartości nie są takie same.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The enumeration type of the value to convert.</source>
          <target state="translated">Typ wyliczenia wartości do konwersji.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value to convert.</source>
          <target state="translated">Wartość do konwersji.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The output format to use.</source>
          <target state="translated">Format danych wyjściowych do użycia.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</source>
          <target state="translated">Konwertuje określoną wartość określonego typu wyliczeniowego do reprezentacji ciągu równoważne zgodnie z określonym formacie.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>A string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Reprezentacja ciągu <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following table shows the valid values for the <ph id="ph1">`format`</ph> parameter.</source>
          <target state="translated">W poniższej tabeli przedstawiono prawidłowe wartości dla <ph id="ph1">`format`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Format</source>
          <target state="translated">Format</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Opis</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"G" or "g"</source>
          <target state="translated">„G” lub „g”</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest równy nazwanej stałej wyliczenia, nazwa tej stałej jest zwracane; w przeciwnym razie wartość dziesiętną z <ph id="ph2">`value`</ph> jest zwracany.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For example, suppose the only enumerated constant is named Red, and its value is 1.</source>
          <target state="translated">Na przykład załóżmy, że tylko stała wyliczenia nosi nazwę czerwony, a jego wartość wynosi 1.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is specified as 1, this format returns "Red".</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest określony jako 1, ten format zwraca "Red".</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>However, if <ph id="ph1">`value`</ph> is specified as 2, this format returns "2".</source>
          <target state="translated">Jednak jeśli <ph id="ph1">`value`</ph> jest określony jako 2, ten format zwraca "2".</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute is applied to the enumeration, <ph id="ph2">`value`</ph> is treated as a bit field that contains one or more flags that consist of one or more bits.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> niestandardowy atrybut jest stosowany do wyliczenia, <ph id="ph2">`value`</ph> jest traktowany jako pola bitowego, która zawiera jedną lub więcej flag, które składają się z jednego lub więcej bitów.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest równe kombinację o nazwie wyliczone stałe, listę nazw tych stałych rozdzielonych ogranicznik jest zwracany.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">`value`</ph> is searched for flags, going from the flag with the largest value to the smallest value.</source>
          <target state="translated"><ph id="ph1">`value`</ph> jest wyszukiwany flagi zamierza najmniejszą wartość z flagą o największej wartości.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For each flag that corresponds to a bit field in <ph id="ph1">`value`</ph>, the name of the constant is concatenated to the delimiter-separated list.</source>
          <target state="translated">Dla każdego Flaga, która odnosi się do pola bitowego w <ph id="ph1">`value`</ph>, nazwa stałej jest połączony do listy rozdzielonych ogranicznika.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value of that flag is then excluded from further consideration, and the search continues for the next flag.</source>
          <target state="translated">Wartość tej flagi jest wykluczany z dalszych brany pod uwagę, a wyszukiwanie jest kontynuowane flagę dalej.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is not equal to a combination of named enumerated constants, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> nie jest równa kombinację stałych wyliczeniowych dziesiętną o nazwie <ph id="ph2">`value`</ph> jest zwracany.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"X" or "x"</source>
          <target state="translated">„X” lub „x”</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in hexadecimal format without a leading "0x".</source>
          <target state="translated">Reprezentuje <ph id="ph1">`value`</ph> w formacie szesnastkowym bez znaków "0 x".</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"D" or "d"</source>
          <target state="translated">„D” lub „d”</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in decimal form.</source>
          <target state="translated">Reprezentuje <ph id="ph1">`value`</ph> w formie dziesiętnej.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"F" or "f"</source>
          <target state="translated">„F” lub „f”</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Behaves identically to "G" or "g", except that the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not required to be present on the <ph id="ph2">&lt;xref:System.Enum&gt;</ph> declaration.</source>
          <target state="translated">Zachowuje się tak samo "G" lub "g", z wyjątkiem <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> nie musi znajdować się na <ph id="ph2">&lt;xref:System.Enum&gt;</ph> deklaracji.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following example illustrates the use of <ph id="ph1">`Format`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">`Format`</ph> w kontekście <ph id="ph2">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="format" /&gt;</ph> parameter is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, Lub <ph id="ph3">&lt;paramref name="format" /&gt;</ph> parametr jest <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Parametr nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> typu.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is from an enumeration that differs in type from <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> Jest z poziomu wyliczenia, która różni się w typie z <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Typ <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest typem podstawowym typu <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="format" /&gt;</ph> parameter contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> Parametrów zawiera nieprawidłową wartość.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> równa się "X", ale typ wyliczeniowy jest nieznany.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>Returns the hash code for the value of this instance.</source>
          <target state="translated">Zwraca wartość skrótu dla wartości tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The value of a particular enumerated constant in terms of its underlying type.</source>
          <target state="translated">Wartość określonej stałej wyliczenia pod względem jego typem podstawowym.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>Retrieves the name of the constant in the specified enumeration that has the specified value.</source>
          <target state="translated">Pobiera nazwę stała w wyliczeniu określony, która ma określoną wartość.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>A string containing the name of the enumerated constant in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is <ph id="ph2">&lt;paramref name="value" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if no such constant is found.</source>
          <target state="translated">Ciąg zawierający nazwę stała wyliczenia w <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o wartości <ph id="ph2">&lt;paramref name="value" /&gt;</ph>; lub <ph id="ph3">&lt;see langword="null" /&gt;</ph> przypadku nieznalezienia takie stałej.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>If multiple enumeration members have the same underlying value, the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method guarantees that it will return the name of one of those enumeration members.</source>
          <target state="translated">Jeśli wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowej, <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> metoda gwarantuje, że zwróci nazwę jednego z tych elementy członkowskie wyliczenia.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>However, it does not guarantee that it will always return the name of the same enumeration member.</source>
          <target state="translated">Jednak go nie gwarantuje, że zawsze zwróci nazwę elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</source>
          <target state="translated">W związku z tym po wielu elementy członkowskie wyliczenia mają taką samą wartość, kod aplikacji powinno nigdy nie zależą od metody zwraca nazwę określonego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`GetName`</ph>.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">`GetName`</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is neither of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> nor does it have the same underlying type as <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest ani typu <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> ani nie ma ten sam typ podstawowy jako <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>Retrieves an array of the names of the constants in a specified enumeration.</source>
          <target state="translated">Pobiera tablicę nazw stałych w określonym wyliczenia.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>A string array of the names of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Tablica ciągów nazw stałe <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</source>
          <target state="translated">Elementy tablicy zwracanej wartości są sortowane według wartości binarne dla stałych wyliczeniowych (to znaczy przez ich wielkość bez znaku).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example provides displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method for an enumeration that includes a negative, zero, and a positive value.</source>
          <target state="translated">W poniższym przykładzie przedstawiono Wyświetla informacje o tablica zwrócona przez <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> — metoda wyliczania zawierające ujemny, zero oraz wartość dodatnią.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>If there are enumerated constants with same value, the order of their corresponding names is unspecified.</source>
          <target state="translated">W przypadku stałych wyliczeniowych o tej samej wartości kolejności odpowiadających im nazw jest nieokreślony.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Parametr nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>Returns the type code of the underlying type of this enumeration member.</source>
          <target state="translated">Zwraca kod typu typ bazowy tego typu wyliczeniowego.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The type code of the underlying type of this instance.</source>
          <target state="translated">Kod typu typu bazowego dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The enumeration type is unknown.</source>
          <target state="translated">Typ wyliczeniowy jest nieznany.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The enumeration whose underlying type will be retrieved.</source>
          <target state="translated">Wyliczenie, którego typem podstawowym zostaną pobrane.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>Returns the underlying type of the specified enumeration.</source>
          <target state="translated">Zwraca typ podstawowy wyliczenia określony.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The underlying type of <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Typ podstawowy elementu <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> structure enables values to be represented as named constants.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> Struktury umożliwia wartości może być reprezentowana jako stałe nazwane.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The data type of the enumeration's values is known as its underlying type.</source>
          <target state="translated">Typ danych wartości wyliczenia nosi nazwę jego typem podstawowym.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>For example, the underlying type of the <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration, which consists of constants that represent each day of the week (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>, and so on), is <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Na przykład typ bazowy <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> wyliczenia, która składa się z stałe, które reprezentują każdego dnia tygodnia (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>i tak dalej), jest <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method to display the underlying type of some enumeration members.</source>
          <target state="translated">Następujące przykładowe wywołania <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> metodę, aby wyświetlić podstawowy typ niektóre elementy członkowskie wyliczenia.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>Retrieves an array of the values of the constants in a specified enumeration.</source>
          <target state="translated">Pobiera tablicę wartości stałe w określonym wyliczenia.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An array that contains the values of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Tablica zawierająca wartości stałe w <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</source>
          <target state="translated">Elementy tablicy są sortowane według wartości binarne stałych — wyliczenie (to znaczy przez ich wielkość bez znaku).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method for an enumeration that includes a negative value, zero, and a positive value.</source>
          <target state="translated">W poniższym przykładzie przedstawiono informacje o tablica zwrócona przez <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> — metoda wyliczania zawierające wartości ujemnej, zero oraz wartość dodatnią.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method returns an array that contains a value for each member of the <ph id="ph2">`enumType`</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> Metoda zwraca tablicę, która zawiera wartość dla każdego członka <ph id="ph2">`enumType`</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>If multiple members have the same value, the returned array includes duplicate values.</source>
          <target state="translated">Jeśli wiele elementów członkowskich mają taką samą wartość, zwracana tablica zawiera zduplikowane wartości.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>In this case, calling the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</source>
          <target state="translated">W takim przypadku wywoływania <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> metody z każdej wartości w tablicy zwracane nie przywraca unikatowych nazw przypisane do elementów członkowskich, które mają zduplikowane wartości.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>To retrieve all the names of enumeration members successfully, call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">Aby pomyślnie pobrać wszystkie elementy członkowskie wyliczenia nazw, należy wywołać <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method cannot be invoked by using reflection in a reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> Nie można wywołać metody przy użyciu odbicia w kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>Instead, you can retrieve the value of all enumeration members by using the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represent enumeration members and then call the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph> method on each element of the array.</source>
          <target state="translated">Zamiast tego można pobrać wartość wszystkie elementy członkowskie wyliczenia za pomocą <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> metody, aby uzyskać tablicę <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> obiektów, które reprezentują elementy członkowskie wyliczenia, a następnie wywołać <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph> metody na każdy element tablicy.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates this technique.</source>
          <target state="translated">Poniższy przykład przedstawia tej metody.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>It requires that you define the following enumeration in an assembly named Enumerations.dll:</source>
          <target state="translated">Zdefiniuj wyliczenie następujące w zestawie o nazwie Enumerations.dll wymaga:</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The assembly is loaded in a reflection-only context, a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">`Pets`</ph> enumeration is instantiated, an array of <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects is retrieved, and the field values are displayed to the console.</source>
          <target state="translated">Zestaw został załadowany w kontekście tylko odbicie <ph id="ph1">&lt;xref:System.Type&gt;</ph> obiekt, który reprezentuje <ph id="ph2">`Pets`</ph> wystąpienia wyliczenie tablicę <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> obiekty są pobierane i wartości pól są wyświetlane w konsoli.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>The method is invoked by reflection in a reflection-only context,</source>
          <target state="translated">Metoda jest wywoływana przez odbicie w kontekstu reflection-only</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is a type from an assembly loaded in a reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> to typ w zestawie załadowanym w kontekstu reflection-only.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>An enumeration value.</source>
          <target state="translated">Wartość wyliczenia.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>Determines whether one or more bit fields are set in the current instance.</source>
          <target state="translated">Określa, czy co najmniej jedno pole bitowe są ustawione w bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the bit field or bit fields that are set in <ph id="ph2">&lt;paramref name="flag" /&gt;</ph> are also set in the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli pole bitowe lub bitowego pola, które są ustawiane w <ph id="ph2">&lt;paramref name="flag" /&gt;</ph> również są ustawione w bieżącym wystąpieniu; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method returns the result of the following Boolean expression.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> Metoda zwraca wynik następujące wyrażenie warunkowe.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If the underlying value of <ph id="ph1">`flag`</ph> is zero, the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Jeśli podstawową wartość <ph id="ph1">`flag`</ph> wynosi zero, metoda zwraca <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If this behavior is not desirable, you can use the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method to test for equality with zero and call <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> only if the underlying value of <ph id="ph3">`flag`</ph> is non-zero, as the following example illustrates.</source>
          <target state="translated">Jeśli to zachowanie nie jest pożądane, możesz użyć <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> metody do testowania pod kątem równości zero i wywołanie <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> tylko wtedy, gdy podstawowa wartość <ph id="ph3">`flag`</ph> jest równa zero, jak pokazano w poniższym przykładzie.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method is designed to be used with enumeration types that are marked with the <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> attribute and can be used to determine whether multiple bit fields are set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> Metoda jest przeznaczona do użycia z typów wyliczenia, które są oznaczone ikoną z <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> atrybutu i może służyć do określenia, czy ustawiono wiele pól bitowych.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>For enumeration types that are not marked with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, call either the <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">Dla typów wyliczenia, które nie są oznaczone ikoną z <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> atrybutu, albo wywoływać <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> metody lub <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The following example defines an <ph id="ph1">`ItemsOrdered`</ph> enumeration that reflects categories of items that a customer can order in a restaurant.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`ItemsOrdered`</ph> wyliczenie odzwierciedlający kategorii elementy, które klient można uporządkować w restauracji.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The example tests whether the customer has ordered both an entrée and a beverage.</source>
          <target state="translated">Przykład sprawdza, czy klient ma uporządkowane zarówno entrée, jak i napój.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> is a different type than the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> jest innego typu niż bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The value or name of a constant in <bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Wartość lub nazwa stałej w <bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Returns an indication whether a constant with a specified value exists in a specified enumeration.</source>
          <target state="translated">Zwraca wskazuje, czy stałą o określonej wartości istnieje w wyliczeniu określony.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a constant in <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> has a value equal to <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli stała w <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> ma wartość równą <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter can be any of the following:</source>
          <target state="translated"><ph id="ph1">`value`</ph> Parametr może być jedną z następujących czynności:</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Any member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Dowolny element członkowski typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A variable whose value is an enumeration member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Zmienna, którego wartość jest elementu członkowskiego wyliczenia typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The string representation of the name of an enumeration member.</source>
          <target state="translated">Reprezentacja ciągu nazwy elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The characters in the string must have the same case as the enumeration member name.</source>
          <target state="translated">Znaki w ciągu musi mieć tej samej litery jako nazwa elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A value of the underlying type of <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Wartość typu bazowego dla <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If the constants in <ph id="ph1">`enumType`</ph> define a set of bit fields and <ph id="ph2">`value`</ph> contains the values, names, or underlying values of multiple bit fields, the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Jeśli stałe <ph id="ph1">`enumType`</ph> zdefiniować zestaw pól bitowych i <ph id="ph2">`value`</ph> zawiera wartości nazwy i wartości podstawowych wielu pól bitowych, <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metoda zwraca <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</source>
          <target state="translated">Innymi słowy, w przypadku wyliczenia, które definiują zestaw pól bitowych, Metoda określa tylko czy pola bitowego pojedynczego należy do wyliczenia.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>To determine whether multiple bit fields are set in an enumeration type that is tagged with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, you can call the <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method.</source>
          <target state="translated">Aby ustalić, czy wiele pól bitowych są ustawione w typem wyliczenia, które są oznaczone <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> atrybutu, należy wywołać <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The following example defines an enumeration named <ph id="ph1">`PetType`</ph> that consists of individual bit fields.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano wyliczenie o nazwie <ph id="ph1">`PetType`</ph> składający się z bitowego poszczególnych pól.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</source>
          <target state="translated">Następnie wywołuje <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody z wartości wyliczenia, ciąg nazwy i wartości złożonego wynikających z wielu pól bitowych ustawienie to możliwe.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see langword="Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see langword="Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an enumeration, but it is not an enumeration of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Typ <ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest wyliczeniem, ale nie jest wyliczenia typu <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Typ <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest typem podstawowym typu <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>, or <ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest typem <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, lub <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>, lub <ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is an enumeration that is defined by using the <ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph> if multiple bit fields in <ph id="ph4">&lt;paramref name="value" /&gt;</ph> are set but <ph id="ph5">&lt;paramref name="value" /&gt;</ph> does not correspond to a composite enumeration value, or if <ph id="ph6">&lt;paramref name="value" /&gt;</ph> is a string concatenation of the names of multiple bit flags.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest wyliczeniem, która jest zdefiniowana za pomocą <ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> atrybutu, metoda zwraca <ph id="ph3">&lt;see langword="false" /&gt;</ph> Jeśli bit wiele pól w <ph id="ph4">&lt;paramref name="value" /&gt;</ph> są ustawione, ale <ph id="ph5">&lt;paramref name="value" /&gt;</ph> nie odpowiada wartość wyliczenia złożonego lub, jeśli <ph id="ph6">&lt;paramref name="value" /&gt;</ph> jest ciągów nazw wiele flag bitowych.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In the following example, a <bpt id="p1">&lt;c&gt;</bpt>Pets<ept id="p1">&lt;/c&gt;</ept> enumeration is defined with the <ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute.</source>
          <target state="translated">W poniższym przykładzie <bpt id="p1">&lt;c&gt;</bpt>zwierząt domowych<ept id="p1">&lt;/c&gt;</ept> wyliczenie zdefiniowano z <ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> atrybutu.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> when you pass it an enumeration value that has two bit fields (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph> Metoda zwraca <ph id="ph2">&lt;see langword="false" /&gt;</ph> gdy przekazujesz ją wartością wyliczenia z bitowego dwa pola (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept> i <bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) ustawiona, i gdy przekazujesz ją reprezentację ciągu, który Wartość wyliczenia ("Dog, Cat").</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>You can determine whether multiple bit fields are set by calling the <ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph> method.</source>
          <target state="translated">Można określić, czy wiele pól bitowych są ustawiane przez wywołanie metody <ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">Ciąg zawierający nazwę lub wartość do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Obiekt typu <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> którego wartość jest reprezentowana przez <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph> Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub listę o nazwie stałe rozdzielonych przecinkami (,).</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">Co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w <ph id="ph1">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> listę, jest zwracana wartość jest wartością określonej nazwy połączeniu z bitowego <ph id="ph2">`OR`</ph> operacji.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest nazwą, która nie odpowiada nazwanej stałej z <ph id="ph2">`enumType`</ph>, metoda wygeneruje <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu <ph id="ph2">`enumType`</ph> wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph> przekonwertować na typ całkowity.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">Jeśli to zachowanie jest niepożądane, wywołanie <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem <ph id="ph2">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Colors`</ph> wyliczenia, wywołania <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w <ph id="ph4">`Colors`</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>This operation is case-sensitive.</source>
          <target state="translated">Ta operacja jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metodę, aby przeanalizować tablicą ciągów, które są tworzone przez wywołanie metody <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">Ponadto użyto <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metody, można przeanalizować wartości wyliczenia, która składa się z polem bitowym.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest ciągiem pustym lub zawiera tylko biały znak.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest nazwą, ale nie jest elementem stałe nazwane zdefiniowane dla wyliczenia.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> znajduje się poza zakresem typu bazowego dla <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An enumeration type.</source>
          <target state="translated">Typ wyliczenia.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">Ciąg zawierający nazwę lub wartość do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to regard case.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> ignorowanie wielkości liter; <ph id="ph2">&lt;see langword="false" /&gt;</ph> uznanie case.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A parameter specifies whether the operation is case-insensitive.</source>
          <target state="translated">Parametr określa, czy operacja jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Obiekt typu <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> którego wartość jest reprezentowana przez <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph> Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub listę o nazwie stałe rozdzielonych przecinkami (,).</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">Co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w <ph id="ph1">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> listę, jest zwracana wartość jest wartością określonej nazwy połączeniu z bitowego <ph id="ph2">`OR`</ph> operacji.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest nazwą, która nie odpowiada nazwanej stałej z <ph id="ph2">`enumType`</ph>, metoda wygeneruje <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu <ph id="ph2">`enumType`</ph> wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph> przekonwertować na typ całkowity.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">Jeśli to zachowanie jest niepożądane, wywołanie <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem <ph id="ph2">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Colors`</ph> wyliczenia, wywołania <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w <ph id="ph4">`Colors`</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`ignoreCase`</ph> parameter specifies whether this operation is case-sensitive.</source>
          <target state="translated"><ph id="ph1">`ignoreCase`</ph> Parametr określa, czy ta operacja jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> metodę, aby przeanalizować tablicą ciągów, które są tworzone przez wywołanie metody <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">Ponadto użyto <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metody, można przeanalizować wartości wyliczenia, która składa się z polem bitowym.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string ("") or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest to pusty ciąg ("") lub zawiera tylko biały znak.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> jest nazwą, ale nie jest elementem stałe nazwane zdefiniowane dla wyliczenia.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> znajduje się poza zakresem typu bazowego dla <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Converts the current value to a Boolean value based on the underlying type.</source>
          <target state="translated">Konwertuje wartość bieżącą wartość logiczną na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość całkowitą bez znaku 8-bitowych na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Converts the current value to a Unicode character based on the underlying type.</source>
          <target state="translated">Konwertuje wartość bieżący znak Unicode, w zależności od typu podstawowego.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Converts the current value to a double-precision floating point number based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość zmiennoprzecinkową podwójnej precyzji punktu numer na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit signed integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącej wartości 16-bitową liczbę całkowitą ze znakiem na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit signed integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość całkowita 32-bitowy oparty na typie podstawowym.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit signed integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość całkowita 64-bitowy oparty na typie podstawowym.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit signed integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącej wartości 8-bitową liczbę całkowitą ze znakiem na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Converts the current value to a single-precision floating-point number based on the underlying type.</source>
          <target state="translated">Konwertuje wartość bieżącą liczbie zmiennoprzecinkowej pojedynczej precyzji, na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Ten element członkowski zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Obecnie nie zaimplementowana.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Zawsze zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">We wszystkich przypadkach.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The type to convert to.</source>
          <target state="translated">Typ docelowy konwersji.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Converts the current value to a specified type based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość na określony typ na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącej wartości 16-bitową liczbę całkowitą bez znaku na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Konwertuje wartość bieżącą 32-bitowej liczby całkowitej bez znaku na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Konwertuje bieżącą wartość 64-bitowej liczby całkowitej bez znaku na podstawie typu podstawowego.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Przekonwertowana wartość.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Używa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> do wykonania konwersji.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts a specified integer value to an enumeration member.</source>
          <target state="translated">Konwertuje wartość całkowitą określonego elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Converts the specified 8-bit unsigned integer to an enumeration member.</source>
          <target state="translated">Konwertuje określony 8-bitową liczbę całkowitą bez znaku do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Converts the specified 16-bit signed integer to an enumeration member.</source>
          <target state="translated">Konwertuje określony 16-bitową liczbę całkowitą ze znakiem do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Converts the specified 32-bit signed integer to an enumeration member.</source>
          <target state="translated">Konwertuje określony całkowita 32-bitowej do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Converts the specified 64-bit signed integer to an enumeration member.</source>
          <target state="translated">Konwertuje określony całkowita 64-bitowej do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The value convert to an enumeration member.</source>
          <target state="translated">Konwertuj wartości do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Converts the specified object with an integer value to an enumeration member.</source>
          <target state="translated">Konwertuje określony obiekt z wartością całkowitą do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>An enumeration object whose value is <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Obiekt wyliczenia, którego wartość jest <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> method converts the integral value <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> Metoda konwertuje wartości całkowite <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> lub <ph id="ph2">&lt;paramref name="value" /&gt;</ph> jest <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie jest typem <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, lub <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Converts the specified 8-bit signed integer value to an enumeration member.</source>
          <target state="translated">Konwertuje wartość określonego 8-bitową liczbę całkowitą ze znakiem do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Converts the specified 16-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Konwertuje wartość określonej liczby całkowitej bez znaku 16-bitowych do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Converts the specified 32-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Konwertuje wartość określonej liczby całkowitej bez znaku 32-bitowej do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The enumeration type to return.</source>
          <target state="translated">Typ wyliczeniowy, który będzie zwracany.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Wartość do konwersji do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Converts the specified 64-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Konwertuje wartość określonej liczby całkowitej bez znaku 64-bitowej do elementu członkowskiego wyliczenia.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Wystąpienie wyliczenie ustawioną <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> Metoda konwertuje <ph id="ph2">`value`</ph> do elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Należy pamiętać, że konwersji zakończy się powodzeniem, nawet jeśli wartość jest poza granicami <ph id="ph1">`enumType`</ph> elementów członkowskich.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Aby upewnić się, że <ph id="ph1">`value`</ph> jest prawidłową wartością podstawowej <ph id="ph2">`enumType`</ph> wyliczenia, przekaż go do <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Ta metoda konwersji zwraca wartość typu <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Następnie można rzutować go lub przekonwertować go na obiekt typu <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> Nie jest <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">Konwertuje wartość tego wystąpienia na jego równoważną reprezentację w postaci ciągu.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">Konwertuje wartość tego wystąpienia na jego równoważną reprezentację w postaci ciągu.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">Ciąg reprezentujący wartość tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The return value is formatted with the general format specifier ("G").</source>
          <target state="translated">Wartość zwracana jest formatowana przy specyfikator formatu Ogólne ("G").</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>That is, if the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</source>
          <target state="translated">Oznacza to, że jeśli <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> nie dotyczy to typ wyliczeniowy i jest nazwane równe stałą wartość tego wystąpienia, a następnie ciąg zawierający nazwę stałej jest zwracana wartość.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> są stosowane i wartość tego wystąpienia jest kombinacją co najmniej jeden stałe nazwane, a następnie wartość zwracana jest ciąg zawierający listę nazw stałe rozdzielonych ogranicznika.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>Otherwise, the return value is the string representation of the numeric value of this instance.</source>
          <target state="translated">W przeciwnym razie wartość zwracana jest reprezentację ciągu tego wystąpienia wartość liczbową.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji dotyczących formatowania wartości wyliczenia, zobacz <bpt id="p1">[</bpt>wyliczanie ciągów formatujących<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz <bpt id="p1">[</bpt>typy formatowania<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following example demonstrates converting an enumerated value to a string.</source>
          <target state="translated">W poniższym przykładzie pokazano konwertowania wartości wyliczane na ciąg.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">Wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowego próba pobrania reprezentację ciągu w nazwie elementu członkowskiego wyliczenia na podstawie jego wartości podstawowej, kodu nie upewnić żadnym założeniu o nazwie, który zwróci metoda.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">Na przykład następujące wyliczenie definiuje dwa elementy członkowskie, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> i <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, które mają taką samą wartość podstawowej.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">Następujące wywołanie metody próbuje pobrać nazwy elementu członkowskiego <bpt id="p1">&lt;c&gt;</bpt>cień<ept id="p1">&lt;/c&gt;</ept> wyliczenie których odpowiednia wartość to 1.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">Metoda może zwracać "Szarym" lub "Wyjście", a kod, nie należy wprowadzać żadnych założeń, o których zostanie zwrócony ciąg.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>(obsolete)</source>
          <target state="translated">(przestarzałe)</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph>.</source>
          <target state="translated">Przeciążenie tej metody jest przestarzały; Użyj <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">Ciąg reprezentujący wartość tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>A format string.</source>
          <target state="translated">Ciąg formatu.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>Converts the value of this instance to its equivalent string representation using the specified format.</source>
          <target state="translated">Konwertuje wartość tego wystąpienia reprezentacji równoważne ciągu w określonym formacie.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated">Reprezentacja ciągu wartość tego wystąpienia, określony przez <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated"><ph id="ph1">`format`</ph> Parametr może zawierać "G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f" ciągi formatów (ciąg formatu nie jest rozróżniana wielkość liter).</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">Jeśli <ph id="ph1">`format`</ph> jest <ph id="ph2">`null`</ph> lub ciąg pusty (""), specyfikator formatu Ogólne ("G") jest używany.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat wyliczanie ciągów formatujących i formatowania wartości wyliczenia, zobacz <bpt id="p1">[</bpt>wyliczanie ciągów formatujących<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz <bpt id="p1">[</bpt>typy formatowania<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following example demonstrates how to convert an enumerated value to a string.</source>
          <target state="translated">W poniższym przykładzie pokazano, jak przekonwertować wyliczenia wartości na ciąg.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> contains an invalid specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> zawiera nieprawidłową specyfikację.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> równa się "X", ale typ wyliczeniowy jest nieznany.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">Wiele elementy członkowskie wyliczenia mają taką samą wartość podstawowego próba pobrania reprezentację ciągu w nazwie elementu członkowskiego wyliczenia na podstawie jego wartości podstawowej, kodu nie upewnić żadnym założeniu o nazwie, który zwróci metoda.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">Na przykład następujące wyliczenie definiuje dwa elementy członkowskie, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> i <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, które mają taką samą wartość podstawowej.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">Następujące wywołanie metody próbuje pobrać nazwy elementu członkowskiego <bpt id="p1">&lt;c&gt;</bpt>cień<ept id="p1">&lt;/c&gt;</ept> wyliczenie których odpowiednia wartość to 1.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">Metoda może zwracać "Szarym" lub "Wyjście", a kod, nie należy wprowadzać żadnych założeń, o których zostanie zwrócony ciąg.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>A format specification.</source>
          <target state="translated">Definicja formatu.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>(Obsolete.)</source>
          <target state="translated">(Przestarzałe).</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph>.</source>
          <target state="translated">Przeciążenie tej metody jest przestarzały; Użyj <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated">Reprezentacja ciągu wartość tego wystąpienia, określony przez <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated"><ph id="ph1">`format`</ph> Parametr może zawierać "G" lub "g", "D" lub "d", "X" lub "x" i "F" lub "f" ciągi formatów (ciąg formatu nie jest rozróżniana wielkość liter).</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">Jeśli <ph id="ph1">`format`</ph> jest <ph id="ph2">`null`</ph> lub ciąg pusty (""), specyfikator formatu Ogólne ("G") jest używany.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat wyliczanie ciągów formatujących i formatowania wartości wyliczenia, zobacz <bpt id="p1">[</bpt>wyliczanie ciągów formatujących<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji na temat formatowania ogólnie rzecz biorąc, zobacz <bpt id="p1">[</bpt>typy formatowania<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>Specify only <ph id="ph1">`format`</ph>; the <ph id="ph2">`provider`</ph> parameter is obsolete.</source>
          <target state="translated">Należy określić tylko <ph id="ph1">`format`</ph>; <ph id="ph2">`provider`</ph> parametru jest przestarzała.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> does not contain a valid format specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> nie zawiera specyfikację prawidłowy format.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> równa się "X", ale typ wyliczeniowy jest nieznany.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Zwracana wartość wskazuje, czy konwersja powiodła się.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Typ wyliczenia, do którego można przekonwertować <bpt id="p1">&lt;c&gt;</bpt>wartość<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">Reprezentacja ciągu nazwę wyliczenia lub odpowiednia wartość do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">Gdy metoda zwróci wartość, <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera obiekt typu <bpt id="p2">&lt;c&gt;</bpt>element TEnum<ept id="p2">&lt;/c&gt;</ept> którego wartość jest reprezentowana przez <bpt id="p3">&lt;c&gt;</bpt>wartość<ept id="p3">&lt;/c&gt;</ept> Jeśli operacji analizowania zakończy się powodzeniem.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">W przypadku niepowodzenia operacji analizowania <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera domyślną wartość typu bazowego dla <bpt id="p2">&lt;c&gt;</bpt>element TEnum<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">Należy pamiętać, że ta wartość nie musi być członkiem <bpt id="p1">&lt;c&gt;</bpt>element TEnum<ept id="p1">&lt;/c&gt;</ept> wyliczenia.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Zwracana wartość wskazuje, czy konwersja powiodła się.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parametr został przekonwertowany pomyślnie; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> jest taka sama jak <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metody, z wyjątkiem zamiast generowania wyjątku, zwraca <ph id="ph3">`false`</ph> Jeśli konwersji nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">Eliminuje potrzebę obsługi podczas analizowania reprezentacja ciągu wartości wyliczenia wyjątków.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph> Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub lista stałe nazwane podstawowej wartości rozdzielane przecinkami (,).</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> zawiera wiele o nazwie stałe lub wartości, co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest listą, <ph id="ph2">`result`</ph> odzwierciedla wartość określonej nazwy i wartości, w połączeniu z bitowego podstawowe <ph id="ph3">`OR`</ph> operacji.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names is case-sensitive.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest reprezentację ciągu nazwy wartości wyliczenia, porównanie <ph id="ph2">`value`</ph> z wyliczenia nazw jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest nazwą, która nie odpowiada nazwanej stałej z <ph id="ph2">`TEnum`</ph>, metoda zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu <ph id="ph2">`TEnum`</ph> wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph> przekonwertować na typ całkowity.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">Jeśli to zachowanie jest niepożądane, wywołanie <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem <ph id="ph2">`TEnum`</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Colors`</ph> wyliczenia, wywołania <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w <ph id="ph4">`Colors`</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> nie jest typem wyliczenia.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Typ wyliczenia, do którego można przekonwertować <bpt id="p1">&lt;c&gt;</bpt>wartość<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">Reprezentacja ciągu nazwę wyliczenia lub odpowiednia wartość do przekonwertowania.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to consider case.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> ignorowanie wielkości liter; <ph id="ph2">&lt;see langword="false" /&gt;</ph> wziąć pod uwagę w przypadku.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">Gdy metoda zwróci wartość, <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera obiekt typu <bpt id="p2">&lt;c&gt;</bpt>element TEnum<ept id="p2">&lt;/c&gt;</ept> którego wartość jest reprezentowana przez <bpt id="p3">&lt;c&gt;</bpt>wartość<ept id="p3">&lt;/c&gt;</ept> Jeśli operacji analizowania zakończy się powodzeniem.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">W przypadku niepowodzenia operacji analizowania <bpt id="p1">&lt;c&gt;</bpt>wynik<ept id="p1">&lt;/c&gt;</ept> zawiera domyślną wartość typu bazowego dla <bpt id="p2">&lt;c&gt;</bpt>element TEnum<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">Należy pamiętać, że ta wartość nie musi być członkiem <bpt id="p1">&lt;c&gt;</bpt>element TEnum<ept id="p1">&lt;/c&gt;</ept> wyliczenia.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ten parametr jest przekazywany niezainicjowany.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Konwertuje ciąg znaków reprezentujący nazwę lub wartość liczbową jednej lub więcej stałych wyliczeniowych dla równoważnego obiektu wyliczanego.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>A parameter specifies whether the operation is case-sensitive.</source>
          <target state="translated">Parametr określa, czy operacja jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Zwracana wartość wskazuje, czy konwersja powiodła się.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parametr został przekonwertowany pomyślnie; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> jest taka sama jak <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> metody, z wyjątkiem zamiast generowania wyjątku, zwraca <ph id="ph3">`false`</ph> Jeśli konwersji nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">Eliminuje potrzebę obsługi podczas analizowania reprezentacja ciągu wartości wyliczenia wyjątków.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph> Parametr zawierający reprezentację ciągu odpowiednia wartość elementu członkowskiego wyliczenia lub nazwanej stałej lub lista stałe nazwane podstawowej wartości rozdzielane przecinkami (,).</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> zawiera wiele o nazwie stałe lub wartości, co najmniej jeden spacje można przed lub po każdej wartości, nazwa lub przecinkami w <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest listą, <ph id="ph2">`result`</ph> odzwierciedla wartość określonej nazwy i wartości, w połączeniu z bitowego podstawowe <ph id="ph3">`OR`</ph> operacji.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names depends on the <ph id="ph3">`ignoreCase`</ph> parameter.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest reprezentację ciągu nazwy wartości wyliczenia, porównanie <ph id="ph2">`value`</ph> z wyliczenia nazw zależy od <ph id="ph3">`ignoreCase`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`true`</ph>, the comparison is case-insensitive; if <ph id="ph2">`false`</ph>, it is case-sensitive.</source>
          <target state="translated">Jeśli <ph id="ph1">`true`</ph>, wynik porównania ma bez uwzględniania wielkości liter; w wypadku <ph id="ph2">`false`</ph>, jest rozróżniana wielkość liter.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest nazwą, która nie odpowiada nazwanej stałej z <ph id="ph2">`TEnum`</ph>, metoda zwraca <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Jeśli <ph id="ph1">`value`</ph> jest liczba całkowita, która nie stanowi podstawową wartość reprezentację ciągu <ph id="ph2">`TEnum`</ph> wyliczenia, metoda zwraca wartość elementu członkowskiego wyliczenia, których wartości podstawowej jest <ph id="ph3">`value`</ph> przekonwertować na typ całkowity.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">Jeśli to zachowanie jest niepożądane, wywołanie <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody w celu zapewnienia reprezentację ciągu określonego typu integer faktycznie członkiem <ph id="ph2">`TEnum`</ph>.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano <ph id="ph1">`Colors`</ph> wyliczenia, wywołania <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> Konwertowanie ciągów na odpowiadające im wartości wyliczenia i wywołania metody <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metody, aby upewnić się, że określonej wartości całkowitych na wartości są bazowy wartości w <ph id="ph4">`Colors`</ph> wyliczenia.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> Metoda używa porównania bez uwzględniania wielkości liter podczas próby skonwertowania reprezentacji ciągu o nazwie stałe wartości wyliczenia równoważne.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> nie jest typem wyliczenia.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>