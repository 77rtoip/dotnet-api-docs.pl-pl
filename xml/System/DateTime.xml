<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f304cecc9d86793bc0d84d0a1d9782b06d632216" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68434859" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje chwilę w czasie, zwykle wyrażoną jako datę i godzinę dnia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>Szybkie linki do przykładowego kodu

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Ten artykuł zawiera kilka przykładów, które używają `DateTime` typu:

**Przykłady inicjalizacji**      
- [Wywołaj konstruktora](#initialization-01)
- [Wywoływanie niejawnego konstruktora bez parametrów](#initialization-02)
- [Przypisanie z wartości zwracanej](#initialization-03)
- [Analizowanie ciągu reprezentującego datę i godzinę](#initialization-04)
- [Visual Basic składni, aby zainicjować datę i godzinę](#initialization-05)

**Formatowanie `DateTime` obiektów jako ciągów**  
- [Użyj domyślnego formatu daty i godziny](#formatting-01)
- [Formatowanie daty i godziny przy użyciu określonej kultury](#formatting-02)
- [Formatowanie daty i godziny przy użyciu standardowego lub niestandardowego ciągu formatu](#formatting-03)
- [Określ ciąg formatu i określoną kulturę](#formatting-04)
- [Formatowanie daty i godziny przy użyciu standardu ISO 8601 dla usług sieci Web](#formatting-05)

**Analizowanie ciągów jako `DateTime` obiektów**  
- [Użycie `Parse` lub`TryParse` do przekonwertowania ciągu na datę i godzinę](#parsing-01)
- [Użyj `ParseExact` lub`TryParseExact` , aby przekonwertować ciąg w znanym formacie](#parsing-02)
- [Konwertuj z reprezentacji ciągu ISO 8601 na datę i godzinę](#parsing-03)

**`DateTime`Tłumaczenia**  
- [Poznaj rozdzielczość wartości daty i godziny](#resolution-01)
- [Porównywanie pod kątem równości w ramach tolerancji](#comparison-01)

**Kultura i kalendarze**  
- [Wyświetlanie wartości daty i godziny przy użyciu kalendarzy specyficznych dla kultury](#calendars-01)
- [Analizowanie ciągów zgodnie z kalendarzem specyficznym dla kultury](#calendars-02)
- [Zainicjuj datę i godzinę z kalendarza określonej kultury](#calendars-03)
- [Uzyskiwanie dostępu do właściwości daty i godziny przy użyciu kalendarza określonego kultury](#calendars-04)
- [Pobieranie tygodnia roku przy użyciu kalendarzy specyficznych dla kultury](#calendars-05)

**Trwałość**  
- [Utrwalanie wartości daty i godziny jako ciągów w lokalnej strefie czasowej](#persistence-01)
- [Utrwalanie wartości daty i godziny jako ciągów w formacie kultury i czasu niezmiennej](#persistence-02)
- [Utrwalanie wartości daty i godziny jako liczby całkowite](#persistence-03)
- [Utrwalanie wartości daty i godziny przy użyciu`XmlSerializer`](#persistence-04)
- [Utrwalanie wartości daty i godziny przy użyciu`BinaryFormatter`](#persistence-05)
- [Utrwalanie wartości daty i godziny przy użyciu danych strefy czasowej](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>Szybkie linki do tematów dotyczących uwag.

Ta sekcja zawiera tematy dotyczące wielu typowych zastosowania `DateTime` struktury:
  
- [`DateTime` Inicjowanie obiektu](#initializing-a-datetime-object)
- [Wartości DateTime i ich reprezentacje ciągów](#datetime-values-and-their-string-representations)
- [Analizowanie wartości DateTime z ciągów](#parsing-datetime-values-from-strings)
- [Wartości DateTime](#datetime-values)
- [Operacje typu DateTime](#datetime-operations)
- [Rozdzielczość DateTime](#datetime-resolution)
- [Wartości DateTime i kalendarze](#datetime-values-and-calendars)
- [Utrwalanie wartości DateTime](#persisting-datetime-values)
- [DateTime a TimeSpan](#datetime-vs-timespan)
- [Porównywanie pod kątem równości w tolerancjach](#comparing-for-equality-within-tolerance)
- [Zagadnienia związane z modelem COM](#com-interop-considerations)
   
Typ <xref:System.DateTime> wartości reprezentuje daty i godziny z wartościami z zakresu od 00:00:00 do północy, 1 stycznia 0001 Anno Domini (typowa ERA) do 11:59:59 P.M., 31 grudnia 9999 n.e. 0001 w kalendarzu gregoriańskim.  
  
Wartości czasu są mierzone w jednostkach 100-nanosekund o nazwie Ticks. Określona data to liczba taktów od 12:00 do północy, 1 stycznia 0001 N.E. 0001 <xref:System.Globalization.GregorianCalendar> w kalendarzu. Liczba nie wyklucza taktów, które byłyby dodawane w sekundach przestępnym. Na przykład wartość Ticks elementu 31241376000000000L reprezentuje datę piątek, styczeń 01, 0100 12:00:00 północy. <xref:System.DateTime> Wartość jest zawsze wyrażona w kontekście kalendarza jawnego lub domyślnego.  
  
> [!NOTE]
>  Jeśli pracujesz z wartością taktów, która ma zostać przekonwertowana na inny przedział czasu, na <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>przykład minuty lub sekundy, należy użyć <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType> <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>,,, lub <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> stałej do przeprowadzenia konwersji. Na przykład, aby dodać liczbę sekund reprezentowanych przez określoną liczbę znaczników do <xref:System.DateTime.Second%2A> składnika <xref:System.DateTime> wartości, można użyć wyrażenia `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Możesz wyświetlić Źródło całego zestawu przykładów z tego artykułu w [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) lub [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) z repozytorium docs w witrynie GitHub.

> [!NOTE]
>  Alternatywą <xref:System.DateTime> dla struktury pracy z wartościami daty i godziny w określonych strefach czasowych <xref:System.DateTimeOffset> jest struktura. Struktura przechowuje informacje o dacie i godzinie w polu <xref:System.DateTime> prywatnym oraz liczbę minut, przez jaką ta data i czas różnią się od czasu UTC w polu prywatnym <xref:System.Int16>. <xref:System.DateTimeOffset> Pozwala <xref:System.DateTimeOffset> to na uwzględnienie czasu w określonej strefie czasowej, <xref:System.DateTime> natomiast wartość może jednoznacznie odzwierciedlać czas UTC i lokalną strefę czasową. Aby uzyskać informacje o tym <xref:System.DateTime> , kiedy używać struktury <xref:System.DateTimeOffset> lub struktury podczas pracy z wartościami daty i godziny, zobacz [Wybieranie między DateTime, DateTimeOffset, TimeSpan i TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inicjowanie obiektu DateTime  

Możesz przypisać wartość początkową do nowej `DateTime` wartości na wiele różnych sposobów:

- Wywoływanie konstruktora, albo jednego, gdzie można określić argumenty dla wartości lub użyć niejawnego konstruktora bez parametrów.
- `DateTime` Przypisanie do wartości zwracanej właściwości lub metody.
- `DateTime` Analizowanie wartości z jej reprezentacji w postaci ciągu.
- Korzystanie z funkcji języka właściwych dla Visual Basic, `DateTime`aby utworzyć wystąpienie. 

Poniższe fragmenty kodu pokazują przykłady każdego z nich:

#### <a name="invoke-constructors"></a>Wywołaj konstruktory

Można wywołać dowolne przeciążenia <xref:System.DateTime> konstruktora, które określają elementy wartości daty i godziny (takie jak rok, miesiąc i dzień lub liczbę taktów). Poniższy kod tworzy określoną datę przy użyciu <xref:System.DateTime> konstruktora określającego rok, miesiąc, dzień, godzinę, minutę i sekundę.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Konstruktor niejawnego parametru struktury jest wywoływany, `DateTime` gdy zachodzi `DateTime` potrzeba zainicjowania wartości domyślnej. (Aby uzyskać szczegółowe informacje na temat niejawnego konstruktora bezparametrowego typu wartości, zobacz [typy wartości](~/docs/csharp/language-reference/keywords/value-types.md)). Niektóre kompilatory obsługują również deklarowanie <xref:System.DateTime> wartości bez jawnego przypisywania do niej wartości. Utworzenie wartości bez jawnej inicjalizacji spowoduje również, że wartość domyślna to. Poniższy przykład ilustruje <xref:System.DateTime> niejawnego konstruktora bez parametrów w C# i Visual Basic, a także deklarację <xref:System.DateTime> , która nie jest przypisana w Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Przypisywanie obliczonej wartości

Można przypisać <xref:System.DateTime> obiektowi datę i godzinę zwracaną przez właściwość lub metodę. Poniższy przykład przypisuje bieżącą datę i godzinę, bieżącą datę i godzinę czasu UTC oraz bieżącą datę do trzech nowych <xref:System.DateTime> zmiennych.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analizowanie ciągu reprezentującego datę i godzinę

,,, I wszystkie<xref:System.DateTime.TryParseExact%2A> metody konwertują ciąg na odpowiadającą mu wartość daty i godziny. <xref:System.DateTime.TryParse%2A> <xref:System.DateTime.Parse%2A> <xref:System.DateTime.ParseExact%2A> W poniższych przykładach użyto <xref:System.DateTime.Parse%2A> metod <xref:System.DateTime.ParseExact%2A> i, aby przeanalizować ciąg <xref:System.DateTime> i przekonwertować go na wartość. Drugi format używa formularza obsługiwanego przez standard [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) dla reprezentowania daty i godziny w formacie ciągu. Ta standardowa reprezentacja jest często używana do transferowania informacji o dacie w usługach sieci Web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Metody <xref:System.DateTime.TryParse%2A> <xref:System.DateTime> i <xref:System.DateTime.TryParseExact%2A> wskazują, czy ciąg jest prawidłową reprezentacją wartości i, jeśli jest, wykonuje konwersję.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Składnia charakterystyczna dla języka dla Visual Basic

Poniższa instrukcja Visual Basic Inicjuje nową <xref:System.DateTime> wartość.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Wartości DateTime i ich reprezentacje ciągów  

Wewnętrznie wszystkie <xref:System.DateTime> wartości są reprezentowane jako liczba taktów (liczba przedziałów 100-nanosekund), które upłynęły od 12:00:00 północy, 1 stycznia 0001. Wartość rzeczywista <xref:System.DateTime> jest niezależna od sposobu, w jaki ta wartość pojawia się, gdy jest wyświetlana. Wygląd <xref:System.DateTime> wartości jest wynikiem operacji formatowania, która konwertuje wartość na jej reprezentację w postaci ciągu.  
  
Wygląd wartości daty i godziny zależy od kultury, międzynarodowych standardów, wymagań aplikacji i preferencji osobistych. Struktura oferuje elastyczność w formatowaniu wartości daty i godziny przy użyciu <xref:System.DateTime.ToString%2A>przeciążenia. <xref:System.DateTime> Metoda Domyślna <xref:System.DateTime.ToString?displayProperty=nameWithType> zwraca ciąg reprezentujący wartość daty i godziny przy użyciu wzorca daty krótkiej i godziny długiej bieżącej kultury. Poniższy przykład używa metody domyślnej <xref:System.DateTime.ToString?displayProperty=nameWithType> . Wyświetla datę i godzinę przy użyciu wzorca daty krótkiej i godziny długiej dla bieżącej kultury. Kultura en-US to bieżąca kultura na komputerze, na którym przykład został uruchomiony.  
  
<a name="formatting-01"></a> [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Może być konieczne sformatowanie dat w określonej kulturze w celu obsługi scenariuszy sieci Web, w których serwer może znajdować się w innej kulturze od klienta. Należy określić kulturę przy użyciu <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metody, aby utworzyć krótką datę i godzinę do przedstawienia w określonej kulturze. W poniższym przykładzie użyto <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metody, aby wyświetlić datę i godzinę przy użyciu wzorca daty krótkiej i godziny długiej dla kultury fr-fr.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Inne aplikacje mogą wymagać różnych reprezentacji ciągu daty. <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Metoda zwraca reprezentację ciągu zdefiniowaną przez specyfikator formatu standardowego lub niestandardowego przy użyciu Konwencji formatowania bieżącej kultury. W poniższym przykładzie użyto <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metody, aby wyświetlić pełny wzorzec daty i godziny dla kultury en-us, bieżącą kulturę na komputerze, na którym przykład został uruchomiony.  
  
<a name="formatting-03"></a> [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Na koniec można określić zarówno kulturę, jak i format przy użyciu <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody. W poniższym przykładzie zastosowano <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodę, aby wyświetlić pełny wzorzec daty i godziny dla kultury fr-fr.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Przeciążenia można także użyć z niestandardowym ciągiem formatu, aby określić inne formaty. Poniższy przykład pokazuje, jak sformatować ciąg przy użyciu standardowego formatu [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) , który często jest używany do usług sieci Web. Format ISO 8601 nie ma odpowiedniego ciągu formatu standardowego.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Aby uzyskać więcej informacji o <xref:System.DateTime> formatowaniu wartości, zobacz ciągi [standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oraz [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Analizowanie wartości DateTime z ciągów

Analizowanie konwertuje ciąg reprezentujący datę i godzinę na <xref:System.DateTime> wartość. Zazwyczaj ciągi daty i godziny mają dwa różne użycia w aplikacjach:  
  
-   Data i godzina zajmują różne formy i odzwierciedlają konwencje bieżącej kultury lub określonej kultury. Na przykład aplikacja umożliwia użytkownikowi, którego bieżąca kultura jest EN-US, aby wprowadzić wartość daty jako "12/15/2013" lub "15 grudnia 2013". Umożliwia użytkownikowi, którego bieżąca kultura to pl-GB, wprowadzanie wartości daty jako "15/12/2013" lub "15 grudnia 2013".  
  
-   Data i godzina są reprezentowane w wstępnie zdefiniowanym formacie. Na przykład aplikacja serializować datę jako "20130103" niezależnie od kultury, w której działa aplikacja. Aplikacja może wymagać, aby daty były wprowadzane w formacie daty krótkiej bieżącej kultury.
  
Używasz metody <xref:System.DateTime.TryParse%2A> <xref:System.DateTime> lub do konwertowania ciągu z jednego ze wspólnych formatów daty i godziny używanych przez kulturę do wartości. <xref:System.DateTime.Parse%2A> Poniższy przykład pokazuje, jak można użyć <xref:System.DateTime.TryParse%2A> do przekonwertowania ciągów dat w różnych formatach specyficznych <xref:System.DateTime> dla kultury do wartości. Zmienia bieżącą kulturę na angielski (Wielka Brytania) i wywołuje <xref:System.DateTime.GetDateTimeFormats> metodę w celu wygenerowania tablicy ciągów daty i godziny. Następnie przekazuje każdy element w tablicy do <xref:System.DateTime.TryParse%2A> metody. Dane wyjściowe z przykładu pokazują, że metoda analizy była w stanie pomyślnie skonwertować każdą z ciągów daty i godziny specyficznych dla kultury.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Przy użyciu <xref:System.DateTime.ParseExact%2A> metod i <xref:System.DateTime.TryParseExact%2A> można skonwertować ciąg, który musi być zgodny z określonym <xref:System.DateTime> formatem lub formatami do wartości. Należy określić co najmniej jeden ciąg formatu daty i godziny jako parametr metody analizy. W poniższym przykładzie zastosowano <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodę w celu przekonwertowania ciągów, które muszą mieć format "RRRRMMDD" lub "HHmmss" do <xref:System.DateTime> wartości.  
  
<a name="parsing-02"></a> [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Typowym zastosowaniem <xref:System.DateTime.ParseExact%2A> do programu jest Konwersja ciągu reprezentowanego z usługi sieci Web, zwykle w formacie standardu [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) . Poniższy kod pokazuje prawidłowy ciąg formatu do użycia:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Jeśli nie można przeanalizować ciągu, <xref:System.DateTime.Parse%2A> metody i <xref:System.DateTime.ParseExact%2A> zgłaszają wyjątek. Metody <xref:System.DateTime.TryParse%2A> i <xref:System.DateTime.TryParseExact%2A> zwracają<xref:System.Boolean> wartość, która wskazuje, czy konwersja zakończyła się powodzeniem, czy niepowodzeniem. Należy używać <xref:System.DateTime.TryParse%2A> metod lub <xref:System.DateTime.TryParseExact%2A> w scenariuszach, w których wydajność jest ważna. Operacja analizowania ciągów daty i godziny ma dużą częstotliwość niepowodzeń, a obsługa wyjątków jest kosztowna. Użyj tych metod, jeśli ciągi są wprowadzane przez użytkowników lub pochodzą z nieznanego źródła. 
  
Aby uzyskać więcej informacji na temat analizowania wartości daty i godziny, zobacz [Analizowanie ciągów daty i godziny](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Wartości typu DateTime

Opisy wartości czasu w <xref:System.DateTime> typie są często wyrażane przy użyciu standardowego czasu koordynowanego (UTC). Uniwersalny czas koordynowany jest międzynarodowo rozpoznawaną nazwą czasu uniwersalnego Greenwich (GMT). Uniwersalny czas koordynowany to czas, jaki jest mierzony dla długości geograficznej równej zero stopni, a punkt początkowy czasu UTC. Czas letni nie dotyczy czasu UTC.  
  
Czas lokalny jest względem określonej strefy czasowej. Strefa czasowa jest skojarzona z przesunięciem strefy czasowej. Przesunięcie strefy czasowej to przemieszczenie strefy czasowej mierzoną w godzinach od punktu początkowego czasu UTC. Ponadto czas lokalny jest zaatakowany na czas letni, który dodaje lub odejmuje korektę przedziału czasu. Czas lokalny jest obliczany przez dodanie przesunięcia strefy czasowej do czasu UTC i dostosowanie czasu letniego, jeśli jest to konieczne. Przesunięcie strefy czasowej w punkcie początkowym UTC ma wartość zero.  
  
Czas UTC jest odpowiedni dla obliczeń, porównań i przechowywania dat i godzin w plikach. Czas lokalny jest odpowiedni do wyświetlania w interfejsie użytkownika aplikacji klasycznych. Aplikacje obsługujące strefy czasowe (takie jak wiele aplikacji sieci Web) muszą również współpracować z wieloma innymi strefami czasowymi.  
  
<xref:System.DateTime.Kind%2A> Jeśli właściwość <xref:System.DateTime> obiektu ma<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>wartość, nie jest określana, czy godzina reprezentowana przez czas lokalny, czas UTC czy godzina w innej strefie czasowej.  

### <a name="datetime-resolution"></a>Rozdzielczość DateTime
  
> [!NOTE]
>  Jako alternatywę dla wykonywania operacji arytmetycznych na wartościach daty i godziny w <xref:System.DateTime> celu mierzenia czasu, który upłynął, można <xref:System.Diagnostics.Stopwatch> użyć klasy.  
  
<xref:System.DateTime.Ticks%2A> Właściwość wyraża wartości daty i godziny w jednostkach 1 10-milionowego sekundy. <xref:System.DateTime.Millisecond%2A> Właściwość zwraca stutysięcznych sekundy w wartości daty i godziny. Użycie powtarzających się <xref:System.DateTime.Now%2A?displayProperty=nameWithType> wywołań właściwości w celu zmierzenia czasu, który upłynął, zależy od zegara systemowego. Zegar systemowy w systemach Windows 7 i Windows 8 ma rozdzielczość około 15 milisekund. To rozwiązanie ma wpływ na małe przedziały czasu mniejsze niż 100 milisekund. 
  
Poniższy przykład ilustruje zależność bieżącej wartości daty i godziny w rozdzielczości zegara systemowego. W przykładzie pętla zewnętrzna powtarza się 20 razy, a pętla wewnętrzna służy do opóźniania pętli zewnętrznej. Jeśli wartość licznika pętla zewnętrzna to 10, wywołanie <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metody wprowadza opóźnienie z pięciu milisekund. W poniższym przykładzie pokazano liczbę milisekund zwracanych przez właściwość, `DateTime.Now.Milliseconds` które są zmieniane tylko po <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>wywołaniu.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operacje typu DateTime  

Obliczenia przy użyciu <xref:System.DateTime> struktury, takiej jak <xref:System.DateTime.Add%2A> lub <xref:System.DateTime.Subtract%2A>, nie modyfikują wartości struktury. Zamiast tego Obliczanie zwraca nową <xref:System.DateTime> strukturę, której wartością jest wynik obliczenia.  
  
Operacje konwersji między strefami czasowymi (na przykład między czasem UTC i czasem lokalnym lub między jedną strefą czasową a kolejną) mają czas letni, ale operacje arytmetyczne i porównania nie są wykonywane.  
  
Sama <xref:System.DateTime> struktura oferuje ograniczoną obsługę konwersji z jednej strefy czasowej na inną. Można użyć <xref:System.DateTime.ToLocalTime%2A> metody do przekonwertowania czasu UTC na czas lokalny lub można <xref:System.DateTime.ToUniversalTime%2A> użyć metody do konwersji z czasu lokalnego na UTC. Jednak w <xref:System.TimeZoneInfo> klasie jest dostępny pełny zestaw metod konwersji strefy czasowej. Czas można przekonwertować na dowolną strefę czasową w każdej innej strefie czasowej przy użyciu tych metod.  
  
Obliczenia i porównania <xref:System.DateTime> obiektów są zrozumiałe tylko wtedy, gdy obiekty reprezentują czasy w tej samej strefie czasowej. Można użyć <xref:System.TimeZoneInfo> obiektu do <xref:System.DateTime> reprezentowania strefy czasowej, chociaż te dwa są luźno sprzężone. <xref:System.DateTime> Obiekt nie ma właściwości, która zwraca obiekt, który reprezentuje strefę czasową wartości daty i godziny. Właściwość wskazuje, czy element `DateTime` reprezentuje czas UTC, lokalny, czy nieokreślony. <xref:System.DateTime.Kind%2A> W aplikacji obsługującej strefy czasowej należy polegać na pewnym mechanizmie zewnętrznym do określenia strefy czasowej, w <xref:System.DateTime> której został utworzony obiekt. Można użyć struktury, która otacza zarówno <xref:System.DateTime> wartość <xref:System.TimeZoneInfo> , jak i obiekt, który reprezentuje <xref:System.DateTime> strefę czasową wartości. Aby uzyskać szczegółowe informacje o używaniu czasu UTC w <xref:System.DateTime> obliczeniach i porównaniach z wartościami, zobacz [wykonywanie operacji arytmetycznych z datami i godzinami](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Każdy <xref:System.DateTime> element członkowski niejawnie używa kalendarza gregoriańskiego do wykonania jego operacji. Wyjątki to metody, które niejawnie określają kalendarz. Należą do nich konstruktory określające kalendarz i metody z parametrem pochodnym <xref:System.IFormatProvider>, takim jak <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Operacje według członków <xref:System.DateTime> typu uwzględniają szczegóły konta, takie jak lata przestępne i liczba dni w miesiącu.  

## <a name="datetime-values-and-calendars"></a>Wartości DateTime i kalendarze  

Biblioteka klas .NET Framework obejmuje wiele klas kalendarza, z których wszystkie pochodzą z <xref:System.Globalization.Calendar> klasy.  Są to:  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> Klasa.  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> Klasa.  
-   <xref:System.Globalization.GregorianCalendar> Klasa.  
-   <xref:System.Globalization.HebrewCalendar> Klasa.  
-   <xref:System.Globalization.HijriCalendar> Klasa.  
-   <xref:System.Globalization.JapaneseCalendar> Klasa.  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> Klasa.  
-   <xref:System.Globalization.JulianCalendar> Klasa.  
-   <xref:System.Globalization.KoreanCalendar> Klasa.  
-   <xref:System.Globalization.KoreanLunisolarCalendar> Klasa.  
-   <xref:System.Globalization.PersianCalendar> Klasa.  
-   <xref:System.Globalization.TaiwanCalendar> Klasa.  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> Klasa.  
-   <xref:System.Globalization.ThaiBuddhistCalendar> Klasa.  
-   <xref:System.Globalization.UmAlQuraCalendar> Klasa.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

Każda kultura używa domyślnego kalendarza zdefiniowanego przez jego właściwość tylko <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> do odczytu. Każda kultura może obsługiwać co najmniej jeden kalendarz zdefiniowany przez jego właściwość tylko <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> do odczytu. Kalendarz aktualnie używany przez określony <xref:System.Globalization.CultureInfo> obiekt jest definiowany za pomocą jego <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> właściwości. Musi to być jeden z kalendarzy znalezionych w <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> tablicy.  
  
Bieżący kalendarz kultury jest używany we wszystkich operacjach formatowania dla tej kultury. Na przykład domyślnym kalendarzem tajlandzkiej kultury (Buddyjski) jest kalendarz ery, który jest reprezentowany przez <xref:System.Globalization.ThaiBuddhistCalendar> klasę.  Gdy w operacji formatowania daty i godziny jest używany obiekt,któryreprezentujekulturętajskiejbuddyjski,domyślnieużywanyjestkalendarzeryERAwjęzykutajlandzkim.<xref:System.Globalization.CultureInfo> Kalendarz gregoriański jest używany tylko wtedy, gdy <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> właściwość kultury zostanie zmieniona, jak pokazano na poniższym przykładzie:  

<a name="calendars-01"></a> [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Bieżący kalendarz kultury jest również używany we wszystkich operacjach analizy dla tej kultury, jak pokazano w poniższym przykładzie.  
  
<a name="calendars-02"></a> [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Można utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu elementów daty i godziny (liczba lat, miesiąc i dzień) określonego kalendarza przez wywołanie [konstruktora DateTime](xref:System.DateTime.%23ctor%2A) zawierającego `calendar` parametr i przekazanie go do <xref:System.Globalization.CultureInfo.Calendar%2A> obiektu, który reprezentuje ten kalendarz. W poniższym przykładzie zastosowano elementy daty i godziny w <xref:System.Globalization.ThaiBuddhistCalendar> kalendarzu.  
  
<a name="calendars-03"></a> [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime>konstruktory, które nie zawierają `calendar` parametru założono, że elementy daty i godziny są wyrażane jako jednostki w kalendarzu gregoriańskim.  
  
Wszystkie inne <xref:System.DateTime> właściwości i metody są używane w kalendarzu gregoriańskim. Na przykład <xref:System.DateTime.Year%2A?displayProperty=nameWithType> Właściwość zwraca rok w kalendarzu gregoriańskim, <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> a metoda zakłada, że `year` parametr jest rokiem w kalendarzu gregoriańskim.  Każdy <xref:System.DateTime> element członkowski, który używa kalendarza gregoriańskiego, ma odpowiadający mu <xref:System.Globalization.CultureInfo.Calendar%2A> element członkowski klasy, która używa określonego kalendarza. Na przykład <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> Metoda zwraca rok w określonym kalendarzu, <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> a metoda interpretuje `year` parametr jako numer roku w określonym kalendarzu. Poniższy przykład używa zarówno <xref:System.DateTime> i odpowiednich elementów członkowskich <xref:System.Globalization.ThaiBuddhistCalendar> klasy.  
  
<a name="calendars-04"></a> [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime> Struktura<xref:System.DateTime.DayOfWeek%2A> zawiera właściwość, która zwraca dzień tygodnia w kalendarzu gregoriańskim. Nie zawiera elementu członkowskiego, który umożliwia pobranie numeru tygodnia roku. Aby pobrać tydzień roku, wywołaj <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> metodę poszczególnych kalendarzy. Poniższy przykład stanowi ilustrację.  
  
<a name="calendars-05"></a> [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Aby uzyskać więcej informacji na temat dat i kalendarzy, zobacz [Praca z kalendarzami](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Utrwalanie wartości DateTime  

Możesz utrzymywać <xref:System.DateTime> wartości na cztery sposoby:  
  
-   [Konwertujesz je na ciągi](#persisting-values-as-strings) i Utrwalaj ciągi.  
-   [Konwertujesz je na 64-bitowe wartości całkowite](#persisting-values-as-integers) (wartość <xref:System.DateTime.Ticks%2A> właściwości) i Utrwalaj liczby całkowite.  
-   [Serializowanie wartości DateTime](#serializing-datetime-values).  
-   Można [serializować wartości DateTime wraz z informacjami o strefie czasowej](#serializing-datetime-and-time-zone-data).  
  
Musisz się upewnić, że procedura, która <xref:System.DateTime> przywraca wartości nie utraci danych ani nie zgłosi wyjątku niezależnie od wybranej techniki. <xref:System.DateTime>wartości powinny być w trakcie rundy. Oznacza to, że oryginalna wartość i przywrócona wartość powinna być taka sama. A jeśli oryginalna <xref:System.DateTime> wartość reprezentuje pojedynczy czas, powinien on identyfikować ten sam moment podczas przywracania.  
  
#### <a name="persisting-values-as-strings"></a>Utrwalanie wartości jako ciągów  

Aby pomyślnie przywrócić <xref:System.DateTime> wartości, które są utrwalane jako ciągi, należy przestrzegać następujących reguł:  
  
-   Należy wykonać te same założenia dotyczące formatowania specyficznego dla kultury podczas przywracania ciągu jako podczas jego utrwalania. Aby upewnić się, że ciąg można przywrócić w systemie, którego bieżąca kultura różni się od kultury systemu, w którym została zapisana, wywołaj <xref:System.DateTime.ToString%2A> Przeciążenie, aby zapisać ciąg przy użyciu konwencji niezmiennej kultury. Wywołaj <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> lub Przeciążenie, aby przywrócić ciąg przy użyciu konwencji niezmiennej kultury. <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Nigdy nie używaj <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, ani <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> przeciążenia, które używają Konwencji bieżącej kultury wątku.  
  
-   Jeśli data reprezentuje jeden moment, należy się upewnić, że reprezentuje on ten sam moment w czasie, nawet w innej strefie czasowej. Przed zapisaniem programu <xref:System.DateTime> przekonwertuj wartość na uniwersalny czas koordynowany (UTC). Można również serializować wartości wraz z informacjami o strefie czasowej. Aby uzyskać więcej informacji na temat tego podejścia, zobacz [Serializowanie danych dotyczących daty i godziny i strefy czasowej](#serializing-datetime-and-time-zone-data).  
  
 Najbardziej typowym błędem podczas utrwalania <xref:System.DateTime> wartości jako ciągi jest poleganie na konwencjach formatowania domyślnej lub obecnej kultury. Problemy powstają, jeśli bieżąca kultura jest różna podczas zapisywania i przywracania ciągów. Poniższy przykład ilustruje te problemy. Zapisuje pięć dat przy użyciu Konwencji formatowania bieżącej kultury, co w tym przypadku jest w języku angielskim (Stany Zjednoczone). Przywraca daty przy użyciu Konwencji formatowania innej kultury, która w tym przypadku jest w języku angielskim (Wielka Brytania). Ponieważ konwencje formatowania dwóch kultur są różne, nie można przywrócić dwóch dat, a pozostałe trzy daty są interpretowane nieprawidłowo. Ponadto, jeśli oryginalne wartości daty i godziny reprezentują jeden moment w czasie, przywracane czasy są nieprawidłowe, ponieważ informacje o strefie czasowej są tracone.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Aby pomyślnie zaokrąglić <xref:System.DateTime> wartości, wykonaj następujące kroki:  
  
1.  Jeśli wartości reprezentują pojedyncze momenty, należy je przekonwertować z czasu lokalnego na UTC przez wywołanie <xref:System.DateTime.ToUniversalTime%2A> metody.  
1.  Przekonwertuj daty na ich reprezentacje ciągów przez wywołanie <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> metody <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> lub przeciążenia. Użyj Konwencji formatowania kultury niezmiennej, określając <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> `provider` jako argument. Określ, że wartość powinna być runda przy użyciu ciągu formatu standardowego "O" lub "R".  
  
Aby przywrócić utrwalone <xref:System.DateTime> wartości bez utraty danych, wykonaj następujące kroki:  
  
1.  Przeanalizuj dane przez wywołanie metody <xref:System.DateTime.ParseExact%2A> lub <xref:System.DateTime.TryParseExact%2A> przeciążenia. Określ <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> `format` jako argument i Użyj tego samego ciągu formatu standardowego, który został użyty dla argumentu podczas konwersji. `provider` Uwzględnij `styles` wartość w argumencie. <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>  
1.  Jeśli wartości reprezentują jeden moment w czasie, wywołaj metodę <xref:System.DateTime.ToLocalTime%2A> , aby skonwertować przeanalizowana datę z UTC na czas lokalny. <xref:System.DateTime>  
  
W poniższym przykładzie użyto niezmiennej kultury i ciągu formatu standardowego "O", aby upewnić się <xref:System.DateTime> , że wartości zapisane i przywrócone reprezentują ten sam moment w czasie, niezależnie od systemu, kultury lub strefy czasowej systemów źródłowych i docelowych.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Utrwalanie wartości jako liczby całkowite  

Możesz utrzymywać datę i godzinę jako <xref:System.Int64> wartość, która reprezentuje liczbę taktów. W takim przypadku nie trzeba brać pod uwagę kultury systemów, <xref:System.DateTime> w których wartości są utrwalane i przywracane.  
  
Aby zachować <xref:System.DateTime> wartość jako liczbę całkowitą:  
  
-   Jeśli wartości reprezentują jeden moment w czasie, należy przekonwertować je na czas UTC przez <xref:System.DateTime.ToUniversalTime%2A> wywołanie metody. <xref:System.DateTime>  
-   Pobierz liczbę taktów reprezentowanych przez <xref:System.DateTime> wartość z jej <xref:System.DateTime.Ticks%2A> właściwości.  
  
Aby przywrócić <xref:System.DateTime> wartość, która została utrwalona jako liczba całkowita:  
  
1.  Tworzenie wystąpienia nowego <xref:System.DateTime> obiektu przez <xref:System.Int64> przekazanie wartości do <xref:System.DateTime.%23ctor%28System.Int64%29> konstruktora.  
1.  Jeśli wartość reprezentuje pojedynczy moment w czasie, przekonwertuj ją z czasu UTC na czas lokalny, <xref:System.DateTime.ToLocalTime%2A> wywołując metodę. <xref:System.DateTime>  
  
Poniższy przykład utrwala tablicę <xref:System.DateTime> wartości jako liczby całkowite w systemie w Stanach Zjednoczonych Strefa czasowa pacyficznego. Przywraca je w systemie w strefie UTC. Plik zawierający liczby całkowite zawiera <xref:System.Int32> wartość wskazującą łączną liczbę wartości, które od <xref:System.Int64> razu obserwują.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>Serializowanie wartości DateTime  

Możesz utrwalać <xref:System.DateTime> wartości za pomocą serializacji do strumienia lub pliku, a następnie przywrócić je za pomocą deserializacji. <xref:System.DateTime>dane są serializowane w określonym formacie obiektu. Obiekty są przywracane podczas deserializacji. Program formatujący lub Serializator, taki <xref:System.Xml.Serialization.XmlSerializer> jak <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>lub, obsługuje proces serializacji i deserializacji. Aby uzyskać więcej informacji na temat serializacji i typów serializacji obsługiwanych przez .NET Framework, zobacz [serializacji](~/docs/standard/serialization/index.md).
  
Poniższy przykład używa <xref:System.Xml.Serialization.XmlSerializer> klasy do serializacji i deserializacji <xref:System.DateTime> wartości. Wartości reprezentują wszystkie dni roku przestępnego w dwudziestym pierwszym wieku. Dane wyjściowe reprezentują wynik, jeśli przykład jest uruchamiany w systemie, którego bieżącą kulturą jest angielski (Wielka Brytania). Ponieważ został rozszeregowany <xref:System.DateTime> sam obiekt, kod nie musi obsługiwać różnic kulturowych w formatach daty i godziny.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Poprzedni przykład nie zawiera informacji o czasie. Jeśli wartość reprezentuje moment w czasie i jest wyrażona jako czas lokalny, przekonwertuj ją z czasu lokalnego na UTC przed serializacjęm, <xref:System.DateTime.ToUniversalTime%2A> wywołując metodę. <xref:System.DateTime> Po wykonaniu serializacji należy przekonwertować ją z czasu UTC na czas lokalny, wywołując <xref:System.DateTime.ToLocalTime%2A> metodę. Poniższy przykład używa <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> klasy do serializacji <xref:System.DateTime> danych w systemie w Stanach Zjednoczonych Standardowa strefa czasowa pacyficznego i deserializacja jej w systemie w Stanach Zjednoczonych Centralna strefa standardowa.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>Serializowanie danych o wartościach daty i godziny  

Poprzednie przykłady zakłada się, że <xref:System.DateTime> wartości są wyrażane jako czasy lokalne. Kod przekonwertował wartości między czasem UTC a czasem lokalnym, aby odzwierciedlały one ten sam moment w systemie źródłowym i docelowym. <xref:System.DateTime>wartości mogą również odzwierciedlać chwilę w czasie w strefie czasowej innej niż Local i UTC. Ponieważ struktura nie jest uwzględniana w strefie czasowej, należy serializować <xref:System.DateTime> zarówno wartość, jak i <xref:System.TimeZoneInfo> obiekt, który reprezentuje jego strefę czasową. <xref:System.DateTime> Utwórz typ, którego pola zawierają zarówno <xref:System.DateTime> wartość, jak i jej strefę czasową. W poniższym przykładzie zdefiniowano `DateWithTimeZone` strukturę.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Struktura jest używana w następnych dwóch przykładach, które serializować i deserializacji `DateWithTimeZone` tablicę obiektów. `DateWithTimeZone` Możesz wyświetlić Źródło całego zestawu przykładów z tego artykułu w [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) lub [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) z repozytorium docs w witrynie GitHub.
  
Przy użyciu `DateWithTimeZone` struktury można następnie utrwalać datę i godzinę wraz z informacjami o strefie czasowej. Poniższy przykład używa <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> klasy do serializacji `DateWithTimeZone` tablicy obiektów.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Poniższy przykład wywołuje <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> metodę w celu deserializacji.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime a TimeSpan  

Typy wartości <xref:System.TimeSpan>iróżnią się w tym samym czasie <xref:System.TimeSpan> , gdyreprezentujeprzedziałczasu.<xref:System.DateTime> <xref:System.DateTime> Można odjąć jedno wystąpienie <xref:System.DateTime> od innego, aby <xref:System.TimeSpan> uzyskać obiekt, który reprezentuje przedział czasu między nimi. Można też dodać <xref:System.TimeSpan> <xref:System.DateTime> wartość dodatnią do bieżącej <xref:System.DateTime> , aby uzyskać wartości, która reprezentuje datę przyszłą.  
  
Przedział czasu można dodać lub odjąć od <xref:System.DateTime> obiektu. Przedziały czasu mogą być ujemne lub dodatnie i mogą być wyrażone w jednostkach, takich jak takty, sekundy <xref:System.TimeSpan> lub jako obiekt.  

### <a name="comparing-for-equality-within-tolerance"></a>Porównywanie pod kątem równości w tolerancjach

Porównywanie <xref:System.DateTime> równości wartości jest dokładne. Oznacza to, że dwie wartości muszą być wyrażone jako te same liczby taktów, które mają być traktowane jako równe. Ta precyzja jest często niepotrzebna lub nawet nieprawidłowa dla wielu aplikacji. Często chcesz przetestować, czy <xref:System.DateTime> obiekty są w przybliżeniu **równe**. 

W poniższym przykładzie pokazano, jak porównać wartości w przybliżeniu równoważne <xref:System.DateTime> . Akceptuje niewielki margines różnicy podczas deklarowania ich równości.  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Uwagi dotyczące współdziałania COM  

<xref:System.DateTime> Wartość, która jest przesyłana do aplikacji com, a następnie jest przesyłana z powrotem do zarządzanej aplikacji. <xref:System.DateTime> Jednak wartość, która określa tylko czas, nie jest czasochłonna.  
  
W przypadku rundy tylko czasu, takiego jak 3 godziny, końcowa Data i godzina to 30 grudnia 1899 0001 o godzinie 3:00 zamiast stycznia, 0,001 0001 at 3:00 P.M. W .NET Framework i COM przyjęto datę domyślną, gdy określony jest tylko czas. Jednak system COM przyjmuje podstawową datę 30 grudnia 1899 0001, podczas gdy .NET Framework zakłada datę bazową stycznia, 1, 0,001 0001  
  
Gdy jest przesyłany tylko czas z .NET Framework do modelu COM, wykonywane jest specjalne przetwarzanie, które konwertuje czas na format używany przez COM. Gdy do .NET Framework jest przesyłany tylko czas, nie jest przeprowadzane żadne specjalne przetwarzanie, ponieważ mogłoby to spowodować uszkodzenie uprawnionych dat i godzin w dniu lub przed 30 grudnia 1899. Jeśli data rozpocznie działanie rundy z modelu COM, .NET Framework i COM zachowają datę.  
  
Zachowanie .NET Framework i com oznacza, że jeśli aplikacja jest runda <xref:System.DateTime> , która określa tylko czas, aplikacja musi pamiętać, aby zmodyfikować lub zignorować błędną datę z obiektu końcowego. <xref:System.DateTime>  
     
 ]]></format>
    </remarks>
    <threadsafe>Wszystkie elementy członkowskie tego typu są bezpieczne wątkowo. Elementy członkowskie, które na pierwszy rzut oka modyfikują stan wystąpienia, w rzeczywistości zwracają nowe wystąpienie zainicjowane z nową wartością. Podobnie jak w przypadku innych typów odczytywanie i zapisywanie w udostępnionej zmiennej, która zawiera wystąpienie tego typu, musi być chronione przez blokadę w celu zagwarantowania bezpieczeństwa wątków.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Wybieranie pomiędzy elementem DateTime, DateTimeOffset, TimeSpan i TimeZoneInfo</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Praca z kalendarzami</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Data i godzina wyrażona w liczbie interwałów 100-nanosekund, które upłynęły od 1 stycznia 0,001 w 00:00:00.000 w kalendarzu gregoriańskim.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonej liczby taktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład ilustruje jeden z <xref:System.DateTime> konstruktorów.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" />jest mniejsze niż <see cref="F:System.DateTime.MinValue" /> lub większe niż <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">Data i godzina wyrażona w liczbie interwałów 100-nanosekund, które upłynęły od 1 stycznia 0,001 w 00:00:00.000 w kalendarzu gregoriańskim.</param>
        <param name="kind">Jedna z wartości wyliczenia, która wskazuje, <paramref name="ticks" /> czy określa czas lokalny, uniwersalny czas koordynowany (UTC), czy nie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonej liczby taktów i uniwersalnego czasu koordynowanego (UTC) lub czasu lokalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" />jest mniejsze niż <see cref="F:System.DateTime.MinValue" /> lub większe niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />nie jest jedną z <see cref="T:System.DateTimeKind" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca i dnia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje `year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Wywołaj konstruktora.  
  
 Godzina dla wyników <xref:System.DateTime> wynosi północy (00:00:00). Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. <xref:System.DateTime.Kind%2A>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> konstruktora, aby <xref:System.DateTime> utworzyć wystąpienie wartości. Przykład ilustruje również, że to Przeciążenie tworzy <xref:System.DateTime> wartość, której składnik czasu jest równy północy (lub 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Rok (1 do liczby lat w <paramref name="calendar" />).</param>
        <param name="month">Miesiąc (od 1 do liczba miesięcy w <paramref name="calendar" />).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="calendar">Kalendarz używany do interpretowania <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury w określonym roku, miesiącu i dniu dla określonego kalendarza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Godzina dla wyników <xref:System.DateTime> wynosi północy (00:00:00). Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 Dozwolone wartości dla `year`, `month`i `day` zależą od `calendar`. Wyjątek jest zgłaszany, jeśli określona data i godzina nie mogą być wyrażone przy użyciu `calendar`.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Przestrzeń nazw zawiera kilka kalendarzy <xref:System.Globalization.GregorianCalendar> , w tym i <xref:System.Globalization.JulianCalendar>. <xref:System.Globalization>  
  
   
  
## Examples  
 Poniższy przykład wywołuje konstruktora dwa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> razy, aby utworzyć wystąpienie <xref:System.DateTime> dwóch wartości. Pierwsze wywołanie tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.PersianCalendar> użyciu obiektu. Ponieważ kalendarza Perski nie można wyznaczyć jako domyślnego kalendarza dla kultury, wyświetlanie daty w kalendarzu perskim wymaga pojedynczych wywołań <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>metod, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, i <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> . Drugie wywołanie konstruktora tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.HijriCalendar> użyciu obiektu. W tym przykładzie zmieniono bieżącą kulturę na Arabski (Syria) i kalendarz domyślny bieżącej kultury na kalendarz Hidżry. Ponieważ Hidżra jest domyślnym kalendarzem bieżącej kultury, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa go do formatowania daty. Gdy zostanie przywrócona Poprzednia bieżąca kultura (w tym przypadku w języku angielskim (Stany Zjednoczone), <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa domyślnego kalendarza gregoriańskiego bieżącej kultury do formatowania daty.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest poza zakresem obsługiwanym przez <paramref name="calendar" />.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż liczba miesięcy w <paramref name="calendar" />.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty i sekundy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 Ten konstruktor interpretuje`year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Wywołaj konstruktora.  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.%23ctor%2A> konstruktora, aby <xref:System.DateTime> utworzyć wystąpienie wartości.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="kind">Jedna z wartości wyliczenia, która wskazuje <paramref name="year" /> <paramref name="day" />, <paramref name="month" /> <paramref name="hour" /> <paramref name="second" /> czy,,, iokreślaćczaslokalny,uniwersalnyczaskoordynowany(UTC)lubnie.<paramref name="minute" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty, sekundy i uniwersalnego czasu koordynowanego (UTC) lub czasu lokalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje`year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Wywołaj konstruktora.  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> konstruktora, aby <xref:System.DateTime> utworzyć wystąpienie wartości.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />nie jest jedną z <see cref="T:System.DateTimeKind" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Rok (1 do liczby lat w <paramref name="calendar" />).</param>
        <param name="month">Miesiąc (od 1 do liczba miesięcy w <paramref name="calendar" />).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="calendar">Kalendarz używany do interpretowania <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty i sekundy dla określonego kalendarza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 Dozwolone wartości dla `year`, `month`i `day` zależą od `calendar`. Wyjątek jest zgłaszany, jeśli określona data i godzina nie mogą być wyrażone przy użyciu `calendar`.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Przestrzeń nazw zawiera kilka kalendarzy <xref:System.Globalization.GregorianCalendar> , w tym i <xref:System.Globalization.JulianCalendar>. <xref:System.Globalization>  
  
   
  
## Examples  
 Poniższy przykład wywołuje konstruktora dwa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> razy, aby utworzyć wystąpienie <xref:System.DateTime> dwóch wartości. Pierwsze wywołanie tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.PersianCalendar> użyciu obiektu. Ponieważ kalendarza Perski nie można wyznaczyć jako domyślnego kalendarza dla kultury, wyświetlanie daty w kalendarzu perskim wymaga pojedynczych wywołań <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>metod, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, i <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> . Drugie wywołanie konstruktora tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.HijriCalendar> użyciu obiektu. W tym przykładzie zmieniono bieżącą kulturę na Arabski (Syria) i kalendarz domyślny bieżącej kultury na kalendarz Hidżry. Ponieważ Hidżra jest domyślnym kalendarzem bieżącej kultury, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa go do formatowania daty. Gdy zostanie przywrócona Poprzednia bieżąca kultura (w tym przypadku w języku angielskim (Stany Zjednoczone), <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa domyślnego kalendarza gregoriańskiego bieżącej kultury do formatowania daty.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest poza zakresem obsługiwanym przez <paramref name="calendar" />.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż liczba miesięcy w <paramref name="calendar" />.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23 
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty, sekundy i milisekund.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje`year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Wywołaj konstruktora.  
  
 Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> konstruktora, aby <xref:System.DateTime> utworzyć wystąpienie wartości.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">Rok (od 1 do 9999).</param>
        <param name="month">Miesiąc (od 1 do 12).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="kind">Jedna z wartości wyliczenia <paramref name="year" />wskazująca <paramref name="day" />, <paramref name="month" />czy,,, <paramref name="hour" /> <paramref name="minute" /> <paramref name="second" />,, i <paramref name="millisecond" /> określać czas lokalny, uniwersalny czas koordynowany (UTC) lub nie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i skoordynowanego czasu uniwersalnego (UTC) lub czasu lokalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor interpretuje`year`, `month`i `day` jako rok, miesiąc i dzień w kalendarzu gregoriańskim. Aby utworzyć wystąpienie <xref:System.DateTime> wartości przy użyciu roku, miesiąca i dnia w innym kalendarzu, <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Wywołaj konstruktora.  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> konstruktora, aby <xref:System.DateTime> utworzyć wystąpienie wartości.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />nie jest jedną z <see cref="T:System.DateTimeKind" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Rok (1 do liczby lat w <paramref name="calendar" />).</param>
        <param name="month">Miesiąc (od 1 do liczba miesięcy w <paramref name="calendar" />).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="calendar">Kalendarz używany do interpretowania <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty, sekundy i milisekundy dla określonego kalendarza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest inicjowana do <xref:System.DateTimeKind.Unspecified>. <xref:System.DateTime.Kind%2A>  
  
 Dozwolone wartości dla `year`, `month`i `day` zależą od `calendar`. Wyjątek jest zgłaszany, jeśli określona data i godzina nie mogą być wyrażone przy użyciu `calendar`.  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Przestrzeń nazw zawiera kilka kalendarzy <xref:System.Globalization.GregorianCalendar> , w tym i <xref:System.Globalization.JulianCalendar>. <xref:System.Globalization>  
  
   
  
## Examples  
 Poniższy przykład wywołuje konstruktora dwa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> razy, aby utworzyć wystąpienie <xref:System.DateTime> dwóch wartości. Pierwsze wywołanie tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.PersianCalendar> użyciu obiektu. Ponieważ kalendarza Perski nie można wyznaczyć jako domyślnego kalendarza dla kultury, wyświetlanie daty w kalendarzu perskim wymaga pojedynczych wywołań <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>metod, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, i <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> . Drugie wywołanie konstruktora tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.HijriCalendar> użyciu obiektu. W tym przykładzie zmieniono bieżącą kulturę na Arabski (Syria) i kalendarz domyślny bieżącej kultury na kalendarz Hidżry. Ponieważ Hidżra jest domyślnym kalendarzem bieżącej kultury, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa go do formatowania daty. Gdy zostanie przywrócona Poprzednia bieżąca kultura (w tym przypadku w języku angielskim (Stany Zjednoczone), <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa domyślnego kalendarza gregoriańskiego bieżącej kultury do formatowania daty.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest poza zakresem obsługiwanym przez <paramref name="calendar" />.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż liczba miesięcy w <paramref name="calendar" />.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Rok (1 do liczby lat w <paramref name="calendar" />).</param>
        <param name="month">Miesiąc (od 1 do liczba miesięcy w <paramref name="calendar" />).</param>
        <param name="day">Dzień (1 do liczby dni w <paramref name="month" />).</param>
        <param name="hour">Godziny (od 0 do 23).</param>
        <param name="minute">Minuty (od 0 do 59).</param>
        <param name="second">Liczba sekund (od 0 do 59).</param>
        <param name="millisecond">Milisekundy (od 0 do 999).</param>
        <param name="calendar">Kalendarz używany do interpretowania <paramref name="year" />, <paramref name="month" />, i <paramref name="day" />.</param>
        <param name="kind">Jedna z wartości wyliczenia <paramref name="year" />wskazująca <paramref name="day" />, <paramref name="month" />czy,,, <paramref name="hour" /> <paramref name="minute" /> <paramref name="second" />,, i <paramref name="millisecond" /> określać czas lokalny, uniwersalny czas koordynowany (UTC) lub nie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.DateTime" /> struktury do określonego roku, miesiąca, dnia, godziny, minuty, sekundy, milisekundy i skoordynowanego czasu uniwersalnego (UTC) lub czasu lokalnego dla określonego kalendarza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dozwolone wartości `year`parametrów, `month` `day`isą zależne od parametru.`calendar` Wyjątek jest zgłaszany, jeśli określona data i godzina nie mogą być wyrażone przy użyciu `calendar`.  
  
 W przypadku aplikacji, w których przenośność danych daty i godziny lub ograniczonego stopnia świadomości strefy czasowej jest ważna, można użyć odpowiedniego <xref:System.DateTimeOffset> konstruktora.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Przestrzeń nazw zawiera kilka kalendarzy <xref:System.Globalization.GregorianCalendar> , w tym i <xref:System.Globalization.JulianCalendar>. <xref:System.Globalization>  
  
   
  
## Examples  
 Poniższy przykład wywołuje konstruktora dwa <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> razy, aby utworzyć wystąpienie <xref:System.DateTime> dwóch wartości. Pierwsze wywołanie tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.PersianCalendar> użyciu obiektu. Ponieważ kalendarza Perski nie można wyznaczyć jako domyślnego kalendarza dla kultury, wyświetlanie daty w kalendarzu perskim wymaga pojedynczych wywołań <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>metod, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, i <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> . Drugie wywołanie konstruktora tworzy wystąpienie <xref:System.DateTime> wartości przy <xref:System.Globalization.HijriCalendar> użyciu obiektu. W tym przykładzie zmieniono bieżącą kulturę na Arabski (Syria) i kalendarz domyślny bieżącej kultury na kalendarz Hidżry. Ponieważ Hidżra jest domyślnym kalendarzem bieżącej kultury, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa go do formatowania daty. Gdy zostanie przywrócona Poprzednia bieżąca kultura (w tym przypadku w języku angielskim (Stany Zjednoczone), <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Metoda używa domyślnego kalendarza gregoriańskiego bieżącej kultury do formatowania daty.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest poza zakresem obsługiwanym przez <paramref name="calendar" />.  
  
—lub— 
 <paramref name="month" />jest mniejsza niż 1 lub większa niż liczba miesięcy w <paramref name="calendar" />.  
  
—lub— 
 <paramref name="day" />jest mniejsza niż 1 lub większa niż liczba dni w <paramref name="month" />.  
  
—lub— 
 <paramref name="hour" />jest mniejsza niż 0 lub większa niż 23.  
  
—lub— 
 <paramref name="minute" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="second" />jest mniejsza niż 0 lub większa niż 59.  
  
—lub— 
 <paramref name="millisecond" />jest mniejsza niż 0 lub większa niż 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" />nie jest jedną z <see cref="T:System.DateTimeKind" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Dodatni lub ujemny interwał czasowy.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje wartość określoną <see cref="T:System.TimeSpan" /> do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości daty i godziny reprezentowanej przez to wystąpienie oraz interwału czasu reprezentowanego przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć metody, <xref:System.DateTime.Add%2A> aby dodać więcej niż jeden rodzaj przedziału czasu (dni, godziny, minuty, sekundy lub milisekundy) w ramach jednej operacji. Zachowanie tej metody jest takie samo jak w przypadku operatora dodawania. Struktura obsługuje także wyspecjalizowane metody dodawania (takie jak <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>i <xref:System.DateTime.AddMinutes%2A>) dla każdego przedziału czasu. <xref:System.DateTime>  
  
 <xref:System.DateTime.Add%2A> Metoda uwzględnia lata przestępne oraz liczbę dni w miesiącu podczas wykonywania operacji arytmetycznych.  
  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji. <xref:System.DateTime.Kind%2A> Właściwość nowego<xref:System.DateTime> wystąpienia jest taka sama jak w bieżącym wystąpieniu.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Add%2A> metodę. W tym momencie obliczamy dzień tygodnia, który jest 36 dni (864 godz.).  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba całych i częściowych dni. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę dni do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę dni reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 Część ułamkowa `value` jest częścią ułamkową dnia. Na przykład 4,5 jest odpowiednikiem 4 dni, 12 godzin, 0 minut, 0 sekund, 0 MS i 0 taktów.  
  
 `value` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
 <xref:System.DateTime.AddDays%2A> Metoda uwzględnia lata przestępne oraz liczbę dni w miesiącu podczas wykonywania operacji arytmetycznych.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.DateTime.AddDays%2A> metody do określenia dnia tygodnia 36 dni po dacie bieżącej.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba całych i częściowych godzin. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę godzin do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę godzin przedstawionych przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji. Właściwość zwracanego <xref:System.DateTime> obiektu jest taka sama jak w przypadku elementu `value`. <xref:System.DateTime.Kind%2A>  
  
 Część ułamkowa `value` jest częścią ułamkową godziny. Na przykład 4,5 jest równa 4 godziny, 30 minut, 0 sekund, 0 MS i 0 taktów.  
  
 `value` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
 Przekonwertowanie przedziałów czasu o wartości mniejszej niż godzina do ułamka może spowodować utratę precyzji, jeśli wynik jest niekończącą powtarzaną liczbą dziesiętną. (Na przykład jedna minuta to 0,016667 godziny). Jeśli jest to problematyczne rozwiązanie, można użyć <xref:System.DateTime.Add%2A> metody, która umożliwia określenie więcej niż jednego rodzaju interwału czasu w wywołaniu pojedynczej metody i eliminuje konieczność konwersji przedziałów czasowych na części ułamkowe.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.AddHours%2A> metodę, aby dodać wiele wartości całkowitych i ułamkowych do daty i godziny. Ilustruje również utratę dokładności spowodowaną przez przekazanie metody do wartości, która zawiera składnik Ułamkowy.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba całych i częściowych milisekund. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią. Należy zauważyć, że ta wartość jest zaokrąglana do najbliższej liczby całkowitej.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę milisekund do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę milisekund reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 Część ułamkowa `value` jest częścią ułamkową milisekund. Na przykład 4,5 jest równoważne 4 milisekund i 5000 taktów, gdzie jedna milisekunda = 10000 Takty.  
  
 `value` Parametr jest zaokrąglany do najbliższej liczby całkowitej.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.AddMilliseconds%2A> metodę, aby dodać jeden milisekund i 1,5 milisekund <xref:System.DateTime> do wartości. Następnie zostanie wyświetlona każda nowa wartość i zostanie wyświetlona różnica między nim a wartością oryginalną. Różnica jest wyświetlana zarówno jako przedział czasu, jak i liczba taktów. W przykładzie jest jasne, że jedna milisekunda jest równa 10 000 taktów. Pokazuje również, że ułamki milisekundy są zaokrąglane przed wykonaniem dodawania; <xref:System.DateTime> wartość będąca wynikiem dodania 1,5 milisekund do oryginalnej daty wynosi 2 milisekundy niż oryginalna data.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba całych i częściowych minut. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę minut do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę minut reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 Część ułamkowa `value` jest częścią ułamkową minuty. Na przykład 4,5 jest równoważne 4 minut, 30 sekund, 0 MS i 0 taktów.  
  
 `value` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.AddMinutes%2A> metodę, aby dodać wiele wartości całkowitych i ułamkowych do daty i godziny.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Liczba miesięcy. <paramref name="months" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę miesięcy do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości daty i godziny reprezentowanej przez to wystąpienie i <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime> obiektu. Zamiast tego zwraca nowy <xref:System.DateTime> obiekt, którego wartość jest wynikiem tej operacji.  
  
 Metoda oblicza miesiąc i rok, biorąc pod uwagę lata przestępne i liczbę dni w miesiącu, a następnie dostosowuje część <xref:System.DateTime> dnia tego obiektu. <xref:System.DateTime.AddMonths%2A> Jeśli dany dzień nie jest prawidłowym dniem w ciągu miesiąca, zostanie użyty ostatni prawidłowy dzień wynoszącego miesiąca. Na przykład 31 marca + 1 miesiąc = 30 kwietnia i 31 marca-1 miesiąc = Luty 28 dla roku, w którym nie naprzód i 29 lutego przez rok przestępny.  
  
 Część czasu obiektu wyniku <xref:System.DateTime> jest taka sama jak w przypadku tego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład dodaje od zera do 15 miesięcy do ostatniego dnia grudnia, 2015. W takim przypadku Metoda addmiesiącach zwraca datę ostatniego dnia każdego miesiąca i pomyślnie obsługuje lata przestępne.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.  
  
—lub— 
 <paramref name="months" />jest mniejsza niż-120 000 lub większa niż 120 000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba całych i częściowych sekund. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę sekund do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę sekund reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 Część ułamkowa `value` jest częścią ułamkową sekundy. Na przykład 4,5 jest równoważne 4 sekund, 500 MS i 0 taktów.  
  
 `value` Parametr jest zaokrąglany do najbliższej milisekundy.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.AddSeconds%2A> metodę, aby dodać 30 sekund i liczbę sekund w ciągu jednego dnia <xref:System.DateTime> do wartości. Następnie zostanie wyświetlona każda nowa wartość i zostanie wyświetlona różnica między nim a wartością oryginalną. Różnica jest wyświetlana zarówno jako przedział czasu, jak i liczba taktów.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Liczba taktów 100-nanosekund. <paramref name="value" /> Parametr może być dodatni lub ujemny.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która dodaje określoną liczbę taktów do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą wartości daty i godziny reprezentowanej przez to wystąpienie oraz czasu reprezentowanego przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Liczba lat. <paramref name="value" /> Parametr może mieć wartość ujemną lub dodatnią.</param>
        <summary>Zwraca nowy <see cref="T:System.DateTime" /> , który dodaje określoną liczbę lat do wartości tego wystąpienia.</summary>
        <returns>Obiekt, którego wartość jest sumą daty i godziny reprezentowanej przez to wystąpienie oraz liczbę lat reprezentowane przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime> obiektu. Zamiast tego zwraca nowy <xref:System.DateTime> obiekt, którego wartość jest wynikiem tej operacji.  
  
 <xref:System.DateTime.AddYears%2A> Metoda oblicza rok wynikający z uwzględnienia lat przestępnych. Część "miesiąc" i "godzina" obiektu będącego wynikiem <xref:System.DateTime> jest taka sama jak to wystąpienie.  
  
 Jeśli bieżące wystąpienie reprezentuje dzień przestępny w roku przestępnym, wartość zwracana jest zależna od daty docelowej:  
  
-   Jeśli `value` jesttorównież<xref:System.DateTime.Year%2A?displayProperty=nameWithType> rok przestępny, wartość zwracana reprezentuje dzień przestępny w tym roku.  +  Na przykład jeśli cztery lata zostaną dodane do 29 lutego 2012, zwrócona Data to 29 lutego 2016.  
  
-   Jeśli `value` niejestrokiem<xref:System.DateTime.Year%2A?displayProperty=nameWithType> przestępnym, wartość zwracana reprezentuje dzień wcześniejszy niż dzień przestępny w tym roku.  +  Na przykład jeśli jeden rok zostanie dodany do 29 lutego 2012, zwrócona Data to 28 lutego 2013.  
  
 Poniższy przykład ilustruje użycie <xref:System.DateTime.AddYears%2A> metody <xref:System.DateTime> z wartością, która reprezentuje dzień roku przestępnego. Wyświetla datę 15 lat przed i piętnaście lat, które są zgodne z 29 lutego 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" />lub wyniki <see cref="T:System.DateTime" /> są mniejsze niż <see cref="F:System.DateTime.MinValue" /> lub większe niż <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Porównuje dwa wystąpienia <see cref="T:System.DateTime" /> i zwraca liczbę całkowitą, która wskazuje, czy pierwsze wystąpienie jest wcześniejsze niż, takie samo jak lub późniejsze niż drugie wystąpienie.</summary>
        <returns>Liczba ze znakiem wskazująca wartości <paramref name="t1" /> względne i. <paramref name="t2" />  
  
 <list type="table"><listheader><term> Typ wartości 
 </term><description> Warunek 
 </description></listheader><item><term> Mniej niż zero 
 </term><description><paramref name="t1" />jest wcześniejsza <paramref name="t2" />niż.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="t1" />jest taka sama jak <paramref name="t2" />.  
  
 </description></item><item><term> Większe od zera 
 </term><description><paramref name="t1" />jest późniejsza niż <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby `t1` określić relację do `t2` <xref:System.DateTime.Kind%2A> , <xref:System.DateTime.Compare%2A>Metoda porównuje `t1` `t2` właściwość, ale ignoruje ich właściwości. <xref:System.DateTime.Ticks%2A> Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Compare%2A> metodę.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Porównuje wartość tego wystąpienia z określoną <see cref="T:System.DateTime" /> wartością i wskazuje, czy to wystąpienie jest wcześniejsze niż, tak samo jak lub późniejsze niż określona <see cref="T:System.DateTime" /> wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dwa przeciążenia <xref:System.DateTime.CompareTo%2A> metody zwracają podpisany numer, który wskazuje wartość względną tego wystąpienia `value` i argument, jak pokazano w poniższej tabeli.  
  
|Wartość|Opis|  
|-----------|-----------------|  
|Mniej niż zero|To wystąpienie jest wcześniejsze niż `value`.|  
|Zero|To wystąpienie jest takie samo jak `value`w przypadku programu.|  
|Większe od zera|To wystąpienie jest późniejsze niż `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do porównania z bieżącym wystąpieniem.</param>
        <summary>Porównuje wartość tego wystąpienia z określoną <see cref="T:System.DateTime" /> wartością i zwraca liczbę całkowitą, która wskazuje, czy to wystąpienie jest starsze niż określona <see cref="T:System.DateTime" /> wartość lub nowsza.</summary>
        <returns>Liczba ze znakiem wskazująca wartości względne tego wystąpienia i <paramref name="value" /> parametru.  
  
 <list type="table"><listheader><term> Wartość 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> To wystąpienie jest wcześniejsze niż <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> To wystąpienie jest takie samo jak <paramref name="value" />w przypadku programu.  
  
 </description></item><item><term> Większe od zera 
 </term><description> To wystąpienie jest późniejsze niż <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value`Aby określić relację bieżącego wystąpienia do <xref:System.DateTime.CompareTo%2A> , Metoda porównuje <xref:System.DateTime.Ticks%2A> Właściwość bieżącego wystąpienia `value` , ale ignoruje ich <xref:System.DateTime.Kind%2A> właściwości.  Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości <xref:System.DateTime.Kind%2A> właściwości.  
  
 Ta metoda implementuje <xref:System.IComparable%601?displayProperty=nameWithType> interfejs i wykonuje nieco lepsze niż Przeciążenie metody <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> , ponieważ nie musi konwertować `value` parametru do obiektu.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie trzech <xref:System.DateTime> obiektów, które reprezentują dzisiejszą datę, drugą, która reprezentuje datę z roku, a trzeci, która reprezentuje datę rok w przyszłości. Następnie wywołuje <xref:System.DateTime.CompareTo%28System.DateTime%29> metodę i wyświetla wynik porównania.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt opakowany do porównania lub <see langword="null" />.</param>
        <summary>Porównuje wartość tego wystąpienia z określonym obiektem, który zawiera określoną <see cref="T:System.DateTime" /> wartość, i zwraca liczbę całkowitą, która wskazuje, czy to wystąpienie jest wcześniejsze niż, takie samo jak lub późniejsze niż określona <see cref="T:System.DateTime" /> wartość.</summary>
        <returns>Liczba ze znakiem wskazująca wartości względne tego wystąpienia <paramref name="value" />i.  
  
 <list type="table"><listheader><term> Wartość 
 </term><description> Opis 
 </description></listheader><item><term> Mniej niż zero 
 </term><description> To wystąpienie jest wcześniejsze niż <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> To wystąpienie jest takie samo jak <paramref name="value" />w przypadku programu.  
  
 </description></item><item><term> Większe od zera 
 </term><description> To wystąpienie jest późniejsze niż <paramref name="value" />lub <paramref name="value" /> jest <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value`Aby określić relację bieżącego wystąpienia do <xref:System.DateTime.CompareTo%2A> , Metoda porównuje <xref:System.DateTime.Ticks%2A> Właściwość bieżącego wystąpienia `value` , ale ignoruje ich <xref:System.DateTime.Kind%2A> właściwości. Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości <xref:System.DateTime.Kind%2A> właściwości.  
  
 Każde wystąpienie <xref:System.DateTime>, niezależnie od jego wartości, jest traktowane jako większe niż `null`.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.CompareTo%2A> metodę.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />nie <see cref="T:System.DateTime" />jest.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik daty tego wystąpienia.</summary>
        <value>Nowy obiekt z tą samą datą co to wystąpienie, a wartością czasu ustawioną na 12:00:00 północy (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.DateTime.Kind%2A> właściwości zwracanej <xref:System.DateTime> wartości jest taka sama jak w bieżącym wystąpieniu.  
  
 Ponieważ typ reprezentuje zarówno datę, jak i godziny w pojedynczym typie, ważne jest, aby uniknąć interpretowania daty zwróconej <xref:System.DateTime.Date%2A> przez właściwość jako datę i godzinę. <xref:System.DateTime>  
  
   
  
## Examples  
 Poniższy przykład używa właściwości, <xref:System.DateTime.Date%2A> aby wyodrębnić składnik <xref:System.DateTime> daty wartości z jej składnikiem czasu ustawionym na zero (lub 0:00:00 lub północy). Ilustruje również, że w zależności od ciągu formatu używanego podczas wyświetlania <xref:System.DateTime> wartości, składnik czasu może nadal występować w sformatowanych danych wyjściowych.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień miesiąca reprezentowanego przez to wystąpienie.</summary>
        <value>Składnik dnia wyrażony jako wartość z zakresu od 1 do 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zawsze zwraca dzień miesiąca w kalendarzu gregoriańskim, nawet jeśli bieżąca <xref:System.DateTime> wartość została utworzona przy użyciu innego kalendarza lub jeśli domyślny kalendarz kultury bieżącego wątku nie jest kalendarzem gregoriańskim. <xref:System.DateTime.Day%2A> Aby pobrać dzień miesiąca z określoną datą przy użyciu innego kalendarza, Wywołaj tę <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodę kalendarza. W poniższym przykładzie użyto <xref:System.DateTime.Day%2A> właściwości <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> i metody, aby pobrać dzień miesiąca dla <xref:System.DateTime> wartości, która jest tworzona przy użyciu kalendarza Hidżry.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Podobnie Poniższy przykład używa <xref:System.DateTime.Day%2A> właściwości <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> i metody, aby pobrać dzień miesiąca, gdy bieżąca kultura wątku jest ar-SA, która używa kalendarza Hidżra jako domyślnego kalendarza.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Day%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień tygodnia reprezentowany przez to wystąpienie.</summary>
        <value>Stała wyliczana wskazująca dzień tygodnia tej <see cref="T:System.DateTime" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość stałych w <xref:System.DayOfWeek> wyliczeniu z zakresu od <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> do <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Jeśli rzutowanie na liczbę całkowitą, jego wartości są z zakresu od zera <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>(co wskazuje) na sześć <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>(co oznacza).  
  
 <xref:System.DateTime.DayOfWeek%2A> Właściwość zwraca stałą wyliczaną; nie odzwierciedla ustawień regionalnych i językowych systemu. Aby pobrać ciąg reprezentujący zlokalizowaną nazwę <xref:System.DateTime.ToString%2A> dnia tygodnia dla konkretnej daty, wywołaj jedno z przeciążeń metody, która `format` zawiera parametr, i przekaż go do `dddd` `ddd` ciągów formatu niestandardowego lub. Aby uzyskać szczegółowe informacje [, zobacz How to: Wyodrębnij dzień tygodnia z określonej daty](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.DayOfWeek%2A> Właściwość <xref:System.DayOfWeek?displayProperty=nameWithType> i Wyliczenie.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dzień roku reprezentowanego przez to wystąpienie.</summary>
        <value>Dzień roku wyrażony jako wartość z przedziału od 1 do 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A> Właściwość przyjmuje lata przestępne na konto podczas obliczania dnia roku. Wartość właściwości zawsze odzwierciedla dzień roku w kalendarzu gregoriańskim, niezależnie od bieżącego kalendarza kultury bieżącego wątku. Aby pobrać dzień roku w innym kalendarzu, wywołaj <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> metodę tego kalendarza.  
  
   
  
## Examples  
 Poniższy przykład przedstawia dzień roku 31 grudnia dla lat 2010-2020 w kalendarzu gregoriańskim. Należy zauważyć, że w przykładzie, że 31 grudnia jest 366th dzień roku w latach przestępnych.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok.</param>
        <param name="month">Miesiąc (liczba z zakresu od 1 do 12).</param>
        <summary>Zwraca liczbę dni w określonym miesiącu i roku.</summary>
        <returns>Liczba dni w <paramref name="month" /> odniesieniu do określonej <paramref name="year" />wartości.  
  
Na przykład jeśli <paramref name="month" /> jest równe 2 dla lutego, wartość zwracana wynosi 28 lub 29 w zależności od tego, <paramref name="year" /> czy jest to rok przestępny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zawsze interpretuje `year`ijako miesiąc i rok kalendarza gregoriańskiego, nawet jeśli kalendarz gregoriański nie jest bieżącym kalendarzem bieżącej kultury. `month` <xref:System.DateTime.DaysInMonth%2A> Aby uzyskać liczbę dni w określonym miesiącu określonego kalendarza, Wywołaj tę <xref:System.Globalization.Calendar.GetDaysInMonth%2A> metodę kalendarza.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak za pomocą <xref:System.DateTime.DaysInMonth%2A> metody określić liczbę dni w lipcu 2001, Luty 1998 (rok przestępny) i luty 1996 (rok przestępny).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Poniższy przykład przedstawia liczbę dni w każdym miesiącu roku określonego w tablicy liczb całkowitych.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" />jest mniejsza niż 1 lub większa niż 12.  
  
—lub— 
 <paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca wartość wskazującą, czy dwa <see cref="T:System.DateTime" /> obiekty, <see cref="T:System.DateTime" /> czy wystąpienie i inny obiekt lub <see cref="T:System.DateTime" />mają tę samą wartość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy wartość tego wystąpienia jest równa wartości określonego <see cref="T:System.DateTime" /> wystąpienia.</summary>
        <returns><see langword="true" />Jeśli parametr jest równa wartości tego wystąpienia; <see langword="false" />w przeciwnym razie. <paramref name="value" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżące wystąpienie i `value` są równe, jeśli ich <xref:System.DateTime.Ticks%2A> wartości właściwości są równe. Ich <xref:System.DateTime.Kind%2A> wartości właściwości nie są brane pod uwagę w teście dla równości.  
  
 Ta metoda implementuje <xref:System.IEquatable%601?displayProperty=nameWithType> interfejs i wykonuje nieco lepszą <xref:System.DateTime.Equals%2A> niż metoda, ponieważ `value` parametr nie musi być konwertowany na obiekt.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Equals%2A> metodę.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</summary>
        <returns><see langword="true" />Jeśli <paramref name="value" /> jest <see langword="false" />wystąpieniem i jest równa wartości tego wystąpienia; w przeciwnym razie,. <see cref="T:System.DateTime" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżące wystąpienie i `value` są równe, jeśli ich <xref:System.DateTime.Ticks%2A> wartości właściwości są równe. Ich <xref:System.DateTime.Kind%2A> wartości właściwości nie są brane pod uwagę w teście dla równości.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Equals%2A> metodę.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Zwraca wartość wskazującą, czy dwa <see cref="T:System.DateTime" /> wystąpienia mają tę samą wartość daty i godziny.</summary>
        <returns><see langword="true" />Jeśli dwie wartości są równe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1`i `t2` są równe, jeśli <xref:System.DateTime.Ticks%2A> ich wartości właściwości są równe. Ich <xref:System.DateTime.Kind%2A> wartości właściwości nie są brane pod uwagę w teście dla równości.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Equals%2A> metodę.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData">64-bitowa liczba całkowita ze znakiem, która <see cref="P:System.DateTime.Kind" /> koduje właściwość w polu 2-bitowym <see cref="P:System.DateTime.Ticks" /> i właściwość w polu 62-bitowym.</param>
        <summary>Deserializacji 64-bitową wartość binarną i odtworzy oryginalny serializowany <see cref="T:System.DateTime" /> obiekt.</summary>
        <returns>Obiekt, który jest odpowiednikiem <see cref="T:System.DateTime" /> obiektu, który został Zserializowany <see cref="M:System.DateTime.ToBinary" /> przez metodę.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby przekonwertować wartość bieżącego <xref:System.DateTime> obiektu na wartość binarną. <xref:System.DateTime.ToBinary%2A> Następnie użyj wartości binarnej i <xref:System.DateTime.FromBinary%2A> metody, aby ponownie utworzyć oryginalny <xref:System.DateTime> obiekt.  
  
> [!IMPORTANT]
>  W niektórych przypadkach <xref:System.DateTime> wartość zwracana <xref:System.DateTime.FromBinary%2A> przez metodę nie jest taka sama jak <xref:System.DateTime.ToBinary%2A> oryginalna <xref:System.DateTime> wartość dostarczona do metody. Aby uzyskać więcej informacji, zobacz następną sekcję "dostosowanie czasu lokalnego".  
  
## <a name="local-time-adjustment"></a>Ustawianie czasu lokalnego  
 Czas lokalny, czyli uniwersalny czas koordynowany dostosowany do lokalnej strefy czasowej, jest reprezentowany przez <xref:System.DateTime> strukturę, której <xref:System.DateTime.Kind%2A> właściwość ma wartość <xref:System.DateTimeKind.Local>. Podczas przywracania wartości lokalnej <xref:System.DateTime> z reprezentacji binarnej, która jest tworzona <xref:System.DateTime.ToBinary%2A> przez metodę, <xref:System.DateTime.FromBinary%2A> Metoda może dostosować wartość Recreate, aby nie była równa oryginalnej wartości. Może się to zdarzyć w następujących warunkach:  
  
-   Jeśli obiekt lokalny <xref:System.DateTime> jest serializowany w jednej strefie czasowej <xref:System.DateTime.ToBinary%2A> przez metodę, a następnie deserializowany w <xref:System.DateTime.FromBinary%2A> innej strefie czasowej przez metodę, czas lokalny reprezentowany przez obiekt wyniku <xref:System.DateTime> jest automatycznie dostosowywany do drugiej strefy czasowej.  
  
     Rozważmy na przykład <xref:System.DateTime> obiekt, który reprezentuje czas lokalny o wartości 3 P.M. Aplikacja, która jest wykonywana w Stanach Zjednoczonych Strefa czasowa pacyficznego używa <xref:System.DateTime.ToBinary%2A> metody do konwertowania tego <xref:System.DateTime> obiektu na wartość binarną. Inna aplikacja, która jest wykonywana w Stanach Zjednoczonych Wschodnia strefa czasowa następnie używa <xref:System.DateTime.FromBinary%2A> metody do konwersji wartości binarnej na nowy <xref:System.DateTime> obiekt. Wartość nowego <xref:System.DateTime> obiektu to 6 P.M., który reprezentuje punkt w czasie jako oryginalny 3-p.m. wartość, ale jest ustawiana na czas lokalny w środkowej strefie czasowej.  
  
-   Jeśli reprezentacja binarna wartości lokalnej <xref:System.DateTime> reprezentuje nieprawidłowy czas w lokalnej strefie czasowej systemu, w którym <xref:System.DateTime.FromBinary%2A> jest wywoływana, czas jest dostosowywany, aby był prawidłowy.  
  
     Na przykład przejście od czasu standardowego do czasu letniego występuje w strefie czasowej pacyficznego Stany Zjednoczone 14 marca 2010 o godz. 2:00 rano, gdy czas zostanie zaliczony o godzinę do 3:00 rano Ten interwał godzinowy jest nieprawidłowy, czyli jest to przedział czasu, który nie istnieje w danej strefie czasowej. Poniższy przykład pokazuje, że gdy czas należący do tego zakresu jest konwertowany na wartość binarną przez <xref:System.DateTime.ToBinary%2A> metodę, a następnie przywracany <xref:System.DateTime.FromBinary%2A> przez metodę, oryginalna wartość jest dostosowywana do poprawnego czasu. Można określić, czy określona wartość daty i godziny może podlegać modyfikacji, przekazując ją do <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> metody, jak pokazano w przykładzie.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Uwagi dotyczące wersji  
 Począwszy od .NET Framework w wersji 2,0, <xref:System.DateTime> struktura składa się z pola rodzaju prywatnego, który wskazuje, czy określony czas to czas lokalny, uniwersalny czas koordynowany (UTC) lub nie, połączony z polem znaczników prywatnych, które zawiera liczbę taktów 100-nanosekund, które określają datę i godzinę. Do liczby znaczników można uzyskać dostęp za pomocą <xref:System.DateTime.Ticks%2A> właściwości, a pola theKind są dostępne <xref:System.DateTime.Kind%2A> z właściwością.  
  
 Przed .NET Framework 2,0, jeśli serializowany <xref:System.DateTime> został obiekt ręcznie zamiast przy użyciu interfejsu serializacji, takiego jak <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, trzeba serializować tylko dane <xref:System.DateTime>taktów w. Rozpoczynając od .NET Framework 2,0, należy również serializować dane rodzajowe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" />jest mniejsze niż <see cref="F:System.DateTime.MinValue" /> lub większe niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Czas pliku systemu Windows wyrażony w taktach.</param>
        <summary>Konwertuje określony czas pliku systemu Windows na odpowiedni czas lokalny.</summary>
        <returns>Obiekt, który reprezentuje odpowiednik czasu lokalnego daty i godziny reprezentowanej przez <paramref name="fileTime" /> parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 `fileTime` Parametr określa czas pliku wyrażony w taktach 100-nanosekund.  
  
 Począwszy od .NET Framework w wersji 2,0, zwracaną wartością jest <xref:System.DateTime> <xref:System.DateTime.Kind%2A> Właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.FromFileTime%2A> metodę.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" />jest mniejsza niż 0 lub reprezentuje czas większy niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage"><para>Zwykle Metoda przywraca wartość, która została zapisana przez metodę.<see cref="M:System.DateTime.ToFileTime" /> <see cref="T:System.DateTime" /> <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Jednak te dwie wartości mogą się różnić w następujących warunkach: 
— Jeśli Serializacja i deserializacja <see cref="T:System.DateTime" /> wartości wystąpią w różnych strefach czasowych. Na przykład, jeśli <see cref="T:System.DateTime" /> wartość o godzinie 12:30 w Stanach Zjednoczonych Wschodnia strefa czasowa jest serializowana, a następnie deserializowana w Stanach Zjednoczonych Strefa czasowa pacyficznego, oryginalna wartość 12:30 P.M. jest dostosowywany do 9:30 rano Aby odzwierciedlić różnicę między dwiema strefami czasowymi.  
  
— Jeśli <see cref="T:System.DateTime" /> serializowana wartość reprezentuje nieprawidłowy czas w lokalnej strefie czasowej. W takim przypadku <see cref="M:System.DateTime.ToFileTime" /> metoda dostosowuje przywróconą <see cref="T:System.DateTime" /> wartość, aby reprezentować prawidłową godzinę w lokalnej strefie czasowej.  
  
Na przykład przejście od czasu standardowego do czasu letniego występuje w Stanach Zjednoczonych Strefa czasowa w rejonie pacyficznego 14 marca 2010 o godz. 2:00 rano, gdy czas zaawansowano o godzinę do 3:00 Ten interwał godzinowy jest nieprawidłowy, czyli jest to przedział czasu, który nie istnieje w danej strefie czasowej. W poniższym przykładzie pokazano, że gdy czas należący do tego zakresu jest konwertowany na wartość Long Integer przez <see cref="M:System.DateTime.ToFileTime" /> metodę, a następnie przywracany <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> przez metodę, oryginalna wartość jest dostosowywana do poprawnego czasu. Można określić, czy określona wartość daty i godziny może podlegać modyfikacji, przekazując ją do <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metody, jak pokazano w przykładzie.  
  
[!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Czas pliku systemu Windows wyrażony w taktach.</param>
        <summary>Konwertuje określony czas pliku systemu Windows na odpowiedni czas UTC.</summary>
        <returns>Obiekt, który reprezentuje odpowiednik czasu UTC dla daty i godziny reprezentowanej przez <paramref name="fileTime" /> parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 `fileTime` Parametr określa czas pliku wyrażony w taktach 100-nanosekund.  
  
 Począwszy od .NET Framework w wersji 2,0, zwracaną wartością jest <xref:System.DateTime> <xref:System.DateTime.Kind%2A> Właściwość <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" />jest mniejsza niż 0 lub reprezentuje czas większy niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d">Wartość daty automatyzacji OLE.</param>
        <summary><see cref="T:System.DateTime" /> Zwraca odpowiednik określonej daty automatyzacji OLE.</summary>
        <returns>Obiekt, który reprezentuje tę samą datę i godzinę, <paramref name="d" />co.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d` Parametr jest liczbą zmiennoprzecinkową o podwójnej precyzji reprezentującą datę jako liczbę dni przed lub po dacie bazowej, północy, 30 grudnia 1899. Znak i integralna część `d` kodowania daty jako dodatnie lub ujemne przemieszczenie dni z 30 grudnia 1899, a wartość bezwzględna `d` części ułamkowej koduje godzinę dnia jako część przemieszczenia z północy. `d`musi być wartością z przedziału od zera do 657435,0 do 2958465,99999999.  
  
 Należy pamiętać, że ze względu na sposób kodowania dat istnieją dwa sposoby reprezentowania dowolnego dnia 30 grudnia 1899. Na przykład-0,5 i 0,5 obydwie średnie w dniu 30 grudnia 1899, ponieważ przemieszczenie dni plus lub minus zero dni od daty podstawowej jest nadal datą bazową i połowa dnia po północy przypada w południe.  
  
 Aby <xref:System.DateTime.ToOADate%2A> uzyskać więcej informacji na temat automatyzacji OLE, zobacz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Data nie jest prawidłową wartością daty automatyzacji OLE.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość tego wystąpienia na wszystkie reprezentacje ciągów obsługiwane przez specyfikatory standardowego formatu daty i godziny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Nie należy zakładać, że wiele wywołań <xref:System.DateTime.GetDateTimeFormats%2A> przeciążeń zwróci identyczne dane. W zależności od konkretnego przeciążenia dane zwrócone przez tę metodę mogą ulec zmianie, jeśli bieżąca kultura ulegnie zmianie, użytkownik zastąpi poszczególne ustawienia kulturowe lub aktualizacja będzie miała wpływ na dane kulturowe systemu.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość tego wystąpienia na wszystkie reprezentacje ciągów obsługiwane przez specyfikatory standardowego formatu daty i godziny.</summary>
        <returns>Tablica ciągów, w której każdy element jest reprezentacją wartości tego wystąpienia sformatowane przy użyciu jednego ze specyfikatorów standardowego formatu daty i godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tablica ciągów zwracana przez <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> metodę jest równoważna łączeniu tablic ciągów zwracanych przez oddzielne wywołania <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> metody z "d", "d", "f", "f", "g", "g", "m", "o", "r", "s", "t", "t", "u", "u" i "y" ciągów formatu standardowego. Aby uzyskać więcej informacji na temat specyfikatorów formatu standardowego, zobacz [ciągi standardowych formatów daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Każdy element wartości zwracanej jest formatowany przy użyciu informacji z bieżącej kultury. Aby uzyskać więcej informacji na temat informacji o formatowaniu specyficznych dla kultury dla <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>bieżącej kultury, zobacz.  
  
> [!IMPORTANT]
>  Ponieważ ta metoda używa danych wrażliwych na kulturę, nie należy zakładać, że wiele wywołań metody zwróci identyczne dane. Dane zwrócone przez tę metodę mogą ulec zmianie, jeśli bieżąca kultura ulegnie zmianie, użytkownik zastąpi poszczególne ustawienia kulturowe lub aktualizacja będzie miała wpływ na dane kulturowe systemu.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> metodę. Wyświetla ciąg reprezentujący datę przy użyciu wszystkich możliwych standardowych formatów daty i godziny w bieżącej kulturze komputera, co w tym przypadku jest EN-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 W przykładzie są wyświetlane następujące dane wyjściowe:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Standardowy ciąg formatu daty i godziny.</param>
        <summary>Konwertuje wartość tego wystąpienia na wszystkie reprezentacje ciągów obsługiwane przez określony standardowy specyfikator formatu daty i godziny.</summary>
        <returns>Tablica ciągów, w której każdy element jest reprezentacją wartości tego wystąpienia sformatowane przy użyciu <paramref name="format" /> standardowego specyfikatora formatu daty i godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` Parametr może być dowolnym ze specyfikatorów standardowego formatu daty i godziny. Są to między innymi d, D, f, F, g, G, M (lub M), O (lub O), R (lub R), s, t, T, u, U i Y (lub y). Aby uzyskać więcej informacji, zobacz [ciągi standardowych formatów daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Każdy element wartości zwracanej jest formatowany przy użyciu informacji z bieżącej kultury. Aby uzyskać więcej informacji na temat informacji o formatowaniu specyficznych dla kultury dla <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>bieżącej kultury, zobacz.  
  
> [!IMPORTANT]
>  Ponieważ ta metoda używa danych wrażliwych na kulturę, nie należy zakładać, że wiele wywołań metody zwróci identyczne dane. Dane zwrócone przez tę metodę mogą ulec zmianie, jeśli bieżąca kultura ulegnie zmianie, użytkownik zastąpi poszczególne ustawienia kulturowe lub aktualizacja będzie miała wpływ na dane kulturowe systemu.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> metodę. Wyświetla ciąg reprezentujący datę przy użyciu specyfikatora formatu daty długiej ("D") dla bieżącej kultury.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />nie jest prawidłowym znakiem specyfikatora standardowego formatu daty i godziny.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu tego wystąpienia specyficzne dla kultury.</param>
        <summary>Konwertuje wartość tego wystąpienia na wszystkie reprezentacje ciągów obsługiwane przez specyfikatory standardowego formatu daty i godziny oraz określone informacje o formatowaniu specyficzne dla kultury.</summary>
        <returns>Tablica ciągów, w której każdy element jest reprezentacją wartości tego wystąpienia sformatowane przy użyciu jednego ze specyfikatorów standardowego formatu daty i godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tablica ciągów zwracana przez <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> metodę jest równoważna łączeniu tablic ciągów zwracanych przez oddzielne wywołania <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metody z "d", "d", "f", "f", "g", "g", "m", "o", "r", "s", "t", "t", "u", "u" i "y" ciągów formatu standardowego. Aby uzyskać więcej informacji na temat specyfikatorów formatu standardowego, zobacz [ciągi standardowych formatów daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Każdy element wartości zwracanej jest formatowany przy użyciu informacji specyficznych dla kultury `provider`dostarczonych przez.  
  
> [!IMPORTANT]
>  Ponieważ ta metoda używa danych wrażliwych na kulturę, nie należy zakładać, że wiele wywołań metody zwróci identyczne dane, `provider` chyba że <xref:System.Globalization.CultureInfo> jest obiektem, który reprezentuje niezmienną kulturę. Dane zwrócone przez tę metodę mogą ulec zmianie, jeśli użytkownik zastąpi indywidualne ustawienia `provider` kulturowe lub jeśli aktualizacja ma wpływ na `provider`dane kulturowe systemu.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> metodę. Wyświetla ciąg reprezentujący datę przy użyciu wszystkich możliwych standardowych formatów daty i godziny dla kultury fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 W przykładzie są wyświetlane następujące dane wyjściowe:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu daty i godziny.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu tego wystąpienia specyficzne dla kultury.</param>
        <summary>Konwertuje wartość tego wystąpienia na wszystkie reprezentacje ciągów obsługiwane przez określony specyfikator standardowego formatu daty i godziny oraz informacje o formatowaniu specyficzne dla kultury.</summary>
        <returns>Tablica ciągów, w której każdy element jest reprezentacją wartości tego wystąpienia sformatowane przy użyciu jednego ze specyfikatorów standardowego formatu daty i godziny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr format może być dowolnym ze specyfikatorów standardowego formatu daty i godziny. Są to między innymi d, D, f, F, g, G, M (lub M), O (lub O), R (lub R), s, t, T, u, U i Y (lub y). Aby uzyskać więcej informacji, zobacz [ciągi standardowych formatów daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Każdy element wartości zwracanej jest formatowany przy użyciu informacji specyficznych dla kultury `provider`dostarczonych przez.  
  
> [!IMPORTANT]
>  Ponieważ ta metoda używa danych wrażliwych na kulturę, nie należy zakładać, że wiele wywołań metody zwróci identyczne dane, `provider` chyba że <xref:System.Globalization.CultureInfo> jest obiektem, który reprezentuje niezmienną kulturę. Dane zwrócone przez tę metodę mogą ulec zmianie, jeśli użytkownik zastąpi indywidualne ustawienia `provider` kulturowe lub jeśli aktualizacja ma wpływ na `provider`dane kulturowe systemu.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> metodę. Wyświetla reprezentacje ciągu daty przy użyciu specyfikatora formatu daty krótkiej ("d") dla kultury fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" />nie jest prawidłowym znakiem specyfikatora standardowego formatu daty i godziny.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu 32-bitowej liczby całkowitej ze znakiem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość typu <see cref="T:System.DateTime" />. <see cref="T:System.TypeCode" /></summary>
        <returns>Stała <see cref="F:System.TypeCode.DateTime" />Wyliczenie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik godziny z daty reprezentowanej przez to wystąpienie.</summary>
        <value>Składnik godziny wyrażony jako wartość z przedziału od 0 do 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość <xref:System.DateTime.Hour%2A> właściwości jest zawsze wyrażona przy użyciu 24-godzinnego zegara. Aby pobrać ciąg, który reprezentuje godzinę daty i godziny przy użyciu zegara 12-godzinnego, wywołaj <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodę lub <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> przy użyciu specyfikatora formatu niestandardowego "h". Przykład:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Hour%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy to wystąpienie <see cref="T:System.DateTime" /> jest w przedziale czasu letniego dla bieżącej strefy czasowej.</summary>
        <returns><see langword="true" />Jeśli wartość <see cref="P:System.DateTime.Kind" /> właściwości jest <see cref="F:System.DateTimeKind.Local" /> lub <see cref="F:System.DateTimeKind.Unspecified" /> i wartość tego wystąpienia <see cref="T:System.DateTime" /> jest w przedziale czasu letniego dla lokalnej strefy czasowej; <see langword="false" /> Jeśli<see cref="P:System.DateTime.Kind" /> jest .<see cref="F:System.DateTimeKind.Utc" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa, czy bieżąca <xref:System.DateTime> wartość przypada w przedziale czasu letniego lokalnej strefy czasowej, która jest zwracana <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> przez właściwość. Można określić, czy strefa czasowa obsługuje czas letni przez pobranie wartości jej <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> właściwości. W przypadku stref czasowych, które obserwują czas letni, można określić, kiedy następuje przejście do i od czasu letniego, <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> pobierając tablicę zwracaną przez <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> Właściwość strefy czasowej.  
  
 Jeśli bieżąca <xref:System.DateTime> wartość reprezentuje niejednoznaczny lub nieprawidłowy czas w lokalnej strefie czasowej, metoda zwraca `false`.  
  
 W [!INCLUDE[winxp](~/includes/winxp-md.md)] systemach<xref:System.DateTime.IsDaylightSavingTime%2A> Metoda rozpoznaje tylko bieżącą regułę korekty podczas określania, czy bieżące wystąpienie jest czasem letnim. W efekcie Metoda może nieprawidłowo zgłosić, czy bieżące wystąpienie jest godziną czasu letniego dla okresów, zanim zacznie obowiązywać bieżąca Reguła korekty.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Rok 4-cyfrowy.</param>
        <summary>Zwraca wskazanie, czy określony rok jest rokiem przestępnym.</summary>
        <returns><see langword="true" />Jeśli <paramref name="year" /> jest to rok przestępny; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`jest określony jako 4-cyfrowy numer podstawowy 10; na przykład 1996.  
  
 `year`jest zawsze interpretowany jako rok w kalendarzu gregoriańskim. Aby określić, czy konkretny rok był rokiem przestępnym w innym kalendarzu, wywołaj `IsLeapYear` metodę tego obiektu kalendarza.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.IsLeapYear%2A> metodę, aby określić lata z zakresu od 1994 do 2014 lat przestępnych. Przykład ilustruje również wynik, gdy <xref:System.DateTime.AddYears%2A> Metoda jest używana do dodawania roku do dnia przestępnego.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" />jest mniejsza niż 1 lub większa niż 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy czas reprezentowany przez to wystąpienie jest oparty na czasie lokalnym, uniwersalnym czasie koordynowanym (UTC), czy nie.</summary>
        <value>Jedna z wartości wyliczenia, która wskazuje bieżącą godzinę reprezentuje. Wartość domyślna to <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można jawnie ustawić <xref:System.DateTime.Kind%2A> Właściwość nowej <xref:System.DateTime> wartości na <xref:System.DateTime.SpecifyKind%2A> określoną <xref:System.DateTimeKind> wartość, wywołując metodę.  
  
 <xref:System.DateTime.Kind%2A> Właściwość<xref:System.DateTime> pozwala na wyraźne odzwierciedlenie uniwersalnego czasu koordynowanego (UTC) lub czasu lokalnego. W przeciwieństwie do <xref:System.DateTimeOffset> struktury może jednoznacznie odzwierciedlać dowolną godzinę w dowolnej strefie czasowej jako jeden punkt w czasie.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.SpecifyKind%2A> metodę, aby zademonstrować, <xref:System.DateTime.Kind%2A> jak Właściwość <xref:System.DateTime.ToLocalTime%2A> wpływa <xref:System.DateTime.ToUniversalTime%2A> na metody konwersji i.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje największą możliwą wartość <see cref="T:System.DateTime" />. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest równoznaczna z 23:59:59.9999999 UTC, 31 grudnia 9999 w kalendarzu gregoriańskim, dokładnie 1 100-nanosekund takt przed 00:00:00 UTC, 1 stycznia 10000.  
  
 Niektóre kalendarze, takie jak <xref:System.Globalization.ThaiBuddhistCalendar>, obsługują górny zakres dat, który jest wcześniejszy niż. <xref:System.DateTime.MaxValue> W takich przypadkach próba uzyskania dostępu <xref:System.DateTime.MaxValue> do zmiennych przypisań lub formatowania i analizy może <xref:System.ArgumentOutOfRangeException>zgłosić. Zamiast pobierać wartość <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, można pobrać wartość z <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> właściwości określona kultura, która jest poprawna.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTime> obiektu przez przekazanie jego <xref:System.Int64> konstruktora wartości, która reprezentuje liczbę taktów. Przed wywołaniem konstruktora, przykład gwarantuje, że ta wartość jest większa lub równa `DateTime.MinValue.Ticks` i mniejsza lub `DateTime.MaxValue.Ticks`równa. W przeciwnym razie zgłasza <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik milisekund daty reprezentowanej przez to wystąpienie.</summary>
        <value>Składnik milisekund wyrażony jako wartość z zakresu od 0 do 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wyświetlić ciąg reprezentujący <xref:System.DateTime.Millisecond%2A> właściwość przy użyciu specyfikatora formatu "FFF". Na przykład poniższy kod wyświetla ciąg zawierający liczbę milisekund w dacie i godzinie konsoli.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Można również wyświetlić składnik milisekundy wraz z innymi składnikami wartości daty i godziny przy użyciu standardowego specyfikatora formatu "o". Na przykład:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Jednak specyfikator formatu "o" jest mniej przeznaczony do wyświetlania niż w przypadku dwukrotnego wyzwolenia lub przechowywania <xref:System.DateTime> wartości. Możesz również wyświetlić milisekundy wraz z innymi składnikami daty i godziny, używając niestandardowego ciągu formatu, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Millisecond%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik minuty z daty reprezentowanej przez to wystąpienie.</summary>
        <value>Składnik minuty wyrażony jako wartość z zakresu od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Minute%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje najmniejszą możliwą wartość <see cref="T:System.DateTime" />. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej stałej jest równa 00:00:00.0000000 UTC, 1 stycznia 0001 w kalendarzu gregoriańskim.  
  
 <xref:System.DateTime.MinValue>definiuje datę i godzinę, która jest przypisana do niezainicjowanej <xref:System.DateTime> zmiennej. Ilustruje to poniższy przykład.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Właściwości <xref:System.DateTime.MinValue> <xref:System.DateTime> i <xref:System.DateTime.MaxValue> mogą służyć do upewnienia się, że wartość znajduje się w obsługiwanym zakresie przed przekazaniem jej do konstruktora. Kod w sekcji przykład ilustruje to użycie.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie <xref:System.DateTime> obiektu przez przekazanie jego <xref:System.Int64> konstruktora wartości, która reprezentuje liczbę taktów. Przed wywołaniem konstruktora, przykład gwarantuje, że ta wartość jest większa lub równa `DateTime.MinValue.Ticks` i mniejsza lub `DateTime.MaxValue.Ticks`równa. W przeciwnym razie zgłasza <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik miesiąca z daty reprezentowanej przez to wystąpienie.</summary>
        <value>Składnik miesiąca wyrażony jako wartość z przedziału od 1 do 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Month%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> Pobiera obiekt, który jest ustawiony na bieżącą datę i godzinę na tym komputerze, wyrażony jako czas lokalny.</summary>
        <value>Obiekt, którego wartość jest bieżącą lokalną datą i godziną.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A> Właściwość<xref:System.DateTime> zwraca wartość reprezentującą bieżącą datę i godzinę na komputerze lokalnym. Należy zauważyć, że istnieje różnica między <xref:System.DateTime> wartością, która reprezentuje liczbę taktów, które upłynęły od północy 1 stycznia 0001 i ciąg reprezentujący tę <xref:System.DateTime> wartość, która wyraża wartość daty i godziny w Format specyficzny dla kultury. Aby uzyskać informacje o formatowaniu wartości daty i godziny, <xref:System.DateTime.ToString%2A> Zobacz metodę. Poniższy przykład wyświetla krótki ciąg daty i godziny w kilku formatach specyficznych dla kultury.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Rozdzielczość tej właściwości zależy od czasomierza systemu, który zależy od podstawowego systemu operacyjnego. Jego długość wynosi od 0,5 do 15 milisekund. W związku z tym powtórzone wywołania <xref:System.DateTime.Now%2A> właściwości w krótkim czasie, na przykład w pętli, mogą zwracać tę samą wartość.  
  
 <xref:System.DateTime.Now%2A> Właściwość jest często używana do mierzenia wydajności. Jednak ze względu na jego niską rozdzielczość nie jest to przydatne do użycia jako narzędzie do testów porównawczych. Lepszym rozwiązaniem jest użycie <xref:System.Diagnostics.Stopwatch> klasy.  
  
 Począwszy od .NET Framework w wersji 2,0, zwracana wartość jest <xref:System.DateTime> wartością, której <xref:System.DateTime.Kind%2A> Właściwość zwraca. <xref:System.DateTimeKind.Local?displayProperty=nameWithType>  
  
> [!NOTE]
>  Możesz również użyć <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> właściwości, aby pobrać bieżącą lokalną datę i godzinę. Dzięki temu czas lokalny powinien być wyrażony w sposób niejednoznaczny jako pojedynczy punkt w czasie, co z kolei powoduje, że wartość czasu jest przenośna między komputerami.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.Now%2A> właściwości <xref:System.DateTime.UtcNow%2A> i, aby pobrać bieżącą lokalną datę i godzinę oraz bieżącą datę i godzinę uniwersalnego skoordynowanego (UTC). Następnie używa Konwencji formatowania kilku kultur do wyświetlania ciągów wraz z wartościami ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Wartość daty i godziny do dodania.</param>
        <param name="t">Przedział czasu, który ma zostać dodany.</param>
        <summary>Dodaje określony przedział czasu do określonej daty i godziny, dając nową datę i godzinę.</summary>
        <returns>Obiekt, który jest sumą wartości <paramref name="d" /> i. <paramref name="t" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Równoważna Metoda dla tego operatora to<xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Poniższy przykład ilustruje operator dodawania.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="d2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, <see cref="T:System.DateTime" /> czy dwa określone wystąpienia są równe.</summary>
        <returns><see langword="true" />Jeśli <paramref name="d1" /> <see langword="false" />i <paramref name="d2" /> reprezentuje tę samą datę i godzinę; w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator <xref:System.DateTime.op_Equality%2A> określa, czy dwie <xref:System.DateTime> wartości są równe, porównując ich liczbę taktów. Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Poniższy przykład demonstruje operator równości.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy określony <see cref="T:System.DateTime" /> jest późniejszy niż inny określony <see cref="T:System.DateTime" />.</summary>
        <returns><see langword="true" />Jeśli <paramref name="t1" /> jest późniejsza niż <paramref name="t2" />; w przeciwnym <see langword="false" />razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator określa relację między dwiema <xref:System.DateTime> wartościami przez porównanie ich liczby taktów. <xref:System.DateTime.op_GreaterThan%2A> Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTime" /> z nich reprezentuje datę i godzinę, która jest taka sama jak lub późniejsza niż <see cref="T:System.DateTime" />określona.</summary>
        <returns><see langword="true" />Jeśli <paramref name="t1" /> jest taka sama jak lub późniejsza niż <paramref name="t2" />; w przeciwnym <see langword="false" />razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator określa relację między dwiema <xref:System.DateTime> wartościami przez porównanie ich liczby taktów. <xref:System.DateTime.op_GreaterThanOrEqual%2A> Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="d2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, <see cref="T:System.DateTime" /> czy dwa określone wystąpienia nie są równe.</summary>
        <returns><see langword="true" />Jeśli <paramref name="d1" /> <see langword="false" />i <paramref name="d2" /> nie reprezentują tego samego dnia i godziny; w przeciwnym razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator <xref:System.DateTime.op_Inequality%2A> określa, czy dwie <xref:System.DateTime> wartości nie są równe przez porównanie ich liczby taktów. Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy określony <see cref="T:System.DateTime" /> jest wcześniejszy niż inny <see cref="T:System.DateTime" />określony.</summary>
        <returns><see langword="true" />Jeśli <paramref name="t1" /> jest wcześniejsza <paramref name="t2" />niż; w <see langword="false" />przeciwnym razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator określa relację między dwiema <xref:System.DateTime> wartościami przez porównanie ich liczby taktów. <xref:System.DateTime.op_LessThan%2A> Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Pierwszy obiekt, który ma zostać porównany.</param>
        <param name="t2">Drugi obiekt, który będzie porównywany.</param>
        <summary>Określa, czy jeden <see cref="T:System.DateTime" /> z nich reprezentuje datę i godzinę, która jest taka sama jak lub wcześniejsza <see cref="T:System.DateTime" />niż określona.</summary>
        <returns><see langword="true" />Jeśli <paramref name="t1" /> jest taka sama jak lub wcześniejsza <paramref name="t2" />niż; w <see langword="false" />przeciwnym razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator określa relację między dwiema <xref:System.DateTime> wartościami przez porównanie ich liczby taktów. <xref:System.DateTime.op_LessThanOrEqual%2A> Przed porównaniem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. Można to zrobić, porównując wartości ich <xref:System.DateTime.Kind%2A> właściwości.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Odejmuje określony <see cref="T:System.DateTime" /> lub<see cref="T:System.TimeSpan" /> określony.<see cref="T:System.DateTime" /></summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Wartość daty i godziny odejmowania (odjemna).</param>
        <param name="d2">Wartość daty i godziny odejmowania (odjemnik).</param>
        <summary>Odejmuje określoną datę i godzinę z innej określonej daty i godziny i zwraca przedział czasu.</summary>
        <returns>Przedział czasu między <paramref name="d1" /> i <paramref name="d2" />; czyli <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda nie uwzględnia wartości <xref:System.DateTime.Kind%2A> właściwości dwóch <xref:System.DateTime> wartości podczas odejmowania. <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> Przed odjęciem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. W przeciwnym razie wynik będzie zawierać różnicę między strefami czasowymi.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> Metoda uwzględnia różnicę między strefami czasowymi podczas odejmowania.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Subtract%2A> metodę i operator odejmowania.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Wartość daty i godziny odejmowania.</param>
        <param name="t">Interwał czasu, który należy odjąć.</param>
        <summary>Odejmuje określony przedział czasu od określonej daty i godziny, a następnie zwraca nową datę i godzinę.</summary>
        <returns>Obiekt, którego wartość jest równa <paramref name="d" /> minus <paramref name="t" />wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda odejmuje wartość `t` Ticks z `d`wartości Ticks.  
  
 Równoważna Metoda dla tego operatora to<xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Subtract%2A> metodę i operator odejmowania.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynikiem <see cref="T:System.DateTime" /> jest mniejsza niż <see cref="F:System.DateTime.MinValue" /> lub większa niż <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  
 W tej sekcji:  
  
- [Którą metodę nazywam?](#Tasks)
- [Ciąg do przeanalizowania](#StringToParse)
- [Zasady analizy i kultury](#Culture)
- [Analizowanie i elementy stylu](#Styles)
- [Wartość zwracana i DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Jaką metodę wywołać?  
  
|Zadanie|Połączeń|  
|--------|----------|  
|Przeanalizuj ciąg daty i godziny przy użyciu Konwencji bieżącej kultury.|<xref:System.DateTime.Parse%28System.String%29>występują|  
|Przeanalizuj ciąg daty i godziny przy użyciu konwencji określonej kultury.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29>Przeciążenie (patrz: [Analiza i konwencje kulturowe](#Culture))|  
|Przeanalizuj ciąg daty i godziny z specjalnymi elementami stylu (na przykład białych znakami lub bez białych znaków).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>występują|  
|Przeanalizuj ciąg daty i godziny, który musi być w określonym formacie.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> lub <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Przeanalizuj ciąg daty i godziny i przeprowadź konwersję na czas UTC lub czasu lokalnego.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>występują|  
|Przeanalizuj ciąg daty i godziny bez obsługi wyjątków.|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>Method|  
|Przywróć (rundy) wartość daty i godziny utworzona przez operację formatowania.|Przekaż ciąg formatu standardowego "o" lub "r" do <xref:System.DateTime.ToString%28System.String%29> metody, a następnie <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Wywołaj Przeciążenie przy użyciu<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Przeanalizuj ciąg daty i godziny w ustalonym formacie między maszynami (i możliwymi do kultury) granicami.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>or <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> , Metoda|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Ciąg do analizy  
 Metoda próbuje przekonwertować ciąg reprezentujący wartość daty i godziny na jego <xref:System.DateTime> odpowiednik. <xref:System.DateTime.Parse%2A> Próbuje on całkowicie przeanalizować ciąg wejściowy bez <xref:System.FormatException> zgłaszania wyjątku.  
  
> [!IMPORTANT]
>  Jeśli operacja analizowania nie powiedzie się ze względu na nierozpoznany <xref:System.DateTime.Parse%2A> format ciągu, <xref:System.FormatException>Metoda zgłosi <xref:System.DateTime.TryParse%2A> , a `false`Metoda zwraca. Ponieważ obsługa wyjątków może być kosztowna, należy użyć <xref:System.DateTime.Parse%2A> , gdy oczekiwane jest wykonanie operacji analizowania, ponieważ źródło danych wejściowych jest zaufane. <xref:System.DateTime.TryParse%2A>jest preferowany, gdy błędy analizy są prawdopodobnie, szczególnie ze względu na to, że źródło danych wejściowych nie jest zaufane lub że masz uzasadnione wartości domyślne, aby zastąpić ciągi, które nie są analizowane pomyślnie.   

 Ciąg, który ma być analizowany, może przyjmować jedną z następujących form:  
  
-   Ciąg z datą i składnikiem czasu.  
  
-   Ciąg z datą, ale bez składnika godziny. Jeśli nie jest obecny składnik czasu, metoda przyjmuje 12:00 północy. Jeśli składnik daty ma rok dwucyfrowy, jest konwertowany na rok w oparciu <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> o bieżący kalendarz bieżącej kultury lub bieżący kalendarz określonego kultury (Jeśli używasz przeciążenia z niezerowym `provider` argumentem).  
  
- Ciąg ze składnikiem Date, który zawiera tylko miesiąc i rok, ale nie składnik. Metoda przyjmuje pierwszy dzień miesiąca.

- Ciąg ze składnikiem Date, który zawiera tylko miesiąc i dzień, ale nie składnik roku. Metoda przyjmuje bieżący rok.

-   Ciąg z czasem, ale nie ze składnikiem daty. Metoda przyjmuje bieżącą datę, chyba że wywoła <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Przeciążenie i Dołącz <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> `styles` do argumentu, w takim przypadku metoda przyjmuje datę 1 stycznia 0001.  

- Ciąg ze składnikiem czasu, który zawiera tylko oznaczenie Hour i AM/PM bez składnika Date. Metoda przyjmuje bieżącą datę i godzinę bez minut i nie sekund. Możesz zmienić to zachowanie, wywołując <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Przeciążenie i włączając <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> w `styles` to, w którym przypadku metoda przyjmuje datę 1 stycznia 0001.

-   Ciąg, który zawiera informacje o strefie czasowej i jest zgodny z normą ISO 8601. W poniższych przykładach pierwszy ciąg Określa uniwersalny czas koordynowany (UTC), a drugi określa czas w strefie czasowej, który jest siedmiu godzin wcześniejszy niż UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Ciąg, który zawiera oznaczenie GMT i jest zgodny z formatem formatu RFC 1123; na przykład:  
  
     "SAT, 01 lis 2008 19:35:00 GMT"  
  
-   Ciąg zawierający datę i godzinę wraz z informacjami o przesunięciu strefy czasowej; na przykład:  
  
     "03/01/2009 05:42:00 -5:00"  

Poniższy przykład analizuje ciągi w każdym z tych formatów przy użyciu Konwencji formatowania bieżącej kultury, która w tym przypadku jest kulturą en-US:

[!code-csharp[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Jeśli ciąg wejściowy reprezentuje dzień przestępny w roku przestępnym w kalendarzu używanym przez metodę analizy (zobacz sekcję [analizowanie i konwencje kulturowe](#Culture)), <xref:System.DateTime.Parse%2A> Metoda analizuje ciąg pomyślnie. Jeśli ciąg wejściowy reprezentuje dzień przestępny w roku, w którym nie przestępno, <xref:System.FormatException>metoda wygeneruje.  
  
 <xref:System.DateTime.Parse%2A> Ponieważ metoda próbuje przeanalizować ciąg reprezentujący datę i godzinę przy użyciu reguł formatowania bieżącej lub określonej kultury, próba przeanalizowania ciągu dla różnych kultur może zakończyć się niepowodzeniem. Aby przeanalizować określony format daty i godziny dla różnych ustawień regionalnych, użyj jednego z przeciążeń <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> metody i podaj specyfikator formatu.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Konwencje analizy i kultury  
 Wszystkie przeciążenia <xref:System.DateTime.Parse%2A> metody są zależne od kultury, chyba że ciąg, który ma być analizowany (który jest reprezentowany `s` przez w poniższej tabeli), jest zgodny ze wzorcem ISO 8601. Operacja analizowania używa informacji o formatowaniu w <xref:System.Globalization.DateTimeFormatInfo> obiekcie, który jest wyprowadzany w następujący sposób:  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|W przypadku wywołania|I `provider` jest|Informacje o formatowaniu są wyprowadzane z|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Bieżąca kultura wątku (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Właściwość)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Element <xref:System.Globalization.DateTimeFormatInfo> obiektu|Określony <xref:System.Globalization.DateTimeFormatInfo> obiekt|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Bieżąca kultura wątku (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Właściwość)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Element <xref:System.Globalization.CultureInfo> obiektu|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Właściwość|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> lub <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Implementacja <xref:System.IFormatProvider> niestandardowa|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Metoda|  
  
 Gdy informacje o formatowaniu są wyprowadzane z <xref:System.Globalization.DateTimeFormatInfo> obiektu <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> , Właściwość definiuje kalendarz używany podczas operacji analizowania.  
  
 W przypadku analizowania ciągu daty i godziny przy użyciu <xref:System.Globalization.DateTimeFormatInfo> obiektu z dostosowanymi ustawieniami, które różnią się od tych w standardowej kulturze, <xref:System.DateTime.ParseExact%2A> Użyj metody zamiast <xref:System.DateTime.Parse%2A> metody, aby zwiększyć prawdopodobieństwo pomyślnej konwersji. Niestandardowy ciąg daty i godziny może być skomplikowany i trudny do analizy. <xref:System.DateTime.Parse%2A> Metoda próbuje przeanalizować ciąg za pomocą kilku niejawnych wzorców analizy, co może zakończyć się niepowodzeniem. Z kolei <xref:System.DateTime.ParseExact%2A> metoda wymaga jawnie wyznaczania co najmniej jednego dokładnego wzorca analizy, które może się powieść. Aby uzyskać więcej informacji, zobacz sekcję "DateTimeFormatInfo i dane dynamiczne" w <xref:System.Globalization.DateTimeFormatInfo> temacie.  
  
> [!IMPORTANT]
>  Należy zauważyć, że konwencje formatowania dla określonej kultury są dynamiczne i mogą ulec zmianie. Oznacza to, że operacje analizowania, które są zależne od Konwencji formatowania domyślnej (bieżącej) kultury lub określające <xref:System.IFormatProvider> obiekt, który reprezentuje kulturę inną niż Niezmienna kultura, może nieoczekiwanie zakończyć się niepowodzeniem w przypadku wystąpienia którejkolwiek z następujących sytuacji:  
>   
> -   Dane specyficzne dla kultury uległy zmianie między głównymi lub pomocniczymi wersjami .NET Framework lub w wyniku aktualizacji istniejącej wersji .NET Framework.  
> -   Dane specyficzne dla kultury odzwierciedlają preferencje użytkownika, które mogą się różnić w zależności od maszyny lub sesji do sesji.  
> -   Dane specyficzne dla kultury przedstawiają kulturę zastępczą, która zastępuje ustawienia kultury standardowej lub kultury niestandardowej.  
>   
>  Aby zapobiec problemom z analizą danych i ciągów czasu, które są związane ze zmianami w danych kultury, można analizować ciągi daty i godziny przy użyciu niezmiennej kultury lub wywołać <xref:System.DateTime.ParseExact%2A> metodę lub <xref:System.DateTime.TryParseExact%2A> , a także określić dokładny format ciągu, który ma zostać przeanalizowany. W przypadku serializacji i deserializacji danych daty i godziny można użyć Konwencji formatowania niezmiennej kultury lub można serializować i zdeserializować <xref:System.DateTime> wartości w formacie binarnym.  
>   
>  Więcej informacji znajduje się w sekcji "dane kultury dynamicznej" w <xref:System.Globalization.CultureInfo> temacie i w sekcji "trwałe wartości DateTime" <xref:System.DateTime> w temacie.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Analizowanie i elementy stylu  
 Wszystkie <xref:System.DateTime.Parse%2A> przeciążenia ignorują wiodące, wewnętrzne lub końcowe znaki białych znaków w ciągu wejściowym (który jest reprezentowany przez `s` w poniższej tabeli). Datę i godzinę można przenawiasować za pomocą pary wiodących i końcowych znaków numeru ("#", U + 0023) i można je kończyć z co najmniej jednym znakiem NULL (U + 0000).  
  
 Ponadto <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Przeciążenie <xref:System.Globalization.DateTimeStyles> ma parametr, który składa się z co najmniej jednego elementu członkowskiego wyliczenia. `styles` Ten parametr określa, `s` jak należy interpretować i jak operacja analizy powinna być `s` konwertowana na datę i godzinę. W poniższej tabeli opisano wpływ każdego <xref:System.Globalization.DateTimeStyles> elementu członkowskiego na operację analizy.  
  
|Element członkowski DateTimeStyles|Wpływ na konwersję|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC w następujący sposób:<br /><br /> -Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołuje <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracaną <xref:System.DateTime> wartość na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />We wszystkich innych przypadkach flaga nie ma żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ta wartość jest ignorowana. Wewnętrzny biały znak jest zawsze dozwolony w elementach `s`daty i godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ta wartość jest ignorowana. Wiodący biały znak jest zawsze dozwolony w elementach `s`daty i godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ta wartość jest ignorowana. Końcowe biały znak jest zawsze dozwolony w elementach `s`daty i godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe. Jest to zachowanie domyślne. Nie można go zastąpić przez dostarczenie bardziej restrykcyjnej <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takiej <xref:System.Globalization.DateTimeStyles.None>jak.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, założono czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że jest UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|  
|<xref:System.Globalization.DateTimeStyles.None>|Choć ważna, wartość ta jest ignorowana.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji ciągu daty i godziny na <xref:System.DateTime> wartość reprezentującą czas lokalny <xref:System.DateTime.Kind%2A> z właściwością ustawioną na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Zazwyczaj taki ciąg jest tworzony przez wywołanie <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metody i przy użyciu standardowego specyfikatora formatu "o", "r" lub "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Wartość zwracana i DateTime. Kind

Przeciążenia `DateTime.Parse` <xref:System.DateTime.Kind> zwracają wartość, której właściwość obejmuje informacje o strefie czasowej. <xref:System.DateTime> Może to oznaczać, że czas:

- Uniwersalny czas koordynowany<xref:System.DateTimeKind.Utc?displayProperty=fullName>().
- Godzina w lokalnej strefie czasowej (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Czas w nieznanej strefie czasowej (linki XREF: System. DateTimeKind. unknown? displayProperty = fullName >).
 
 Ogólnie rzecz biorąc <xref:System.DateTime> <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>Metoda zwraca obiekt, którego właściwość jest. <xref:System.DateTime.Parse%2A> Jednak metoda może również przeprowadzać konwersję strefy czasowej i ustawiać wartość <xref:System.DateTime.Kind%2A> właściwości w różny sposób, w zależności od wartości `s` parametrów i `styles`: <xref:System.DateTime.Parse%2A>  
  
|IF|Konwersja strefy czasowej|Właściwość Kind|  
|--------|--------------------------|-------------------|  
|`s`zawiera informacje o strefie czasowej.|Data i godzina są konwertowane na godzinę w lokalnej strefie czasowej.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s`zawiera informacje o strefie czasowej `styles` i <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> zawiera flagę.|Data i godzina są konwertowane na uniwersalny czas koordynowany (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s`zawiera oznaczenie strefy czasowej z lub GMT i `styles` <xref:System.Globalization.DateTimeStyles.RoundtripKind> zawiera flagę.|Data i godzina są interpretowane jako czas UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 Poniższy przykład konwertuje ciągi dat, które zawierają informacje o strefie czasowej, do godziny w lokalnej strefie czasowej:  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Możesz również zachować wartość <xref:System.DateTime.Kind%2A> właściwości data i godzina podczas operacji formatowania i analizowania przy <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> użyciu flagi. Poniższy przykład ilustruje, jak <xref:System.Globalization.DateTimeStyles.RoundtripKind> flaga wpływa na operację analizowania na <xref:System.DateTime> wartości, które są konwertowane na ciągi przy użyciu specyfikatora formatu "o", "r" lub "u".  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
## Examples

Liczne przykłady, które wywołują metodę, `DateTime.Parse` są przeplatane w części [uwagi](#remarks) tego artykułu oraz w dokumentacji dotyczącej poszczególnych `DateTime.Parse` przeciążeń.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Możesz również pobrać `DateTime.Parse` kompletny zestaw przykładów, które są zawarte w [projekcie .NET Core 2,0 dla C# ](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) programu oraz [projekt .NET Core 2,0 dla Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), z repozytorium usługi [GitHub/przykłady](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić. Aby uzyskać więcej informacji [, zobacz ciąg, który ma zostać przeanalizowany](#StringToParse) .</param>
        <summary>Konwertuje ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu Konwencji bieżącej kultury wątku.</summary>
        <returns>Obiekt, który jest odpowiednikiem daty i godziny zawartej w <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Jeśli `s` zawiera informacje o strefie czasowej, ta metoda <xref:System.DateTime> zwraca wartość <xref:System.DateTime.Kind%2A> , której <xref:System.DateTimeKind.Local?displayProperty=nameWithType> Właściwość `s` jest i konwertuje datę i godzinę do czasu lokalnego. W przeciwnym razie nie wykonuje konwersji strefy czasowej i zwraca <xref:System.DateTime> wartość, <xref:System.DateTime.Kind%2A> której właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>jest.

To Przeciążenie próbuje przeanalizować `s` przy użyciu Konwencji formatowania bieżącej kultury. Bieżąca kultura jest wskazywana przez <xref:System.Globalization.CultureInfo.CurrentCulture> właściwość. Aby przeanalizować ciąg przy użyciu Konwencji formatowania określonej kultury, wywołaj <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> lub przeciążenia.

To Przeciążenie próbuje `s` przeanalizować <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> za pomocą stylu.

## <a name="example"></a>Przykład

Poniższy przykład analizuje ciąg reprezentujący kilka wartości daty i godziny według:

- Przy użyciu domyślnego dostawcy formatu, który zapewnia konwencje formatowania bieżącej kultury wątku komputera używanego do tworzenia przykładowych danych wyjściowych. Dane wyjściowe z tego przykładu odzwierciedlają konwencje formatowania kultury en-US.

- Przy użyciu wartości stylu domyślnego, która jest <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Obsługuje <xref:System.FormatException> wyjątek, który jest generowany, gdy metoda próbuje przeanalizować ciąg reprezentujący datę i godzinę przy użyciu innych Konwencji formatowania kultury. Pokazano również, jak pomyślnie analizować wartość daty i godziny, która nie używa Konwencji formatowania bieżącej kultury wątku.  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić. Aby uzyskać więcej informacji [, zobacz ciąg, który ma zostać przeanalizowany](#StringToParse) .</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formacie specyficznym dla kultury.  Zobacz sekcję [analizowanie i konwencje kulturowe](#Culture)</param>
        <summary>Konwertuje ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu informacji o formacie specyficznym dla kultury.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" /> określonym przez. <paramref name="provider" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Jeśli `s` zawiera informacje o strefie czasowej, ta metoda <xref:System.DateTime> zwraca wartość <xref:System.DateTime.Kind%2A> , której <xref:System.DateTimeKind.Local?displayProperty=nameWithType> Właściwość `s` jest i konwertuje datę i godzinę do czasu lokalnego. W przeciwnym razie nie wykonuje konwersji strefy czasowej i zwraca <xref:System.DateTime> wartość, <xref:System.DateTime.Kind%2A> której właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>jest.

To Przeciążenie próbuje przeanalizować `s` przy <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> użyciu stylu.

## <a name="example"></a>Przykład

Poniższy przykład analizuje tablicę ciągów dat przy użyciu konwencji en-US, fr-FR i de-DE kultury. Pokazuje, że reprezentacje ciągu pojedynczej daty mogą być interpretowane inaczej w różnych kulturach.  
  
[!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">Zakres pamięci, który zawiera ciąg do analizy. Aby uzyskać więcej informacji [, zobacz ciąg, który ma zostać przeanalizowany](#StringToParse) .</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formacie specyficznym dla kultury.  Zobacz sekcję [analizowanie i konwencje kulturowe](#Culture)</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca elementy stylu, które mogą być obecne w <paramref name="s" /> dla operacji analizowania, i definiuje sposób interpretacji przeanalizowanej daty w odniesieniu do bieżącej strefy czasowej lub bieżącej daty. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje zakres pamięci, który zawiera ciąg reprezentujący datę i godzinę do jego <see cref="T:System.DateTime" /> odpowiednika przy użyciu informacji o formacie specyficznym dla kultury i stylu formatowania.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" />, zgodnie z <paramref name="provider" /> parametrami <paramref name="styles" />i.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości. Na przykład zarówno <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> , jak <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />i.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić. Aby uzyskać więcej informacji [, zobacz ciąg, który ma zostać przeanalizowany](#StringToParse) .</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formatowaniu specyficzne dla kultury.  Zobacz sekcję [analizowanie i konwencje kulturowe](#Culture)</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia wskazująca elementy stylu, które mogą być obecne w <paramref name="s" /> dla operacji analizowania, i definiuje sposób interpretacji przeanalizowanej daty w odniesieniu do bieżącej strefy czasowej lub bieżącej daty. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu informacji o formacie specyficznym dla kultury i stylu formatowania.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" />, zgodnie z <paramref name="provider" /> parametrami <paramref name="styles" />i.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

To Przeciążenie metody przekształca datę i godzinę w `s` i <xref:System.DateTime.Kind%2A> ustawia właściwość zwracanej <xref:System.DateTime> wartości w następujący sposób:

|IF |Konwersja strefy czasowej|Właściwość Kind|   
|-----|-----|-----|  
|`s`nie zawiera informacji o strefie czasowej.|Brak.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s`zawiera informacje o strefie czasowej.|Na godzinę w lokalnej strefie czasowej|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s`zawiera informacje o strefie czasowej i "Style zawierają <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flagę.|Na uniwersalny czas koordynowany (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s`zawiera oznaczenie strefy czasowej z lub GMT i `styles` <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>zawiera.|Brak.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Przykład

Poniższy przykład demonstruje <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metodę i wyświetla wartość <xref:System.DateTime.Kind%2A> właściwości wartości będących wynikiem <xref:System.DateTime> .  
  
[!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />nie zawiera prawidłowej reprezentacji ciągu daty i godziny.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości. Na przykład zarówno <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> , jak <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />i.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Instrukcje: Obustronne wartości daty i godziny</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik. Format ciągu reprezentującego musi dokładnie pasować do określonego formatu lub został zgłoszony wyjątek.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="format">Specyfikator formatu definiujący wymagany format <paramref name="s" />. Aby uzyskać więcej informacji, zobacz sekcję: Uwagi.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formacie specyficznym dla kultury.</param>
        <summary>Konwertuje określony format ciągu daty i godziny na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonego formatu i informacji o formacie specyficznym dla kultury. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" />, zgodnie z <paramref name="format" /> parametrami <paramref name="provider" />i.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która musi być w formacie zdefiniowanym `format` przez parametr. <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> \<Wymaga również, aby daty > i \<czas > Elementy reprezentujące datę i godzinę były wyświetlane w kolejności `s` określonej przez `format`, i nie mają białych znaków innych niż dozwolone przez `format`. Jeśli `format` definiuje datę bez elementu Time, a operacja analizy powiedzie się, obliczona <xref:System.DateTime> wartość ma godzinę północy (00:00:00). Jeśli `format` definiuje godzinę bez elementu Date, a operacja analizy powiedzie się, `DateTime.Now.Date`wartość będąca <xref:System.DateTime> wynikiem ma datę.  
  
 Jeśli `s` nie reprezentuje godziny w określonej strefie czasowej <xref:System.DateTime.Kind%2A> , a operacja analizy powiedzie się, właściwość zwracanej <xref:System.DateTime> wartości to <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Jeśli `s` reprezentuje czas w określonej strefie czasowej i `format` pozwala na obecność informacji o strefie czasowej (na przykład jeśli `format` jest równe specyfikatorom formatu "o", "r" lub "u", lub jeśli zawiera "z", "ZZ" lub "ZZZ" specyfikatory formatu niestandardowego), <xref:System.DateTime.Kind%2A> Właściwość zwracanej <xref:System.DateTime> wartości to <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  

 Parametr jest ciągiem zawierającym pojedynczy specyfikator formatu standardowego lub jeden lub więcej specyfikatorów formatu niestandardowego, które definiują wymagany `s`format. `format` Aby uzyskać szczegółowe informacje na temat prawidłowych kodów formatowania, zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) lub [Niestandardowe ciągi formatujące datę i godzinę](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Jeśli `format` jest niestandardowym wzorcem formatu, który nie zawiera separatorów dat lub godzin (takich jak "yyyyMMddHHmm"), użyj niezmiennej kultury `provider` dla parametru i najszerszej formy każdego niestandardowego specyfikatora formatu. Na przykład jeśli chcesz określić godziny we wzorcu formatu, określ szerszy formularz, "HH", a nie "Narrow", "H".  
  
 Określone symbole daty i godziny oraz ciągi (takie jak nazwy dni tygodnia w `s` określonym języku) są definiowane `provider` przez parametr, tak jak `s` w przypadku `format` formatu standardowego. ciąg specyfikatora. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę używaną do interpretacji `s`. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Implementacja <xref:System.IFormatProvider> niestandardowa <xref:System.IFormatProvider.GetFormat%2A> , której metoda zwraca <xref:System.Globalization.CultureInfo> obiekt lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, który zawiera informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ParseExact%2A> metodę.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />lub <paramref name="format" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />lub <paramref name="format" /> jest pustym ciągiem.  
  
—lub— 
 <paramref name="s" />nie zawiera daty i godziny odpowiadającej wzorzecowi określonemu w <paramref name="format" />.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="s" /> zgadzają się.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTime.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę konwersji.</param>
        <param name="format">Specyfikator formatu definiujący wymagany format <paramref name="s" />. Aby uzyskać więcej informacji, zobacz sekcję: Uwagi.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formatowaniu specyficzne dla kultury.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia, która zawiera <paramref name="s" />dodatkowe informacje o elementach stylu, które mogą być obecne w <paramref name="s" />lub o konwersji z <paramref name="s" /> do <see cref="T:System.DateTime" /> wartości. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do określonego formatu lub został zgłoszony wyjątek.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" />, zgodnie z <paramref name="format" />parametrami <paramref name="provider" />, i <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która musi być w formacie zdefiniowanym `format` przez parametr. <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Wymaga również, aby elementy `s` daty i godziny były wyświetlane w kolejności określonej przez. `format` Jeśli `s` element nie jest zgodny ze wzorcem `format` parametru, przy `style` każdej zmienności zdefiniowanej przez parametr Metoda wygeneruje <xref:System.FormatException>. Z kolei <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Metoda analizuje reprezentację ciągu daty w jednym z formatów rozpoznawanych przez <xref:System.Globalization.DateTimeFormatInfo> obiekt dostawcy formatu. Metoda pozwala także, aby elementy daty i godziny w `s` programie były wyświetlane w dowolnej kolejności. <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
 Jeśli parametr zawiera tylko godzinę i brak daty, bieżąca data jest używana, `style` chyba że parametr zawiera <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flagę, w tym przypadku jest używana domyślna Data (`DateTime.Date.MinValue`). `s` `s` Jeśli parametr zawiera tylko datę i godzinę, używana jest północ (00:00:00). Parametr określa również, `s` czy parametr może zawierać znaki wiodące, wewnętrzne lub końcowe. `style`  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość zwracanego <xref:System.DateTime> obiektu ma <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>wartość. To zachowanie można zmienić <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> przy użyciu flagi, która <xref:System.DateTime> zwraca wartość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> ,której<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> właściwość jest lub za pomocą flag i, która zwraca wartość,której<xref:System.DateTime> <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` zawiera informacje o strefie czasowej, czas jest konwertowany na czas lokalny, w razie potrzeby, <xref:System.DateTime.Kind%2A> a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. To zachowanie można zmienić przy użyciu flagi, <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> aby nie skonwertować uniwersalnego czasu koordynowanego (UTC) na czas lokalny i <xref:System.DateTime.Kind%2A> ustawić właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Parametr definiuje wymagany wzorzec `s` parametru. `format` Może składać się z co najmniej jednego specyfikatora formatu niestandardowego z tabeli [ciągów niestandardowych formatów daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md) lub pojedynczego specyfikatora formatu standardowego, który identyfikuje wstępnie zdefiniowany wzorzec, z tabeli [ciągów standardowych formatów daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Jeśli separatory daty lub godziny nie są używane we wzorcu formatu niestandardowego, użyj niezmiennej kultury dla `provider` parametru i najszerszej formy każdego niestandardowego specyfikatora formatu. Jeśli chcesz określić na przykład godziny we wzorcu, użyj szerszej formy „GG” zamiast węższej „G”.  
  
> [!NOTE]
>  Zamiast wymagania, które `s` jest zgodne z pojedynczym formatem dla operacji analizowania, można <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> wywołać metodę i określić wiele dozwolonych formatów. Powoduje to, że operacja analizy będzie bardziej niemożliwa.  
  
 Parametr zawiera jeden lub więcej elementów członkowskich <xref:System.Globalization.DateTimeStyles> wyliczenia, które określają, czy i gdzie biały znak niezdefiniowany przez `format` może być wyświetlany `s` w i kontrolujące dokładne zachowanie operacji analizy. `styles` W poniższej tabeli opisano sposób, w jaki każdy <xref:System.Globalization.DateTimeStyles> element członkowski wyliczenia ma wpływ na <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> działanie metody.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołania <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracanej <xref:System.DateTime> wartości na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. We wszystkich innych przypadkach flaga nie wywiera żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się między dowolnym pojedynczym elementem daty lub godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`początku.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`końcu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe, które nie `format`są zdefiniowane przez.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Jeśli `s` zawiera czas bez informacji o dacie, Data wartości zwracanej jest ustawiana na `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Parametr jest analizowany przy użyciu wartości domyślnych. Nie jest dozwolone żadne białe miejsce poza obecnym w programie `format` . Jeśli `s` nie ma składnika daty, Data zwracanej <xref:System.DateTime> wartości jest ustawiona na 1/1/0001. Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>zwracanego <xref:System.DateTime> obiektu ma ustawioną wartość. Jeśli w `s`programie są obecne informacje o strefie czasowej, czas jest konwertowany na czas lokalny <xref:System.DateTime.Kind%2A> , a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji na <xref:System.DateTime> wartość daty i godziny <xref:System.DateTime.Kind%2A> z właściwością ustawioną <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. Ta flaga zapobiega przede wszystkim konwersji czasu UTC na czas lokalny.|  
  
 Określone symbole daty i godziny oraz ciągi (takie jak nazwy dni tygodnia w określonym języku) `s` używane w programie są zdefiniowane `provider` przez parametr, tak jak `s` w przypadku `format` formatu standardowego ciąg specyfikatora. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę używaną do interpretacji `s`. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Implementacja <xref:System.IFormatProvider> niestandardowa <xref:System.IFormatProvider.GetFormat%2A> , której metoda zwraca <xref:System.Globalization.CultureInfo> obiekt lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, który zawiera informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> metodę. Należy zauważyć, że nie można przeanalizować ciągu "5/01/2009 8:30 am", `styles` gdy parametr <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> jest równy, ponieważ spacje wiodące nie są dozwolone przez `format`. Ponadto nie można pomyślnie przeanalizować ciągu "5/01/2009 09:00" z `format` "mm/dd/yyyyhh: mm", ponieważ ciąg daty nie poprzedza numeru miesiąca wiodącego zero, zgodnie `format` z wymaganiami.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />lub <paramref name="format" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />lub <paramref name="format" /> jest pustym ciągiem.  
  
—lub— 
 <paramref name="s" />nie zawiera daty i godziny odpowiadającej wzorzecowi określonemu w <paramref name="format" />.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="s" /> zgadzają się.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości. Na przykład zarówno <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> , jak <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />i.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTime.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica dozwolonych formatów <paramref name="s" />. Aby uzyskać więcej informacji, zobacz sekcję: Uwagi.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formacie specyficznym dla kultury.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="s" />. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonej tablicy formatów, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do co najmniej jednego z określonych formatów lub został zgłoszony wyjątek.</summary>
        <returns>Obiekt, który jest równoważny dacie i godzinie zawartej w <paramref name="s" />, zgodnie z <paramref name="formats" />parametrami <paramref name="provider" />, i <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która pasuje `formats` do dowolnego z wzorców przypisanych do parametru. <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Jeśli ciąg `s` nie pasuje do żadnego z tych wzorców z żadną z wariantów zdefiniowanych `styles` przez parametr <xref:System.FormatException>, metoda zgłasza. Oprócz porównywania `s` z wieloma wzorcami formatowania zamiast do jednego wzorca formatowania, Przeciążenie zachowuje <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> się identycznie z metodą.  
  
 `s` Parametr zawiera datę i godzinę do przeanalizowania. Jeśli parametr zawiera tylko godzinę i brak daty, bieżąca data jest używana, `style` chyba że parametr zawiera <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flagę, w tym przypadku jest używana domyślna Data (`DateTime.Date.MinValue`). `s` `s` Jeśli parametr zawiera tylko datę i godzinę, używana jest północ (00:00:00). Parametr określa również, `s` czy parametr może zawierać znaki wiodące, wewnętrzne lub końcowe, inne niż dozwolone przez jeden z ciągów formatu w `formats`. `style`  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość zwracanego <xref:System.DateTime> obiektu ma <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>wartość. To zachowanie można zmienić <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> przy użyciu flagi, która <xref:System.DateTime> zwraca wartość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> ,której<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> właściwość jest lub za pomocą flag i, która zwraca wartość,której<xref:System.DateTime> <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` zawiera informacje o strefie czasowej, czas jest konwertowany na czas lokalny, w razie potrzeby, <xref:System.DateTime.Kind%2A> a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. To zachowanie można zmienić przy użyciu <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flagi, aby nie skonwertować uniwersalnego czasu koordynowanego (UTC) na czas lokalny i <xref:System.DateTime.Kind%2A> ustawić właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Parametr zawiera tablicę wzorców, a jeden `s` z nich musi być zgodny dokładnie w przypadku pomyślnego wykonania operacji analizy. `formats` Wzorce w `formats` parametrze składają się z co najmniej jednego specyfikatora formatu niestandardowego z tabeli [ciągów niestandardowych formatów daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md) lub pojedynczego specyfikatora formatu standardowego, który identyfikuje wstępnie zdefiniowany wzorzec, od [daty standardowej i Tabela ciągów formatu czasu](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Jeśli separatory daty lub godziny nie są używane we wzorcu formatu niestandardowego, użyj niezmiennej kultury dla `provider` parametru i najszerszej formy każdego niestandardowego specyfikatora formatu. Jeśli chcesz określić na przykład godziny we wzorcu, użyj szerszej formy „GG” zamiast węższej „G”.  
  
 Parametr zawiera jeden lub więcej elementów członkowskich <xref:System.Globalization.DateTimeStyles> wyliczenia, które określają, czy i gdzie biały znak niezdefiniowany przez `format` może być wyświetlany `s` w i kontrolujące dokładne zachowanie operacji analizy. `styles` W poniższej tabeli opisano sposób, w jaki każdy <xref:System.Globalization.DateTimeStyles> element członkowski wyliczenia ma wpływ na <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> działanie metody.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołania <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracanej <xref:System.DateTime> wartości na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. We wszystkich innych przypadkach flaga nie wywiera żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się między dowolnym pojedynczym elementem daty lub godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`początku.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`końcu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe, które nie `format`są zdefiniowane przez.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Jeśli `s` zawiera czas bez informacji o dacie, Data wartości zwracanej jest ustawiana na `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Parametr jest analizowany przy użyciu wartości domyślnych. Nie jest dozwolone żadne białe miejsce poza obecnym w programie `format` . Jeśli `s` nie ma składnika daty, Data zwracanej <xref:System.DateTime> wartości jest ustawiona na 1/1/0001. Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>zwracanego <xref:System.DateTime> obiektu ma ustawioną wartość. Jeśli w `s`programie są obecne informacje o strefie czasowej, czas jest konwertowany na czas lokalny <xref:System.DateTime.Kind%2A> , a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji do daty i godziny z <xref:System.DateTime.Kind%2A> właściwością ustawioną na. <xref:System.DateTimeKind.Local?displayProperty=nameWithType> Ta flaga zapobiega przede wszystkim konwersji czasu UTC na czas lokalny.|  
  
 Określone symbole daty i godziny oraz ciągi (takie jak nazwy dni tygodnia w określonym języku) `s` używane w programie są zdefiniowane `provider` przez parametr, tak jak `s` w przypadku `format` formatu standardowego ciąg specyfikatora. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę używaną do interpretacji `s`. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Implementacja <xref:System.IFormatProvider> niestandardowa <xref:System.IFormatProvider.GetFormat%2A> , której metoda zwraca <xref:System.Globalization.CultureInfo> obiekt lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, który zawiera informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodę, aby upewnić się, że można pomyślnie przeanalizować ciąg w wielu możliwych formatach.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />lub <paramref name="formats" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" />jest pustym ciągiem.  
  
—lub— 
element <paramref name="formats" /> jest ciągiem pustym.  
  
—lub— 
 <paramref name="s" />nie zawiera daty i godziny odpowiadającej elementowi elementu <paramref name="formats" />.  
  
—lub— 
Składnik godziny i oznaczenie "AM/PM" w nie <paramref name="s" /> zgadzają się.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości. Na przykład zarówno <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> , jak <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />i.</exception>
        <block subset="none" type="usage"><para>W metodzie Metoda zgłasza <see cref="T:System.FormatException" /> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] <see cref="Overload:System.DateTime.ParseExact" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie są zawarte w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik sekund daty reprezentowanej przez to wystąpienie.</summary>
        <value>Składnik sekund wyrażony jako wartość z zakresu od 0 do 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Second%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Data i godzina.</param>
        <param name="kind">Jedna z wartości wyliczenia, która wskazuje, czy nowy obiekt reprezentuje czas lokalny, UTC, czy też nie.</param>
        <summary>Tworzy nowy <see cref="T:System.DateTime" /> obiekt, który ma taką samą liczbę taktów jak określony <see cref="T:System.DateTime" />, ale jest wyznaczony jako czas lokalny, uniwersalny czas koordynowany (UTC) lub nie, <see cref="T:System.DateTimeKind" /> zgodnie z podaną wartością.</summary>
        <returns>Nowy obiekt, który ma taką samą liczbę taktów jak obiekt reprezentowany przez <paramref name="value" /> parametr <see cref="T:System.DateTimeKind" /> i wartość określoną przez <paramref name="kind" /> parametr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime> Obiekt składa się z pola rodzajowego, które wskazuje, czy wartość czasu jest określana na podstawie czasu lokalnego, skoordynowanego czasu uniwersalnego (UTC), czy nie, i pola taktów, które zawierają wartość czasu mierzoną w taktach 100-nanosekund. Metoda tworzy nowy <xref:System.DateTime> Obiekt przy użyciu określonego `kind` parametru i oryginalnej wartości czasu. <xref:System.DateTime.SpecifyKind%2A>  
  
> [!IMPORTANT]
>  Zwracana <xref:System.DateTime> wartość nie reprezentuje tego samego czasu `value` jako parametru, a <xref:System.DateTime.SpecifyKind%2A> nie jest metodą konwersji strefy czasowej. Zamiast tego pozostawia czas określony przez `value` parametr bez zmian i <xref:System.DateTime.Kind%2A> ustawia właściwość na `kind`. Aby uzyskać informacje na temat konwersji stref czasowych, zobacz [konwertowanie czasów między strefami czasowymi](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Metoda jest przydatna w scenariuszach współdziałania, w których <xref:System.DateTime> otrzymujesz obiekt z nieokreślonym rodzajem pola, ale można określić przez niezależne oznacza, że pole Ticks reprezentuje czas lokalny lub UTC. <xref:System.DateTime.SpecifyKind%2A>  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.SpecifyKind%2A> metodę, aby zademonstrować, <xref:System.DateTime.Kind%2A> jak Właściwość <xref:System.DateTime.ToLocalTime%2A> wpływa <xref:System.DateTime.ToUniversalTime%2A> na metody konwersji i.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">Współdziałanie COM w aplikacjach .NET Framework (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która odejmuje określony czas lub czas trwania z wartości tego wystąpienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Wartość daty i godziny odejmowania.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która odejmuje określoną datę i godzinę z wartości tego wystąpienia.</summary>
        <returns>Przedział czasu, który jest równy dacie i godzinie reprezentowanej przez to wystąpienie, pomniejszonej o datę i <paramref name="value" />godzinę reprezentowane przez.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29> Metoda określa różnicę między dwiema datami. Aby odjąć przedział czasu od bieżącego wystąpienia, wywołaj <xref:System.DateTime.Subtract%28System.TimeSpan%29> metodę. Aby odjąć określony przedział czasu od bieżącego wystąpienia, należy wywołać metodę, która dodaje ten interwał czasu do bieżącej daty, i podać wartość ujemną jako argument metody. Na przykład aby odjąć dwa miesiące od bieżącej daty, należy wywołać <xref:System.DateTime.AddMonths%28System.Int32%29> metodę o wartości-2.  
  
 Jeśli data i godzina bieżącego wystąpienia jest wcześniejsza niż `value`, Metoda <xref:System.TimeSpan> zwraca obiekt, który reprezentuje ujemny przedział czasu. Oznacza to, że wartość wszystkich właściwości innych niż zero (takich jak <xref:System.TimeSpan.Days%2A> lub <xref:System.TimeSpan.Ticks%2A>) jest ujemna.  
  
 Metoda nie uwzględnia wartości <xref:System.DateTime.Kind%2A> właściwości dwóch <xref:System.DateTime> wartości podczas odejmowania. <xref:System.DateTime.Subtract%28System.DateTime%29> Przed odjęciem <xref:System.DateTime> obiektów upewnij się, że obiekty reprezentują czasy w tej samej strefie czasowej. W przeciwnym razie wynik będzie zawierać różnicę między strefami czasowymi.  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> Metoda uwzględnia różnicę między strefami czasowymi podczas odejmowania.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Subtract%2A> metodę i operator odejmowania.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynik jest mniejszy <see cref="F:System.DateTime.MinValue" /> lub <see cref="F:System.DateTime.MaxValue" />równy.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Interwał czasu, który należy odjąć.</param>
        <summary>Zwraca nową <see cref="T:System.DateTime" /> , która odejmuje określony czas trwania z wartości tego wystąpienia.</summary>
        <returns>Obiekt, który jest równy dacie i godzinie reprezentowanej przez to wystąpienie minus przedział czasu reprezentowany przez <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29> Metoda zwraca datę, która jest określoną różnicą interwału czasu z bieżącego wystąpienia. Aby określić interwał czasu między dwiema datami, wywołaj <xref:System.DateTime.Subtract%28System.DateTime%29> metodę. Aby odjąć określony przedział czasu od bieżącego wystąpienia, należy wywołać metodę, która dodaje ten interwał czasu do bieżącej daty, i podać wartość ujemną jako argument metody. Na przykład aby odjąć dwa miesiące od bieżącej daty, należy wywołać <xref:System.DateTime.AddMonths%28System.Int32%29> metodę o wartości-2.  
  
 Ta metoda nie zmienia wartości tego <xref:System.DateTime>elementu. Zamiast tego zwraca nową <xref:System.DateTime> wartość, której wartością jest wynik tej operacji.  
  
 Zwykle Metoda odejmuje <xref:System.TimeSpan> obiekt, który reprezentuje przedział <xref:System.DateTime> czasu, i zwraca wartość wcześniejszą od daty i godziny bieżącego wystąpienia. <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Jeśli <xref:System.TimeSpan> jednak obiekt reprezentuje ujemny przedział czasu <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> , metoda zwraca <xref:System.DateTime> wartość, która jest późniejsza niż data i godzina bieżącego wystąpienia.  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Metoda umożliwia odjęcie przedziału czasu, który składa się z więcej niż jednej jednostki czasu (na przykład przez daną liczbę godzin i określoną liczbę minut). Aby odjąć pojedynczą jednostkę czasu (na przykład lata, miesiące lub dni) z <xref:System.DateTime> wystąpienia, można przekazać ujemną wartość liczbową jako parametr do dowolnej z następujących metod:  
  
-   <xref:System.DateTime.AddYears%2A>, aby odjąć określoną liczbę lat od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddMonths%2A>, aby odjąć określoną liczbę miesięcy od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddDays%2A>, aby odjąć określoną liczbę dni od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddHours%2A>, aby odjąć określoną liczbę godzin od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddMinutes%2A>, aby odjąć określoną liczbę minut od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddSeconds%2A>, aby odjąć określoną liczbę sekund od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, aby odjąć określoną liczbę milisekund od bieżącego wystąpienia daty i godziny.  
  
-   <xref:System.DateTime.AddTicks%2A>, aby odjąć określoną liczbę taktów od bieżącego wystąpienia daty i godziny.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Subtract%2A> metodę i operator odejmowania.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wynik jest mniejszy <see cref="F:System.DateTime.MinValue" /> lub <see cref="F:System.DateTime.MaxValue" />równy.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Wykonywanie operacji arytmetycznych na wartościach dat i godzin</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Zwraca bieżący <see cref="T:System.DateTime" /> obiekt.</summary>
        <returns>Bieżący obiekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">Żądany typ.</param>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Konwertuje bieżący <see cref="T:System.DateTime" /> obiekt na obiekt określonego typu.</summary>
        <returns>Obiekt typu określonego przez <paramref name="type" /> parametr, z wartością równoważną bieżącym <see cref="T:System.DateTime" /> obiektowi.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Ta konwersja nie jest obsługiwana dla tego <see cref="T:System.DateTime" /> typu.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Ta konwersja nie jest obsługiwana. Podjęto próbę użycia tej metody <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Nie jest używana zwracana wartość dla tego elementu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">We wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Obiekt używany do wypełniania danymi.</param>
        <param name="context">Miejsce docelowe dla serializacji. (Ten parametr nie jest używany; Określ <see langword="null" />.)</param>
        <summary>Wypełnia obiekt danymi wymaganymi do serializacji bieżącego <see cref="T:System.DateTime" /> obiektu. <see cref="T:System.Runtime.Serialization.SerializationInfo" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wypełnia `info` parametr <xref:System.DateTime.Ticks%2A> wartościami właściwości i <xref:System.DateTime.Kind%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaczników reprezentujących datę i godzinę tego wystąpienia.</summary>
        <value>Liczba znaczników reprezentujących datę i godzinę tego wystąpienia. Wartość należy do zakresu <see langword="DateTime.MinValue.Ticks" /> od <see langword="DateTime.MaxValue.Ticks" />do.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojedynczy takt reprezentuje 100 nanosekund lub 1 10-milionowego sekundy. Występuje 10 000 taktów w milisekundach lub 10 000 000 taktów w drugim.  
  
 Wartość tej właściwości reprezentuje liczbę przedziałów 100-nanosekund, które upłynęły od 12:00:00 północy, 1 stycznia 0001 (0:00:00 UTC 1 stycznia 0001 w kalendarzu gregoriańskim), która reprezentuje <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Nie obejmuje to liczby taktów, które można przypisać do sekund przestępnych.  
  
   
  
## Examples  
 Poniższy przykład używa właściwości, <xref:System.DateTime.Ticks%2A> aby wyświetlić liczbę taktów, które upłynęły od początku dwudziestu pierwszego wieku i <xref:System.TimeSpan> wystąpienia obiektu. <xref:System.TimeSpan> Obiekt jest następnie używany do wyświetlania czasu, który upłynął przy użyciu kilku innych przedziałów czasu.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę dla tego wystąpienia.</summary>
        <value>Przedział czasu reprezentujący ułamek dnia, który upłynął od północy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.DateTime.Date%2A> do właściwości. który zwraca <xref:System.DateTime> wartość reprezentującą datę bez jej składnika czasu <xref:System.DateTime.TimeOfDay%2A> , właściwość zwraca <xref:System.TimeSpan> wartość, która reprezentuje <xref:System.DateTime> składnik czasu wartości.  
  
 Jeśli chcesz wyświetlić godzinę dnia lub pobrać ciąg <xref:System.DateTime> reprezentujący godzinę dla wartości, możesz zamiast tego wywołać Przeciążenie <xref:System.DateTime.ToString%2A> metody, która ma `format` parametr lub użyć [formatowania złożonego](~/docs/standard/base-types/composite-formatting.md) Funkcja z ciągiem formatu standardowego "t" lub "T".  
  
   
  
## Examples  
 Poniższy przykład wyświetla wartość <xref:System.DateTime.TimeOfDay%2A> właściwości <xref:System.DateTime> tablicy wartości. Jest również kontrast zwracanej wartości ciągiem zwracanym przez ciąg formatu standardowego "t" w złożonej operacji formatowania.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializować bieżący <see cref="T:System.DateTime" /> obiekt do 64-bitowej wartości binarnej, która następnie może być użyta do <see cref="T:System.DateTime" /> odtworzenia obiektu.</summary>
        <returns>64-bitowa liczba całkowita ze znakiem, która <see cref="P:System.DateTime.Kind" /> koduje właściwości i <see cref="P:System.DateTime.Ticks" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby przekonwertować wartość bieżącego <xref:System.DateTime> obiektu na wartość binarną. <xref:System.DateTime.ToBinary%2A> Następnie użyj wartości binarnej i <xref:System.DateTime.FromBinary%2A> metody, aby ponownie utworzyć oryginalny <xref:System.DateTime> obiekt.  
  
> [!IMPORTANT]
>  W niektórych przypadkach <xref:System.DateTime> wartość zwracana <xref:System.DateTime.FromBinary%2A> przez metodę nie jest taka sama jak <xref:System.DateTime.ToBinary%2A> oryginalna <xref:System.DateTime> wartość dostarczona do metody. Aby uzyskać więcej informacji, zobacz następną sekcję "dostosowanie czasu lokalnego".  
  
## <a name="local-time-adjustment"></a>Ustawianie czasu lokalnego  
 Czas lokalny, czyli uniwersalny czas koordynowany dostosowany do lokalnej strefy czasowej, jest reprezentowany przez <xref:System.DateTime> strukturę, której <xref:System.DateTime.Kind%2A> właściwość ma wartość <xref:System.DateTimeKind.Local>. Podczas przywracania wartości lokalnej <xref:System.DateTime> z reprezentacji binarnej, która jest tworzona <xref:System.DateTime.ToBinary%2A> przez metodę, <xref:System.DateTime.FromBinary%2A> Metoda może dostosować wartość Recreate, aby nie była równa oryginalnej wartości. Może się to zdarzyć w następujących warunkach:  
  
-   Jeśli obiekt lokalny <xref:System.DateTime> jest serializowany w jednej strefie czasowej <xref:System.DateTime.ToBinary%2A> przez metodę, a następnie deserializowany w <xref:System.DateTime.FromBinary%2A> innej strefie czasowej przez metodę, czas lokalny reprezentowany przez obiekt wyniku <xref:System.DateTime> jest automatycznie dostosowywany do drugiej strefy czasowej.  
  
     Rozważmy na przykład <xref:System.DateTime> obiekt, który reprezentuje czas lokalny o wartości 3 P.M. Aplikacja, która jest wykonywana w Stanach Zjednoczonych Strefa czasowa pacyficznego używa <xref:System.DateTime.ToBinary%2A> metody do konwertowania tego <xref:System.DateTime> obiektu na wartość binarną. Inna aplikacja, która jest wykonywana w Stanach Zjednoczonych Wschodnia strefa czasowa używa <xref:System.DateTime.FromBinary%2A> metody do konwersji wartości binarnej na nowy <xref:System.DateTime> obiekt. Wartość nowego <xref:System.DateTime> obiektu to 6 P.M., który reprezentuje punkt w czasie jako oryginalny 3-p.m. wartość, ale jest ustawiana na czas lokalny w środkowej strefie czasowej.  
  
-   Jeśli reprezentacja binarna wartości lokalnej <xref:System.DateTime> reprezentuje nieprawidłowy czas w lokalnej strefie czasowej systemu, w którym <xref:System.DateTime.FromBinary%2A> jest wywoływana, czas jest dostosowywany, aby był prawidłowy.  
  
     Na przykład przejście od czasu standardowego do czasu letniego występuje w Stanach Zjednoczonych Strefa czasowa w rejonie pacyficznego 14 marca 2010 o godz. 2:00 rano, gdy czas zaawansowano o godzinę do 3:00 Ten interwał godzinowy jest nieprawidłowy, czyli jest to przedział czasu, który nie istnieje w danej strefie czasowej. Poniższy przykład pokazuje, że gdy czas należący do tego zakresu jest konwertowany na wartość binarną przez <xref:System.DateTime.ToBinary%2A> metodę, a następnie przywracany <xref:System.DateTime.FromBinary%2A> przez metodę, oryginalna wartość jest dostosowywana do poprawnego czasu. Można określić, czy określona wartość daty i godziny może podlegać modyfikacji, przekazując ją do <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> metody, jak pokazano w przykładzie.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Uwagi dotyczące wersji  
 Począwszy od .NET Framework w wersji 2,0, <xref:System.DateTime> struktura składa się z pola rodzaju prywatnego, która wskazuje, czy określona wartość czasu jest oparta na czasie lokalnym, skoordynowanego czasu uniwersalnego (UTC), czy nie, ani w polu znaczniki prywatne, które zawiera liczbę taktów 100-nanosekund, które określają datę i godzinę. Do pola Znaczniki można uzyskać dostęp z <xref:System.DateTime.Ticks%2A> właściwością, a do pola rodzaj można uzyskać dostęp <xref:System.DateTime.Kind%2A> przy użyciu właściwości.  
  
 Przed .NET Framework 2,0, jeśli serializowany <xref:System.DateTime> został obiekt ręcznie zamiast przy użyciu interfejsu serializacji, takiego jak <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, trzeba tylko serializować dane <xref:System.DateTime> taktów w strukturze. Począwszy od wersji 2,0, należy również serializować dane rodzajowe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą datę.</summary>
        <value>Obiekt, który jest ustawiony na dzisiejszą datę, wraz ze składnikiem czasu ustawionym na 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Począwszy od .NET Framework w wersji 2,0, zwracana wartość jest <xref:System.DateTime> wartością, której <xref:System.DateTime.Kind%2A> Właściwość zwraca. <xref:System.DateTimeKind.Local>  
  
 Ponieważ zwraca bieżącą datę bez bieżącego czasu, <xref:System.DateTime.Today%2A> właściwość jest odpowiednia do użycia w aplikacjach, które działają tylko z datami. Aby uzyskać szczegółowe informacje, zobacz [Wybieranie między datami DateTime, DateTimeOffset, TimeSpan i TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Z kolei <xref:System.DateTime.TimeOfDay%2A> Właściwość zwraca bieżącą godzinę bez bieżącej daty, <xref:System.DateTime.Now%2A> a właściwość zwraca zarówno bieżącą datę, jak i bieżącą godzinę.  
  
   
  
## Examples  
 Poniższy przykład używa właściwości, <xref:System.DateTime.Date%2A> aby pobrać bieżącą datę. Pokazano również, jak <xref:System.DateTime> można sformatować wartość przy użyciu niektórych standardowych ciągów formatu daty i godziny. Należy zauważyć, że dane wyjściowe generowane przez trzecie wywołanie <xref:System.DateTime.ToString%28System.String%29> metody używa specyfikatora formatu g do uwzględnienia składnika czasu, który jest równy zero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na czas pliku systemu Windows.</summary>
        <returns>Wartość bieżącego <see cref="T:System.DateTime" /> obiektu wyrażona jako czas pliku systemu Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 Metoda używa właściwości, <xref:System.DateTime.Kind%2A> aby określić, czy bieżący <xref:System.DateTime> obiekt jest czasem lokalnym, czasem UTC lub nieokreślonym rodzajem czasu, który jest traktowany jako czas lokalny. <xref:System.DateTime.ToFileTime%2A>  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToFileTime%2A> metodę.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uzyskany czas pliku będzie reprezentować datę i godzinę przed 12:00 1 stycznia 1601 0001 UTC.</exception>
        <block subset="none" type="usage"><para>Zwykle Metoda przywraca wartość, która została zapisana przez metodę.<see cref="M:System.DateTime.ToFileTime" /> <see cref="T:System.DateTime" /> <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Jednak te dwie wartości mogą się różnić w następujących warunkach: 
— Jeśli Serializacja i deserializacja <see cref="T:System.DateTime" /> wartości wystąpią w różnych strefach czasowych. Na przykład, jeśli <see cref="T:System.DateTime" /> wartość o godzinie 12:30 w Stanach Zjednoczonych Wschodnia strefa czasowa jest serializowana, a następnie deserializowana w Stanach Zjednoczonych Strefa czasowa pacyficznego, oryginalna wartość 12:30 P.M. jest dostosowywany do 9:30 rano Aby odzwierciedlić różnicę między dwiema strefami czasowymi.  
  
— Jeśli <see cref="T:System.DateTime" /> serializowana wartość reprezentuje nieprawidłowy czas w lokalnej strefie czasowej. W takim przypadku <see cref="M:System.DateTime.ToFileTime" /> metoda dostosowuje przywróconą <see cref="T:System.DateTime" /> wartość, aby reprezentować prawidłową godzinę w lokalnej strefie czasowej.  
  
Na przykład przejście od czasu standardowego do czasu letniego występuje w Stanach Zjednoczonych Strefa czasowa w rejonie pacyficznego 14 marca 2010 o godz. 2:00 rano, gdy czas zaawansowano o godzinę do 3:00 Ten interwał godzinowy jest nieprawidłowy, czyli jest to przedział czasu, który nie istnieje w danej strefie czasowej. W poniższym przykładzie pokazano, że gdy czas należący do tego zakresu jest konwertowany na wartość Long Integer przez <see cref="M:System.DateTime.ToFileTime" /> metodę, a następnie przywracany <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> przez metodę, oryginalna wartość jest dostosowywana do poprawnego czasu. Można określić, czy określona wartość daty i godziny może podlegać modyfikacji, przekazując ją do <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metody, jak pokazano w przykładzie.  
  
[!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na czas pliku systemu Windows.</summary>
        <returns>Wartość bieżącego <see cref="T:System.DateTime" /> obiektu wyrażona jako czas pliku systemu Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas pliku systemu Windows ma wartość 64-bitową. Reprezentuje ona liczbę 100-nanosekundowych przedziałów czasu, które upłynęły od północy 1 stycznia 1601 roku n.e. (C.E.) Uniwersalny czas koordynowany (UTC). System Windows wykorzystuje czas pliku do rejestrowania informacji o tym, kiedy aplikacja tworzy, uzyskuje dostęp do zapisuje do pliku.  
  
 Metoda używa właściwości, <xref:System.DateTime.Kind%2A> aby określić, czy bieżący <xref:System.DateTime> obiekt jest czasem lokalnym, czasem UTC lub nieokreślonym rodzajem czasu, który jest traktowany jako czas UTC. <xref:System.DateTime.ToFileTimeUtc%2A> Jeśli jest to czas lokalny, konwertuje czas na UTC przed przeprowadzeniem konwersji do czasu pliku systemu Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uzyskany czas pliku będzie reprezentować datę i godzinę przed 12:00 1 stycznia 1601 0001 UTC.</exception>
        <block subset="none" type="usage"><para>Metoda jest czasami używana do przekonwertowania czasu lokalnego na UTC, a następnie do przywrócenia go przez <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> wywołanie metody, a następnie <see cref="M:System.DateTime.ToLocalTime" /> metodę. <see cref="M:System.DateTime.ToFileTimeUtc" /> Jeśli jednak czas oryginalny reprezentuje nieprawidłowy czas w lokalnej strefie czasowej, te dwa wartości czasu lokalnego nie będą równe. Aby uzyskać dodatkowe informacje, zobacz <see cref="M:System.DateTime.ToLocalTime" /> metodę.</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na czas lokalny.</summary>
        <returns>Obiekt, którego <see cref="P:System.DateTime.Kind" /> właściwość jest <see cref="F:System.DateTimeKind.Local" />, i której wartością jest czas lokalny równy wartości bieżącego <see cref="T:System.DateTime" /> obiektu, lub <see cref="F:System.DateTime.MaxValue" /> Jeśli przekonwertowana wartość jest zbyt duża, aby mogła być reprezentowana przez <see cref="T:System.DateTime" /> obiekt lub <see cref="F:System.DateTime.MinValue" /> Jeśli przekonwertowana wartość jest zbyt mała, aby była reprezentowana jako <see cref="T:System.DateTime" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas lokalny jest równy czasowi skoordynowanego czasu uniwersalnego (UTC) i przesunięcie czasu UTC. Aby uzyskać więcej informacji o przesunięciu UTC, <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>Zobacz. Konwersja uwzględnia również regułę czasu letniego, która ma zastosowanie do czasu reprezentowanego przez bieżący <xref:System.DateTime> obiekt.  
  
> [!IMPORTANT]
>  W [!INCLUDE[winxp](~/includes/winxp-md.md)] systemach<xref:System.DateTime.ToLocalTime%2A> Metoda rozpoznaje tylko bieżącą regułę korekty podczas konwersji z czasu UTC na czas lokalny. W efekcie konwersje dla okresów przed bieżącą regułą korygowania mogą nie odzwierciedlać dokładnie różnicy między czasem UTC i czasem lokalnym.  
  
 Począwszy od .NET Framework w wersji 2,0, wartość zwracana przez <xref:System.DateTime.ToLocalTime%2A> metodę jest określana <xref:System.DateTime.Kind%2A> przez właściwość bieżącego <xref:System.DateTime> obiektu. W poniższej tabeli opisano możliwe wyniki.  
  
|rodzaj|Wyniki|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|To wystąpienie <xref:System.DateTime> jest konwertowane na czas lokalny.|  
|<xref:System.DateTimeKind.Local>|Konwersja nie jest przeprowadzana.|  
|<xref:System.DateTimeKind.Unspecified>|To wystąpienie <xref:System.DateTime> jest przyjmowane <xref:System.DateTime.Kind%2A> jako czas UTC, a konwersja jest wykonywana tak, jakby były <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A> Metoda<xref:System.DateTime> konwertuje wartość z czasu UTC na czas lokalny. Aby przekonwertować czas w każdej określonej strefie czasowej na czas lokalny, użyj <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> metody.  
  
 Wartość zwracana przez konwersję jest <xref:System.DateTime> <xref:System.DateTime.Kind%2A> zawsze zwracana <xref:System.DateTimeKind.Local>przez właściwość. W związku z tym, zwracany jest prawidłowy wynik nawet <xref:System.DateTime.ToLocalTime%2A> wtedy, gdy jest on wielokrotnie <xref:System.DateTime>stosowany do tego samego.  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToLocalTime%2A> metodę. Należy zauważyć, że dokładne dane wyjściowe są zależne od bieżącej kultury i lokalnej strefy czasowej systemu, w którym jest uruchomiony.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 W poniższym przykładzie zastosowano <xref:System.DateTime.SpecifyKind%2A> metodę, aby zademonstrować, <xref:System.DateTime.Kind%2A> jak Właściwość <xref:System.DateTime.ToLocalTime%2A> wpływa <xref:System.DateTime.ToUniversalTime%2A> na metody konwersji i.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Możesz użyć <see cref="M:System.DateTime.ToLocalTime" /> metody, aby przywrócić lokalną wartość daty i godziny, która została przekonwertowana na czas UTC <see cref="M:System.DateTime.ToUniversalTime" /> przez lub <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> metodę. Jeśli jednak czas oryginalny reprezentuje nieprawidłowy czas w lokalnej strefie czasowej, nie będzie pasował do przywróconej wartości. <see cref="M:System.DateTime.ToLocalTime" /> Gdy metoda konwertuje godzinę z UTC na lokalną strefę czasową, dostosowuje także czas, który jest prawidłowy w lokalnej strefie czasowej.  
  
Na przykład przejście od czasu standardowego do czasu letniego występuje w Stanach Zjednoczonych Strefa czasowa w rejonie pacyficznego 14 marca 2010 o godz. 2:00 rano, gdy czas zaawansowano o godzinę do 3:00 Ten interwał godzinowy jest nieprawidłowy, czyli jest to przedział czasu, który nie istnieje w danej strefie czasowej. Poniższy przykład pokazuje, że gdy czas należący do tego zakresu jest konwertowany na UTC przez <see cref="M:System.DateTime.ToUniversalTime" /> metodę, a następnie przywracany <see cref="M:System.DateTime.ToLocalTime" /> przez metodę, oryginalna wartość jest dostosowywana do prawidłowego czasu. Można określić, czy określona wartość daty i godziny może podlegać modyfikacji, przekazując ją do <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metody, jak pokazano w przykładzie.  
  
[!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację ciągu daty długiej.</summary>
        <returns>Ciąg, który zawiera ciąg daty długiej reprezentujący bieżący <see cref="T:System.DateTime" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu wzorca zdefiniowanego <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> przez właściwość skojarzoną z bieżącą kulturą wątku. Wartość zwracana jest taka sama jak wartość zwrócona przez określenie [standardowego ciągu formatu DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "D" przy użyciu <xref:System.DateTime.ToString%28System.String%29> metody.  
  
> [!NOTE]
>  Ciąg zwracany przez <xref:System.DateTime.ToLongDateString%2A> metodę jest wrażliwy na kulturę. Odzwierciedla wzorzec zdefiniowany przez <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern?displayProperty=nameWithType> właściwość kultury Current. Na przykład w przypadku kultury en-US wzorzec daty długiej jest zazwyczaj "dddd, MMMM DD, rrrr"; dla de-DE Culture jest "dddd, d. MMMM RRRR "; dla kultury ja-JP jest to "RRRR" 年 "月" 日 "". Należy pamiętać, że jej wartość może się różnić w zależności od implementacji platformy .NET i jej wersji, systemu operacyjnego i jego wersji oraz dostosowania użytkownika.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]
  
## Examples

Poniższy przykład demonstruje <xref:System.DateTime.ToLongDateString%2A> metodę.  
  
[!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
[!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu czasu długiego.</summary>
        <returns>Ciąg, który zawiera ciąg godziny długiej reprezentujący bieżący <see cref="T:System.DateTime" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu wzorca zdefiniowanego <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> przez właściwość skojarzoną z bieżącą kulturą wątku. Wartość zwracana jest taka sama jak wartość zwracana przez określenie [ciągu standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "T" przy użyciu <xref:System.DateTime.ToString%28System.String%29> metody.  
  
> [!NOTE]
>  Ciąg zwracany przez <xref:System.DateTime.ToLongTimeString%2A> metodę jest wrażliwy na kulturę. Odzwierciedla wzorzec zdefiniowany przez <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> właściwość kultury Current. Na przykład dla kultury en-US wzorzec długiego czasu standardowego to "h:mm: SS TT"; dla de-DE Culture jest to "HH: mm: SS"; dla kultury ja-JP jest to "H:mm: SS". Należy pamiętać, że jej wartość może się różnić w zależności od implementacji platformy .NET i jej wersji, systemu operacyjnego i jego wersji oraz dostosowania użytkownika.

[!INCLUDE[culture-sensitive-formatting](~/includes/thread-formatting.md)]
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToLongTimeString%2A> metodę.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość tego wystąpienia na równoważną datę automatyzacji OLE.</summary>
        <returns>Liczba zmiennoprzecinkowa o podwójnej precyzji, która zawiera datę automatyzacji OLE odpowiadającą wartości tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Data automatyzacji OLE jest implementowana jako liczba zmiennoprzecinkowa, której składnik całkowity jest liczbą dni przed lub po północy, 30 grudnia 1899 i których część ułamkowa reprezentuje czas w tym dniu podzielony przez 24. Na przykład północ, 31 grudnia 1899 jest reprezentowane przez 1,0; w południe, 1 stycznia 1900 jest reprezentowany przez 2,25; północ, 29 grudnia 1899 jest reprezentowane przez-1,0; i 6 grudnia 1899 są reprezentowane przez-1,25.  
  
 Podstawowa Data automatyzacji OLE to północ, 30 grudnia 1899. Minimalna Data automatyzacji OLE to północy, 1 stycznia 0100. Maksymalna Data automatyzacji OLE jest taka sama jak <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, w ostatniej chwili 31 grudnia 9999.  
  
 Metoda zgłasza, Jeślibieżące<xref:System.DateTime.MaxValue> wystąpienie reprezentuje datę, która jest późniejsza niż i wcześniejsza od północy w January1, 0100. <xref:System.OverflowException> <xref:System.DateTime.ToOADate%2A> Jeśli jednak wartość bieżącego wystąpienia to <xref:System.DateTime.MinValue>, metoda zwraca wartość 0.  
  
 Więcej informacji o automatyzacji OLE znajduje się w [bibliotece MSDN](https://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Wartość tego wystąpienia nie może być reprezentowana jako data automatyzacji OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację ciągu daty krótkiej.</summary>
        <returns>Ciąg, który zawiera krótką reprezentację ciągu daty dla <see cref="T:System.DateTime" /> bieżącego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu wzorca zdefiniowanego <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> przez właściwość skojarzoną z bieżącą kulturą wątku. Wartość zwracana jest taka sama jak wartość zwrócona przez określenie [standardowego ciągu formatu DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "d" przy użyciu <xref:System.DateTime.ToString%28System.String%29> metody.  
  
> [!NOTE]
>  Ciąg zwracany przez <xref:System.DateTime.ToShortDateString%2A> metodę jest wrażliwy na kulturę. Odzwierciedla wzorzec zdefiniowany przez <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern?displayProperty=nameWithType> właściwość kultury Current. Na przykład dla kultury en-US standardowy wzorzec daty krótkiej to "M/d/rrrr"; w przypadku kultury de-DE jest to "DD". MM. rrrr "; dla kultury ja-JP jest to "RRRR/MM/DD". Należy pamiętać, że jej wartość może się różnić w zależności od implementacji platformy .NET i jej wersji, systemu operacyjnego i jego wersji oraz dostosowania użytkownika.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToShortDateString%2A> metodę. Pokazuje również, że wynik wywołania <xref:System.DateTime.ToShortDateString%2A> metody jest identyczny z <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> wywołaniem metody z "d" jako parametr formatu.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w krótkim czasie.</summary>
        <returns>Ciąg, który zawiera ciąg krótkiej reprezentacji bieżącego <see cref="T:System.DateTime" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu wzorca zdefiniowanego <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> przez właściwość skojarzoną z bieżącą kulturą wątku. Wartość zwracana jest taka sama jak wartość zwrócona przez określenie [standardowego ciągu formatu DateTime](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "t" przy użyciu <xref:System.DateTime.ToString%28System.String%29> metody.  
  
> [!NOTE]
>  Ciąg zwracany przez <xref:System.DateTime.ToShortTimeString%2A> metodę jest wrażliwy na kulturę. Odzwierciedla wzorzec zdefiniowany przez <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern?displayProperty=nameWithType> właściwość kultury Current. Na przykład dla kultury en-US standardowy wzorzec czasu krótkiego to "h:mm tt"; dla de-DE Culture jest "gg: mm"; dla kultury ja-JP jest to "H:mm". Należy pamiętać, że jej wartość może się różnić w zależności od implementacji platformy .NET i jej wersji, systemu operacyjnego i jego wersji oraz dostosowania użytkownika. 

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToShortTimeString%2A> metodę.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu Konwencji formatowania bieżącej kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTime" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu ogólnego specyfikatora formatu daty i godziny ("G"). Aby sformatować go przy użyciu określonego specyfikatora formatu daty i godziny, wywołaj <xref:System.DateTime.ToString%28System.String%29> metodę. Aby sformatować go przy użyciu ogólnego specyfikatora formatu daty i godziny ("G") dla określonej kultury, wywołaj <xref:System.DateTime.ToString%28System.IFormatProvider%29> metodę. Aby sformatować go przy użyciu określonego specyfikatora formatu daty i godziny oraz Konwencji określonej kultury, wywołaj <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> metodę.  
  
 Metoda ta wykorzystuje informacje o formatowaniu pochodzące z bieżącej kultury. W szczególności łączy ciągi formatu niestandardowego zwracane <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> przez i <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> właściwości <xref:System.Globalization.DateTimeFormatInfo> obiektu zwróconego przez `Thread.CurrentThread.CurrentCulture.DateTimeFormat` właściwość. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Inne przeciążenia <xref:System.DateTime.ToString%2A> metody pozwalają określić kulturę, której formatowanie ma być używane, i zdefiniować wzorzec <xref:System.DateTime> danych wyjściowych wartości.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób, w jaki ciąg reprezentujący <xref:System.DateTime> wartość zwracaną <xref:System.DateTime.ToString> przez metodę zależy od bieżącej kultury wątku. Zmienia ona bieżącą kulturę wątku od en-US do fr-FR do ja-JP. w każdym przypadku wywołuje <xref:System.DateTime.ToString> metodę zwracającą ciąg reprezentujący wartość daty i godziny przy użyciu tej kultury.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString" /> Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTime" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.HijriCalendar" /> klasy, gdy bieżąca kultura jest arabski (Syria).  
  
[! code-CSharp[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! code — VB[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu określonych informacji o formacie specyficznym dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTime" /> obiektu, określony przez. <paramref name="provider" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość bieżącego <xref:System.DateTime> obiektu jest formatowana przy użyciu ogólnego specyfikatora formatu daty i godziny ("G"), który formatuje dane wyjściowe przy użyciu wzorca daty krótkiej i wzorca godziny długiej.  
  
 Format wzorca daty krótkiej i godziny długiej jest definiowany przez `provider` parametr. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   <xref:System.Globalization.CultureInfo> Obiekt, który reprezentuje kulturę, której konwencje formatowania mają być odzwierciedlone w zwracanym ciągu. <xref:System.Globalization.DateTimeFormatInfo> Obiekt zwrócony<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> przez właściwość definiuje formatowanie zwracanego ciągu.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Obiekt niestandardowy, który implementuje <xref:System.IFormatProvider> interfejs. Jego <xref:System.IFormatProvider.GetFormat%2A> Metoda<xref:System.Globalization.DateTimeFormatInfo> zwraca obiekt, który dostarcza informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.DateTimeFormatInfo> jest używany obiekt skojarzony z bieżącą kulturą. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Poniższy przykład wyświetla ciąg reprezentujący datę i godzinę przy użyciu <xref:System.Globalization.CultureInfo> obiektów, które reprezentują pięć różnych kultur.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina wykraczają poza zakres dat obsługiwany przez kalendarz używany przez <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez kulturę reprezentowaną <paramref name="provider" /> przez parametr. <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwość. Jeśli wartość bieżącego <see cref="T:System.DateTime" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.JapaneseCalendar" /> klasy.  
  
[! code-CSharp[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! code — VB[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Standardowy lub niestandardowy ciąg formatu daty i godziny.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu określonego formatu i Konwencji formatowania bieżącej kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTime" /> obiektu, określony przez. <paramref name="format" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca ciąg reprezentujący wartość daty i godziny w określonym formacie, który używa Konwencji formatowania bieżącej kultury; Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. <xref:System.DateTime.ToString%28System.String%29>  
  
 Parametr powinien zawierać pojedynczy znak specyfikatora formatu (zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatowania (zobacz [ciągi niestandardowego formatu daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md)) definiujący format zwracanych `format` parametry. Jeśli `format` jest `null` lub jest pustym ciągiem, zostanie użyty specyfikator formatu ogólnego "G".  
  
 Niektóre zastosowania tej metody obejmują:  
  
-   Pobieranie ciągu, który wyświetla datę i godzinę w krótkim formacie daty i godziny bieżącej kultury. W tym celu należy użyć specyfikatora formatu "G".  
  
-   Pobieranie ciągu, który zawiera tylko miesiąc i rok. W tym celu należy użyć ciągu formatu "MM/RRRR". Ciąg formatu używa separatora daty bieżącej kultury.  
  
-   Pobieranie ciągu zawierającego datę i godzinę w określonym formacie. Na przykład ciąg formatu "MM/DD/yyyyHH: mm" wyświetla ciąg daty i godziny w ustalonym formacie, na przykład "19//03//2013 18:06". Ciąg formatu używa znaku "/" jako stałego separatora daty niezależnie od ustawień specyficznych dla kultury.  
  
-   Pobieranie daty w zagęszczonym formacie, który może zostać użyty do serializacji ciągu daty. Na przykład ciąg formatu "RRRRMMDD" wyświetla czterocyfrowy rok, po którym następuje dwucyfrowy miesiąc i dwucyfrowy dzień bez separatora daty.  
  
 W poniższym przykładzie są używane te trzy ciągi formatu do wyświetlania wartości daty i godziny przy użyciu Konwencji o kulturach en-US i fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 W poniższym przykładzie użyto każdego standardowego ciągu formatu daty i godziny oraz wyboru niestandardowych ciągów formatu daty i godziny, aby wyświetlić reprezentację <xref:System.DateTime> ciągu wartości. Bieżącą kulturą wątku dla przykładu jest EN-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> wynosi 1 i nie jest jednym ze znaków specyfikatora formatu zdefiniowanych dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" />nie zawiera prawidłowego niestandardowego formatu formatowania.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina jest poza zakresem dat obsługiwanym przez kalendarz używany przez bieżącą kulturę.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String)" /> Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym przez bieżącą kulturę. Jeśli wartość bieżącego <see cref="T:System.DateTime" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.HebrewCalendar" /> klasy, gdy bieżąca kultura jest hebrajski (Izrael).  
  
[! code-CSharp[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! code — VB[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Standardowy lub niestandardowy ciąg formatu daty i godziny.</param>
        <param name="provider">Obiekt, który dostarcza informacje o formatowaniu specyficzne dla kultury.</param>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na jego równoważną reprezentację w postaci ciągu przy użyciu określonego formatu i informacji o formacie specyficznym dla kultury.</summary>
        <returns>Ciąg reprezentujący wartość bieżącego <see cref="T:System.DateTime" /> obiektu określony przez <paramref name="format" /> i <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr może zawierać jeden znak specyfikatora formatu (zobacz [ciągi standardowego formatu daty i godziny](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) lub niestandardowy wzorzec formatowania (zobacz [ciągi niestandardowego formatu daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). `format` Jeśli `format` jest `null` lub jest pustym ciągiem (""), używany jest specyfikator formatu standardowego "G".  
  
 `provider` Parametr definiuje wzorzec, który odnosi się do specyfikatorów formatu standardowego, a także symboli i nazw składników daty i godziny. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   <xref:System.Globalization.CultureInfo> Obiekt, który reprezentuje kulturę, której konwencje formatowania mają być odzwierciedlone w zwracanym ciągu. <xref:System.Globalization.DateTimeFormatInfo> Obiekt zwrócony<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> przez właściwość definiuje formatowanie zwracanego ciągu.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Obiekt niestandardowy, który implementuje <xref:System.IFormatProvider> interfejs. Jego <xref:System.IFormatProvider.GetFormat%2A> Metoda<xref:System.Globalization.DateTimeFormatInfo> zwraca obiekt, który dostarcza informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.DateTimeFormatInfo> jest używana skojarzona z bieżącą kulturą. Aby uzyskać więcej informacji, zobacz <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto każdego standardowego formatu daty i godziny, aby wyświetlić ciąg reprezentujący datę i godzinę dla czterech różnych kultur.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 Poniższy przykład ilustruje różne sposoby formatowania <xref:System.DateTime> wartości przy użyciu niezmiennej. <xref:System.Globalization.DateTimeFormatInfo>  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Długość <paramref name="format" /> wynosi 1 i nie jest jednym ze znaków specyfikatora formatu zdefiniowanych dla <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
—lub— 
 <paramref name="format" />nie zawiera prawidłowego niestandardowego formatu formatowania.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Data i godzina wykraczają poza zakres dat obsługiwany przez kalendarz używany przez <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Metoda zwraca ciąg reprezentujący datę i godzinę w kalendarzu używanym <paramref name="provider" /> przez parametr. <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> Jego kalendarz jest zdefiniowany przez <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> właściwość. Jeśli wartość bieżącego <see cref="T:System.DateTime" /> wystąpienia jest wcześniejsza niż <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> lub późniejsza niż <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, metoda zgłasza <see cref="T:System.ArgumentOutOfRangeException" />. Poniższy przykład stanowi ilustrację. Próbuje sformatować datę, która znajduje się poza zakresem <see cref="T:System.Globalization.UmAlQuraCalendar" /> klasy.  
  
[! code-CSharp[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! code — VB[System. DateTime. ToString. wyjątku ArgumentOutOfRangeException # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatowanie typów w programie .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje wartość bieżącego <see cref="T:System.DateTime" /> obiektu na uniwersalny czas koordynowany (UTC).</summary>
        <returns>Obiekt, którego <see cref="P:System.DateTime.Kind" /> właściwość jest <see cref="F:System.DateTimeKind.Utc" />i którego wartość jest równoważna UTC wartości bieżącego <see cref="T:System.DateTime" /> obiektu lub <see cref="F:System.DateTime.MaxValue" /> Jeśli przekonwertowana wartość jest zbyt duża, aby mogła być reprezentowana przez <see cref="T:System.DateTime" /> obiekt lub <see cref="F:System.DateTime.MinValue" />Jeśli przekonwertowana wartość jest zbyt mała, aby mogła być <see cref="T:System.DateTime" /> reprezentowana przez obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniwersalny czas koordynowany (UTC) jest równy czasowi lokalnemu i przesunięciu czasu UTC. Aby uzyskać więcej informacji o przesunięciu UTC, <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>Zobacz. Konwersja uwzględnia również regułę czasu letniego, która ma zastosowanie do czasu reprezentowanego przez bieżący <xref:System.DateTime> obiekt.  
  
> [!IMPORTANT]
>  W [!INCLUDE[winxp](~/includes/winxp-md.md)] systemach<xref:System.DateTime.ToUniversalTime%2A> Metoda rozpoznaje tylko bieżącą regułę korekty podczas konwersji z czasu lokalnego na UTC. W efekcie konwersje dla okresów przed bieżącą regułą dostosowania mogą nie odzwierciedlać dokładnie różnicy między czasem lokalnym i czasem UTC.  
  
 Począwszy od .NET Framework w wersji 2,0, wartość zwracana przez <xref:System.DateTime.ToUniversalTime%2A> metodę jest określana <xref:System.DateTime.Kind%2A> przez właściwość bieżącego <xref:System.DateTime> obiektu. W poniższej tabeli opisano możliwe wyniki.  
  
|rodzaj|Wyniki|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Konwersja nie jest przeprowadzana.|  
|<xref:System.DateTimeKind.Local>|Bieżący <xref:System.DateTime> obiekt jest konwertowany na czas UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Bieżący <xref:System.DateTime> obiekt jest przyjmowana <xref:System.DateTime.Kind%2A> jako czas lokalny, a konwersja jest wykonywana tak, jakby były <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A> Metoda<xref:System.DateTime> konwertuje wartość z czasu lokalnego na UTC. Aby przekonwertować czas w nielokalnej strefie czasowej na czas UTC, użyj <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metody. Aby skonwertować czas, którego przesunięcie od czasu UTC jest znane, użyj <xref:System.DateTimeOffset.ToUniversalTime%2A> metody.  
  
 Jeśli wartość wystąpienia daty i godziny jest niejednoznaczna, ta metoda zakłada, że jest to czas standardowy. (Niejednoznaczny czas to taki, który może być mapowany do czasu standardowego lub czasu letniego w lokalnej strefie czasowej) Jeśli wartość wystąpienia daty i godziny jest nieprawidłowym czasem, ta metoda po prostu odejmuje czas lokalny od przesunięcia czasu UTC lokalnej strefy czasowej do zwrócenia czasu UTC. (Nieprawidłowy czas to taka, która nie istnieje ze względu na sposób zastosowania reguł korekty czasu letniego).  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.ToUniversalTime%2A> metodę.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 W poniższym przykładzie zastosowano <xref:System.DateTime.SpecifyKind%2A> metodę, aby zademonstrować, <xref:System.DateTime.Kind%2A> jak Właściwość <xref:System.DateTime.ToLocalTime%2A> wpływa <xref:System.DateTime.ToUniversalTime%2A> na metody konwersji i.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToUniversalTime" /> Metoda jest czasami używana do przekonwertowania czasu lokalnego na UTC. <see cref="M:System.DateTime.ToLocalTime" /> Metoda jest następnie wywoływana w celu przywrócenia oryginalnego czasu lokalnego. Jeśli jednak czas oryginalny reprezentuje nieprawidłowy czas w lokalnej strefie czasowej, te dwa wartości czasu lokalnego nie będą równe. Aby uzyskać dodatkowe informacje i przykład, zobacz <see cref="M:System.DateTime.ToLocalTime" /> metodę.  
  
W [!INCLUDE[winxp](~/includes/winxp-md.md)] systemach<see cref="M:System.DateTime.ToUniversalTime" /> Metoda rozpoznaje tylko bieżącą regułę korekty dla lokalnej strefy czasowej, która ma zastosowanie do wszystkich dat, włącznie z datami niskiego poziomu (czyli datami wcześniejszymi niż data początkowa bieżącej korekty Reguła). Aplikacje uruchomione na [!INCLUDE[winxp](~/includes/winxp-md.md)] , które wymagają historycznie dokładnego lokalnego obliczenia daty i godziny, muszą obejść to zachowanie <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> przy użyciu metody pobierania <see cref="T:System.TimeZoneInfo" /> obiektu, który odnosi się do lokalnej strefy czasowej i wywołania jego <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> metodę.  
  
Poniższy przykład ilustruje różnicę między <see cref="M:System.DateTime.ToUniversalTime" /> metodami [!INCLUDE[winxp](~/includes/winxp-md.md)] i <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> w systemie w Stanach Zjednoczonych Strefa czasowa pacyficznego. Pierwsze dwa wywołania metody stosują bieżącą regułę korekty strefy czasowej (która zacznie obowiązywać w 2007) do daty w 2006. Bieżąca reguła korygowania umożliwia przejście do czasu letniego w drugiej niedzielę marca; Poprzednia reguła, która była skuteczna w 2006, została przeprowadzona w przypadku przejścia do czasu letniego w pierwszej niedzielę kwietnia. Tylko trzecie wywołanie metody dokładnie wykonuje tę historyczną konwersję daty i godziny.  
  
[!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik i zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę konwersji.</param>
        <param name="result">Gdy ta metoda zwraca, zawiera <see cref="T:System.DateTime" /> wartość równoważną dacie i godzinie zawartej w <paramref name="s" />, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTime.MinValue" /> konwersja nie powiodła się. Konwersja nie powiedzie się <paramref name="s" /> , jeśli <see langword="null" />parametr ma wartość, jest ciągiem pustym ("") lub nie zawiera prawidłowej reprezentacji ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik i zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli parametr został przekonwertowany pomyślnie; w przeciwnym <see langword="false" />razie,. <paramref name="s" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest podobna <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> do<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> metody, z tą różnicą, że metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
 Ciąg `s` jest analizowany przy użyciu informacji o formatowaniu w bieżącym <xref:System.Globalization.DateTimeFormatInfo> obiekcie, który jest dostarczany niejawnie przez bieżącą kulturę wątku.  
  
 Ta metoda próbuje zignorować nierozpoznane dane, jeśli to możliwe, i wypełnia brakujące informacje o miesiącu, dzień i rok z bieżącą datą. Jeśli `s` zawiera tylko datę i godzinę, ta metoda zakłada, że czas wynosi 12:00 północy. Jeśli `s` zawiera składnik daty z dwucyfrowym rokiem, jest konwertowany na rok w bieżącym kalendarzu bieżącej kultury na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Wszystkie wiodące, wewnętrzne lub końcowe znaki odstępu w programie `s` są ignorowane. Datę i godzinę można przenawiasować za pomocą pary wiodących i końcowych znaków numeru ("#", U + 0023) i można je kończyć z co najmniej jednym znakiem NULL (U + 0000).  
  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Ponieważ metoda próbuje przeanalizować ciąg reprezentujący datę i godzinę przy użyciu reguł formatowania bieżącej kultury, próba przeanalizowania określonego ciągu dla różnych kultur może zakończyć się niepowodzeniem lub zwrócić różne wyniki. Jeśli określony format daty i godziny zostanie przeanalizowany dla różnych ustawień regionalnych, użyj <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metody lub jednego z przeciążeń <xref:System.DateTime.TryParseExact%2A> metody i podaj specyfikator formatu.  
  
 Jeśli `s` jest to ciąg reprezentujący dzień przestępny w roku przestępnym w bieżącym kalendarzu, Metoda zostanie `s` przeanalizowana pomyślnie. Jeśli `s` jest to ciąg reprezentujący dzień przestępny w roku przestępnym w bieżącym kalendarzu bieżącej kultury, operacja analizy kończy się niepowodzeniem i zwraca `false`metodę.  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej, <xref:System.DateTime> zawiera wartość <xref:System.DateTime.Kind%2A> , `result` której <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> właściwość jest zwracana, gdy metoda zwraca. Jeśli ciąg, który ma być analizowany, zawiera informacje o strefie `result` czasowej <xref:System.DateTime> , zawiera <xref:System.DateTime.Kind%2A> wartość, <xref:System.DateTimeKind.Local?displayProperty=nameWithType> której właściwość jest zwracana, gdy metoda zwraca.  
  
   
  
## Examples  
 Poniższy przykład przekazuje do <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metody liczbę ciągów daty i godziny.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Na formatowanie mają wpływ właściwości bieżącego <see cref="T:System.Globalization.DateTimeFormatInfo" /> obiektu, które domyślnie są wyprowadzane z elementu **Opcje regionalne i językowe** w panelu sterowania. Metoda może nieoczekiwanie się nie <see langword="False" /> powieść i <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> zwrócić, jeśli bieżąca <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> i właściwości są ustawione na tę samą wartość. <see cref="Overload:System.DateTime.TryParse" /></para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Przykład: Narzędzie do formatowania .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę konwersji.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formatowaniu specyficzne dla kultury.</param>
        <param name="styles">Bitowa kombinacja wartości wyliczenia, która definiuje sposób interpretacji przeanalizowanej daty w odniesieniu do bieżącej strefy czasowej lub bieżącej daty. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Gdy ta metoda zwraca, zawiera <see cref="T:System.DateTime" /> wartość równoważną dacie i godzinie zawartej w <paramref name="s" />, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTime.MinValue" /> konwersja nie powiodła się. Konwersja nie powiedzie się <paramref name="s" /> , jeśli <see langword="null" />parametr ma wartość, jest ciągiem pustym ("") lub nie zawiera prawidłowej reprezentacji ciągu daty i godziny. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonych informacji o formacie i stylu formatowania specyficznych dla kultury oraz zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli parametr został przekonwertowany pomyślnie; w przeciwnym <see langword="false" />razie,. <paramref name="s" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Metoda analizuje ciąg, który może zawierać datę, godzinę i informacje o strefie czasowej. Jest podobna do <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z tą różnicą, <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> że metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się.  
  
 Ta metoda próbuje zignorować nierozpoznane dane i `s` całkowicie przeanalizować. Jeśli `s` zawiera godzinę, ale nie datę, Metoda domyślnie zastępuje bieżącą datę lub, jeśli `styles` zawiera <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> flagę, zastępuje `DateTime.Date.MinValue`. Jeśli `s` zawiera datę, ale nie czas, jako domyślny czas używany jest 12:00 północy. Jeśli data jest obecna, ale jego składnik roku składa się tylko z dwóch cyfr, jest konwertowany na rok w `provider` bieżącym kalendarzu parametru na podstawie wartości <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> właściwości. Wszystkie wiodące, wewnętrzne lub końcowe znaki odstępu w programie `s` są ignorowane. Datę i godzinę można przenawiasować za pomocą pary wiodących i końcowych znaków numeru ("#", U + 0023) i można je kończyć z co najmniej jednym znakiem NULL (U + 0000).  
  
 Określone prawidłowe formaty dla elementów daty i godziny, a także nazwy i symbole używane w datach i godzinach, są definiowane przez `provider` parametr, który może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę, której formatowanie jest używane `s` w parametrze. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez właściwość definiuje formatowanie używane w `s`. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
-   Obiekt, który definiuje formatowanie używane w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   Implementacja niestandardowa <xref:System.IFormatProvider> . Metoda zwraca obiekt, który definiuje formatowanie używane w `s`. <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo>  
  
 Jeśli `provider` jest`null`, używana jest bieżąca kultura.  
  
 Jeśli `s` jest to ciąg reprezentujący dzień przestępny w roku przestępnym w bieżącym kalendarzu, Metoda zostanie `s` przeanalizowana pomyślnie. Jeśli `s` jest to ciąg reprezentujący dzień przestępny w roku przestępnym w bieżącym `provider`kalendarzu, operacja analizy kończy się niepowodzeniem i zwraca `false`metodę.  
  
 `styles` Parametr definiuje dokładną interpretację przeanalizowanego ciągu i sposób, w jaki powinna ją obsługiwać operacja analizy. Może to być jeden lub więcej elementów członkowskich <xref:System.Globalization.DateTimeStyles> wyliczenia, zgodnie z opisem w poniższej tabeli.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołania <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracanej <xref:System.DateTime> wartości na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. We wszystkich innych przypadkach flaga nie wywiera żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Choć ważna, wartość ta jest ignorowana. W elementach `s`daty i godziny w elemencie.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Choć ważna, wartość ta jest ignorowana. W elementach `s`daty i godziny w elemencie jest dozwolony wiodący biały znak.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Choć ważna, wartość ta jest ignorowana. Końcowy biały znak jest dozwolony w elementach `s`daty i godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe. Jest to zachowanie domyślne. Nie można go zastąpić przez dostarczenie bardziej restrykcyjnej <xref:System.Globalization.DateTimeStyles> wartości wyliczenia, takiej <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>jak.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.None>|Choć ważna, wartość ta jest ignorowana.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji ciągu daty i godziny na <xref:System.DateTime> wartość <xref:System.DateTime.Kind%2A> z właściwością ustawioną na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Zazwyczaj taki ciąg jest tworzony przez wywołanie <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metody przy użyciu standardowych specyfikatorów formatu "o", "r" lub "u".|  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> , metoda zwraca <xref:System.DateTime> wartość, <xref:System.DateTime.Kind%2A> której właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> jest, `styles` chyba że flaga wskazuje inaczej. Jeśli `s` zawiera informacje o strefie czasowej lub przesunięciu strefy <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> czasowej, Metoda wykonuje wszelkie niezbędne konwersje czasu i zwraca jedną z następujących wartości:  
  
-   Wartość, której data i godzina odzwierciedlają czas lokalny i którego <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.DateTime>  
  
-   Lub, jeśli `styles` <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> zawiera flagę, <xref:System.DateTime> wartość, której data i godzina odzwierciedlają czas UTC <xref:System.DateTime.Kind%2A> , a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>których właściwość jest.  
  
 To zachowanie można zastąpić przy użyciu <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flagi.  
  
## <a name="parsing-custom-cultures"></a>Analizowanie niestandardowych kultur  
 W przypadku analizowania ciągu daty i godziny wygenerowanego dla niestandardowej kultury Użyj <xref:System.DateTime.TryParseExact%2A> metody zamiast <xref:System.DateTime.TryParse%2A> metody, aby zwiększyć prawdopodobieństwo pomyślnego wykonania operacji analizy. Niestandardowa Data i ciąg czasu kultury mogą być skomplikowane i trudne do analizy. <xref:System.DateTime.TryParse%2A> Metoda próbuje przeanalizować ciąg za pomocą kilku niejawnych wzorców analizy, co może zakończyć się niepowodzeniem. Z kolei <xref:System.DateTime.TryParseExact%2A> metoda wymaga jawnie wyznaczania co najmniej jednego dokładnego wzorca analizy, które może się powieść.  
  
 Aby uzyskać więcej informacji na temat kultur niestandardowych, <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> zobacz Klasa.  
  
   
  
## Examples  
 Poniższy przykład ilustruje <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodę.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />nie jest prawidłową <see cref="T:System.Globalization.DateTimeStyles" /> wartością.  
  
—lub— 
 <paramref name="styles" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości (na przykład <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> i <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" />jest kulturą neutralną i nie można jej użyć w operacji analizowania.</exception>
        <block subset="none" type="usage"><para>Na formatowanie mają wpływ właściwości bieżącego <see cref="T:System.Globalization.DateTimeFormatInfo" /> obiektu, który jest dostarczany <paramref name="provider" /> przez parametr. Metoda może nieoczekiwanie się nie <see langword="False" /> powieść i <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> zwrócić, jeśli bieżąca <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> i właściwości są ustawione na tę samą wartość. <see cref="Overload:System.DateTime.TryParse" /></para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu. Metoda zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę konwersji.</param>
        <param name="format">Wymagany format <paramref name="s" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formatowaniu specyficzne dla kultury.</param>
        <param name="style">Bitowa kombinacja co najmniej jednej wartości wyliczenia, która wskazuje dozwolony format <paramref name="s" />.</param>
        <param name="result">Gdy ta metoda zwraca, zawiera <see cref="T:System.DateTime" /> wartość równoważną dacie i godzinie zawartej w <paramref name="s" />, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTime.MinValue" /> konwersja nie powiodła się. Konwersja nie powiedzie się, <paramref name="s" /> Jeśli <paramref name="format" /> parametr or <see langword="null" />jest ciągiem pustym lub nie zawiera daty i godziny odpowiadającej wzorzecowi określonemu w <paramref name="format" />. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonego formatu, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do wskazanego formatu. Metoda zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli <paramref name="s" /> został przekonwertowany pomyślnie; w <see langword="false" />przeciwnym razie,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która musi być w formacie zdefiniowanym `format` przez parametr. <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Jest podobna do <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metody, z tą różnicą, <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> że metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się.  
  
 Parametr zawiera datę i godzinę do przeanalizowania i musi być w formacie zdefiniowanym `format` przez parametr. `s` Jeśli w programie `s`są obecne daty, godziny i elementy strefy czasowej, muszą one być również wyświetlane w kolejności określonej `format`przez. Jeśli `format` definiuje datę bez elementu Time, a operacja analizy powiedzie się, obliczona <xref:System.DateTime> wartość ma godzinę północy (00:00:00). Jeśli `format` definiuje godzinę bez elementu Date, a operacja analizy powiedzie się, <xref:System.DateTime> wartość `DateTime.Now.Date`domyślna domyślnie ma datę lub ma datę `DateTime.MinValue.Date` , gdy `styles` zawiera <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flagę. Parametr określa, `s` czy parametr może zawierać znaki wiodące, wewnętrzne lub końcowe. `style`  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość zwracanego <xref:System.DateTime> obiektu ma <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>wartość. To zachowanie można zmienić <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> przy użyciu flagi, która <xref:System.DateTime> zwraca wartość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> ,której<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> właściwość jest lub za pomocą flag i, która zwraca wartość,której<xref:System.DateTime> <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli s zawiera informacje o strefie czasowej, czas jest konwertowany na czas lokalny, w razie potrzeby, <xref:System.DateTime.Kind%2A> a właściwość zwracanego <xref:System.DateTime> obiektu ma ustawioną <xref:System.DateTimeKind.Local?displayProperty=nameWithType>wartość. To zachowanie można zmienić przy użyciu <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flagi, aby nie skonwertować uniwersalnego czasu koordynowanego (UTC) na czas lokalny i <xref:System.DateTime.Kind%2A> ustawić właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Parametr zawiera wzorzec, który odnosi się do oczekiwanego formatu `s` parametru. `format` Wzorzec w `format` parametrze składa się z co najmniej jednego specyfikatora formatu niestandardowego z tabeli [ciągów niestandardowych formatów daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md) lub pojedynczego specyfikatora formatu standardowego, który identyfikuje wstępnie zdefiniowany wzorzec, od [daty standardowej i Tabela ciągów formatu czasu](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Jeśli separatory daty lub godziny nie są używane we wzorcu formatu niestandardowego, użyj niezmiennej kultury dla `provider` parametru i najszerszej formy każdego niestandardowego specyfikatora formatu. Jeśli chcesz określić na przykład godziny we wzorcu, użyj szerszej formy „GG” zamiast węższej „G”.  
  
> [!NOTE]
>  Zamiast wymagania, które `s` jest zgodne z pojedynczym formatem dla operacji analizowania, można <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> wywołać metodę i określić wiele dozwolonych formatów. Powoduje to, że operacja analizy będzie bardziej niemożliwa.  
  
 Określone symbole daty i godziny oraz ciągi (takie jak nazwy dni tygodnia w określonym języku) `s` używane w programie są zdefiniowane `provider` przez parametr, tak jak `s` w przypadku `format` formatu standardowego ciąg specyfikatora. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę używaną do interpretacji `s`. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Implementacja <xref:System.IFormatProvider> niestandardowa <xref:System.IFormatProvider.GetFormat%2A> , której metoda zwraca <xref:System.Globalization.CultureInfo> obiekt lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, który zawiera informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Parametr zawiera jeden lub więcej elementów członkowskich <xref:System.Globalization.DateTimeStyles> wyliczenia, które określają, czy i gdzie biały znak niezdefiniowany przez `format` może być wyświetlany `s` w i kontrolujące dokładne zachowanie operacji analizy. `styles` W poniższej tabeli opisano sposób, w jaki każdy <xref:System.Globalization.DateTimeStyles> element członkowski wyliczenia ma wpływ na <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> działanie metody.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołania <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracanej <xref:System.DateTime> wartości na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. We wszystkich innych przypadkach flaga nie wywiera żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się między dowolnym pojedynczym elementem daty lub godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`początku.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`końcu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe, które nie `format`są zdefiniowane przez.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Jeśli `s` zawiera czas bez informacji o dacie, Data wartości zwracanej jest ustawiana na `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Parametr jest analizowany przy użyciu wartości domyślnych. Nie jest dozwolone żadne białe miejsce poza obecnym w programie `format` . Jeśli `s` nie ma składnika daty, Data zwracanej <xref:System.DateTime> wartości jest ustawiona na 1/1/0001. Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>zwracanego <xref:System.DateTime> obiektu ma ustawioną wartość. Jeśli w `s`programie są obecne informacje o strefie czasowej, czas jest konwertowany na czas lokalny <xref:System.DateTime.Kind%2A> , a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji do <xref:System.DateTime> wartości <xref:System.DateTime.Kind%2A> z właściwością ustawioną <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. Ta flaga zapobiega przede wszystkim konwersji czasu UTC na czas lokalny.|  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodę. Należy zauważyć, że nie można przeanalizować ciągu "5/01/2009 8:30 am", `styles` gdy parametr <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> jest równy, ponieważ spacje wiodące nie są dozwolone przez `format`. Ponadto nie można pomyślnie przeanalizować ciągu "5/01/2009 09:00" z `format` "mm/dd/yyyyhh: mm", ponieważ ciąg daty nie poprzedza numeru miesiąca wiodącego zero, zgodnie `format` z wymaganiami.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />nie jest prawidłową <see cref="T:System.Globalization.DateTimeStyles" /> wartością.  
  
—lub— 
 <paramref name="styles" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości (na przykład <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> i <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]W ,<see cref="Overload:System.DateTime.TryParseExact" /> Metoda zwraca<see langword="false" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie znajduje się w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg zawierający datę i godzinę, które należy przekształcić.</param>
        <param name="formats">Tablica dozwolonych formatów <paramref name="s" />.</param>
        <param name="provider">Obiekt, który dostarcza informacje <paramref name="s" />o formacie specyficznym dla kultury.</param>
        <param name="style">Bitowa kombinacja wartości wyliczenia wskazująca dozwolony format <paramref name="s" />. Typową wartością do określenia jest <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Gdy ta metoda zwraca, zawiera <see cref="T:System.DateTime" /> wartość równoważną dacie i godzinie zawartej w <paramref name="s" />, jeśli konwersja zakończyła się powodzeniem lub <see cref="F:System.DateTime.MinValue" /> konwersja nie powiodła się. Konwersja kończy się niepowodzeniem <paramref name="formats" /> , <see langword="null" /> <paramref name="s" /> <paramref name="s" /> Jeśli lub jest <paramref name="formats" /> lub<paramref name="s" /> element jest ciągiem pustym lub format nie jest dokładnie określony przez co najmniej jeden wzorzec formatu w <paramref name="formats" />. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Konwertuje określony ciąg reprezentujący datę i godzinę na jego <see cref="T:System.DateTime" /> odpowiednik przy użyciu określonej tablicy formatów, informacji o formacie specyficznym dla kultury i stylu. Format ciągu reprezentującego musi dokładnie pasować do co najmniej jednego z określonych formatów. Metoda zwraca wartość wskazującą, czy konwersja powiodła się.</summary>
        <returns><see langword="true" />Jeśli parametr został przekonwertowany pomyślnie; w przeciwnym <see langword="false" />razie,. <paramref name="s" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda analizuje ciąg reprezentujący datę, która pasuje `formats` do dowolnego z wzorców przypisanych do parametru. <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Przypomina metodę, z tą różnicą, <xref:System.DateTime.TryParseExact%2A> że metoda nie zgłasza wyjątku, jeśli konwersja nie powiedzie się. <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
 `s` Parametr zawiera datę i godzinę do przeanalizowania. Jeśli parametr zawiera tylko godzinę i brak daty, bieżąca data jest używana, `style` chyba że parametr zawiera <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flagę, w tym przypadku jest używana domyślna Data (`DateTime.Date.MinValue`). `s` `s` Jeśli parametr zawiera tylko datę i godzinę, używana jest północ (00:00:00). Parametr określa również, `s` czy parametr może zawierać znaki wiodące, wewnętrzne lub końcowe, inne niż dozwolone przez jeden z ciągów formatu w `formats`. `style`  
  
 Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość zwracanego <xref:System.DateTime> obiektu ma <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>wartość. To zachowanie można zmienić <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> przy użyciu flagi, która <xref:System.DateTime> zwraca wartość <xref:System.DateTimeKind.Local?displayProperty=nameWithType> <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime.Kind%2A> ,której<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> właściwość jest lub za pomocą flag i, która zwraca wartość,której<xref:System.DateTime> <xref:System.DateTime.Kind%2A> właściwość jest <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli s zawiera informacje o strefie czasowej, czas jest konwertowany na czas lokalny, w razie potrzeby, <xref:System.DateTime.Kind%2A> a właściwość zwracanego <xref:System.DateTime> obiektu ma ustawioną <xref:System.DateTimeKind.Local?displayProperty=nameWithType>wartość. To zachowanie można zmienić przy użyciu <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flagi, aby nie skonwertować uniwersalnego czasu koordynowanego (UTC) na czas lokalny i <xref:System.DateTime.Kind%2A> ustawić właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Parametr zawiera tablicę wzorców, a jeden `s` z nich musi być zgodny dokładnie w przypadku pomyślnego wykonania operacji analizy. `formats` Wzorce w `formats` parametrze składają się z co najmniej jednego specyfikatora formatu niestandardowego z tabeli [ciągów niestandardowych formatów daty i godziny](~/docs/standard/base-types/custom-date-and-time-format-strings.md) lub pojedynczego specyfikatora formatu standardowego, który identyfikuje wstępnie zdefiniowany wzorzec, od [daty standardowej i Tabela ciągów formatu czasu](~/docs/standard/base-types/standard-date-and-time-format-strings.md) .  
  
 Jeśli separatory daty lub godziny nie są używane we wzorcu formatu niestandardowego, użyj niezmiennej kultury dla `provider` parametru i najszerszej formy każdego niestandardowego specyfikatora formatu. Jeśli chcesz określić na przykład godziny we wzorcu, użyj szerszej formy „GG” zamiast węższej „G”.  
  
 Określone symbole daty i godziny oraz ciągi (takie jak nazwy dni tygodnia w określonym języku) `s` używane w programie są zdefiniowane `provider` przez parametr, tak jak `s` w przypadku `format` formatu standardowego ciąg specyfikatora. `provider` Parametr może mieć jedną z następujących wartości:  
  
-   Obiekt, który reprezentuje kulturę używaną do interpretacji `s`. <xref:System.Globalization.CultureInfo> Obiekt zwrócony przez jego <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Właściwość definiuje symbole i formatowanie w `s`. <xref:System.Globalization.DateTimeFormatInfo>  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Obiekt, który definiuje format danych daty i godziny.  
  
-   Implementacja <xref:System.IFormatProvider> niestandardowa <xref:System.IFormatProvider.GetFormat%2A> , której metoda zwraca <xref:System.Globalization.CultureInfo> obiekt lub <xref:System.Globalization.DateTimeFormatInfo> obiekt, który zawiera informacje o formatowaniu.  
  
 Jeśli `provider` jest `null` ,<xref:System.Globalization.CultureInfo> używany jest obiekt, który odpowiada bieżącej kulturze.  
  
 Parametr zawiera jeden lub więcej elementów członkowskich <xref:System.Globalization.DateTimeStyles> wyliczenia, które określają, czy i gdzie biały znak niezdefiniowany przez `format` może być wyświetlany `s` w i kontrolujące dokładne zachowanie operacji analizy. `styles` W poniższej tabeli opisano sposób, w jaki każdy <xref:System.Globalization.DateTimeStyles> element członkowski wyliczenia ma wpływ na <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> działanie metody.  
  
|Element członkowski DateTimeStyles|Opis|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` Analizuje i, w razie potrzeby, konwertuje ją na czas UTC. Jeśli `s` zawiera przesunięcie strefy czasowej lub jeśli `s` nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> strefie czasowej `styles` , ale zawiera flagę, Metoda analizuje ciąg, wywołania <xref:System.DateTime.ToUniversalTime%2A> do konwersji zwracanej <xref:System.DateTime> wartości na UTC i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Jeśli `s` wskazuje, że reprezentuje czas UTC `s` lub nie zawiera informacji o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> strefie czasowej, `styles` ale zawiera flagę, Metoda analizuje ciąg, nie przeprowadza konwersji strefy czasowej w zwracanej <xref:System.DateTime> wartość i ustawia <xref:System.DateTime.Kind%2A> właściwość na <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. We wszystkich innych przypadkach flaga nie wywiera żadnego wpływu.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się między dowolnym pojedynczym elementem daty lub godziny.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`początku.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Określa, że biały znak niezdefiniowany `format` przez może pojawić się na `s`końcu.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Określa, `s` że mogą zawierać spacje wiodące, wewnętrzne i końcowe, które nie `format`są zdefiniowane przez.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas lokalny. Jeśli flaga nie jest obecna <xref:System.DateTime.Kind%2A> , właściwość zwracanej <xref:System.DateTime> wartości jest ustawiona na <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Określa, że `s` Jeśli nie ma żadnych informacji o strefie czasowej, zakłada się, że reprezentuje czas UTC. Jeśli flaga nie jest obecna, Metoda konwertuje zwracaną <xref:System.DateTime> wartość z czasu UTC na czas lokalny i ustawia <xref:System.DateTime.Kind%2A> jej właściwość <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Jeśli `s` zawiera czas bez informacji o dacie, Data wartości zwracanej jest ustawiana na `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` Parametr jest analizowany przy użyciu wartości domyślnych. Nie jest dozwolone żadne białe miejsce poza obecnym w programie `format` . Jeśli `s` nie ma składnika daty, Data zwracanej <xref:System.DateTime> wartości jest ustawiona na 1/1/0001. Jeśli `s` nie zawiera informacji o strefie czasowej <xref:System.DateTime.Kind%2A> , właściwość <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>zwracanego <xref:System.DateTime> obiektu ma ustawioną wartość. Jeśli w `s`programie są obecne informacje o strefie czasowej, czas jest konwertowany na czas lokalny <xref:System.DateTime.Kind%2A> , a właściwość zwracanego <xref:System.DateTime> obiektu jest ustawiona <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|W przypadku ciągów zawierających informacje o strefie czasowej program próbuje zapobiec konwersji do <xref:System.DateTime> wartości <xref:System.DateTime.Kind%2A> z właściwością ustawioną <xref:System.DateTimeKind.Local?displayProperty=nameWithType>na. Ta flaga zapobiega przede wszystkim konwersji czasu UTC na czas lokalny.|  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodę, aby upewnić się, że można pomyślnie przeanalizować ciąg w wielu możliwych formatach.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" />nie jest prawidłową <see cref="T:System.Globalization.DateTimeStyles" /> wartością.  
  
—lub— 
 <paramref name="styles" />zawiera nieprawidłową kombinację <see cref="T:System.Globalization.DateTimeStyles" /> wartości (na przykład <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> i <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]W ,<see cref="Overload:System.DateTime.TryParseExact" /> Metoda zwraca<see langword="false" /> , czy ciąg, który ma być analizowany zawiera składnik godziny i oznaczenie AM/PM, które nie znajduje się w umowie. W programie [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] i starszych wersjach oznaczenie AM/PM jest ignorowane.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizowanie ciągów daty i godziny w programie .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standardowe ciągi formatujące datę i godzinę</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Niestandardowe ciągi formatujące datę i godzinę</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> Pobiera obiekt, który jest ustawiony na bieżącą datę i godzinę na tym komputerze, wyrażony jako uniwersalny czas koordynowany (UTC).</summary>
        <value>Obiekt, którego wartość jest bieżącą datą i godziną UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozdzielczość tej właściwości zależy od czasomierza systemu, który zależy od podstawowego systemu operacyjnego. Jego długość wynosi od 0,5 do 15 milisekund.

 Począwszy od .NET Framework w wersji 2,0, zwracana wartość jest <xref:System.DateTime> wartością, której <xref:System.DateTime.Kind%2A> Właściwość zwraca. <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>

 Alternatywą dla korzystania <xref:System.DateTime.UtcNow%2A> z <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>programu jest. Podczas gdy dawniej wskazuje, że wartość daty i godziny jest uniwersalnym czasem koordynowanym (UTC <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> ) przez <xref:System.DateTime.Kind%2A> przypisanie do jego właściwości, drugi przypisuje wartość daty i godziny przesunięcia czasu UTC (równe <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.DateTime.SpecifyKind%2A> metodę, aby zademonstrować, <xref:System.DateTime.Kind%2A> jak Właściwość <xref:System.DateTime.ToLocalTime%2A> wpływa <xref:System.DateTime.ToUniversalTime%2A> na metody konwersji i.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera składnik roku z daty reprezentowanej przez to wystąpienie.</summary>
        <value>Rok, z przedziału od 1 do 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A> Właściwość zwraca rok bieżącego wystąpienia w kalendarzu gregoriańskim. Nie zwraca roku przy użyciu domyślnego kalendarza bieżącej kultury. Aby pobrać rok przy użyciu określonego kalendarza, możesz wywołać tę `GetYear` metodę kalendarza, jak pokazano w poniższym kodzie.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Poniższy przykład demonstruje <xref:System.DateTime.Year%2A> właściwość.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>