<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="2b700-101">Typ obiektu, który jest inicjowany opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="2b700-102">Zapewnia obsługę Inicjalizacja z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-103">Użyj inicjacji z opóźnieniem, które mają być odroczone Tworzenie obiektu duże lub wymagają dużej ilości zasobów lub wykonywania zadań intensywnie, zwłaszcza w przypadku takich tworzenie i wykonywanie nie mogą występować podczas okresu istnienia programu.</span><span class="sxs-lookup"><span data-stu-id="2b700-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="2b700-104">Aby przygotować się do inicjowania z opóźnieniem, należy utworzyć wystąpienie <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="2b700-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="2b700-105">Argument typu <xref:System.Lazy%601> obiektu, który utworzono Określa typ obiektu, który chcesz zainicjować opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="2b700-106">Konstruktor, który jest używany do utworzenia <xref:System.Lazy%601> obiektu określa właściwości inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="2b700-107">Inicjalizacja z opóźnieniem występuje po raz pierwszy <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> dostępu do właściwości.</span><span class="sxs-lookup"><span data-stu-id="2b700-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="2b700-108">W większości przypadków wybór konstruktora zależy od odpowiedzi na pytania dwóch:</span><span class="sxs-lookup"><span data-stu-id="2b700-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="2b700-109">Obiekt opóźnieniem zainicjowane uzyskuje się dostęp z więcej niż jednego wątku?</span><span class="sxs-lookup"><span data-stu-id="2b700-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="2b700-110">Jeśli tak, <xref:System.Lazy%601> obiektu może utworzyć ją na którymkolwiek wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="2b700-111">Można użyć jednego z konstruktorów proste, którego domyślne zachowanie jest utworzenie obsługującej wielowątkowość <xref:System.Lazy%601> obiektu, tak że tylko jedno wystąpienie opóźnieniem wystąpień obiektu jest tworzony niezależnie od tego, jak wiele wątków próbuje uzyskać do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="2b700-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="2b700-112">Aby utworzyć <xref:System.Lazy%601> obiektu, który nie jest bezpieczne dla wątków, należy użyć konstruktora, który umożliwia określenie nie bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="2b700-113">Tworzenie <xref:System.Lazy%601> obiektu wielowątkowość nie chroni opóźnieniem zainicjowanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="2b700-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="2b700-114">Jeśli wiele wątków można uzyskać dostępu do obiektu opóźnieniem zainicjowane, musisz wprowadzić jego właściwości i metody bezpiecznego dostępu wielowątkowe.</span><span class="sxs-lookup"><span data-stu-id="2b700-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="2b700-115">Inicjalizacja z opóźnieniem wymaga dużej ilości kodu lub opóźnieniem zainicjowanego obiektu ma domyślny konstruktor, który jest wymagane i nie zgłaszają wyjątki?</span><span class="sxs-lookup"><span data-stu-id="2b700-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="2b700-116">Należy napisać kod inicjujący lub wyjątki muszą być obsługiwani, użyj jednej z konstruktorów metoda fabryki.</span><span class="sxs-lookup"><span data-stu-id="2b700-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="2b700-117">Wpisz swój kod inicjowania w metodzie fabryki.</span><span class="sxs-lookup"><span data-stu-id="2b700-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="2b700-118">W poniższej tabeli przedstawiono które konstruktora, aby wybrać, w oparciu o te dwa czynniki:</span><span class="sxs-lookup"><span data-stu-id="2b700-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="2b700-119">Obiekt będą mieli dostęp przez</span><span class="sxs-lookup"><span data-stu-id="2b700-119">Object will be accessed by</span></span>|<span data-ttu-id="2b700-120">Jeśli wymagana jest nie kod inicjujący (domyślny konstruktor), użyj</span><span class="sxs-lookup"><span data-stu-id="2b700-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="2b700-121">Jeśli wymagana jest kod inicjujący, użyj</span><span class="sxs-lookup"><span data-stu-id="2b700-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="2b700-122">Wiele wątków</span><span class="sxs-lookup"><span data-stu-id="2b700-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="2b700-123">Jeden wątek</span><span class="sxs-lookup"><span data-stu-id="2b700-123">One thread</span></span>|<span data-ttu-id="2b700-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> z `isThreadSafe` ustawioną `false`.</span><span class="sxs-lookup"><span data-stu-id="2b700-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="2b700-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> z `isThreadSafe` ustawioną `false`.</span><span class="sxs-lookup"><span data-stu-id="2b700-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="2b700-126">Wyrażenia lambda służy do określania metody fabryki.</span><span class="sxs-lookup"><span data-stu-id="2b700-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="2b700-127">Dzięki temu cały kod inicjowania w jednym miejscu.</span><span class="sxs-lookup"><span data-stu-id="2b700-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="2b700-128">Wyrażenia lambda przechwytuje kontekstu, tym żadnych argumentów, które przekazujesz do konstruktora obiektu opóźnieniem zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="2b700-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="2b700-129">**Buforowanie wyjątek** korzystając z metodami factory, wyjątki są buforowane.</span><span class="sxs-lookup"><span data-stu-id="2b700-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="2b700-130">Oznacza to, jeśli metoda fabryki zgłasza wyjątek pierwszy Czas wątku próbuje uzyskać dostęp <xref:System.Lazy%601.Value%2A> właściwość <xref:System.Lazy%601> obiektu o tej samej wyjątku przy każdej próbie kolejne.</span><span class="sxs-lookup"><span data-stu-id="2b700-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="2b700-131">Gwarantuje to, że każdego wywołania <xref:System.Lazy%601.Value%2A> właściwość tworzy takiego samego wyniku i pozwala uniknąć subtelnych błędów, które mogą wystąpić, jeśli inne wątki uzyskać różne wyniki.</span><span class="sxs-lookup"><span data-stu-id="2b700-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="2b700-132"><xref:System.Lazy%601> Oznacza rzeczywistych `T` które w przeciwnym razie będzie zostały zainicjowane w pewnym momencie wcześniej, zazwyczaj podczas uruchamiania.</span><span class="sxs-lookup"><span data-stu-id="2b700-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="2b700-133">Błąd w tego jest zwykle krytyczny.</span><span class="sxs-lookup"><span data-stu-id="2b700-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="2b700-134">Istnieje możliwość dla niepowodzenia możliwe do odzyskania, zaleca się tworzenie logikę ponawiania do procedura inicjowania (w tym przypadku metoda fabryki), tak samo, jak gdyby nie zostały przy użyciu inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="2b700-135">**Zamiast blokowania** w niektórych sytuacjach możesz chcieć uniknąć ponoszenia dodatkowych nakładów na <xref:System.Lazy%601> obiektu domyślne zachowanie blokowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="2b700-136">W rzadkich przypadkach może być możliwe zakleszczenie.</span><span class="sxs-lookup"><span data-stu-id="2b700-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="2b700-137">W takich przypadkach można użyć <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora i określ <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-138">Dzięki temu <xref:System.Lazy%601> obiekt, aby utworzyć kopię obiektu opóźnieniem zainicjowane w każdym kilka wątków rozmowy telefonicznej wątki <xref:System.Lazy%601.Value%2A> właściwości jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="2b700-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="2b700-139"><xref:System.Lazy%601> Obiektu gwarantuje, że wszystkie wątki używa tego samego wystąpienia obiektu opóźnieniem zainicjowane i odrzuca wszystkie wystąpienia, które nie są używane.</span><span class="sxs-lookup"><span data-stu-id="2b700-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="2b700-140">W związku z tym koszt zmniejszenie nakładów pracy blokowania jest program może czasami tworzenie i odrzucić dodatkowych kopii obiektu kosztowne.</span><span class="sxs-lookup"><span data-stu-id="2b700-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="2b700-141">W większości przypadków jest to mało prawdopodobne.</span><span class="sxs-lookup"><span data-stu-id="2b700-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="2b700-142">Przykłady dla <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktorów demonstrują takie zachowanie.</span><span class="sxs-lookup"><span data-stu-id="2b700-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2b700-143">Po określeniu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wyjątki są nigdy nie pamięci podręcznej, nawet w przypadku wybrania metody fabryki.</span><span class="sxs-lookup"><span data-stu-id="2b700-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="2b700-144">**Konstruktory równoważne** oprócz umożliwia używanie <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Konstruktory mogą powielają funkcjonalność innych konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="2b700-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="2b700-145">W poniższej tabeli przedstawiono wartości parametrów, które powodują powstanie równoważne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="2b700-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="2b700-146">Aby utworzyć <xref:System.Lazy%601> obiekt</span><span class="sxs-lookup"><span data-stu-id="2b700-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="2b700-147">Dla konstruktorów, które mają `LazyThreadSafetyMode` `mode` ustawić parametr `mode` do</span><span class="sxs-lookup"><span data-stu-id="2b700-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="2b700-148">Dla konstruktorów, które mają wartość logiczną `isThreadSafe` ustawić parametr `isThreadSafe` do</span><span class="sxs-lookup"><span data-stu-id="2b700-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="2b700-149">Dla konstruktorów bez parametrów bezpieczeństwa wątków</span><span class="sxs-lookup"><span data-stu-id="2b700-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="2b700-150">Pełni wielowątkowość; używa blokowania, aby upewnić się, że tylko jeden wątek inicjuje wartość.</span><span class="sxs-lookup"><span data-stu-id="2b700-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="2b700-151">Wszystkie takie konstruktorów pełni są bezpieczne dla wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="2b700-152">Nie bezpieczne dla wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="2b700-153">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="2b700-153">Not applicable.</span></span>|  
|<span data-ttu-id="2b700-154">Pełni wielowątkowość; wątki wyścigu zainicjować wartość.</span><span class="sxs-lookup"><span data-stu-id="2b700-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="2b700-155">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="2b700-155">Not applicable.</span></span>|<span data-ttu-id="2b700-156">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="2b700-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="2b700-157">**Inne funkcje** informacje dotyczące korzystania z <xref:System.Lazy%601> z pola statyczne dla wątku lub jako magazynu zapasowego dla właściwości, zobacz [Incjalizacji](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="2b700-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-158">W poniższym przykładzie pokazano użycie <xref:System.Lazy%601> klasy, aby zapewnić dostęp wiele wątków Inicjalizacja z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-159">W przykładzie użyto <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="2b700-160">Również zademonstrowano użycie <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> — Konstruktor (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="2b700-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="2b700-161">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="2b700-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="2b700-162">Na przykład, który pokazuje wyjątek buforowanie przy użyciu tego samego konstruktorów, zobacz <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="2b700-163">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana w trybie opóźnienia przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="2b700-164">Cztery sekcje klucza kodu zilustrować tworzenie inicjatora, metoda fabryki rzeczywiste inicjowania i konstruktora `LargeObject` klasy, która wyświetla komunikat po utworzeniu obiektu.</span><span class="sxs-lookup"><span data-stu-id="2b700-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="2b700-165">Na początku `Main` metody w przykładzie jest tworzony wątkowo opóźnieniem inicjator `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-166">Metoda fabryki pokazano tworzenie obiektu, z symbolem zastępczym dla dalszego inicjowania:</span><span class="sxs-lookup"><span data-stu-id="2b700-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="2b700-167">Należy pamiętać, że sekcji kodu dwóch pierwszych można łączyć za pomocą funkcji lambda, jak pokazano poniżej:</span><span class="sxs-lookup"><span data-stu-id="2b700-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="2b700-168">W przykładzie wstrzymano, aby wskazać, że nieokreślony może upłynąć, zanim nastąpi jego inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="2b700-169">Po naciśnięciu **Enter** klucza, przykładzie utworzenie i uruchomienie trzech wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="2b700-170">`ThreadProc` Metodę, która jest używana przez wszystkie wątki trzy wywołania <xref:System.Lazy%601.Value%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="2b700-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="2b700-171">Po raz pierwszy dzieje się tak, `LargeObject` jest tworzone wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="2b700-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-172">Konstruktor obiektu `LargeObject` klasy, która obejmuje klucza ostatniej części kodu, zostanie wyświetlony komunikat i rejestruje tożsamość inicjowania wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="2b700-173">Dane wyjściowe z programu pojawia się na końcu listy pełnego kodu.</span><span class="sxs-lookup"><span data-stu-id="2b700-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="2b700-174">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-175">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="2b700-176">Domyślnie wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Lazy`1" /> klasy są bezpieczne dla wątków i mogą być używane jednocześnie wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="2b700-177">(Opcjonalnie) i dla każdego wystąpienia, przy użyciu parametrów konstruktorów typu można usunąć tych gwarancji bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2b700-178">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b700-179">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="2b700-180">W przypadku inicjowania z opóźnieniem jest używany domyślny konstruktor obiektu typu docelowego.</span><span class="sxs-lookup"><span data-stu-id="2b700-180">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-181">Wystąpienie, który jest tworzony w tym konstruktorze mogą być używane jednocześnie wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="2b700-182">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienie, które jest inicjowany z tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-183">Tryb awaryjny wątku określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="2b700-184">A <xref:System.Lazy%601> wystąpienia, który jest tworzony w tym konstruktorze nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="2b700-185">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-186">W poniższym przykładzie pokazano użycie tego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="2b700-187">Również ilustruje użycie <xref:System.Lazy%601.%23ctor%28System.Boolean%29> — Konstruktor (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> — Konstruktor (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="2b700-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="2b700-188">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="2b700-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="2b700-189">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana w trybie opóźnienia przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="2b700-190">Dwa wiersze klucza kodu w tym przykładzie są tworzenia Inicjator i rzeczywistego inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="2b700-191">Na początku `Main` metody w przykładzie jest tworzony wątkowo opóźnieniem inicjator `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-192">Przykład utworzenie i uruchomienie trzech wątków, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, dzięki czemu przykładzie można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="2b700-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="2b700-193">`ThreadProc` Metodę, która jest używana przez wszystkie wątki trzy wywołania <xref:System.Lazy%601.Value%2A> właściwości do pobrania `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="2b700-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-194"><xref:System.Lazy%601> Klasa udostępnia blokowania, tak aby tylko jeden wątek może tworzyć `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="2b700-195">W przykładzie pokazano, że wszystkie wątki uzyskać tego samego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-196">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-197">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="2b700-198"><see langword="true" /> Aby to wystąpienie można używać jednocześnie przez wiele wątków; <see langword="false" /> aby wystąpienie można było używać tylko jednego wątku naraz.</span><span class="sxs-lookup"><span data-stu-id="2b700-198"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="2b700-199">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="2b700-200">Podczas inicjowania z opóźnieniem są używane domyślny konstruktor obiektu typ docelowy i tryb określonego inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-201">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienie, które jest inicjowany z tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Jeśli `isThreadSafe` jest `true`; w przeciwnym razie jest to tryb <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-202">Tryb awaryjny wątku określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="2b700-203">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> trybie, używając <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="2b700-204">A <xref:System.Lazy%601> wystąpienia, który jest tworzony w tym konstruktorze nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="2b700-205">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-206">W poniższym przykładzie pokazano użycie tego konstruktora w celu utworzenia opóźnieniem inicjatora, który nie jest bezpieczne w scenariuszach, w której występuje dostęp do obiektu opóźnieniem zainicjowana na tym samym wątku dla wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="2b700-207">Użycie ilustruje też <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> — Konstruktor (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`.</span><span class="sxs-lookup"><span data-stu-id="2b700-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="2b700-208">Aby przełączyć się do innego konstruktora, można zmienić Konstruktor, który jest oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="2b700-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-209">Dla kodu, który demonstruje sposób używania tego konstruktora w scenariuszach wielowątkowe (Określanie `true` dla `isThreadSafe`), zobacz przykład <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="2b700-210">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana w trybie opóźnienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="2b700-211">W `Main` metody w przykładzie jest tworzony <xref:System.Lazy%601> wystąpienia, a następnie pauzy.</span><span class="sxs-lookup"><span data-stu-id="2b700-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="2b700-212">Po naciśnięciu **Enter** klucza, uzyskuje dostęp przykładzie <xref:System.Lazy%601.Value%2A> właściwość <xref:System.Lazy%601> wystąpienia, co powoduje, że inicjowania występuje.</span><span class="sxs-lookup"><span data-stu-id="2b700-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="2b700-213">Konstruktor obiektu `LargeObject` klasa wyświetla komunikat konsoli.</span><span class="sxs-lookup"><span data-stu-id="2b700-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-214">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-215">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="2b700-216">Delegat, który jest wywoływane w celu tworzy opóźnieniem zainicjowane wartości, gdy jest to potrzebne.</span><span class="sxs-lookup"><span data-stu-id="2b700-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="2b700-217">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="2b700-218">W przypadku inicjowania z opóźnieniem funkcji inicjowania określony jest używany.</span><span class="sxs-lookup"><span data-stu-id="2b700-218">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-219">Wystąpienie, który jest tworzony w tym konstruktorze mogą być używane jednocześnie wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="2b700-220">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienie, które jest inicjowany z tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-221">Tryb awaryjny wątku określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="2b700-222">Wyjątki, które są generowane przez `valueFactory` są buforowane.</span><span class="sxs-lookup"><span data-stu-id="2b700-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="2b700-223">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-224">W poniższym przykładzie pokazano użycie tego konstruktora, aby zapewnić Inicjalizacja z opóźnieniem z buforowaniem wyjątek.</span><span class="sxs-lookup"><span data-stu-id="2b700-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="2b700-225">Również zademonstrowano użycie <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> — Konstruktor (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="2b700-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="2b700-226">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="2b700-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="2b700-227">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana w trybie opóźnienia przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="2b700-228">Trzy kluczowe fragmentów kodu zilustrować tworzenie inicjatora, rzeczywista inicjowania i konstruktora `LargeObject` klasy, która przedstawia buforowanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="2b700-229">Na początku `Main` metody w przykładzie jest tworzony wątkowo opóźnieniem inicjator `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-230">Przykład utworzenie i uruchomienie trzech wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-230">The example creates and starts three threads.</span></span> <span data-ttu-id="2b700-231">`ThreadProc` Metodę, która jest używana przez wszystkie wątki trzy wywołania <xref:System.Lazy%601.Value%2A> właściwości do pobrania `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="2b700-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-232">W Konstruktorze `LargeObject` klasy, trzeci klucza sekcji kodu zgłasza wyjątek po raz pierwszy `LargeObject` wystąpienie zostało utworzone, ale następnie umożliwia utworzenie wystąpienia występuje:</span><span class="sxs-lookup"><span data-stu-id="2b700-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="2b700-233">Podczas uruchamiania przykładzie, pierwszy wątku, który próbuje utworzyć wystąpienie `LargeObject` zakończy się niepowodzeniem i wyjątek zostanie przechwycony.</span><span class="sxs-lookup"><span data-stu-id="2b700-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="2b700-234">Może oczekiwać, że następnego wątku pomyślnie utworzyć wystąpienia, ale <xref:System.Lazy%601> obiektu buforowanych wyjątek.</span><span class="sxs-lookup"><span data-stu-id="2b700-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="2b700-235">W związku z tym wszystkie wątki trzy zgłoszenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-236">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-237">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b700-238"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2b700-238"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="2b700-239">Jedna z wartości wyliczenia, które określa tryb awaryjny wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-239">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="2b700-240">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy, która korzysta z domyślnego konstruktora elementu <paramref name="T" /> i tryb bezpieczeństwo wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-241">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienia określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="2b700-242">A <xref:System.Lazy%601> wystąpienia, który jest tworzony w tym konstruktorze nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="2b700-243">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-244">W poniższym przykładzie pokazano użycie tego konstruktora w celu utworzenia opóźnieniem inicjatora, umożliwiającą wielu wątków, aby zastępować do utworzenia obiektu opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="2b700-245">Wiele wątków może się powieść, podczas tworzenia wystąpienia, ale wszystkie wątki Użyj wystąpienia, z którego został utworzony jako pierwszy.</span><span class="sxs-lookup"><span data-stu-id="2b700-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-246">Na przykład, który demonstruje sposób używania tego konstruktora w scenariuszach jednowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="2b700-247">Na przykład, który demonstruje sposób używania tego konstruktora zapewnienie blokowania zamiast wyścigu w scenariuszach wielowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="2b700-248">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana opóźnieniem przy użyciu jednej z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="2b700-249">Trzy kluczowe fragmentów kodu zilustrować tworzenie inicjatora, rzeczywista inicjowania i Konstruktor i finalizatora `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="2b700-250">Na początku `Main` metody w przykładzie jest tworzony <xref:System.Lazy%601> obiektu wykonującego Inicjalizacja z opóźnieniem elementu `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-251">Przykład utworzenie i uruchomienie trzech wątków, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, dzięki czemu przykładzie można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="2b700-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="2b700-252">W `ThreadProc` metodę, która jest używana przez wszystkie wątki trzy, wywoływania <xref:System.Lazy%601.Value%2A> tworzy właściwość `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="2b700-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-253">Ponieważ Konstruktor <xref:System.Lazy%601> określonego wystąpienia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpień.</span><span class="sxs-lookup"><span data-stu-id="2b700-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="2b700-254">W przykładzie pokazano to w Konstruktorze i finalizatora, wyświetlając komunikaty konsoli `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="2b700-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="2b700-255">Jednak <xref:System.Lazy%601> obiektu gwarantuje, że tylko jedno wystąpienie jest używany przez wszystkie wątki.</span><span class="sxs-lookup"><span data-stu-id="2b700-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="2b700-256">Dane wyjściowe z przykładu pokazuje, że wszystkie wątki trzy używać tego samego wystąpienia, a także pokazuje, że dwa wystąpienia, będzie można odzyskać przez wyrzucanie elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="2b700-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-257">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-258">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b700-259"><paramref name="mode" /> zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="2b700-259"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="2b700-260">Delegat, który jest wywoływane w celu tworzy opóźnieniem zainicjowane wartości, gdy jest to potrzebne.</span><span class="sxs-lookup"><span data-stu-id="2b700-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe">
          <span data-ttu-id="2b700-261"><see langword="true" /> Aby to wystąpienie można używać jednocześnie przez wiele wątków; <see langword="false" /> Aby to wystąpienie można było używać tylko jednego wątku naraz.</span><span class="sxs-lookup"><span data-stu-id="2b700-261"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="2b700-262">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="2b700-263">Podczas inicjowania z opóźnieniem są używane funkcji określonej inicjowania i tryb inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-264">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienie, które jest inicjowany z tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Jeśli `isThreadSafe` jest `true`; w przeciwnym razie jest to tryb <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-265">Tryb awaryjny wątku określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="2b700-266">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> trybie, używając <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="2b700-267">Wyjątki, które są generowane przez `valueFactory` są buforowane.</span><span class="sxs-lookup"><span data-stu-id="2b700-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="2b700-268">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-269">W poniższym przykładzie pokazano użycie tego konstruktora zapewnienie Inicjalizacja z opóźnieniem z wyjątkiem buforowania, w przypadku scenariusza z jednym wątkiem.</span><span class="sxs-lookup"><span data-stu-id="2b700-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="2b700-270">Użycie ilustruje też <xref:System.Lazy%601.%23ctor%2A> — Konstruktor (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="2b700-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="2b700-271">Aby przełączyć się do tego konstruktora, można zmienić Konstruktor, który jest oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="2b700-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-272">Dla kodu, który demonstruje sposób używania tego konstruktora w scenariuszach wielowątkowe (Określanie `true` dla `isThreadSafe`), zobacz przykład <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="2b700-273">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana w trybie opóźnienia przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="2b700-274">Trzy kluczowe fragmentów kodu zilustrować tworzenie inicjatora, rzeczywista inicjowania i konstruktora `LargeObject` klasy, która przedstawia buforowanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="2b700-275">Na początku `Main` metody w przykładzie jest tworzony wątkowo opóźnieniem inicjator `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-276">W wywołaniu konstruktora `isThreadSafe` parametr jest `false`, więc <xref:System.Lazy%601> nie jest wątku bezpieczne.</span><span class="sxs-lookup"><span data-stu-id="2b700-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="2b700-277">Ponieważ nie jest bezpieczne dla wątków, przykład wywołuje <xref:System.Lazy%601.Value%2A> właściwości trzy razy w tym samym wątku:</span><span class="sxs-lookup"><span data-stu-id="2b700-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-278">W Konstruktorze `LargeObject` klasy, trzeci klucza sekcji kodu zgłasza wyjątek po raz pierwszy `LargeObject` wystąpienie zostało utworzone, ale następnie umożliwia utworzenie wystąpienia występuje:</span><span class="sxs-lookup"><span data-stu-id="2b700-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="2b700-279">Podczas uruchamiania przykładzie, pierwsza próba utworzenia wystąpienia `LargeObject` zakończy się niepowodzeniem i wyjątek zostanie przechwycony.</span><span class="sxs-lookup"><span data-stu-id="2b700-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="2b700-280">Może spodziewać się, że dalej próba powiedzie się, ale <xref:System.Lazy%601> obiektu buforowanych wyjątek.</span><span class="sxs-lookup"><span data-stu-id="2b700-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="2b700-281">W związku z tym wszystkie trzy próby zgłoszenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-282">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-283">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b700-284"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2b700-284"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="2b700-285">Delegat, który jest wywoływane w celu tworzy opóźnieniem zainicjowane wartości, gdy jest to potrzebne.</span><span class="sxs-lookup"><span data-stu-id="2b700-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="2b700-286">Jedna z wartości wyliczenia, które określa tryb awaryjny wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-286">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="2b700-287">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy, która korzysta z trybu inicjowania określonej funkcji i bezpieczeństwo wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-288">Tryb awaryjny wątku z <xref:System.Lazy%601> wystąpienia określa zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="2b700-289">Wyjątki, które są generowane przez `valueFactory` są buforowane, chyba że `mode` jest <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2b700-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2b700-290">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2b700-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b700-291">W poniższym przykładzie pokazano użycie tego konstruktora w celu utworzenia opóźnieniem inicjatora, umożliwiającą wielu wątków, aby zastępować do utworzenia obiektu opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="2b700-292">Wiele wątków może się powieść, podczas tworzenia wystąpienia, ale wszystkie wątki Użyj wystąpienia, z którego został utworzony jako pierwszy.</span><span class="sxs-lookup"><span data-stu-id="2b700-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="2b700-293">Ponadto w przykładzie pokazano, wyjątki nigdy nie są buforowane po określeniu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>nawet wtedy, gdy inicjowania jest wykonywane przez funkcję, a nie przez domyślny konstruktor obiektu opóźnieniem utworzony typ.</span><span class="sxs-lookup"><span data-stu-id="2b700-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-294">Na przykład, który demonstruje sposób używania tego konstruktora w scenariuszach jednowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="2b700-295">Na przykład, który demonstruje sposób używania tego konstruktora zapewnienie blokowania zamiast wyścigu w scenariuszach wielowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="2b700-296">W przykładzie zdefiniowano `LargeObject` klasy, która zostanie zainicjowana opóźnieniem przy użyciu jednej z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="2b700-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="2b700-297">Cztery sekcje klucza kodu zilustrować tworzenie inicjatora, rzeczywista inicjowania, funkcji inicjowania i Konstruktor i finalizatora `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="2b700-298">Na początku `Main` metody w przykładzie jest tworzony <xref:System.Lazy%601> obiektu wykonującego Inicjalizacja z opóźnieniem elementu `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="2b700-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="2b700-299">Inicjator opóźnieniem korzysta z funkcji do wykonania inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="2b700-300">W takim przypadku funkcja jest wymagana, ponieważ nie ma domyślnego konstruktora dla `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="2b700-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="2b700-301">Przykład utworzenie i uruchomienie trzech wątków, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, dzięki czemu przykładzie można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="2b700-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="2b700-302">W `ThreadProc` metodę, która jest używana przez wszystkie wątki trzy, wywoływania <xref:System.Lazy%601.Value%2A> tworzy właściwość `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="2b700-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="2b700-303">W trzecim klucza sekcji kodu funkcji inicjowania z opóźnieniem jest wywoływana w celu utworzenia `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="2b700-304">Funkcja zwraca pierwszy wyjątek, gdy jest to:</span><span class="sxs-lookup"><span data-stu-id="2b700-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="2b700-305">Wszystkie inne <xref:System.Threading.LazyThreadSafetyMode> ustawienie nieobsługiwany wyjątek w funkcji inicjowania będzie buforowana.</span><span class="sxs-lookup"><span data-stu-id="2b700-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="2b700-306">Jednak <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> pomija buforowanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="2b700-307">Dane wyjściowe w przykładzie pokazano, że kolejne próby zainicjowania obiektu zakończy się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="2b700-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-308">Komunikat o wyjątku pojawia się zwykle po wiadomości wskazujący, że inne wątki zostały pomyślnie zainicjowano obiektu.</span><span class="sxs-lookup"><span data-stu-id="2b700-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="2b700-309">Jest to spowodowane opóźnieniem wprowadzonych zgłaszanie i przechwytywanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="2b700-310">Ponieważ Konstruktor <xref:System.Lazy%601> określonego wystąpienia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpień.</span><span class="sxs-lookup"><span data-stu-id="2b700-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="2b700-311">W przykładzie pokazano to w Konstruktorze i finalizatora, wyświetlając komunikaty konsoli `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="2b700-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="2b700-312"><xref:System.Lazy%601> Obiektu gwarantuje, że tylko jedno wystąpienie jest używany przez wszystkie wątki (z wyjątkiem wątku, w którym funkcja inicjowania zgłasza wyjątek).</span><span class="sxs-lookup"><span data-stu-id="2b700-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="2b700-313">Dane wyjściowe w przykładzie pokazano to.</span><span class="sxs-lookup"><span data-stu-id="2b700-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b700-314">Dla uproszczenia, w tym przykładzie używane globalne wystąpienie <xref:System.Lazy%601>, i są wszystkie metody `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2b700-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="2b700-315">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="2b700-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b700-316"><paramref name="mode" /> zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="2b700-316"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b700-317"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2b700-317"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b700-318">Pobiera wartość wskazującą, czy wartość została utworzona dla tej <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value>
          <span data-ttu-id="2b700-319"><see langword="true" /> Jeśli utworzono wartość dla tego <see cref="T:System.Lazy`1" /> wystąpienia; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2b700-319"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-320">Gdy wystąpi Inicjalizacja z opóźnieniem dla <xref:System.Lazy%601> wystąpienia, może to spowodować wartość tworzona lub wyjątek.</span><span class="sxs-lookup"><span data-stu-id="2b700-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="2b700-321">Jeśli wyjątek jest element zgłaszany, kolejne działanie <xref:System.Lazy%601> wystąpienia zależy od tego, czy buforowanie wyjątku jest włączona.</span><span class="sxs-lookup"><span data-stu-id="2b700-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="2b700-322">Jeśli <xref:System.Lazy%601> wystąpienie zostało utworzone za pomocą konstruktora, który nie określa funkcji inicjowania, a następnie buforowanie wyjątku nie jest włączone.</span><span class="sxs-lookup"><span data-stu-id="2b700-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="2b700-323">Kolejna próba zainicjowania <xref:System.Lazy%601> może się powieść, a po pomyślnym zainicjowaniu <xref:System.Lazy%601.IsValueCreated%2A> zwraca właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="2b700-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="2b700-324">Jeśli <xref:System.Lazy%601> wystąpienie zostało utworzone z funkcji inicjowania (określonego przez `valueFactory` parametr <xref:System.Lazy%601> Konstruktor), następnie buforowanie wyjątku jest kontrolowany przez tryb awaryjny wątku.</span><span class="sxs-lookup"><span data-stu-id="2b700-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="2b700-325">Jeśli tryb jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> lub <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, nie istnieje żadne drugiej szansy zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="2b700-326">Wyjątek występuje, jest nieobsługiwany w funkcji inicjowania tego wyjątku jest buforowany i zgłoszony w kolejnych uzyskuje dostęp do programu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="2b700-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2b700-327">Wartość nie jest tworzony, jeśli jest zgłaszany wyjątek, dlatego w takich przypadkach <xref:System.Lazy%601.IsValueCreated%2A> zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="2b700-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="2b700-328">Jeśli tryb jest <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, pierwszy wątku, który zakończy się pomyślnie w uruchomienia funkcji inicjowania (lub konstruktora domyślnego) tworzy wartość <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="2b700-329">Jeśli funkcja inicjowania zgłasza wyjątek w jednym wątku, inne wątki nadal spróbuj zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="2b700-330">Dopóki wartość nie zostanie utworzona, <xref:System.Lazy%601.IsValueCreated%2A> zwraca właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="2b700-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b700-331">Tworzy i zwraca reprezentację ciągu <see cref="P:System.Lazy`1.Value" /> właściwość dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="2b700-332">Wyniku wywołania metody <see cref="M:System.Object.ToString" /> metoda <see cref="P:System.Lazy`1.Value" /> właściwość dla tego wystąpienia, jeśli wartość została utworzona (to znaczy, jeśli <see cref="P:System.Lazy`1.IsValueCreated" /> zwraca <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="2b700-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="2b700-333">W przeciwnym razie ciąg wskazujący, że wartości nie został utworzony.</span><span class="sxs-lookup"><span data-stu-id="2b700-333">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-334">Wywołanie tej metody nie powoduje inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="2b700-335"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Właściwość może być `null` po incjalizacji, jeśli metoda fabryki, która została określona dla `valueFactory` parametr <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> zwraca konstruktora `null`.</span><span class="sxs-lookup"><span data-stu-id="2b700-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="2b700-336"><see cref="P:System.Lazy`1.Value" /> Jest właściwość <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2b700-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b700-337">Pobiera wartość opóźnieniem zainicjowane bieżącego <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="2b700-338">Zainicjowane w trybie opóźnienia wartość bieżącej klasy <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="2b700-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b700-339">Jeśli <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> właściwość jest `false`, podczas uzyskiwania dostępu do <xref:System.Lazy%601.Value%2A> właściwość wymusza inicjowania.</span><span class="sxs-lookup"><span data-stu-id="2b700-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="2b700-340">Oprócz wyjątków, które są wyświetlane <xref:System.Lazy%601.Value%2A> właściwości może zgłosić nieobsługiwany wyjątek, zgłoszonego przez metodę fabryka, która została przekazana do `valueFactory` parametr <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="2b700-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="2b700-341"><see cref="T:System.Lazy`1" /> Zainicjowano wystąpienia, aby użyć domyślnego konstruktora typu, który jest inicjowany opóźnieniem i Brak uprawnień dostępu konstruktora.</span><span class="sxs-lookup"><span data-stu-id="2b700-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="2b700-342"><see cref="T:System.Lazy`1" /> Zainicjowano wystąpienia, aby użyć domyślnego konstruktora typu, który jest inicjowany opóźnieniem, a ten typ nie ma publicznego konstruktora bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="2b700-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2b700-343">Funkcja inicjowania próbuje uzyskać dostęp do <see cref="P:System.Lazy`1.Value" /> w tym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="2b700-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>