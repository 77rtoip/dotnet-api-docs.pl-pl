<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a193eefa8afa38666768441022aa43617f7556d1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69405761" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Typ obiektu, który jest opóźnieniem zainicjowany.</typeparam>
    <summary>Zapewnia obsługę inicjowania z opóźnieniem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj inicjowania z opóźnieniem, aby odroczyć Tworzenie obiektu dużego lub intensywnie korzystających z zasobów, lub wykonać zadanie intensywnie korzystające z zasobów, szczególnie w przypadku, gdy takie utworzenie lub wykonanie może nie nastąpić w okresie istnienia programu.  
  
 Aby przygotować się do inicjowania z opóźnieniem, należy utworzyć <xref:System.Lazy%601>wystąpienie. Typ argumentu <xref:System.Lazy%601> tworzonego obiektu określa typ obiektu, który ma zostać zainicjowany opóźnieniem. Konstruktor używany do tworzenia <xref:System.Lazy%601> obiektu określa charakterystykę inicjalizacji. Podczas pierwszego uzyskiwania dostępu do <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości następuje Inicjalizacja z opóźnieniem.  
  
 W większości przypadków wybór konstruktora zależy od odpowiedzi na dwa pytania:  
  
-   Czy dostęp do zainicjowanego obiektu opóźnieniem będzie możliwy z więcej niż jednego wątku? Jeśli tak, <xref:System.Lazy%601> obiekt może utworzyć go na dowolnym wątku. Można użyć jednego z prostych konstruktorów, których domyślnym zachowaniem jest utworzenie obiektu bezpiecznego <xref:System.Lazy%601> wątkowego, tak aby tylko jedno wystąpienie obiektu opóźnieniem wystąpienie jest tworzone bez względu na to, ile wątków próbuje uzyskać do niego dostęp. Aby utworzyć <xref:System.Lazy%601> obiekt, który nie jest bezpieczny dla wątków, należy użyć konstruktora, który umożliwia określenie braku bezpieczeństwa wątków.  
  
    > [!CAUTION]
    >  Sprawianie <xref:System.Lazy%601> , że wątek obiektu bezpieczny nie chroni obiektu opóźnieniem zainicjowany. Jeśli wiele wątków może uzyskać dostęp do zainicjowanego obiektu opóźnieniem, należy wykonać jego właściwości i metody bezpiecznie dla wielowątkowego dostępu.  
  
-   Czy Inicjalizacja z opóźnieniem wymaga dużej ilości kodu lub czy obiekt zainicjowany opóźnieniem ma Konstruktor bez parametrów, który robi wszystko, czego potrzebujesz, i nie zgłasza wyjątków? Jeśli musisz napisać kod inicjujący lub jeśli trzeba obsługiwać wyjątki, użyj jednego z konstruktorów przyjmujących metodę fabryki. Napisz kod inicjujący w metodzie fabryki.  
  
 W poniższej tabeli przedstawiono Konstruktor, który należy wybrać, w oparciu o te dwa czynniki:  
  
|Dostęp do obiektu zostanie uzyskany przez|Jeśli kod inicjalizacji nie jest wymagany (Konstruktor bez parametrów), użyj|Jeśli jest wymagany kod inicjujący, użyj|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|Wiele wątków|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|Jeden wątek|<xref:System.Lazy%601.%23ctor%28System.Boolean%29>z `isThreadSafe` ustawioną `false`na.|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>z `isThreadSafe` ustawioną `false`na.|  
  
 Aby określić metodę fabryki, można użyć wyrażenia lambda. Dzięki temu cały kod inicjalizacji jest zachowywany w jednym miejscu. Wyrażenie lambda przechwytuje kontekst, łącznie z dowolnymi argumentami przekazywanymi do konstruktora obiektu zainicjowane przez opóźnieniem.  
  
 **Buforowanie wyjątków** W przypadku korzystania z metod fabrycznych wyjątki są buforowane. Oznacza to, że jeśli metoda fabryki zgłasza wyjątek podczas pierwszego wątku próbuje uzyskać dostęp <xref:System.Lazy%601.Value%2A> do właściwości <xref:System.Lazy%601> obiektu, ten sam wyjątek jest zgłaszany przy każdej kolejnej próbie. Gwarantuje to, że każde wywołanie <xref:System.Lazy%601.Value%2A> właściwości daje ten sam wynik i pozwala uniknąć niewielkich błędów, które mogą wystąpić, jeśli różne wątki będą uzyskiwać różne wyniki. Jest <xref:System.Lazy%601> to wartość rzeczywista `T` , która w przeciwnym razie mogłaby zostać zainicjowana w pewnym wcześniejszym momencie, zazwyczaj podczas uruchamiania. Niepowodzenie w tym wcześniejszym punkcie jest zwykle krytyczne. Jeśli istnieje możliwość potencjalnego błędu, zalecamy utworzenie logiki ponawiania w procedurze inicjowania (w tym przypadku metody fabryki), podobnie jak w przypadku inicjalizacji z opóźnieniem.  
  
 **Alternatywa do blokowania** W niektórych sytuacjach może być konieczne uniknięcie obciążenia <xref:System.Lazy%601> domyślnego zachowania blokowania obiektu. W rzadkich przypadkach może istnieć potencjalne zakleszczenie. W takich przypadkach można użyć <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> i określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>. Dzięki <xref:System.Lazy%601> temu obiekt może utworzyć kopię zainicjowanego obiektu opóźnieniem w każdym z kilku wątków, jeśli wątki <xref:System.Lazy%601.Value%2A> wywołują Właściwość jednocześnie. <xref:System.Lazy%601> Obiekt gwarantuje, że wszystkie wątki używają tego samego wystąpienia opóźnieniem obiektu zainicjowany i odrzuca wystąpienia, które nie są używane. W ten sposób koszt zmniejszenia obciążenia polega na tym, że program może czasami tworzyć i odrzucać dodatkowe kopie kosztownego obiektu. W większości przypadków jest to mało prawdopodobne. Przykłady dla <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktorów i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> przedstawiają takie zachowanie.  
  
> [!IMPORTANT]
>  W przypadku określenia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wyjątków nigdy nie są buforowane, nawet w przypadku określenia metody fabryki.  
  
 **Równoważne konstruktory** Poza umożliwieniem korzystania z programu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> , konstruktory i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> mogą duplikować funkcjonalność innych konstruktorów. W poniższej tabeli przedstawiono wartości parametrów, które generują równoważne zachowanie.  
  
|Aby utworzyć <xref:System.Lazy%601> obiekt, który jest|Dla konstruktorów, które `LazyThreadSafetyMode` mają `mode` parametr, `mode` ustaw na|Dla konstruktorów, które mają `isThreadSafe` parametr Boolean, `isThreadSafe` ustaw wartość na|Dla konstruktorów bez parametrów bezpieczeństwa wątków|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|W pełni bezpieczne wątki; używa blokowania, aby upewnić się, że tylko jeden wątek inicjuje wartość.|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|Wszystkie takie konstruktory są w pełni bezpieczne wątkowo.|  
|Nie jest bezpieczny wątkowo.|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|Nie dotyczy.|  
|W pełni bezpieczne wątki; możliwość zainicjowania wartości przez rasę wątków.|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|Nie dotyczy.|Nie dotyczy.|  
  
 **Inne możliwości** Aby uzyskać informacje dotyczące używania programu <xref:System.Lazy%601> z polami statycznymi wątków lub jako magazyn zapasowy dla właściwości, zobacz Inicjalizacja z [opóźnieniem](~/docs/framework/performance/lazy-initialization.md).  
  
   
  
## Examples  
 Poniższy przykład demonstruje użycie <xref:System.Lazy%601> klasy w celu zapewnienia inicjalizacji z opóźnieniem z dostępem z wielu wątków.  
  
> [!NOTE]
>  W przykładzie zastosowano <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora. Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`). Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.  
>   
>  Przykład demonstrujący buforowanie wyjątków przy użyciu tych samych konstruktorów można znaleźć w <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktorze.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków. Cztery kluczowe sekcje kodu ilustrują tworzenie inicjatora, metodę fabryki, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która wyświetla komunikat po utworzeniu obiektu. Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 Metoda Factory pokazuje Tworzenie obiektu, z symbolem zastępczym do dalszej inicjalizacji:  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 Należy zauważyć, że dwie pierwsze sekcje kodu mogą być połączone przy użyciu funkcji lambda, jak pokazano poniżej:  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 Przykład wstrzymuje się, aby wskazać, że nieokreślony okres może upłynąć przed wystąpieniem inicjalizacji z opóźnieniem. Po naciśnięciu klawisza **Enter** , przykład tworzy i uruchamia trzy wątki. Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość. `ThreadProc` Po raz pierwszy następuje `LargeObject` utworzenie wystąpienia:  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 Konstruktor `LargeObject` klasy, który zawiera ostatnią sekcję klucza kodu, wyświetla komunikat i rejestruje tożsamość wątku inicjującego. Dane wyjściowe z programu pojawiają się na końcu pełnej listy kodu.  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Domyślnie wszystkie publiczne i chronione składowe <see cref="T:System.Lazy`1" /> klasy są bezpieczne wątkowo i mogą być używane współbieżnie z wielu wątków. Te gwarancje bezpieczeństwa wątków mogą zostać usunięte opcjonalnie i na każde wystąpienie, przy użyciu parametrów do konstruktorów typu.</threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy. Gdy następuje Inicjalizacja z opóźnieniem, jest używany Konstruktor bez parametrów typu docelowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie utworzone za pomocą tego konstruktora może być używane współbieżnie z wielu wątków.  
  
 Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia, który jest zainicjowany przy użyciu tego konstruktora, to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>. Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.  
  
 <xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład demonstruje użycie tego konstruktora. Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`). Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków. Dwa kluczowe wiersze kodu w tym przykładzie służą do tworzenia inicjatora i rzeczywistej inicjalizacji. Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie. Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość w celu pobrania `LargeObject` wystąpienia: `ThreadProc`  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 Klasa zapewnia blokadę, tak aby tylko jeden wątek mógł `LargeObject` utworzyć wystąpienie. <xref:System.Lazy%601> W przykładzie pokazano, że pozostałe wątki pobierają to samo wystąpienie.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><see langword="true" />Aby można było użyć tego wystąpienia jednocześnie przez wiele wątków; <see langword="false" /> aby można było użyć tego wystąpienia tylko przez jeden wątek w danym momencie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy. Gdy następuje Inicjalizacja z opóźnieniem, używany jest Konstruktor bez parametrów typu docelowego i określonego trybu inicjalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb <xref:System.Lazy%601> bezpiecznego wątku wystąpienia, które jest inicjowane za pomocą tego konstruktora, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> to `isThreadSafe` if `true`; w przeciwnym razie tryb to <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>. Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków. Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> tryb, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Użyj konstruktora or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> .  
  
 <xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład demonstruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który nie jest bezpieczny dla wątków, w scenariuszach, w których cały dostęp do zainicjowanego obiektu opóźnieniem odbywa się w tym samym wątku. Pokazuje także użycie <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`. Aby przełączyć się do innego konstruktora, po prostu zmień konstruktora, który jest oznaczony jako komentarz.  
  
> [!NOTE]
>  W przypadku kodu, który demonstruje sposób użycia tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), <xref:System.Lazy%601.%23ctor> Zobacz przykład dla konstruktora.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem. W metodzie przykład tworzy wystąpienie, a następnie wstrzymuje. <xref:System.Lazy%601> `Main` Po naciśnięciu klawisza **Enter** , przykład uzyskuje dostęp <xref:System.Lazy%601.Value%2A> do właściwości <xref:System.Lazy%601> wystąpienia, co powoduje wystąpienie inicjalizacji. Konstruktor `LargeObject` klasy wyświetla komunikat konsoli.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy. Gdy następuje Inicjalizacja z opóźnieniem, używana jest określona funkcja inicjująca.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie utworzone za pomocą tego konstruktora może być używane współbieżnie z wielu wątków.  
  
 Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia, który jest zainicjowany przy użyciu tego konstruktora, to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>. Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.  
  
 Wyjątki, które są generowane `valueFactory` przez program, są buforowane. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjalizację z opóźnieniem z buforowaniem wyjątków. Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`). Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków. Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która ilustruje buforowanie wyjątków. Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 Przykład tworzy i uruchamia trzy wątki. Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość w celu pobrania `LargeObject` wystąpienia: `ThreadProc`  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 W konstruktorze `LargeObject` klasy trzecia sekcja kodu zgłasza wyjątek podczas pierwszego `LargeObject` tworzenia wystąpienia, ale następnie umożliwia tworzenie wystąpienia:.  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 Po uruchomieniu przykładu pierwszy wątek, który próbuje utworzyć wystąpienie `LargeObject` , kończy się niepowodzeniem, i Przechwycono wyjątek. Może się zdarzyć, że Następny wątek pomyślnie utworzy wystąpienie, ale w <xref:System.Lazy%601> pamięci podręcznej wystąpił wyjątek. Z tego powodu wszystkie trzy wątki zgłaszają wyjątek.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode">Jedna z wartości wyliczenia, która określa tryb zabezpieczeń wątku.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa <paramref name="T" /> konstruktora bez parametrów i określonego trybu ochrony wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.  
  
 <xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który umożliwia wielu wątkom Tworzenie obiektów opóźnieniem. Wiele wątków może powieść się w tworzeniu wystąpień, ale wszystkie wątki używają wystąpienia, które zostało utworzone jako pierwsze.  
  
> [!NOTE]
>  Aby zapoznać się z przykładem, który pokazuje, jak używać tego konstruktora w scenariuszach wielowątkowych <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> ( `mode`Określanie dla), <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Zobacz Konstruktor. Przykład demonstrujący, jak używać tego konstruktora do zapewnienia blokowania zamiast warunków wyścigu w scenariuszach wielowątkowych (określanych <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> jako `mode`), zobacz <xref:System.Lazy%601.%23ctor> Konstruktor.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez którykolwiek z kilku wątków. Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora i finalizatora `LargeObject` klasy. Na początku `Main` metody przykład <xref:System.Lazy%601> tworzy obiekt, który `LargeObject`wykonuje opóźnione inicjowanie:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie. W metodzie, która jest używana przez wszystkie trzy wątki, <xref:System.Lazy%601.Value%2A> wywołanie właściwości tworzy `LargeObject` wystąpienie: `ThreadProc`  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 Ponieważ Konstruktor dla <xref:System.Lazy%601> określonego <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wystąpienia, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpienia. Przykład ilustruje to poprzez wyświetlanie komunikatów konsoli w konstruktorze i w finalizatorze `LargeObject` klasy:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601> Jednak obiekt gwarantuje, że tylko jedno wystąpienie jest używane przez wszystkie wątki. Dane wyjściowe z przykładu pokazują, że wszystkie trzy wątki używają tego samego wystąpienia, a także pokazują, że pozostałe dwa wystąpienia mogą być odzyskiwane przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />zawiera nieprawidłową wartość.</exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">Wstępnie zainicjowana wartość, która ma zostać użyta.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa wstępnie zainicjowanej określonej wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Wystąpienie utworzone za pomocą tego konstruktora jest używane jednocześnie przez wiele wątków.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</param>
        <param name="isThreadSafe"><see langword="true" />Aby można było użyć tego wystąpienia jednocześnie przez wiele wątków; <see langword="false" /> aby można było użyć tego wystąpienia tylko przez jeden wątek w danym momencie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy. Gdy następuje Inicjalizacja z opóźnieniem, używana jest określona funkcja inicjująca i tryb inicjalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb <xref:System.Lazy%601> bezpiecznego wątku wystąpienia, które jest inicjowane za pomocą tego konstruktora, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> to `isThreadSafe` if `true`; w przeciwnym razie tryb to <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>. Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.  
  
 Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> tryb, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Użyj konstruktora or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> .  
  
 Wyjątki, które są generowane `valueFactory` przez program, są buforowane. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjalizację z opóźnieniem z buforowaniem wyjątków, w scenariuszu z pojedynczym wątkiem. Pokazuje także użycie <xref:System.Lazy%601.%23ctor%2A> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`). Aby przełączyć się do tego konstruktora, po prostu zmień konstruktora, który jest oznaczony jako komentarz.  
  
> [!NOTE]
>  W przypadku kodu, który demonstruje sposób użycia tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> Zobacz przykład dla konstruktora.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków. Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która ilustruje buforowanie wyjątków. Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 W wywołaniu konstruktora `isThreadSafe` parametr jest `false`, więc <xref:System.Lazy%601> nie jest bezpieczny wątkowo. Ponieważ nie jest on bezpieczny dla wątków, przykład wywołuje <xref:System.Lazy%601.Value%2A> Właściwość trzy razy w tym samym wątku:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 W konstruktorze `LargeObject` klasy trzecia sekcja kodu zgłasza wyjątek podczas pierwszego `LargeObject` tworzenia wystąpienia, ale następnie umożliwia tworzenie wystąpienia:.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 Po uruchomieniu przykładu pierwsza próba utworzenia wystąpienia `LargeObject` kończy się niepowodzeniem, a wyjątek jest przechwytywany. Może się zdarzyć, że kolejna próba powiodła się, ale <xref:System.Lazy%601> obiekt buforuje wyjątek. Z tego powodu wszystkie trzy próby spowodują zgłoszenie wyjątku.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</param>
        <param name="mode">Jedna z wartości wyliczenia, która określa tryb zabezpieczeń wątku.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa określonej funkcji inicjującej i trybu ochrony wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.  
  
 Wyjątki generowane przez `valueFactory` są buforowane, chyba że `mode` jest to <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>. Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który umożliwia wielu wątkom Tworzenie obiektów opóźnieniem. Wiele wątków może powieść się w tworzeniu wystąpień, ale wszystkie wątki używają wystąpienia, które zostało utworzone jako pierwsze. Ponadto w przykładzie pokazano, że wyjątki nigdy nie są buforowane w przypadku określenia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, nawet jeśli Inicjalizacja jest wykonywana przez funkcję, a nie przez konstruktora bez parametrów typu tworzonego opóźnieniem.  
  
> [!NOTE]
>  Aby zapoznać się z przykładem, który pokazuje, jak używać tego konstruktora w scenariuszach wielowątkowych <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> ( `mode`Określanie dla), <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Zobacz Konstruktor. Przykład demonstrujący, jak używać tego konstruktora do zapewnienia blokowania zamiast warunków wyścigu w scenariuszach wielowątkowych (określanych <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> jako `mode`), zobacz <xref:System.Lazy%601.%23ctor> Konstruktor.  
  
 W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez którykolwiek z kilku wątków. Cztery kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację, funkcję inicjującą oraz Konstruktor i finalizator `LargeObject` klasy. Na początku `Main` metody przykład <xref:System.Lazy%601> tworzy obiekt, który `LargeObject`wykonuje opóźnione inicjowanie:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 Inicjator opóźniony używa funkcji do wykonania inicjalizacji. W takim przypadku funkcja jest wymagana, ponieważ dla `LargeObject` klasy nie istnieje Konstruktor bez parametrów.  
  
 Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie. W metodzie, która jest używana przez wszystkie trzy wątki, <xref:System.Lazy%601.Value%2A> wywołanie właściwości tworzy `LargeObject` wystąpienie: `ThreadProc`  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 W trzecim kluczu sekcji Code Funkcja inicjowania z opóźnieniem jest wywoływana w celu utworzenia `LargeObject` wystąpienia. Funkcja zgłasza wyjątek podczas pierwszego wywołania:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 W przypadku każdego <xref:System.Threading.LazyThreadSafetyMode> innego ustawienia nieobsługiwany wyjątek w funkcji inicjowania zostanie zbuforowany. <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Jednak pomija buforowanie wyjątków. Dane wyjściowe z przykładu pokazują, że kolejna próba zainicjowania obiektu powiedzie się.  
  
> [!NOTE]
>  Komunikat o wyjątku zazwyczaj pojawia się po komunikatach wskazujących, że obiekt został pomyślnie zainicjowany przez inne wątki. Wynika to z opóźnienia wprowadzonego przez wyrzucanie i przechwycenie wyjątku.  
  
 Ponieważ Konstruktor dla <xref:System.Lazy%601> określonego <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wystąpienia, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpienia. Przykład ilustruje to poprzez wyświetlanie komunikatów konsoli w konstruktorze i w finalizatorze `LargeObject` klasy:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601> Obiekt gwarantuje, że tylko jedno wystąpienie jest używane przez wszystkie wątki (z wyjątkiem wątku, w którym funkcja inicjująca zgłasza wyjątek). Dane wyjściowe z tego przykładu są wyświetlane.  
  
> [!NOTE]
>  Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic). Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />zawiera nieprawidłową wartość.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" />jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dla tego <see cref="T:System.Lazy`1" /> wystąpienia została utworzona wartość.</summary>
        <value><see langword="true" />Jeśli wartość została utworzona dla tego <see cref="T:System.Lazy`1" /> wystąpienia; <see langword="false" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy dla <xref:System.Lazy%601> wystąpienia występuje opóźnione inicjowanie, może to spowodować utworzenie wartości lub zgłaszanie wyjątku. Jeśli wystąpi wyjątek, kolejne zachowanie <xref:System.Lazy%601> wystąpienia zależy od tego, czy buforowanie wyjątków jest włączone. <xref:System.Lazy%601> Jeśli wystąpienie zostało utworzone przy użyciu konstruktora, który nie określa funkcji inicjującej, buforowanie wyjątków nie jest włączone. Kolejna próba zainicjowania <xref:System.Lazy%601> może powieść się, a po pomyślnym zainicjowaniu tej <xref:System.Lazy%601.IsValueCreated%2A> właściwości zwraca wartość `true`. Jeśli wystąpienie zostało utworzone za pomocą funkcji inicjującej (określonej `valueFactory` przez parametr <xref:System.Lazy%601> konstruktora), buforowanie wyjątków jest kontrolowane przez tryb zabezpieczeń wątku. <xref:System.Lazy%601>  
  
-   Jeśli tryb to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> lub <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, nie ma <xref:System.Lazy%601> drugiej szansy do zainicjowania wystąpienia. Jeśli wystąpi wyjątek, który jest nieobsługiwany w funkcji inicjowania, ten wyjątek jest buforowany i ponownie zgłaszany przy kolejnych dostępach <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> do właściwości. Żadna wartość nie jest tworzona, jeśli wyjątek jest zgłaszany, więc w <xref:System.Lazy%601.IsValueCreated%2A> takich `false`przypadkach zwraca.  
  
-   Jeśli tryb to <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, pierwszy wątek, który zakończy się pomyślnie w uruchomieniu funkcji inicjującej (lub konstruktora bez parametrów) tworzy wartość dla tego <xref:System.Lazy%601> wystąpienia. Jeśli funkcja inicjowania zgłasza wyjątek w jednym wątku, inne wątki nadal mogą próbować zainicjować <xref:System.Lazy%601> wystąpienie. Dopóki wartość nie zostanie utworzona, <xref:System.Lazy%601.IsValueCreated%2A> Właściwość zwraca. `false`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy i zwraca reprezentację <see cref="P:System.Lazy`1.Value" /> ciągu dla tego wystąpienia.</summary>
        <returns>Wynik wywołania <see cref="M:System.Object.ToString" /> metody <see cref="P:System.Lazy`1.Value" /> dla właściwości dla tego wystąpienia, jeśli wartość została utworzona (oznacza to, <see cref="P:System.Lazy`1.IsValueCreated" /> że jeśli właściwość zostanie zwrócona <see langword="true" />). W przeciwnym razie, ciąg wskazujący, że wartość nie została utworzona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody nie powoduje inicjalizacji.  
  
 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> `null` `valueFactory` <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>Właściwość może być `null` po zainicjowaniu z opóźnieniem, jeśli metoda fabryki, która została określona dla parametru, lub, zwraca. <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><see cref="P:System.Lazy`1.Value" /> Właściwość jest<see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość zainicjowaną przez opóźnieniem w <see cref="T:System.Lazy`1" /> bieżącym wystąpieniu.</summary>
        <value>Opóźnieniem zainicjowana wartość bieżącego <see cref="T:System.Lazy`1" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest `false`, uzyskiwanie dostępu <xref:System.Lazy%601.Value%2A> do właściwości wymusza inicjalizację. <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>  
  
 Oprócz wyjątków, <xref:System.Lazy%601.Value%2A> które są wymienione, właściwość może zgłosić dowolny nieobsługiwany wyjątek, który jest generowany przez metodę fabryki, która została przeniesiona `valueFactory` do parametru <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><see cref="T:System.Lazy`1" /> Wystąpienie jest inicjowane w celu użycia konstruktora bez parametrów typu, który jest opóźnieniem zainicjowany, i brak uprawnień dostępu do konstruktora.</exception>
        <exception cref="T:System.MissingMemberException"><see cref="T:System.Lazy`1" /> Wystąpienie jest inicjowane w celu użycia konstruktora bez parametrów typu, który jest opóźnieniem zainicjowany i ten typ nie ma publicznego konstruktora bezparametrycznego.</exception>
        <exception cref="T:System.InvalidOperationException">Funkcja inicjowania próbuje uzyskać dostęp <see cref="P:System.Lazy`1.Value" /> do tego wystąpienia.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
  </Members>
</Type>
