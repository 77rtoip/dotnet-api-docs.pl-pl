<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0107f34042bafd33bffc1d75b077e1fc01fccfa2" /><Meta Name="ms.sourcegitcommit" Value="8c966994f39ffe6e7c21611e9ec1b91247a68500" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/26/2019" /><Meta Name="ms.locfileid" Value="55084723" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="11463-101">Typ obiektu, który jest inicjowany opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="11463-102">Zapewnia obsługę inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-103">Użyj inicjacji z opóźnieniem, które mają być odroczone Tworzenie obiektu dużych lub dużej ilości zasobów lub wykonywania zadań intensywnie korzystających z zasobów, zwłaszcza w przypadku takich utworzenie lub wykonanie nie może wystąpić w okresie istnienia programu.</span><span class="sxs-lookup"><span data-stu-id="11463-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="11463-104">Aby przygotować się do inicjowania z opóźnieniem, należy utworzyć wystąpienie <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="11463-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="11463-105">Argument typu <xref:System.Lazy%601> obiekt, który tworzysz Określa typ obiektu, który chcesz zainicjować opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="11463-106">Konstruktor, który umożliwia tworzenie <xref:System.Lazy%601> obiektu określa właściwości inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="11463-107">Inicjalizacja z opóźnieniem występuje po raz pierwszy <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> dostępu do właściwości.</span><span class="sxs-lookup"><span data-stu-id="11463-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="11463-108">W większości przypadków wybór konstruktora zależy od odpowiedzi na dwa pytania:</span><span class="sxs-lookup"><span data-stu-id="11463-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="11463-109">Opóźnieniem zainicjowanego obiektu uzyskuje się dostęp z więcej niż jeden wątek?</span><span class="sxs-lookup"><span data-stu-id="11463-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="11463-110">Jeśli tak, <xref:System.Lazy%601> obiektu może utworzyć ją na żadnym z wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="11463-111">Można użyć jednego z konstruktorów prosty, którego domyślne zachowanie jest utworzenie obsługujące wielowątkowość <xref:System.Lazy%601> obiektu, tak że tylko jedno wystąpienie opóźnieniem wystąpień obiektu jest tworzony niezależnie od tego, jak wiele wątków próbuje uzyskać do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="11463-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="11463-112">Aby utworzyć <xref:System.Lazy%601> obiektu, który nie jest bezpieczny dla wątków, należy użyć konstruktora, który pozwala na określenie nie bezpieczeństwo wątkowe.</span><span class="sxs-lookup"><span data-stu-id="11463-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="11463-113">Tworzenie <xref:System.Lazy%601> obiektu wątkowo nie chroni opóźnieniem zainicjowanego obiektu.</span><span class="sxs-lookup"><span data-stu-id="11463-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="11463-114">Jeśli wiele wątków może uzyskać dostęp do opóźnieniem zainicjowanego obiektu, musisz wprowadzić jej właściwości i metody bezpieczne, aby uzyskać dostęp do wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="11463-115">Inicjalizacja z opóźnieniem wymaga dużej ilości kodu lub opóźnieniem zainicjowanego obiektu ma domyślnego konstruktora, który wykonuje wszystko, czego potrzebujesz i nie wyrzuca wyjątków?</span><span class="sxs-lookup"><span data-stu-id="11463-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="11463-116">Jeśli należy napisać kod inicjujący lub wyjątki, które muszą być obsługiwani, użyj jednego z konstruktorów, które przyjmuje metoda fabryki.</span><span class="sxs-lookup"><span data-stu-id="11463-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="11463-117">Napisz swój kod inicjowania w metodzie fabryki.</span><span class="sxs-lookup"><span data-stu-id="11463-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="11463-118">W poniższej tabeli przedstawiono konstruktora do wyboru, w oparciu o te dwa czynniki:</span><span class="sxs-lookup"><span data-stu-id="11463-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="11463-119">Obiekt będzie uzyskiwał dostęp</span><span class="sxs-lookup"><span data-stu-id="11463-119">Object will be accessed by</span></span>|<span data-ttu-id="11463-120">Jeśli jest wymagany żaden kod inicjalizacji (konstruktora domyślnego), użyj</span><span class="sxs-lookup"><span data-stu-id="11463-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="11463-121">Jeśli wymagany jest kod inicjowania, użyć</span><span class="sxs-lookup"><span data-stu-id="11463-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="11463-122">Wiele wątków</span><span class="sxs-lookup"><span data-stu-id="11463-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="11463-123">Jeden wątek</span><span class="sxs-lookup"><span data-stu-id="11463-123">One thread</span></span>|<span data-ttu-id="11463-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> za pomocą `isThreadSafe` równa `false`.</span><span class="sxs-lookup"><span data-stu-id="11463-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="11463-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> za pomocą `isThreadSafe` równa `false`.</span><span class="sxs-lookup"><span data-stu-id="11463-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="11463-126">Wyrażenie lambda można użyć, aby określić metodę fabryki.</span><span class="sxs-lookup"><span data-stu-id="11463-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="11463-127">Dzięki temu całego kodu inicjowania w jednym miejscu.</span><span class="sxs-lookup"><span data-stu-id="11463-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="11463-128">Wyrażenie lambda przechwytuje kontekst, w tym dowolne argumenty, które są przekazywane do konstruktora obiektu opóźnieniem zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="11463-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="11463-129">**Buforowanie wyjątek** korzystając z metodami factory, wyjątki są buforowane.</span><span class="sxs-lookup"><span data-stu-id="11463-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="11463-130">Oznacza to, jeśli metoda fabryki zgłasza wyjątek pierwszego czasu wątku próbuje uzyskać dostęp <xref:System.Lazy%601.Value%2A> właściwość <xref:System.Lazy%601> obiektu, ten sam wyjątek jest zgłaszany w każdej kolejnej próby.</span><span class="sxs-lookup"><span data-stu-id="11463-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="11463-131">Gwarantuje to, że każde wywołanie <xref:System.Lazy%601.Value%2A> właściwość daje ten sam wynik i pozwala uniknąć powstawania błędów, które mogą wystąpić, jeśli różne wyniki w różnych wątkach.</span><span class="sxs-lookup"><span data-stu-id="11463-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="11463-132"><xref:System.Lazy%601> Oznacza rzeczywistej `T` , w przeciwnym razie mogłyby zostały zainicjowane w pewnym momencie wcześniej, zazwyczaj podczas uruchamiania.</span><span class="sxs-lookup"><span data-stu-id="11463-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="11463-133">Błąd w tego jest zwykle błąd krytyczny.</span><span class="sxs-lookup"><span data-stu-id="11463-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="11463-134">W przypadku potencjalnych awarii możliwe do odzyskania, firma Microsoft zaleca wbuduj logikę ponowień w procedura inicjowania (w tym przypadku metoda fabryki), podobnie jak w przypadku nie przy użyciu inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="11463-135">**Alternatywa dla blokowania** w niektórych sytuacjach możesz chcieć uniknąć konieczności <xref:System.Lazy%601> obiektu domyślne zachowanie blokowania.</span><span class="sxs-lookup"><span data-stu-id="11463-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="11463-136">W rzadkich przypadkach może być ryzyko zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="11463-137">W takich przypadkach można użyć <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora, a następnie określ <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-138">Dzięki temu <xref:System.Lazy%601> obiekt, aby utworzyć kopię obiektu opóźnieniem zainicjowane na każdym z kilku wątków, jeśli wywołanie wątki <xref:System.Lazy%601.Value%2A> właściwości jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="11463-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="11463-139"><xref:System.Lazy%601> Obiektu gwarantuje, że wszystkie wątki używa tego samego wystąpienia obiektu opóźnieniem zainicjowane, a następnie odrzuca wszystkie wystąpienia, które nie są używane.</span><span class="sxs-lookup"><span data-stu-id="11463-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="11463-140">W związku z tym koszt zmniejszając obciążenie blokowania jest program może czasami tworzenie i odrzucić dodatkowych kopii obiektu kosztowne.</span><span class="sxs-lookup"><span data-stu-id="11463-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="11463-141">W większości przypadków jest to mało prawdopodobne.</span><span class="sxs-lookup"><span data-stu-id="11463-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="11463-142">Przykłady dla <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktory demonstrują takie zachowanie.</span><span class="sxs-lookup"><span data-stu-id="11463-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="11463-143">Po określeniu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wyjątki są nigdy nie w pamięci podręcznej, nawet jeśli określisz metoda fabryki.</span><span class="sxs-lookup"><span data-stu-id="11463-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="11463-144">**Konstruktory równoważne** zbiorczymi użytkowania <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktory można duplikować funkcjonalność innych konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="11463-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="11463-145">W poniższej tabeli przedstawiono wartości parametrów, które dają równoważne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="11463-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="11463-146">Aby utworzyć <xref:System.Lazy%601> obiekt</span><span class="sxs-lookup"><span data-stu-id="11463-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="11463-147">Dla konstruktorów, które mają `LazyThreadSafetyMode` `mode` zestaw parametrów, `mode` do</span><span class="sxs-lookup"><span data-stu-id="11463-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="11463-148">Dla konstruktorów, które mają atrybut typu wartość logiczna `isThreadSafe` zestaw parametrów, `isThreadSafe` do</span><span class="sxs-lookup"><span data-stu-id="11463-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="11463-149">Dla konstruktorów bez parametrów bezpieczeństwa wątków</span><span class="sxs-lookup"><span data-stu-id="11463-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="11463-150">W pełni wątkowo; zastosowań blokowania, aby upewnić się, że tylko jeden wątek inicjuje wartość.</span><span class="sxs-lookup"><span data-stu-id="11463-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="11463-151">Wszystkie takie konstruktory są całkowicie bezpieczne dla wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="11463-152">Nie bezpieczne dla wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="11463-153">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="11463-153">Not applicable.</span></span>|  
|<span data-ttu-id="11463-154">W pełni wątkowo; Wyścig wątków do inicjacji wartości.</span><span class="sxs-lookup"><span data-stu-id="11463-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="11463-155">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="11463-155">Not applicable.</span></span>|<span data-ttu-id="11463-156">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="11463-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="11463-157">**Inne możliwości** uzyskać informacji na temat użytkowania <xref:System.Lazy%601> za pomocą pola statyczne wątku lub jako magazyn zapasowy właściwości, zobacz [inicjowania z opóźnieniem](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="11463-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-158">W poniższym przykładzie pokazano użycie <xref:System.Lazy%601> Aby klasa zapewniała inicjowania z opóźnieniem z dostępem z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-159">W przykładzie użyto <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="11463-160">Ilustruje też użycie <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> konstruktora (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="11463-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="11463-161">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="11463-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="11463-162">Aby uzyskać przykład, który przedstawia wyjątek buforowania, za pomocą tego samego konstruktorów, zobacz <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="11463-163">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="11463-164">Cztery kluczowe części kodu ilustrują tworzenie inicjatora, metoda fabryki, rzeczywiste inicjowania i Konstruktor `LargeObject` klasy, która wyświetla komunikat, gdy obiekt zostanie utworzony.</span><span class="sxs-lookup"><span data-stu-id="11463-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="11463-165">Na początku `Main` metody, w przykładzie jest tworzony wątkowo inicjatora działającego z opóźnieniem dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-166">Metoda fabryki pokazano tworzenie obiektu, z symbolem zastępczym dla dalszych inicjowania:</span><span class="sxs-lookup"><span data-stu-id="11463-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="11463-167">Należy zwrócić uwagę na to, że sekcje kodu w pierwszych dwóch można łączyć za pomocą funkcji lambda, jak pokazano poniżej:</span><span class="sxs-lookup"><span data-stu-id="11463-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="11463-168">W przykładzie wstrzymano, aby wskazać, że przez czas nieokreślony może upłynąć, zanim wystąpi inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="11463-169">Po naciśnięciu klawisza **Enter** klucza, przykład tworzy i uruchamia trzy wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="11463-170">`ThreadProc` Metodę, która jest używana przez wszystkie wywołania trzech wątków <xref:System.Lazy%601.Value%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="11463-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="11463-171">Dzieje się tak, po raz pierwszy `LargeObject` tworzone jest wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="11463-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-172">Konstruktor obiektu `LargeObject` klasy, która obejmuje klucza ostatniej części kodu, zostanie wyświetlony komunikat i rejestruje tożsamość wątku inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="11463-173">Dane wyjściowe programu pojawia się na końcu listy pełnego kodu.</span><span class="sxs-lookup"><span data-stu-id="11463-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="11463-174">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-175">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="11463-176">Domyślnie wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Lazy`1" /> klasy są bezpieczne dla wątków i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="11463-177">(Opcjonalnie) i każdego wystąpienia, przy użyciu parametrów do konstruktorów typu, mogą zostać usunięte tych gwarancji bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-178">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="11463-179">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11463-180">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="11463-181">W przypadku inicjowania z opóźnieniem jest używany domyślny konstruktor obiektu na typ docelowy.</span><span class="sxs-lookup"><span data-stu-id="11463-181">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-182">Utworzone za pomocą tego konstruktora wystąpienia mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="11463-183">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienie, który jest inicjowany za pomocą tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-184">Tryb awaryjny wątku opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="11463-185">A <xref:System.Lazy%601> wystąpienia utworzone za pomocą tego konstruktora nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="11463-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="11463-186">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-187">Poniższy przykład demonstruje użycie tego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="11463-188">Ilustruje także użycie <xref:System.Lazy%601.%23ctor%28System.Boolean%29> konstruktora (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="11463-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="11463-189">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="11463-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="11463-190">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="11463-191">Dwa kluczowe wiersze kodu, w tym przykładzie są tworzenia inicjatora i rzeczywiste inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="11463-192">Na początku `Main` metody, w przykładzie jest tworzony wątkowo inicjatora działającego z opóźnieniem dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-193">Przykład tworzy i uruchamia trzy wątki, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, tak aby przykładu można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="11463-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="11463-194">`ThreadProc` Metodę, która jest używana przez wszystkie wywołania trzech wątków <xref:System.Lazy%601.Value%2A> właściwości do pobrania `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="11463-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-195"><xref:System.Lazy%601> Klasa udostępnia blokowania, dzięki czemu można utworzyć tylko jeden wątek `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="11463-196">W przykładzie pokazano, że wszystkie wątki uzyskać tego samego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-197">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-198">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-199">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="11463-200"><see langword="true" /> Aby tego wystąpienia można używać jednocześnie z wielu wątków; <see langword="false" /> aby wystąpienie można używać tylko jednego wątku w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="11463-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="11463-201">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="11463-202">W przypadku inicjowania z opóźnieniem domyślny konstruktor obiektu typu docelowego i tryb inicjowania określonej są używane.</span><span class="sxs-lookup"><span data-stu-id="11463-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-203">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienie, który jest inicjowany za pomocą tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Jeśli `isThreadSafe` jest `true`; w przeciwnym razie jest to tryb <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-204">Tryb awaryjny wątku opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="11463-205">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> trybie użyj <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="11463-206">A <xref:System.Lazy%601> wystąpienia utworzone za pomocą tego konstruktora nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="11463-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="11463-207">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-208">Poniższy przykład demonstruje użycie tego konstruktora, aby utworzyć inicjatora działającego z opóźnieniem, który nie jest bezpieczny wątkowo, dla scenariuszy, w którym występuje wszelki dostęp do obiektu opóźnieniem zainicjowane na tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="11463-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="11463-209">Ilustruje też użycie <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`.</span><span class="sxs-lookup"><span data-stu-id="11463-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="11463-210">Aby przełączyć się do innego konstruktora, można zmienić konstruktora jest opatrzona komentarzem.</span><span class="sxs-lookup"><span data-stu-id="11463-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-211">Dla kodu, który pokazuje, jak użyć tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), zobacz przykład <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="11463-212">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="11463-213">W `Main` metody, w przykładzie jest tworzony <xref:System.Lazy%601> wystąpienia, a następnie pauzy.</span><span class="sxs-lookup"><span data-stu-id="11463-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="11463-214">Po naciśnięciu klawisza **Enter** klucza, przykład uzyskuje dostęp do <xref:System.Lazy%601.Value%2A> właściwość <xref:System.Lazy%601> wystąpienia, co powoduje, że inicjowania wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="11463-215">Konstruktor obiektu `LargeObject` klasa wyświetla komunikat na konsoli.</span><span class="sxs-lookup"><span data-stu-id="11463-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-216">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-217">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-218">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="11463-219">Delegat, który jest wywoływane w celu utworzenia wartości opóźnieniem zainicjowany po jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="11463-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="11463-220">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="11463-221">W przypadku inicjowania z opóźnieniem jest używana funkcja określonego inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-222">Utworzone za pomocą tego konstruktora wystąpienia mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="11463-223">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienie, który jest inicjowany za pomocą tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-224">Tryb awaryjny wątku opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="11463-225">Wyjątki wyrzucane przez `valueFactory` są buforowane.</span><span class="sxs-lookup"><span data-stu-id="11463-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="11463-226">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-227">Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjowania z opóźnieniem przy użyciu buforowania wyjątek.</span><span class="sxs-lookup"><span data-stu-id="11463-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="11463-228">Ilustruje też użycie <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> konstruktora (Określanie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="11463-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="11463-229">Aby przełączyć się do innego konstruktora, można zmienić konstruktorów, które są oznaczone jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="11463-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="11463-230">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="11463-231">Trzy kluczowe części kodu ilustrują tworzenie inicjatora, rzeczywiste inicjowania i Konstruktor `LargeObject` klasy, która przedstawia wyjątek buforowania.</span><span class="sxs-lookup"><span data-stu-id="11463-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="11463-232">Na początku `Main` metody, w przykładzie jest tworzony wątkowo inicjatora działającego z opóźnieniem dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-233">Przykład tworzy i uruchamia trzy wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-233">The example creates and starts three threads.</span></span> <span data-ttu-id="11463-234">`ThreadProc` Metodę, która jest używana przez wszystkie wywołania trzech wątków <xref:System.Lazy%601.Value%2A> właściwości do pobrania `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="11463-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-235">W Konstruktorze typu `LargeObject` klasy, trzecia sekcja klucza kodu zgłasza wyjątek, po raz pierwszy `LargeObject` wystąpienie jest tworzone, ale następnie umożliwia tworzenie wystąpienia występuje:</span><span class="sxs-lookup"><span data-stu-id="11463-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="11463-236">Gdy ten przykład zostanie uruchomiony, pierwszym wątkiem, który podejmie próbę utworzenia wystąpienia `LargeObject` kończy się niepowodzeniem, a wyjątek zostaje przechwycony.</span><span class="sxs-lookup"><span data-stu-id="11463-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="11463-237">Można by oczekiwać, że następny wątek pomyślnie utworzyć wystąpienie, ale <xref:System.Lazy%601> obiekt ma pamięci podręcznej wyjątku.</span><span class="sxs-lookup"><span data-stu-id="11463-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="11463-238">W związku z tym wszystkie wątki trzy zgłosić wyjątek.</span><span class="sxs-lookup"><span data-stu-id="11463-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-239">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-240">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11463-241"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="11463-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-242">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="11463-243">Jedna z wartości wyliczenia, które określa tryb bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="11463-244">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasę, która korzysta z domyślnego konstruktora <paramref name="T" /> i tryb bezpieczeństwo wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-245">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienia opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="11463-246">A <xref:System.Lazy%601> wystąpienia utworzone za pomocą tego konstruktora nie będzie buforować wyjątków.</span><span class="sxs-lookup"><span data-stu-id="11463-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="11463-247">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-248">Poniższy przykład demonstruje użycie tego konstruktora, aby utworzyć inicjatora działającego z opóźnieniem, umożliwiającą wielu wątków wyścigu do utworzenia obiektu opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="11463-249">Wiele wątków może się powieść podczas tworzenia wystąpienia, ale wszystkie wątki użyć wystąpienia, który został utworzony jako pierwszy.</span><span class="sxs-lookup"><span data-stu-id="11463-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-250">Na przykład demonstrujący, jak używać tego konstruktora w scenariuszach jednowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="11463-251">Aby uzyskać przykład, który demonstruje sposób użyć tego konstruktora, aby zapewnić blokowanie zamiast wyścigu w scenariusze wielowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="11463-252">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez żaden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="11463-253">Trzy kluczowe części kodu ilustrują tworzenie inicjatora, rzeczywiste inicjowania i Konstruktor i finalizatora `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="11463-254">Na początku `Main` metody, w przykładzie jest tworzony <xref:System.Lazy%601> obiekt, który wykonuje inicjowanie z opóźnieniem `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-255">Przykład tworzy i uruchamia trzy wątki, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, tak aby przykładu można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="11463-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="11463-256">W `ThreadProc` metodę, która jest używana przez wszystkich trzech wątków podczas wywoływania <xref:System.Lazy%601.Value%2A> tworzy właściwość `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="11463-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-257">Ponieważ Konstruktor <xref:System.Lazy%601> określonego wystąpienia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpień.</span><span class="sxs-lookup"><span data-stu-id="11463-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="11463-258">W przykładzie pokazano to w Konstruktorze i finalizatora, wyświetlając komunikaty konsoli `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="11463-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="11463-259">Jednak <xref:System.Lazy%601> obiektu gwarantuje, że tylko jedno wystąpienie jest używany przez wszystkie wątki.</span><span class="sxs-lookup"><span data-stu-id="11463-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="11463-260">Dane wyjściowe z przykładu pokazuje, że wszystkie wątki trzy używają tego samego wystąpienia, a także pokazuje, że dwa wystąpienia można odzyskać przez wyrzucanie elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="11463-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-261">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-262">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11463-263"><paramref name="mode" /> zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="11463-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-264">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="11463-265">Wartość preinitialized, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="11463-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="11463-266">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy, która używa preinitialized określona wartość.</span><span class="sxs-lookup"><span data-stu-id="11463-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="11463-267">Wystąpienie utworzonych za pomocą tego konstruktora jest zdatna do użycia przez wiele wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="11463-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="11463-268">Delegat, który jest wywoływane w celu utworzenia wartości opóźnieniem zainicjowany po jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="11463-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="11463-269"><see langword="true" /> Aby tego wystąpienia można używać jednocześnie z wielu wątków; <see langword="false" /> się tego wystąpienia można używać tylko jednego wątku w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="11463-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="11463-270">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="11463-271">W przypadku inicjowania z opóźnieniem inicjowania określonej funkcji i tryb inicjowania są używane.</span><span class="sxs-lookup"><span data-stu-id="11463-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-272">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienie, który jest inicjowany za pomocą tego konstruktora jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Jeśli `isThreadSafe` jest `true`; w przeciwnym razie jest to tryb <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-273">Tryb awaryjny wątku opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="11463-274">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> trybie użyj <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> lub <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="11463-275">Wyjątki wyrzucane przez `valueFactory` są buforowane.</span><span class="sxs-lookup"><span data-stu-id="11463-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="11463-276">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-277">Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjowania z opóźnieniem dla wyjątków, w przypadku scenariusza z jednym wątkiem.</span><span class="sxs-lookup"><span data-stu-id="11463-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="11463-278">Ilustruje też użycie <xref:System.Lazy%601.%23ctor%2A> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="11463-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="11463-279">Aby przełączyć się do tego konstruktora, można zmienić konstruktora jest opatrzona komentarzem.</span><span class="sxs-lookup"><span data-stu-id="11463-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-280">Dla kodu, który pokazuje, jak użyć tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), zobacz przykład <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="11463-281">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="11463-282">Trzy kluczowe części kodu ilustrują tworzenie inicjatora, rzeczywiste inicjowania i Konstruktor `LargeObject` klasy, która przedstawia wyjątek buforowania.</span><span class="sxs-lookup"><span data-stu-id="11463-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="11463-283">Na początku `Main` metody, w przykładzie jest tworzony wątkowo inicjatora działającego z opóźnieniem dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-284">W wywołaniu konstruktora `isThreadSafe` parametr jest `false`, więc <xref:System.Lazy%601> nie jest wątek bezpieczne.</span><span class="sxs-lookup"><span data-stu-id="11463-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="11463-285">Ponieważ nie jest bezpieczny dla wątków, przykład wywołuje <xref:System.Lazy%601.Value%2A> właściwość trzy razy w tym samym wątku:</span><span class="sxs-lookup"><span data-stu-id="11463-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-286">W Konstruktorze typu `LargeObject` klasy, trzecia sekcja klucza kodu zgłasza wyjątek, po raz pierwszy `LargeObject` wystąpienie jest tworzone, ale następnie umożliwia tworzenie wystąpienia występuje:</span><span class="sxs-lookup"><span data-stu-id="11463-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="11463-287">Gdy ten przykład zostanie uruchomiony, pierwsza próba utworzenia instancji `LargeObject` kończy się niepowodzeniem, a wyjątek zostaje przechwycony.</span><span class="sxs-lookup"><span data-stu-id="11463-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="11463-288">Można by oczekiwać, że powiedzie się następnej próby, ale <xref:System.Lazy%601> obiekt ma pamięci podręcznej wyjątku.</span><span class="sxs-lookup"><span data-stu-id="11463-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="11463-289">W związku z tym wszystkie trzy próby zgłosić wyjątek.</span><span class="sxs-lookup"><span data-stu-id="11463-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-290">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-291">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11463-292"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="11463-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-293">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="11463-294">Delegat, który jest wywoływane w celu utworzenia wartości opóźnieniem zainicjowany po jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="11463-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="11463-295">Jedna z wartości wyliczenia, które określa tryb bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="11463-296">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasę, która korzysta z trybu inicjowania określonej funkcji i bezpieczeństwo wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-297">Tryb bezpieczeństwa wątków <xref:System.Lazy%601> wystąpienia opisano zachowanie, gdy wiele wątków próbuje zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="11463-298">Wyjątki wyrzucane przez `valueFactory` są buforowane, chyba że `mode` jest <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="11463-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="11463-299">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> klasy lub <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="11463-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11463-300">Poniższy przykład demonstruje użycie tego konstruktora, aby utworzyć inicjatora działającego z opóźnieniem, umożliwiającą wielu wątków wyścigu do utworzenia obiektu opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="11463-301">Wiele wątków może się powieść podczas tworzenia wystąpienia, ale wszystkie wątki użyć wystąpienia, który został utworzony jako pierwszy.</span><span class="sxs-lookup"><span data-stu-id="11463-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="11463-302">Ponadto w przykładzie pokazano, aby wyjątki nigdy nie są buforowane, po określeniu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, nawet jeśli inicjowanie odbywa się przez funkcję, a nie przez domyślny konstruktor obiektu opóźnieniem utworzony typ.</span><span class="sxs-lookup"><span data-stu-id="11463-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-303">Na przykład demonstrujący, jak używać tego konstruktora w scenariuszach jednowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="11463-304">Aby uzyskać przykład, który demonstruje sposób użyć tego konstruktora, aby zapewnić blokowanie zamiast wyścigu w scenariusze wielowątkowe (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`), zobacz <xref:System.Lazy%601.%23ctor> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="11463-305">W przykładzie zdefiniowano `LargeObject` klasę, która będzie inicjowana z opóźnieniem przez żaden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="11463-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="11463-306">Cztery kluczowe części kodu ilustrują tworzenie inicjatora, rzeczywiste inicjowania, funkcji inicjowania i Konstruktor i finalizatora `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="11463-307">Na początku `Main` metody, w przykładzie jest tworzony <xref:System.Lazy%601> obiekt, który wykonuje inicjowanie z opóźnieniem `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="11463-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="11463-308">Inicjatora działającego z opóźnieniem funkcja używana do wykonywania inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="11463-309">W takim przypadku funkcja jest wymagana, ponieważ nie istnieje żaden domyślny konstruktor dla `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="11463-309">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="11463-310">Przykład tworzy i uruchamia trzy wątki, które blokują na <xref:System.Threading.ManualResetEvent> obiektu, tak aby przykładu można zwolnić wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="11463-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="11463-311">W `ThreadProc` metodę, która jest używana przez wszystkich trzech wątków podczas wywoływania <xref:System.Lazy%601.Value%2A> tworzy właściwość `LargeObject` wystąpienie:</span><span class="sxs-lookup"><span data-stu-id="11463-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="11463-312">W trzeciej kluczy sekcji kodu, funkcja inicjowania z opóźnieniem jest wywoływana, aby utworzyć `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="11463-313">Funkcja zgłasza wyjątku pierwszej czas jest o nazwie:</span><span class="sxs-lookup"><span data-stu-id="11463-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="11463-314">Wszystkie inne <xref:System.Threading.LazyThreadSafetyMode> ustawienie nieobsługiwanego wyjątku w funkcji inicjowania będzie buforowana.</span><span class="sxs-lookup"><span data-stu-id="11463-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="11463-315">Jednak <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> wyłącza buforowanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="11463-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="11463-316">Dane wyjściowe z przykładu pokazuje, że kolejna próba zainicjowania obiektu zakończy się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="11463-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-317">Komunikat o wyjątku zwykle pojawia się po komunikaty wskazujące, że inne wątki zostały pomyślnie zainicjował obiekt.</span><span class="sxs-lookup"><span data-stu-id="11463-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="11463-318">Jest to z powodu opóźnienia wynikające z tworzenia i przechwytywania wyjątków.</span><span class="sxs-lookup"><span data-stu-id="11463-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="11463-319">Ponieważ Konstruktor <xref:System.Lazy%601> określonego wystąpienia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpień.</span><span class="sxs-lookup"><span data-stu-id="11463-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="11463-320">W przykładzie pokazano to w Konstruktorze i finalizatora, wyświetlając komunikaty konsoli `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="11463-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="11463-321"><xref:System.Lazy%601> Obiektu gwarantuje, że tylko jedno wystąpienie jest używany przez wszystkie wątki (z wyjątkiem wątku, w którym zgłasza wyjątek, funkcja inicjowania).</span><span class="sxs-lookup"><span data-stu-id="11463-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="11463-322">Dane wyjściowe z przykładu pokazują to.</span><span class="sxs-lookup"><span data-stu-id="11463-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="11463-323">Dla uproszczenia w tym przykładzie użyto globalnego wystąpienia <xref:System.Lazy%601>, a wszystkie metody są `static` (`Shared` w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="11463-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="11463-324">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="11463-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="11463-325"><paramref name="mode" /> zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="11463-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11463-326"><paramref name="valueFactory" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="11463-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-327">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11463-328">Pobiera wartość wskazującą, czy wartość została utworzona w tym <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="11463-329"><see langword="true" /> Jeśli wartość została utworzona w tym <see cref="T:System.Lazy`1" /> wystąpienia; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="11463-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-330">Gdy wystąpi inicjowania z opóźnieniem dla <xref:System.Lazy%601> wystąpienia, może to spowodować wartość tworzona lub wyjątku.</span><span class="sxs-lookup"><span data-stu-id="11463-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="11463-331">Jeśli wyjątek jest wyrzucony, kolejne zachowanie <xref:System.Lazy%601> wystąpienia zależy od tego, czy wyjątek pamięć podręczna jest włączona.</span><span class="sxs-lookup"><span data-stu-id="11463-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="11463-332">Jeśli <xref:System.Lazy%601> wystąpienie zostało utworzone za pomocą konstruktora, który nie określa funkcję inicjowania, a następnie buforowanie wyjątek nie jest włączone.</span><span class="sxs-lookup"><span data-stu-id="11463-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="11463-333">Kolejna próba zainicjowania <xref:System.Lazy%601> może się powieść i po pomyślnym zainicjowaniu <xref:System.Lazy%601.IsValueCreated%2A> właściwość zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="11463-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="11463-334">Jeśli <xref:System.Lazy%601> wystąpienie zostało utworzone za pomocą funkcji inicjowania (określony przez `valueFactory` parametru <xref:System.Lazy%601> konstruktora), a następnie buforowanie wyjątek jest kontrolowana przez tryb awaryjny wątku.</span><span class="sxs-lookup"><span data-stu-id="11463-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="11463-335">Jeśli tryb jest <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> lub <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, nie ma żadnych drugą szansę, aby zainicjować <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="11463-336">Jeśli wyjątek wystąpi, jest nieobsługiwany w funkcji inicjowania tego wyjątku jest buforowana i zgłaszany ponownie na kolejne uzyskuje dostęp do programu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="11463-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="11463-337">Wartość nie jest tworzony, jeśli wyjątek jest generowany, więc w takich przypadkach <xref:System.Lazy%601.IsValueCreated%2A> zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="11463-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="11463-338">Jeśli tryb jest <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, pierwszy wątek, który zakończy się pomyślnie w działania funkcji inicjowania (lub domyślnego konstruktora) tworzy wartość <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="11463-339">Jeśli funkcja inicjowania zgłasza wyjątek w jednym wątku, inne wątki nadal może podjąć próbę zainicjowania <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="11463-340">Do momentu utworzenia wartość <xref:System.Lazy%601.IsValueCreated%2A> właściwość zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="11463-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-341">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11463-342">Tworzy i zwraca reprezentację ciągu <see cref="P:System.Lazy`1.Value" /> właściwość dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="11463-343">Wynik wywołania metody <see cref="M:System.Object.ToString" /> metody <see cref="P:System.Lazy`1.Value" /> właściwość dla tego wystąpienia, jeśli wartość została utworzona (to znaczy, jeśli <see cref="P:System.Lazy`1.IsValueCreated" /> właściwość zwraca <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="11463-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="11463-344">W przeciwnym razie ciąg, który wskazuje, że wartości nie został utworzony.</span><span class="sxs-lookup"><span data-stu-id="11463-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-345">Wywołanie tej metody nie powoduje inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="11463-346"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Właściwość może być `null` po inicjowania z opóźnieniem, jeśli metoda fabryki, która została określona dla `valueFactory` parametru <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="11463-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="11463-347"><see cref="P:System.Lazy`1.Value" /> Właściwość <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="11463-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="11463-348">Pobiera wartość opóźnieniem zainicjowane bieżącego <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="11463-349">Wartość opóźnieniem zainicjowane bieżącego <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="11463-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11463-350">Jeśli <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> właściwość `false`, uzyskiwania dostępu do <xref:System.Lazy%601.Value%2A> właściwość wymusza inicjowania.</span><span class="sxs-lookup"><span data-stu-id="11463-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="11463-351">Oprócz wyjątków, które są wyświetlane <xref:System.Lazy%601.Value%2A> właściwość może zgłosić nieobsługiwany wyjątek, który jest generowany przez metoda fabryki, który został przekazany do `valueFactory` parametru <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="11463-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="11463-352"><see cref="T:System.Lazy`1" /> Zainicjowano wystąpienia, aby użyć domyślnego konstruktora typu, który jest inicjowany opóźnieniem i brak uprawnienia do dostępu do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="11463-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="11463-353"><see cref="T:System.Lazy`1" /> Zainicjowano wystąpienia, aby użyć domyślnego konstruktora typu, który jest inicjowany opóźnieniem i ten typ nie ma publiczny konstruktor bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="11463-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="11463-354">Funkcja inicjowania próbuje uzyskać dostęp do <see cref="P:System.Lazy`1.Value" /> w tym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="11463-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="11463-355">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="11463-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>