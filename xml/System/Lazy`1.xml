<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5db16a3e2e391e606bff8cafb5a24c5c3f82c143" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68398331" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="d5080-101">Typ obiektu, który jest opóźnieniem zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="d5080-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="d5080-102">Zapewnia obsługę inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-103">Użyj inicjowania z opóźnieniem, aby odroczyć Tworzenie obiektu dużego lub intensywnie korzystających z zasobów, lub wykonać zadanie intensywnie korzystające z zasobów, szczególnie w przypadku, gdy takie utworzenie lub wykonanie może nie nastąpić w okresie istnienia programu.</span><span class="sxs-lookup"><span data-stu-id="d5080-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="d5080-104">Aby przygotować się do inicjowania z opóźnieniem, należy utworzyć <xref:System.Lazy%601>wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="d5080-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="d5080-105">Typ argumentu <xref:System.Lazy%601> tworzonego obiektu określa typ obiektu, który ma zostać zainicjowany opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="d5080-106">Konstruktor używany do tworzenia <xref:System.Lazy%601> obiektu określa charakterystykę inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="d5080-107">Podczas pierwszego uzyskiwania dostępu do <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości następuje Inicjalizacja z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="d5080-108">W większości przypadków wybór konstruktora zależy od odpowiedzi na dwa pytania:</span><span class="sxs-lookup"><span data-stu-id="d5080-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="d5080-109">Czy dostęp do zainicjowanego obiektu opóźnieniem będzie możliwy z więcej niż jednego wątku?</span><span class="sxs-lookup"><span data-stu-id="d5080-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="d5080-110">Jeśli tak, <xref:System.Lazy%601> obiekt może utworzyć go na dowolnym wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="d5080-111">Można użyć jednego z prostych konstruktorów, których domyślnym zachowaniem jest utworzenie obiektu bezpiecznego <xref:System.Lazy%601> wątkowego, tak aby tylko jedno wystąpienie obiektu opóźnieniem wystąpienie jest tworzone bez względu na to, ile wątków próbuje uzyskać do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="d5080-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="d5080-112">Aby utworzyć <xref:System.Lazy%601> obiekt, który nie jest bezpieczny dla wątków, należy użyć konstruktora, który umożliwia określenie braku bezpieczeństwa wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="d5080-113">Sprawianie <xref:System.Lazy%601> , że wątek obiektu bezpieczny nie chroni obiektu opóźnieniem zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="d5080-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="d5080-114">Jeśli wiele wątków może uzyskać dostęp do zainicjowanego obiektu opóźnieniem, należy wykonać jego właściwości i metody bezpiecznie dla wielowątkowego dostępu.</span><span class="sxs-lookup"><span data-stu-id="d5080-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="d5080-115">Czy Inicjalizacja z opóźnieniem wymaga dużej ilości kodu lub czy obiekt zainicjowany opóźnieniem ma Konstruktor bez parametrów, który robi wszystko, czego potrzebujesz, i nie zgłasza wyjątków?</span><span class="sxs-lookup"><span data-stu-id="d5080-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a parameterless constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="d5080-116">Jeśli musisz napisać kod inicjujący lub jeśli trzeba obsługiwać wyjątki, użyj jednego z konstruktorów przyjmujących metodę fabryki.</span><span class="sxs-lookup"><span data-stu-id="d5080-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="d5080-117">Napisz kod inicjujący w metodzie fabryki.</span><span class="sxs-lookup"><span data-stu-id="d5080-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="d5080-118">W poniższej tabeli przedstawiono Konstruktor, który należy wybrać, w oparciu o te dwa czynniki:</span><span class="sxs-lookup"><span data-stu-id="d5080-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="d5080-119">Dostęp do obiektu zostanie uzyskany przez</span><span class="sxs-lookup"><span data-stu-id="d5080-119">Object will be accessed by</span></span>|<span data-ttu-id="d5080-120">Jeśli kod inicjalizacji nie jest wymagany (Konstruktor bez parametrów), użyj</span><span class="sxs-lookup"><span data-stu-id="d5080-120">If no initialization code is required (parameterless constructor), use</span></span>|<span data-ttu-id="d5080-121">Jeśli jest wymagany kod inicjujący, użyj</span><span class="sxs-lookup"><span data-stu-id="d5080-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="d5080-122">Wiele wątków</span><span class="sxs-lookup"><span data-stu-id="d5080-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="d5080-123">Jeden wątek</span><span class="sxs-lookup"><span data-stu-id="d5080-123">One thread</span></span>|<span data-ttu-id="d5080-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29>z `isThreadSafe` ustawioną `false`na.</span><span class="sxs-lookup"><span data-stu-id="d5080-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="d5080-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>z `isThreadSafe` ustawioną `false`na.</span><span class="sxs-lookup"><span data-stu-id="d5080-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="d5080-126">Aby określić metodę fabryki, można użyć wyrażenia lambda.</span><span class="sxs-lookup"><span data-stu-id="d5080-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="d5080-127">Dzięki temu cały kod inicjalizacji jest zachowywany w jednym miejscu.</span><span class="sxs-lookup"><span data-stu-id="d5080-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="d5080-128">Wyrażenie lambda przechwytuje kontekst, łącznie z dowolnymi argumentami przekazywanymi do konstruktora obiektu zainicjowane przez opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="d5080-129">**Buforowanie wyjątków** W przypadku korzystania z metod fabrycznych wyjątki są buforowane.</span><span class="sxs-lookup"><span data-stu-id="d5080-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="d5080-130">Oznacza to, że jeśli metoda fabryki zgłasza wyjątek podczas pierwszego wątku próbuje uzyskać dostęp <xref:System.Lazy%601.Value%2A> do właściwości <xref:System.Lazy%601> obiektu, ten sam wyjątek jest zgłaszany przy każdej kolejnej próbie.</span><span class="sxs-lookup"><span data-stu-id="d5080-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="d5080-131">Gwarantuje to, że każde wywołanie <xref:System.Lazy%601.Value%2A> właściwości daje ten sam wynik i pozwala uniknąć niewielkich błędów, które mogą wystąpić, jeśli różne wątki będą uzyskiwać różne wyniki.</span><span class="sxs-lookup"><span data-stu-id="d5080-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="d5080-132">Jest <xref:System.Lazy%601> to wartość rzeczywista `T` , która w przeciwnym razie mogłaby zostać zainicjowana w pewnym wcześniejszym momencie, zazwyczaj podczas uruchamiania.</span><span class="sxs-lookup"><span data-stu-id="d5080-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="d5080-133">Niepowodzenie w tym wcześniejszym punkcie jest zwykle krytyczne.</span><span class="sxs-lookup"><span data-stu-id="d5080-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="d5080-134">Jeśli istnieje możliwość potencjalnego błędu, zalecamy utworzenie logiki ponawiania w procedurze inicjowania (w tym przypadku metody fabryki), podobnie jak w przypadku inicjalizacji z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="d5080-135">**Alternatywa do blokowania** W niektórych sytuacjach może być konieczne uniknięcie obciążenia <xref:System.Lazy%601> domyślnego zachowania blokowania obiektu.</span><span class="sxs-lookup"><span data-stu-id="d5080-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="d5080-136">W rzadkich przypadkach może istnieć potencjalne zakleszczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="d5080-137">W takich przypadkach można użyć <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> i określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-138">Dzięki <xref:System.Lazy%601> temu obiekt może utworzyć kopię zainicjowanego obiektu opóźnieniem w każdym z kilku wątków, jeśli wątki <xref:System.Lazy%601.Value%2A> wywołują Właściwość jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="d5080-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="d5080-139"><xref:System.Lazy%601> Obiekt gwarantuje, że wszystkie wątki używają tego samego wystąpienia opóźnieniem obiektu zainicjowany i odrzuca wystąpienia, które nie są używane.</span><span class="sxs-lookup"><span data-stu-id="d5080-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="d5080-140">W ten sposób koszt zmniejszenia obciążenia polega na tym, że program może czasami tworzyć i odrzucać dodatkowe kopie kosztownego obiektu.</span><span class="sxs-lookup"><span data-stu-id="d5080-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="d5080-141">W większości przypadków jest to mało prawdopodobne.</span><span class="sxs-lookup"><span data-stu-id="d5080-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="d5080-142">Przykłady dla <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktorów i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> przedstawiają takie zachowanie.</span><span class="sxs-lookup"><span data-stu-id="d5080-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d5080-143">W przypadku określenia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wyjątków nigdy nie są buforowane, nawet w przypadku określenia metody fabryki.</span><span class="sxs-lookup"><span data-stu-id="d5080-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="d5080-144">**Równoważne konstruktory** Poza umożliwieniem korzystania z programu <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> , konstruktory i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> mogą duplikować funkcjonalność innych konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="d5080-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="d5080-145">W poniższej tabeli przedstawiono wartości parametrów, które generują równoważne zachowanie.</span><span class="sxs-lookup"><span data-stu-id="d5080-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="d5080-146">Aby utworzyć <xref:System.Lazy%601> obiekt, który jest</span><span class="sxs-lookup"><span data-stu-id="d5080-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="d5080-147">Dla konstruktorów, które `LazyThreadSafetyMode` mają `mode` parametr, `mode` ustaw na</span><span class="sxs-lookup"><span data-stu-id="d5080-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="d5080-148">Dla konstruktorów, które mają `isThreadSafe` parametr Boolean, `isThreadSafe` ustaw wartość na</span><span class="sxs-lookup"><span data-stu-id="d5080-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="d5080-149">Dla konstruktorów bez parametrów bezpieczeństwa wątków</span><span class="sxs-lookup"><span data-stu-id="d5080-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="d5080-150">W pełni bezpieczne wątki; używa blokowania, aby upewnić się, że tylko jeden wątek inicjuje wartość.</span><span class="sxs-lookup"><span data-stu-id="d5080-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="d5080-151">Wszystkie takie konstruktory są w pełni bezpieczne wątkowo.</span><span class="sxs-lookup"><span data-stu-id="d5080-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="d5080-152">Nie jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="d5080-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="d5080-153">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="d5080-153">Not applicable.</span></span>|  
|<span data-ttu-id="d5080-154">W pełni bezpieczne wątki; możliwość zainicjowania wartości przez rasę wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="d5080-155">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="d5080-155">Not applicable.</span></span>|<span data-ttu-id="d5080-156">Nie dotyczy.</span><span class="sxs-lookup"><span data-stu-id="d5080-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="d5080-157">**Inne możliwości** Aby uzyskać informacje dotyczące używania programu <xref:System.Lazy%601> z polami statycznymi wątków lub jako magazyn zapasowy dla właściwości, zobacz Inicjalizacja z [opóźnieniem](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="d5080-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-158">Poniższy przykład demonstruje użycie <xref:System.Lazy%601> klasy w celu zapewnienia inicjalizacji z opóźnieniem z dostępem z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-159">W przykładzie zastosowano <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="d5080-160">Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="d5080-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d5080-161">Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.</span><span class="sxs-lookup"><span data-stu-id="d5080-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="d5080-162">Przykład demonstrujący buforowanie wyjątków przy użyciu tych samych konstruktorów można znaleźć w <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> konstruktorze.</span><span class="sxs-lookup"><span data-stu-id="d5080-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="d5080-163">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d5080-164">Cztery kluczowe sekcje kodu ilustrują tworzenie inicjatora, metodę fabryki, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która wyświetla komunikat po utworzeniu obiektu.</span><span class="sxs-lookup"><span data-stu-id="d5080-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="d5080-165">Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d5080-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-166">Metoda Factory pokazuje Tworzenie obiektu, z symbolem zastępczym do dalszej inicjalizacji:</span><span class="sxs-lookup"><span data-stu-id="d5080-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="d5080-167">Należy zauważyć, że dwie pierwsze sekcje kodu mogą być połączone przy użyciu funkcji lambda, jak pokazano poniżej:</span><span class="sxs-lookup"><span data-stu-id="d5080-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="d5080-168">Przykład wstrzymuje się, aby wskazać, że nieokreślony okres może upłynąć przed wystąpieniem inicjalizacji z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="d5080-169">Po naciśnięciu klawisza **Enter** , przykład tworzy i uruchamia trzy wątki.</span><span class="sxs-lookup"><span data-stu-id="d5080-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="d5080-170">Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość. `ThreadProc`</span><span class="sxs-lookup"><span data-stu-id="d5080-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="d5080-171">Po raz pierwszy następuje `LargeObject` utworzenie wystąpienia:</span><span class="sxs-lookup"><span data-stu-id="d5080-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-172">Konstruktor `LargeObject` klasy, który zawiera ostatnią sekcję klucza kodu, wyświetla komunikat i rejestruje tożsamość wątku inicjującego.</span><span class="sxs-lookup"><span data-stu-id="d5080-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="d5080-173">Dane wyjściowe z programu pojawiają się na końcu pełnej listy kodu.</span><span class="sxs-lookup"><span data-stu-id="d5080-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="d5080-174">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-175">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d5080-176">Domyślnie wszystkie publiczne i chronione składowe <see cref="T:System.Lazy`1" /> klasy są bezpieczne wątkowo i mogą być używane współbieżnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="d5080-177">Te gwarancje bezpieczeństwa wątków mogą zostać usunięte opcjonalnie i na każde wystąpienie, przy użyciu parametrów do konstruktorów typu.</span><span class="sxs-lookup"><span data-stu-id="d5080-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-178">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5080-179">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5080-180">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d5080-181">Gdy następuje Inicjalizacja z opóźnieniem, jest używany Konstruktor bez parametrów typu docelowego.</span><span class="sxs-lookup"><span data-stu-id="d5080-181">When lazy initialization occurs, the parameterless constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-182">Wystąpienie utworzone za pomocą tego konstruktora może być używane współbieżnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="d5080-183">Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia, który jest zainicjowany przy użyciu tego konstruktora, to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-184">Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d5080-185"><xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d5080-186">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-187">Poniższy przykład demonstruje użycie tego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="d5080-188">Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (Określanie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="d5080-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d5080-189">Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.</span><span class="sxs-lookup"><span data-stu-id="d5080-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="d5080-190">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d5080-191">Dwa kluczowe wiersze kodu w tym przykładzie służą do tworzenia inicjatora i rzeczywistej inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="d5080-192">Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d5080-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-193">Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="d5080-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d5080-194">Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość w celu pobrania `LargeObject` wystąpienia: `ThreadProc`</span><span class="sxs-lookup"><span data-stu-id="d5080-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-195">Klasa zapewnia blokadę, tak aby tylko jeden wątek mógł `LargeObject` utworzyć wystąpienie. <xref:System.Lazy%601></span><span class="sxs-lookup"><span data-stu-id="d5080-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="d5080-196">W przykładzie pokazano, że pozostałe wątki pobierają to samo wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="d5080-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-197">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-198">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-199">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="d5080-200"><see langword="true" />Aby można było użyć tego wystąpienia jednocześnie przez wiele wątków; <see langword="false" /> aby można było użyć tego wystąpienia tylko przez jeden wątek w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="d5080-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="d5080-201">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d5080-202">Gdy następuje Inicjalizacja z opóźnieniem, używany jest Konstruktor bez parametrów typu docelowego i określonego trybu inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-202">When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-203">Tryb <xref:System.Lazy%601> bezpiecznego wątku wystąpienia, które jest inicjowane za pomocą tego konstruktora, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> to `isThreadSafe` if `true`; w przeciwnym razie tryb to <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-204">Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d5080-205">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> tryb, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Użyj konstruktora or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> .</span><span class="sxs-lookup"><span data-stu-id="d5080-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="d5080-206"><xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d5080-207">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-208">Poniższy przykład demonstruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który nie jest bezpieczny dla wątków, w scenariuszach, w których cały dostęp do zainicjowanego obiektu opóźnieniem odbywa się w tym samym wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="d5080-209">Pokazuje także użycie <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`.</span><span class="sxs-lookup"><span data-stu-id="d5080-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="d5080-210">Aby przełączyć się do innego konstruktora, po prostu zmień konstruktora, który jest oznaczony jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="d5080-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-211">W przypadku kodu, który demonstruje sposób użycia tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), <xref:System.Lazy%601.%23ctor> Zobacz przykład dla konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d5080-212">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="d5080-213">W metodzie przykład tworzy wystąpienie, a następnie wstrzymuje. <xref:System.Lazy%601> `Main`</span><span class="sxs-lookup"><span data-stu-id="d5080-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="d5080-214">Po naciśnięciu klawisza **Enter** , przykład uzyskuje dostęp <xref:System.Lazy%601.Value%2A> do właściwości <xref:System.Lazy%601> wystąpienia, co powoduje wystąpienie inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="d5080-215">Konstruktor `LargeObject` klasy wyświetla komunikat konsoli.</span><span class="sxs-lookup"><span data-stu-id="d5080-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-216">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-217">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-218">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d5080-219">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="d5080-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="d5080-220">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d5080-221">Gdy następuje Inicjalizacja z opóźnieniem, używana jest określona funkcja inicjująca.</span><span class="sxs-lookup"><span data-stu-id="d5080-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-222">Wystąpienie utworzone za pomocą tego konstruktora może być używane współbieżnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="d5080-223">Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia, który jest zainicjowany przy użyciu tego konstruktora, to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-224">Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d5080-225">Wyjątki, które są generowane `valueFactory` przez program, są buforowane.</span><span class="sxs-lookup"><span data-stu-id="d5080-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="d5080-226">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-227">Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjalizację z opóźnieniem z buforowaniem wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="d5080-228">Ilustruje także <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> użycie konstruktora (określenie `true` dla `isThreadSafe`) i <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="d5080-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d5080-229">Aby przełączyć się do innego konstruktora, po prostu zmień konstruktory z komentarzami.</span><span class="sxs-lookup"><span data-stu-id="d5080-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="d5080-230">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d5080-231">Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która ilustruje buforowanie wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="d5080-232">Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d5080-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-233">Przykład tworzy i uruchamia trzy wątki.</span><span class="sxs-lookup"><span data-stu-id="d5080-233">The example creates and starts three threads.</span></span> <span data-ttu-id="d5080-234">Metoda, która jest używana przez wszystkie trzy wątki <xref:System.Lazy%601.Value%2A> wywołuje właściwość w celu pobrania `LargeObject` wystąpienia: `ThreadProc`</span><span class="sxs-lookup"><span data-stu-id="d5080-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-235">W konstruktorze `LargeObject` klasy trzecia sekcja kodu zgłasza wyjątek podczas pierwszego `LargeObject` tworzenia wystąpienia, ale następnie umożliwia tworzenie wystąpienia:.</span><span class="sxs-lookup"><span data-stu-id="d5080-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="d5080-236">Po uruchomieniu przykładu pierwszy wątek, który próbuje utworzyć wystąpienie `LargeObject` , kończy się niepowodzeniem, i Przechwycono wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d5080-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="d5080-237">Może się zdarzyć, że Następny wątek pomyślnie utworzy wystąpienie, ale w <xref:System.Lazy%601> pamięci podręcznej wystąpił wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d5080-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="d5080-238">Z tego powodu wszystkie trzy wątki zgłaszają wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d5080-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-239">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-240">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5080-241"><paramref name="valueFactory" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d5080-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-242">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="d5080-243">Jedna z wartości wyliczenia, która określa tryb zabezpieczeń wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="d5080-244">Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa <paramref name="T" /> konstruktora bez parametrów i określonego trybu ochrony wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-245">Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d5080-246"><xref:System.Lazy%601> Wystąpienie, które jest tworzone za pomocą tego konstruktora, nie buforuje wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="d5080-247">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-248">Poniższy przykład ilustruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który umożliwia wielu wątkom Tworzenie obiektów opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="d5080-249">Wiele wątków może powieść się w tworzeniu wystąpień, ale wszystkie wątki używają wystąpienia, które zostało utworzone jako pierwsze.</span><span class="sxs-lookup"><span data-stu-id="d5080-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-250">Aby zapoznać się z przykładem, który pokazuje, jak używać tego konstruktora w scenariuszach wielowątkowych <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> ( `mode`Określanie dla), <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Zobacz Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="d5080-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d5080-251">Przykład demonstrujący, jak używać tego konstruktora do zapewnienia blokowania zamiast warunków wyścigu w scenariuszach wielowątkowych (określanych <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> jako `mode`), zobacz <xref:System.Lazy%601.%23ctor> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="d5080-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d5080-252">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez którykolwiek z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="d5080-253">Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora i finalizatora `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="d5080-254">Na początku `Main` metody przykład <xref:System.Lazy%601> tworzy obiekt, który `LargeObject`wykonuje opóźnione inicjowanie:</span><span class="sxs-lookup"><span data-stu-id="d5080-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-255">Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="d5080-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d5080-256">W metodzie, która jest używana przez wszystkie trzy wątki, <xref:System.Lazy%601.Value%2A> wywołanie właściwości tworzy `LargeObject` wystąpienie: `ThreadProc`</span><span class="sxs-lookup"><span data-stu-id="d5080-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-257">Ponieważ Konstruktor dla <xref:System.Lazy%601> określonego <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wystąpienia, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="d5080-258">Przykład ilustruje to poprzez wyświetlanie komunikatów konsoli w konstruktorze i w finalizatorze `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="d5080-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="d5080-259"><xref:System.Lazy%601> Jednak obiekt gwarantuje, że tylko jedno wystąpienie jest używane przez wszystkie wątki.</span><span class="sxs-lookup"><span data-stu-id="d5080-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="d5080-260">Dane wyjściowe z przykładu pokazują, że wszystkie trzy wątki używają tego samego wystąpienia, a także pokazują, że pozostałe dwa wystąpienia mogą być odzyskiwane przez wyrzucanie elementów bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="d5080-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-261">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-262">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5080-263"><paramref name="mode" />zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="d5080-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-264">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5080-265">Wstępnie zainicjowana wartość, która ma zostać użyta.</span><span class="sxs-lookup"><span data-stu-id="d5080-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="d5080-266">Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa wstępnie zainicjowanej określonej wartości.</span><span class="sxs-lookup"><span data-stu-id="d5080-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="d5080-267">Wystąpienie utworzone za pomocą tego konstruktora jest używane jednocześnie przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d5080-268">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="d5080-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="d5080-269"><see langword="true" />Aby można było użyć tego wystąpienia jednocześnie przez wiele wątków; <see langword="false" /> aby można było użyć tego wystąpienia tylko przez jeden wątek w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="d5080-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="d5080-270">Inicjuje nowe wystąpienie klasy <see cref="T:System.Lazy`1" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="d5080-271">Gdy następuje Inicjalizacja z opóźnieniem, używana jest określona funkcja inicjująca i tryb inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-272">Tryb <xref:System.Lazy%601> bezpiecznego wątku wystąpienia, które jest inicjowane za pomocą tego konstruktora, <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> to `isThreadSafe` if `true`; w przeciwnym razie tryb to <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-273">Tryb bezpieczeństwa wątku opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d5080-274">Aby określić <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> tryb, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Użyj konstruktora or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> .</span><span class="sxs-lookup"><span data-stu-id="d5080-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="d5080-275">Wyjątki, które są generowane `valueFactory` przez program, są buforowane.</span><span class="sxs-lookup"><span data-stu-id="d5080-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="d5080-276">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-277">Poniższy przykład demonstruje użycie tego konstruktora, aby zapewnić inicjalizację z opóźnieniem z buforowaniem wyjątków, w scenariuszu z pojedynczym wątkiem.</span><span class="sxs-lookup"><span data-stu-id="d5080-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="d5080-278">Pokazuje także użycie <xref:System.Lazy%601.%23ctor%2A> konstruktora (określenie <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> dla `mode`).</span><span class="sxs-lookup"><span data-stu-id="d5080-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="d5080-279">Aby przełączyć się do tego konstruktora, po prostu zmień konstruktora, który jest oznaczony jako komentarz.</span><span class="sxs-lookup"><span data-stu-id="d5080-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-280">W przypadku kodu, który demonstruje sposób użycia tego konstruktora w scenariuszach wielowątkowych (Określanie `true` dla `isThreadSafe`), <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> Zobacz przykład dla konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="d5080-281">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez jeden z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="d5080-282">Trzy kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację i konstruktora `LargeObject` klasy, która ilustruje buforowanie wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="d5080-283">Na początku `Main` metody przykład tworzy inicjatora z opóźnieniem bezpieczny wątkowo dla `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="d5080-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-284">W wywołaniu konstruktora `isThreadSafe` parametr jest `false`, więc <xref:System.Lazy%601> nie jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="d5080-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="d5080-285">Ponieważ nie jest on bezpieczny dla wątków, przykład wywołuje <xref:System.Lazy%601.Value%2A> Właściwość trzy razy w tym samym wątku:</span><span class="sxs-lookup"><span data-stu-id="d5080-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-286">W konstruktorze `LargeObject` klasy trzecia sekcja kodu zgłasza wyjątek podczas pierwszego `LargeObject` tworzenia wystąpienia, ale następnie umożliwia tworzenie wystąpienia:.</span><span class="sxs-lookup"><span data-stu-id="d5080-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="d5080-287">Po uruchomieniu przykładu pierwsza próba utworzenia wystąpienia `LargeObject` kończy się niepowodzeniem, a wyjątek jest przechwytywany.</span><span class="sxs-lookup"><span data-stu-id="d5080-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="d5080-288">Może się zdarzyć, że kolejna próba powiodła się, ale <xref:System.Lazy%601> obiekt buforuje wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d5080-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="d5080-289">Z tego powodu wszystkie trzy próby spowodują zgłoszenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-290">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-291">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5080-292"><paramref name="valueFactory" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d5080-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-293">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="d5080-294">Delegat, który jest wywoływany, aby wygenerował wartość opóźnieniem Initialize, gdy jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="d5080-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="d5080-295">Jedna z wartości wyliczenia, która określa tryb zabezpieczeń wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="d5080-296">Inicjuje nowe wystąpienie <see cref="T:System.Lazy`1" /> klasy, która używa określonej funkcji inicjującej i trybu ochrony wątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-297">Tryb <xref:System.Lazy%601> zabezpieczeń wątku wystąpienia opisuje zachowanie w przypadku próby zainicjowania wystąpienia przez <xref:System.Lazy%601> wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="d5080-298">Wyjątki generowane przez `valueFactory` są buforowane, chyba że `mode` jest to <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d5080-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5080-299">Aby uzyskać więcej informacji, zobacz <xref:System.Lazy%601> Klasa <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> lub Wyliczenie.</span><span class="sxs-lookup"><span data-stu-id="d5080-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5080-300">Poniższy przykład ilustruje użycie tego konstruktora do utworzenia inicjatora z opóźnieniem, który umożliwia wielu wątkom Tworzenie obiektów opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="d5080-301">Wiele wątków może powieść się w tworzeniu wystąpień, ale wszystkie wątki używają wystąpienia, które zostało utworzone jako pierwsze.</span><span class="sxs-lookup"><span data-stu-id="d5080-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="d5080-302">Ponadto w przykładzie pokazano, że wyjątki nigdy nie są buforowane w przypadku określenia <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, nawet jeśli Inicjalizacja jest wykonywana przez funkcję, a nie przez konstruktora bez parametrów typu tworzonego opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the parameterless constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-303">Aby zapoznać się z przykładem, który pokazuje, jak używać tego konstruktora w scenariuszach wielowątkowych <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> ( `mode`Określanie dla), <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Zobacz Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="d5080-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d5080-304">Przykład demonstrujący, jak używać tego konstruktora do zapewnienia blokowania zamiast warunków wyścigu w scenariuszach wielowątkowych (określanych <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> jako `mode`), zobacz <xref:System.Lazy%601.%23ctor> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="d5080-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="d5080-305">W przykładzie zdefiniowano `LargeObject` klasę, która zostanie zainicjowana opóźnieniem przez którykolwiek z kilku wątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="d5080-306">Cztery kluczowe sekcje kodu ilustrują tworzenie inicjatora, rzeczywistą inicjalizację, funkcję inicjującą oraz Konstruktor i finalizator `LargeObject` klasy.</span><span class="sxs-lookup"><span data-stu-id="d5080-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="d5080-307">Na początku `Main` metody przykład <xref:System.Lazy%601> tworzy obiekt, który `LargeObject`wykonuje opóźnione inicjowanie:</span><span class="sxs-lookup"><span data-stu-id="d5080-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="d5080-308">Inicjator opóźniony używa funkcji do wykonania inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="d5080-309">W takim przypadku funkcja jest wymagana, ponieważ dla `LargeObject` klasy nie istnieje Konstruktor bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="d5080-309">In this case, a function is required because there is no parameterless constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="d5080-310">Przykład tworzy i uruchamia trzy wątki, które blokują <xref:System.Threading.ManualResetEvent> obiekt, dzięki czemu przykład może zwolnić wszystkie wątki jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="d5080-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="d5080-311">W metodzie, która jest używana przez wszystkie trzy wątki, <xref:System.Lazy%601.Value%2A> wywołanie właściwości tworzy `LargeObject` wystąpienie: `ThreadProc`</span><span class="sxs-lookup"><span data-stu-id="d5080-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="d5080-312">W trzecim kluczu sekcji Code Funkcja inicjowania z opóźnieniem jest wywoływana w celu utworzenia `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="d5080-313">Funkcja zgłasza wyjątek podczas pierwszego wywołania:</span><span class="sxs-lookup"><span data-stu-id="d5080-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="d5080-314">W przypadku każdego <xref:System.Threading.LazyThreadSafetyMode> innego ustawienia nieobsługiwany wyjątek w funkcji inicjowania zostanie zbuforowany.</span><span class="sxs-lookup"><span data-stu-id="d5080-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="d5080-315"><xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Jednak pomija buforowanie wyjątków.</span><span class="sxs-lookup"><span data-stu-id="d5080-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="d5080-316">Dane wyjściowe z przykładu pokazują, że kolejna próba zainicjowania obiektu powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="d5080-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-317">Komunikat o wyjątku zazwyczaj pojawia się po komunikatach wskazujących, że obiekt został pomyślnie zainicjowany przez inne wątki.</span><span class="sxs-lookup"><span data-stu-id="d5080-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="d5080-318">Wynika to z opóźnienia wprowadzonego przez wyrzucanie i przechwycenie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="d5080-319">Ponieważ Konstruktor dla <xref:System.Lazy%601> określonego <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>wystąpienia, wszystkie trzy wątki mogą tworzyć `LargeObject` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="d5080-320">Przykład ilustruje to poprzez wyświetlanie komunikatów konsoli w konstruktorze i w finalizatorze `LargeObject` klasy:</span><span class="sxs-lookup"><span data-stu-id="d5080-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="d5080-321"><xref:System.Lazy%601> Obiekt gwarantuje, że tylko jedno wystąpienie jest używane przez wszystkie wątki (z wyjątkiem wątku, w którym funkcja inicjująca zgłasza wyjątek).</span><span class="sxs-lookup"><span data-stu-id="d5080-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="d5080-322">Dane wyjściowe z tego przykładu są wyświetlane.</span><span class="sxs-lookup"><span data-stu-id="d5080-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5080-323">Dla uproszczenia w tym przykładzie użyto wystąpienia <xref:System.Lazy%601>globalnego i wszystkie metody są `static` (`Shared` w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d5080-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="d5080-324">Nie są wymogi, od których zależy możliwość inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="d5080-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5080-325"><paramref name="mode" />zawiera nieprawidłową wartość.</span><span class="sxs-lookup"><span data-stu-id="d5080-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5080-326"><paramref name="valueFactory" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d5080-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-327">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d5080-328">Pobiera wartość wskazującą, czy dla tego <see cref="T:System.Lazy`1" /> wystąpienia została utworzona wartość.</span><span class="sxs-lookup"><span data-stu-id="d5080-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="d5080-329"><see langword="true" />Jeśli wartość została utworzona dla tego <see cref="T:System.Lazy`1" /> wystąpienia; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="d5080-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-330">Gdy dla <xref:System.Lazy%601> wystąpienia występuje opóźnione inicjowanie, może to spowodować utworzenie wartości lub zgłaszanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="d5080-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="d5080-331">Jeśli wystąpi wyjątek, kolejne zachowanie <xref:System.Lazy%601> wystąpienia zależy od tego, czy buforowanie wyjątków jest włączone.</span><span class="sxs-lookup"><span data-stu-id="d5080-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="d5080-332"><xref:System.Lazy%601> Jeśli wystąpienie zostało utworzone przy użyciu konstruktora, który nie określa funkcji inicjującej, buforowanie wyjątków nie jest włączone.</span><span class="sxs-lookup"><span data-stu-id="d5080-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="d5080-333">Kolejna próba zainicjowania <xref:System.Lazy%601> może powieść się, a po pomyślnym zainicjowaniu tej <xref:System.Lazy%601.IsValueCreated%2A> właściwości zwraca wartość `true`.</span><span class="sxs-lookup"><span data-stu-id="d5080-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="d5080-334">Jeśli wystąpienie zostało utworzone za pomocą funkcji inicjującej (określonej `valueFactory` przez parametr <xref:System.Lazy%601> konstruktora), buforowanie wyjątków jest kontrolowane przez tryb zabezpieczeń wątku. <xref:System.Lazy%601></span><span class="sxs-lookup"><span data-stu-id="d5080-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="d5080-335">Jeśli tryb to <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> lub <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, nie ma <xref:System.Lazy%601> drugiej szansy do zainicjowania wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d5080-336">Jeśli wystąpi wyjątek, który jest nieobsługiwany w funkcji inicjowania, ten wyjątek jest buforowany i ponownie zgłaszany przy kolejnych dostępach <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> do właściwości.</span><span class="sxs-lookup"><span data-stu-id="d5080-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d5080-337">Żadna wartość nie jest tworzona, jeśli wyjątek jest zgłaszany, więc w <xref:System.Lazy%601.IsValueCreated%2A> takich `false`przypadkach zwraca.</span><span class="sxs-lookup"><span data-stu-id="d5080-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="d5080-338">Jeśli tryb to <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, pierwszy wątek, który zakończy się pomyślnie w uruchomieniu funkcji inicjującej (lub konstruktora bez parametrów) tworzy wartość dla tego <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the parameterless constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d5080-339">Jeśli funkcja inicjowania zgłasza wyjątek w jednym wątku, inne wątki nadal mogą próbować zainicjować <xref:System.Lazy%601> wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="d5080-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="d5080-340">Dopóki wartość nie zostanie utworzona, <xref:System.Lazy%601.IsValueCreated%2A> Właściwość zwraca. `false`</span><span class="sxs-lookup"><span data-stu-id="d5080-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-341">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5080-342">Tworzy i zwraca reprezentację <see cref="P:System.Lazy`1.Value" /> ciągu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="d5080-343">Wynik wywołania <see cref="M:System.Object.ToString" /> metody <see cref="P:System.Lazy`1.Value" /> dla właściwości dla tego wystąpienia, jeśli wartość została utworzona (oznacza to, <see cref="P:System.Lazy`1.IsValueCreated" /> że jeśli właściwość zostanie zwrócona <see langword="true" />).</span><span class="sxs-lookup"><span data-stu-id="d5080-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="d5080-344">W przeciwnym razie, ciąg wskazujący, że wartość nie została utworzona.</span><span class="sxs-lookup"><span data-stu-id="d5080-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-345">Wywołanie tej metody nie powoduje inicjalizacji.</span><span class="sxs-lookup"><span data-stu-id="d5080-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="d5080-346"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> `null` `valueFactory` <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>Właściwość może być `null` po zainicjowaniu z opóźnieniem, jeśli metoda fabryki, która została określona dla parametru, lub, zwraca. <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d5080-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d5080-347"><see cref="P:System.Lazy`1.Value" /> Właściwość jest<see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d5080-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d5080-348">Pobiera wartość zainicjowaną przez opóźnieniem w <see cref="T:System.Lazy`1" /> bieżącym wystąpieniu.</span><span class="sxs-lookup"><span data-stu-id="d5080-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="d5080-349">Opóźnieniem zainicjowana wartość bieżącego <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5080-350">Jeśli właściwość jest `false`, uzyskiwanie dostępu <xref:System.Lazy%601.Value%2A> do właściwości wymusza inicjalizację. <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d5080-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="d5080-351">Oprócz wyjątków, <xref:System.Lazy%601.Value%2A> które są wymienione, właściwość może zgłosić dowolny nieobsługiwany wyjątek, który jest generowany przez metodę fabryki, która została przeniesiona `valueFactory` do parametru <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, lub <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="d5080-352"><see cref="T:System.Lazy`1" /> Wystąpienie jest inicjowane w celu użycia konstruktora bez parametrów typu, który jest opóźnieniem zainicjowany, i brak uprawnień dostępu do konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d5080-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="d5080-353"><see cref="T:System.Lazy`1" /> Wystąpienie jest inicjowane w celu użycia konstruktora bez parametrów typu, który jest opóźnieniem zainicjowany i ten typ nie ma publicznego konstruktora bezparametrycznego.</span><span class="sxs-lookup"><span data-stu-id="d5080-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d5080-354">Funkcja inicjowania próbuje uzyskać dostęp <see cref="P:System.Lazy`1.Value" /> do tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="d5080-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="d5080-355">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="d5080-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>