<Type Name="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b803f6b338f63f16cffeba5fc61ef41e9dd076ff" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36431764" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`12&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9, - T10, - T11, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`12" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, In T9, In T10, In T11, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 * 'T9 * 'T10 * 'T11 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T10">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T11">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
    <Parameter Name="arg10" Type="T10" />
    <Parameter Name="arg11" Type="T11" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Typ pierwszego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T2">Typ drugiego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T3">Typ trzeciego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T4">Typ czwartego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T5">Typ piątego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T6">Typ szóstego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T7">Typ siódmego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T8">Typ ósmego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T9">Typ dziewiątego parametru metody, która hermetyzuje tego delegata.</typeparam>
    <typeparam name="T10">Typ parametru oraz metodę, która hermetyzuje ten delegat.</typeparam>
    <typeparam name="T11">Typ parametru jedenasty metodę, która hermetyzuje ten delegat.</typeparam>
    <typeparam name="TResult">Typ wartości zwracanej metody, która hermetyzuje tego delegata.</typeparam>
    <param name="arg1">Pierwszy parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg2">Drugi parametr metody, która hermetyzuje tego delegata.</param>
    <param name="arg3">Trzeci parametr metodę, która hermetyzuje tego delegata.</param>
    <param name="arg4">Czwartego parametru metody, która hermetyzuje tego delegata.</param>
    <param name="arg5">Piątego parametru metody, która hermetyzuje tego delegata.</param>
    <param name="arg6">Szóstego parametru metody, która hermetyzuje tego delegata.</param>
    <param name="arg7">Siódmego parametru metody, która hermetyzuje tego delegata.</param>
    <param name="arg8">Parametr ósmego metodę, która hermetyzuje tego delegata.</param>
    <param name="arg9">Parametr dziewiątego metodę, która hermetyzuje tego delegata.</param>
    <param name="arg10">Parametr dziesiąty metodę, która hermetyzuje tego delegata.</param>
    <param name="arg11">Parametr jedenasty metodę, która hermetyzuje tego delegata.</param>
    <summary>Hermetyzuje metody, która ma następujące parametry 11 i zwraca wartość typu określonego przez <typeparamref name="TResult" /> parametru.</summary>
    <returns>Wartość zwracaną przez metodę, która hermetyzuje tego delegata.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten delegat służy do reprezentowania metody, która może być przekazywany jako parametr bez jawnego deklarowania niestandardową klasę delegatów. Metoda zhermetyzowany musi odpowiadać podpis metody, który jest definiowany przez ten delegat. Oznacza to, że metoda zhermetyzowany muszą mieć 11 parametry, z których każdy jest przekazywany do niego przez wartość, i aplikacja musi zwracać wartość.  
  
> [!NOTE]
>  Metody, która ma następujące parametry 11 i zwraca odwołanie do `void` (lub w języku Visual Basic, który jest zadeklarowany jako `Sub` , a nie jako `Function`), używają ogólnej <xref:System.Action%6011> delegowania, zamiast tego.  
  
 Można również użyć <xref:System.Func%6012> delegowanie przy użyciu metody anonimowe i wyrażenia lambda.  
  
 Podstawowy typ wyrażenia lambda jest jednym z ogólnego `Func` delegatów. Dzięki temu można przekazać wyrażenia lambda jako parametr bez jawnie przypisywania do delegata.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`11" />
  </Docs>
</Type>